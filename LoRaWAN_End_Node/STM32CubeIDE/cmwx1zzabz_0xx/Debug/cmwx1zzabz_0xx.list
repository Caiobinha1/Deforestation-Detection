
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e744  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  0800e804  0800e804  0000f804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f410  0800f410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f418  0800f418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f41c  0800f41c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  20000000  0800f420  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ac0  20000104  0800f524  00011104  2**2
                  ALLOC
  8 ._user_heap_stack 00000804  20001bc4  0800f524  00011bc4  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00011104  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003f6ec  00000000  00000000  0001112c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000aef7  00000000  00000000  00050818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002298  00000000  00000000  0005b710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000025a1  00000000  00000000  0005d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021483  00000000  00000000  0005ff49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000425ce  00000000  00000000  000813cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000af54c  00000000  00000000  000c399a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00172ee6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d48  00000000  00000000  00172f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00013311  00000000  00000000  00178c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000149  00000000  00000000  0018bf85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000104 	.word	0x20000104
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e7ec 	.word	0x0800e7ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000108 	.word	0x20000108
 8000104:	0800e7ec 	.word	0x0800e7ec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	@ 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	@ 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	@ 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_cdrcmple>:
 8000454:	4684      	mov	ip, r0
 8000456:	0010      	movs	r0, r2
 8000458:	4662      	mov	r2, ip
 800045a:	468c      	mov	ip, r1
 800045c:	0019      	movs	r1, r3
 800045e:	4663      	mov	r3, ip
 8000460:	e000      	b.n	8000464 <__aeabi_cdcmpeq>
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_cdcmpeq>:
 8000464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000466:	f001 f871 	bl	800154c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	d401      	bmi.n	8000472 <__aeabi_cdcmpeq+0xe>
 800046e:	2100      	movs	r1, #0
 8000470:	42c8      	cmn	r0, r1
 8000472:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000474 <__aeabi_dcmpeq>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f000 ffb5 	bl	80013e4 <__eqdf2>
 800047a:	4240      	negs	r0, r0
 800047c:	3001      	adds	r0, #1
 800047e:	bd10      	pop	{r4, pc}

08000480 <__aeabi_dcmplt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f863 	bl	800154c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	db01      	blt.n	800048e <__aeabi_dcmplt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmple>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f859 	bl	800154c <__ledf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dd01      	ble.n	80004a2 <__aeabi_dcmple+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpgt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 ffdf 	bl	800146c <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dc01      	bgt.n	80004b6 <__aeabi_dcmpgt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_dcmpge>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 ffd5 	bl	800146c <__gedf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	da01      	bge.n	80004ca <__aeabi_dcmpge+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_uldivmod>:
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d111      	bne.n	80004f8 <__aeabi_uldivmod+0x28>
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	d10f      	bne.n	80004f8 <__aeabi_uldivmod+0x28>
 80004d8:	2900      	cmp	r1, #0
 80004da:	d100      	bne.n	80004de <__aeabi_uldivmod+0xe>
 80004dc:	2800      	cmp	r0, #0
 80004de:	d002      	beq.n	80004e6 <__aeabi_uldivmod+0x16>
 80004e0:	2100      	movs	r1, #0
 80004e2:	43c9      	mvns	r1, r1
 80004e4:	0008      	movs	r0, r1
 80004e6:	b407      	push	{r0, r1, r2}
 80004e8:	4802      	ldr	r0, [pc, #8]	@ (80004f4 <__aeabi_uldivmod+0x24>)
 80004ea:	a102      	add	r1, pc, #8	@ (adr r1, 80004f4 <__aeabi_uldivmod+0x24>)
 80004ec:	1840      	adds	r0, r0, r1
 80004ee:	9002      	str	r0, [sp, #8]
 80004f0:	bd03      	pop	{r0, r1, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	ffffff5d 	.word	0xffffff5d
 80004f8:	b403      	push	{r0, r1}
 80004fa:	4668      	mov	r0, sp
 80004fc:	b501      	push	{r0, lr}
 80004fe:	9802      	ldr	r0, [sp, #8]
 8000500:	f000 f834 	bl	800056c <__udivmoddi4>
 8000504:	9b01      	ldr	r3, [sp, #4]
 8000506:	469e      	mov	lr, r3
 8000508:	b002      	add	sp, #8
 800050a:	bc0c      	pop	{r2, r3}
 800050c:	4770      	bx	lr
 800050e:	46c0      	nop			@ (mov r8, r8)

08000510 <__aeabi_lmul>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	46ce      	mov	lr, r9
 8000514:	4699      	mov	r9, r3
 8000516:	0c03      	lsrs	r3, r0, #16
 8000518:	469c      	mov	ip, r3
 800051a:	0413      	lsls	r3, r2, #16
 800051c:	4647      	mov	r7, r8
 800051e:	0c1b      	lsrs	r3, r3, #16
 8000520:	001d      	movs	r5, r3
 8000522:	000e      	movs	r6, r1
 8000524:	4661      	mov	r1, ip
 8000526:	0404      	lsls	r4, r0, #16
 8000528:	0c24      	lsrs	r4, r4, #16
 800052a:	b580      	push	{r7, lr}
 800052c:	0007      	movs	r7, r0
 800052e:	0c10      	lsrs	r0, r2, #16
 8000530:	434b      	muls	r3, r1
 8000532:	4365      	muls	r5, r4
 8000534:	4341      	muls	r1, r0
 8000536:	4360      	muls	r0, r4
 8000538:	0c2c      	lsrs	r4, r5, #16
 800053a:	18c0      	adds	r0, r0, r3
 800053c:	1824      	adds	r4, r4, r0
 800053e:	468c      	mov	ip, r1
 8000540:	42a3      	cmp	r3, r4
 8000542:	d903      	bls.n	800054c <__aeabi_lmul+0x3c>
 8000544:	2380      	movs	r3, #128	@ 0x80
 8000546:	025b      	lsls	r3, r3, #9
 8000548:	4698      	mov	r8, r3
 800054a:	44c4      	add	ip, r8
 800054c:	4649      	mov	r1, r9
 800054e:	4379      	muls	r1, r7
 8000550:	4356      	muls	r6, r2
 8000552:	0c23      	lsrs	r3, r4, #16
 8000554:	042d      	lsls	r5, r5, #16
 8000556:	0c2d      	lsrs	r5, r5, #16
 8000558:	1989      	adds	r1, r1, r6
 800055a:	4463      	add	r3, ip
 800055c:	0424      	lsls	r4, r4, #16
 800055e:	1960      	adds	r0, r4, r5
 8000560:	18c9      	adds	r1, r1, r3
 8000562:	bcc0      	pop	{r6, r7}
 8000564:	46b9      	mov	r9, r7
 8000566:	46b0      	mov	r8, r6
 8000568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__udivmoddi4>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	4657      	mov	r7, sl
 8000570:	464e      	mov	r6, r9
 8000572:	4645      	mov	r5, r8
 8000574:	46de      	mov	lr, fp
 8000576:	b5e0      	push	{r5, r6, r7, lr}
 8000578:	0004      	movs	r4, r0
 800057a:	000d      	movs	r5, r1
 800057c:	4692      	mov	sl, r2
 800057e:	4699      	mov	r9, r3
 8000580:	b083      	sub	sp, #12
 8000582:	428b      	cmp	r3, r1
 8000584:	d830      	bhi.n	80005e8 <__udivmoddi4+0x7c>
 8000586:	d02d      	beq.n	80005e4 <__udivmoddi4+0x78>
 8000588:	4649      	mov	r1, r9
 800058a:	4650      	mov	r0, sl
 800058c:	f001 f8ee 	bl	800176c <__clzdi2>
 8000590:	0029      	movs	r1, r5
 8000592:	0006      	movs	r6, r0
 8000594:	0020      	movs	r0, r4
 8000596:	f001 f8e9 	bl	800176c <__clzdi2>
 800059a:	1a33      	subs	r3, r6, r0
 800059c:	4698      	mov	r8, r3
 800059e:	3b20      	subs	r3, #32
 80005a0:	d434      	bmi.n	800060c <__udivmoddi4+0xa0>
 80005a2:	469b      	mov	fp, r3
 80005a4:	4653      	mov	r3, sl
 80005a6:	465a      	mov	r2, fp
 80005a8:	4093      	lsls	r3, r2
 80005aa:	4642      	mov	r2, r8
 80005ac:	001f      	movs	r7, r3
 80005ae:	4653      	mov	r3, sl
 80005b0:	4093      	lsls	r3, r2
 80005b2:	001e      	movs	r6, r3
 80005b4:	42af      	cmp	r7, r5
 80005b6:	d83b      	bhi.n	8000630 <__udivmoddi4+0xc4>
 80005b8:	42af      	cmp	r7, r5
 80005ba:	d100      	bne.n	80005be <__udivmoddi4+0x52>
 80005bc:	e079      	b.n	80006b2 <__udivmoddi4+0x146>
 80005be:	465b      	mov	r3, fp
 80005c0:	1ba4      	subs	r4, r4, r6
 80005c2:	41bd      	sbcs	r5, r7
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	da00      	bge.n	80005ca <__udivmoddi4+0x5e>
 80005c8:	e076      	b.n	80006b8 <__udivmoddi4+0x14c>
 80005ca:	2200      	movs	r2, #0
 80005cc:	2300      	movs	r3, #0
 80005ce:	9200      	str	r2, [sp, #0]
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2301      	movs	r3, #1
 80005d4:	465a      	mov	r2, fp
 80005d6:	4093      	lsls	r3, r2
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	4642      	mov	r2, r8
 80005de:	4093      	lsls	r3, r2
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	e029      	b.n	8000638 <__udivmoddi4+0xcc>
 80005e4:	4282      	cmp	r2, r0
 80005e6:	d9cf      	bls.n	8000588 <__udivmoddi4+0x1c>
 80005e8:	2200      	movs	r2, #0
 80005ea:	2300      	movs	r3, #0
 80005ec:	9200      	str	r2, [sp, #0]
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <__udivmoddi4+0x8e>
 80005f6:	601c      	str	r4, [r3, #0]
 80005f8:	605d      	str	r5, [r3, #4]
 80005fa:	9800      	ldr	r0, [sp, #0]
 80005fc:	9901      	ldr	r1, [sp, #4]
 80005fe:	b003      	add	sp, #12
 8000600:	bcf0      	pop	{r4, r5, r6, r7}
 8000602:	46bb      	mov	fp, r7
 8000604:	46b2      	mov	sl, r6
 8000606:	46a9      	mov	r9, r5
 8000608:	46a0      	mov	r8, r4
 800060a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060c:	4642      	mov	r2, r8
 800060e:	469b      	mov	fp, r3
 8000610:	2320      	movs	r3, #32
 8000612:	1a9b      	subs	r3, r3, r2
 8000614:	4652      	mov	r2, sl
 8000616:	40da      	lsrs	r2, r3
 8000618:	4641      	mov	r1, r8
 800061a:	0013      	movs	r3, r2
 800061c:	464a      	mov	r2, r9
 800061e:	408a      	lsls	r2, r1
 8000620:	0017      	movs	r7, r2
 8000622:	4642      	mov	r2, r8
 8000624:	431f      	orrs	r7, r3
 8000626:	4653      	mov	r3, sl
 8000628:	4093      	lsls	r3, r2
 800062a:	001e      	movs	r6, r3
 800062c:	42af      	cmp	r7, r5
 800062e:	d9c3      	bls.n	80005b8 <__udivmoddi4+0x4c>
 8000630:	2200      	movs	r2, #0
 8000632:	2300      	movs	r3, #0
 8000634:	9200      	str	r2, [sp, #0]
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	4643      	mov	r3, r8
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0d8      	beq.n	80005f0 <__udivmoddi4+0x84>
 800063e:	07fb      	lsls	r3, r7, #31
 8000640:	0872      	lsrs	r2, r6, #1
 8000642:	431a      	orrs	r2, r3
 8000644:	4646      	mov	r6, r8
 8000646:	087b      	lsrs	r3, r7, #1
 8000648:	e00e      	b.n	8000668 <__udivmoddi4+0xfc>
 800064a:	42ab      	cmp	r3, r5
 800064c:	d101      	bne.n	8000652 <__udivmoddi4+0xe6>
 800064e:	42a2      	cmp	r2, r4
 8000650:	d80c      	bhi.n	800066c <__udivmoddi4+0x100>
 8000652:	1aa4      	subs	r4, r4, r2
 8000654:	419d      	sbcs	r5, r3
 8000656:	2001      	movs	r0, #1
 8000658:	1924      	adds	r4, r4, r4
 800065a:	416d      	adcs	r5, r5
 800065c:	2100      	movs	r1, #0
 800065e:	3e01      	subs	r6, #1
 8000660:	1824      	adds	r4, r4, r0
 8000662:	414d      	adcs	r5, r1
 8000664:	2e00      	cmp	r6, #0
 8000666:	d006      	beq.n	8000676 <__udivmoddi4+0x10a>
 8000668:	42ab      	cmp	r3, r5
 800066a:	d9ee      	bls.n	800064a <__udivmoddi4+0xde>
 800066c:	3e01      	subs	r6, #1
 800066e:	1924      	adds	r4, r4, r4
 8000670:	416d      	adcs	r5, r5
 8000672:	2e00      	cmp	r6, #0
 8000674:	d1f8      	bne.n	8000668 <__udivmoddi4+0xfc>
 8000676:	9800      	ldr	r0, [sp, #0]
 8000678:	9901      	ldr	r1, [sp, #4]
 800067a:	465b      	mov	r3, fp
 800067c:	1900      	adds	r0, r0, r4
 800067e:	4169      	adcs	r1, r5
 8000680:	2b00      	cmp	r3, #0
 8000682:	db24      	blt.n	80006ce <__udivmoddi4+0x162>
 8000684:	002b      	movs	r3, r5
 8000686:	465a      	mov	r2, fp
 8000688:	4644      	mov	r4, r8
 800068a:	40d3      	lsrs	r3, r2
 800068c:	002a      	movs	r2, r5
 800068e:	40e2      	lsrs	r2, r4
 8000690:	001c      	movs	r4, r3
 8000692:	465b      	mov	r3, fp
 8000694:	0015      	movs	r5, r2
 8000696:	2b00      	cmp	r3, #0
 8000698:	db2a      	blt.n	80006f0 <__udivmoddi4+0x184>
 800069a:	0026      	movs	r6, r4
 800069c:	409e      	lsls	r6, r3
 800069e:	0033      	movs	r3, r6
 80006a0:	0026      	movs	r6, r4
 80006a2:	4647      	mov	r7, r8
 80006a4:	40be      	lsls	r6, r7
 80006a6:	0032      	movs	r2, r6
 80006a8:	1a80      	subs	r0, r0, r2
 80006aa:	4199      	sbcs	r1, r3
 80006ac:	9000      	str	r0, [sp, #0]
 80006ae:	9101      	str	r1, [sp, #4]
 80006b0:	e79e      	b.n	80005f0 <__udivmoddi4+0x84>
 80006b2:	42a3      	cmp	r3, r4
 80006b4:	d8bc      	bhi.n	8000630 <__udivmoddi4+0xc4>
 80006b6:	e782      	b.n	80005be <__udivmoddi4+0x52>
 80006b8:	4642      	mov	r2, r8
 80006ba:	2320      	movs	r3, #32
 80006bc:	2100      	movs	r1, #0
 80006be:	1a9b      	subs	r3, r3, r2
 80006c0:	2200      	movs	r2, #0
 80006c2:	9100      	str	r1, [sp, #0]
 80006c4:	9201      	str	r2, [sp, #4]
 80006c6:	2201      	movs	r2, #1
 80006c8:	40da      	lsrs	r2, r3
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	e785      	b.n	80005da <__udivmoddi4+0x6e>
 80006ce:	4642      	mov	r2, r8
 80006d0:	2320      	movs	r3, #32
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	002a      	movs	r2, r5
 80006d6:	4646      	mov	r6, r8
 80006d8:	409a      	lsls	r2, r3
 80006da:	0023      	movs	r3, r4
 80006dc:	40f3      	lsrs	r3, r6
 80006de:	4644      	mov	r4, r8
 80006e0:	4313      	orrs	r3, r2
 80006e2:	002a      	movs	r2, r5
 80006e4:	40e2      	lsrs	r2, r4
 80006e6:	001c      	movs	r4, r3
 80006e8:	465b      	mov	r3, fp
 80006ea:	0015      	movs	r5, r2
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	dad4      	bge.n	800069a <__udivmoddi4+0x12e>
 80006f0:	4642      	mov	r2, r8
 80006f2:	002f      	movs	r7, r5
 80006f4:	2320      	movs	r3, #32
 80006f6:	0026      	movs	r6, r4
 80006f8:	4097      	lsls	r7, r2
 80006fa:	1a9b      	subs	r3, r3, r2
 80006fc:	40de      	lsrs	r6, r3
 80006fe:	003b      	movs	r3, r7
 8000700:	4333      	orrs	r3, r6
 8000702:	e7cd      	b.n	80006a0 <__udivmoddi4+0x134>

08000704 <__aeabi_fsub>:
 8000704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000706:	4647      	mov	r7, r8
 8000708:	46ce      	mov	lr, r9
 800070a:	0243      	lsls	r3, r0, #9
 800070c:	b580      	push	{r7, lr}
 800070e:	0a5f      	lsrs	r7, r3, #9
 8000710:	099b      	lsrs	r3, r3, #6
 8000712:	0045      	lsls	r5, r0, #1
 8000714:	004a      	lsls	r2, r1, #1
 8000716:	469c      	mov	ip, r3
 8000718:	024b      	lsls	r3, r1, #9
 800071a:	0fc4      	lsrs	r4, r0, #31
 800071c:	0fce      	lsrs	r6, r1, #31
 800071e:	0e2d      	lsrs	r5, r5, #24
 8000720:	0a58      	lsrs	r0, r3, #9
 8000722:	0e12      	lsrs	r2, r2, #24
 8000724:	0999      	lsrs	r1, r3, #6
 8000726:	2aff      	cmp	r2, #255	@ 0xff
 8000728:	d06b      	beq.n	8000802 <__aeabi_fsub+0xfe>
 800072a:	2301      	movs	r3, #1
 800072c:	405e      	eors	r6, r3
 800072e:	1aab      	subs	r3, r5, r2
 8000730:	42b4      	cmp	r4, r6
 8000732:	d04b      	beq.n	80007cc <__aeabi_fsub+0xc8>
 8000734:	2b00      	cmp	r3, #0
 8000736:	dc00      	bgt.n	800073a <__aeabi_fsub+0x36>
 8000738:	e0ff      	b.n	800093a <__aeabi_fsub+0x236>
 800073a:	2a00      	cmp	r2, #0
 800073c:	d100      	bne.n	8000740 <__aeabi_fsub+0x3c>
 800073e:	e088      	b.n	8000852 <__aeabi_fsub+0x14e>
 8000740:	2dff      	cmp	r5, #255	@ 0xff
 8000742:	d100      	bne.n	8000746 <__aeabi_fsub+0x42>
 8000744:	e0ef      	b.n	8000926 <__aeabi_fsub+0x222>
 8000746:	2280      	movs	r2, #128	@ 0x80
 8000748:	04d2      	lsls	r2, r2, #19
 800074a:	4311      	orrs	r1, r2
 800074c:	2001      	movs	r0, #1
 800074e:	2b1b      	cmp	r3, #27
 8000750:	dc08      	bgt.n	8000764 <__aeabi_fsub+0x60>
 8000752:	0008      	movs	r0, r1
 8000754:	2220      	movs	r2, #32
 8000756:	40d8      	lsrs	r0, r3
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	4099      	lsls	r1, r3
 800075c:	000b      	movs	r3, r1
 800075e:	1e5a      	subs	r2, r3, #1
 8000760:	4193      	sbcs	r3, r2
 8000762:	4318      	orrs	r0, r3
 8000764:	4663      	mov	r3, ip
 8000766:	1a1b      	subs	r3, r3, r0
 8000768:	469c      	mov	ip, r3
 800076a:	4663      	mov	r3, ip
 800076c:	015b      	lsls	r3, r3, #5
 800076e:	d400      	bmi.n	8000772 <__aeabi_fsub+0x6e>
 8000770:	e0cd      	b.n	800090e <__aeabi_fsub+0x20a>
 8000772:	4663      	mov	r3, ip
 8000774:	019f      	lsls	r7, r3, #6
 8000776:	09bf      	lsrs	r7, r7, #6
 8000778:	0038      	movs	r0, r7
 800077a:	f000 ffd9 	bl	8001730 <__clzsi2>
 800077e:	003b      	movs	r3, r7
 8000780:	3805      	subs	r0, #5
 8000782:	4083      	lsls	r3, r0
 8000784:	4285      	cmp	r5, r0
 8000786:	dc00      	bgt.n	800078a <__aeabi_fsub+0x86>
 8000788:	e0a2      	b.n	80008d0 <__aeabi_fsub+0x1cc>
 800078a:	4ab7      	ldr	r2, [pc, #732]	@ (8000a68 <__aeabi_fsub+0x364>)
 800078c:	1a2d      	subs	r5, r5, r0
 800078e:	401a      	ands	r2, r3
 8000790:	4694      	mov	ip, r2
 8000792:	075a      	lsls	r2, r3, #29
 8000794:	d100      	bne.n	8000798 <__aeabi_fsub+0x94>
 8000796:	e0c3      	b.n	8000920 <__aeabi_fsub+0x21c>
 8000798:	220f      	movs	r2, #15
 800079a:	4013      	ands	r3, r2
 800079c:	2b04      	cmp	r3, #4
 800079e:	d100      	bne.n	80007a2 <__aeabi_fsub+0x9e>
 80007a0:	e0be      	b.n	8000920 <__aeabi_fsub+0x21c>
 80007a2:	2304      	movs	r3, #4
 80007a4:	4698      	mov	r8, r3
 80007a6:	44c4      	add	ip, r8
 80007a8:	4663      	mov	r3, ip
 80007aa:	015b      	lsls	r3, r3, #5
 80007ac:	d400      	bmi.n	80007b0 <__aeabi_fsub+0xac>
 80007ae:	e0b7      	b.n	8000920 <__aeabi_fsub+0x21c>
 80007b0:	1c68      	adds	r0, r5, #1
 80007b2:	2dfe      	cmp	r5, #254	@ 0xfe
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fsub+0xb4>
 80007b6:	e0a5      	b.n	8000904 <__aeabi_fsub+0x200>
 80007b8:	20ff      	movs	r0, #255	@ 0xff
 80007ba:	2200      	movs	r2, #0
 80007bc:	05c0      	lsls	r0, r0, #23
 80007be:	4310      	orrs	r0, r2
 80007c0:	07e4      	lsls	r4, r4, #31
 80007c2:	4320      	orrs	r0, r4
 80007c4:	bcc0      	pop	{r6, r7}
 80007c6:	46b9      	mov	r9, r7
 80007c8:	46b0      	mov	r8, r6
 80007ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dc00      	bgt.n	80007d2 <__aeabi_fsub+0xce>
 80007d0:	e1eb      	b.n	8000baa <__aeabi_fsub+0x4a6>
 80007d2:	2a00      	cmp	r2, #0
 80007d4:	d046      	beq.n	8000864 <__aeabi_fsub+0x160>
 80007d6:	2dff      	cmp	r5, #255	@ 0xff
 80007d8:	d100      	bne.n	80007dc <__aeabi_fsub+0xd8>
 80007da:	e0a4      	b.n	8000926 <__aeabi_fsub+0x222>
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	04d2      	lsls	r2, r2, #19
 80007e0:	4311      	orrs	r1, r2
 80007e2:	2b1b      	cmp	r3, #27
 80007e4:	dc00      	bgt.n	80007e8 <__aeabi_fsub+0xe4>
 80007e6:	e0fb      	b.n	80009e0 <__aeabi_fsub+0x2dc>
 80007e8:	2305      	movs	r3, #5
 80007ea:	4698      	mov	r8, r3
 80007ec:	002b      	movs	r3, r5
 80007ee:	44c4      	add	ip, r8
 80007f0:	4662      	mov	r2, ip
 80007f2:	08d7      	lsrs	r7, r2, #3
 80007f4:	2bff      	cmp	r3, #255	@ 0xff
 80007f6:	d100      	bne.n	80007fa <__aeabi_fsub+0xf6>
 80007f8:	e095      	b.n	8000926 <__aeabi_fsub+0x222>
 80007fa:	027a      	lsls	r2, r7, #9
 80007fc:	0a52      	lsrs	r2, r2, #9
 80007fe:	b2d8      	uxtb	r0, r3
 8000800:	e7dc      	b.n	80007bc <__aeabi_fsub+0xb8>
 8000802:	002b      	movs	r3, r5
 8000804:	3bff      	subs	r3, #255	@ 0xff
 8000806:	4699      	mov	r9, r3
 8000808:	2900      	cmp	r1, #0
 800080a:	d118      	bne.n	800083e <__aeabi_fsub+0x13a>
 800080c:	2301      	movs	r3, #1
 800080e:	405e      	eors	r6, r3
 8000810:	42b4      	cmp	r4, r6
 8000812:	d100      	bne.n	8000816 <__aeabi_fsub+0x112>
 8000814:	e0ca      	b.n	80009ac <__aeabi_fsub+0x2a8>
 8000816:	464b      	mov	r3, r9
 8000818:	2b00      	cmp	r3, #0
 800081a:	d02d      	beq.n	8000878 <__aeabi_fsub+0x174>
 800081c:	2d00      	cmp	r5, #0
 800081e:	d000      	beq.n	8000822 <__aeabi_fsub+0x11e>
 8000820:	e13c      	b.n	8000a9c <__aeabi_fsub+0x398>
 8000822:	23ff      	movs	r3, #255	@ 0xff
 8000824:	4664      	mov	r4, ip
 8000826:	2c00      	cmp	r4, #0
 8000828:	d100      	bne.n	800082c <__aeabi_fsub+0x128>
 800082a:	e15f      	b.n	8000aec <__aeabi_fsub+0x3e8>
 800082c:	1e5d      	subs	r5, r3, #1
 800082e:	2b01      	cmp	r3, #1
 8000830:	d100      	bne.n	8000834 <__aeabi_fsub+0x130>
 8000832:	e174      	b.n	8000b1e <__aeabi_fsub+0x41a>
 8000834:	0034      	movs	r4, r6
 8000836:	2bff      	cmp	r3, #255	@ 0xff
 8000838:	d074      	beq.n	8000924 <__aeabi_fsub+0x220>
 800083a:	002b      	movs	r3, r5
 800083c:	e103      	b.n	8000a46 <__aeabi_fsub+0x342>
 800083e:	42b4      	cmp	r4, r6
 8000840:	d100      	bne.n	8000844 <__aeabi_fsub+0x140>
 8000842:	e09c      	b.n	800097e <__aeabi_fsub+0x27a>
 8000844:	2b00      	cmp	r3, #0
 8000846:	d017      	beq.n	8000878 <__aeabi_fsub+0x174>
 8000848:	2d00      	cmp	r5, #0
 800084a:	d0ea      	beq.n	8000822 <__aeabi_fsub+0x11e>
 800084c:	0007      	movs	r7, r0
 800084e:	0034      	movs	r4, r6
 8000850:	e06c      	b.n	800092c <__aeabi_fsub+0x228>
 8000852:	2900      	cmp	r1, #0
 8000854:	d0cc      	beq.n	80007f0 <__aeabi_fsub+0xec>
 8000856:	1e5a      	subs	r2, r3, #1
 8000858:	2b01      	cmp	r3, #1
 800085a:	d02b      	beq.n	80008b4 <__aeabi_fsub+0x1b0>
 800085c:	2bff      	cmp	r3, #255	@ 0xff
 800085e:	d062      	beq.n	8000926 <__aeabi_fsub+0x222>
 8000860:	0013      	movs	r3, r2
 8000862:	e773      	b.n	800074c <__aeabi_fsub+0x48>
 8000864:	2900      	cmp	r1, #0
 8000866:	d0c3      	beq.n	80007f0 <__aeabi_fsub+0xec>
 8000868:	1e5a      	subs	r2, r3, #1
 800086a:	2b01      	cmp	r3, #1
 800086c:	d100      	bne.n	8000870 <__aeabi_fsub+0x16c>
 800086e:	e11e      	b.n	8000aae <__aeabi_fsub+0x3aa>
 8000870:	2bff      	cmp	r3, #255	@ 0xff
 8000872:	d058      	beq.n	8000926 <__aeabi_fsub+0x222>
 8000874:	0013      	movs	r3, r2
 8000876:	e7b4      	b.n	80007e2 <__aeabi_fsub+0xde>
 8000878:	22fe      	movs	r2, #254	@ 0xfe
 800087a:	1c6b      	adds	r3, r5, #1
 800087c:	421a      	tst	r2, r3
 800087e:	d10d      	bne.n	800089c <__aeabi_fsub+0x198>
 8000880:	2d00      	cmp	r5, #0
 8000882:	d060      	beq.n	8000946 <__aeabi_fsub+0x242>
 8000884:	4663      	mov	r3, ip
 8000886:	2b00      	cmp	r3, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fsub+0x188>
 800088a:	e120      	b.n	8000ace <__aeabi_fsub+0x3ca>
 800088c:	2900      	cmp	r1, #0
 800088e:	d000      	beq.n	8000892 <__aeabi_fsub+0x18e>
 8000890:	e128      	b.n	8000ae4 <__aeabi_fsub+0x3e0>
 8000892:	2280      	movs	r2, #128	@ 0x80
 8000894:	2400      	movs	r4, #0
 8000896:	20ff      	movs	r0, #255	@ 0xff
 8000898:	03d2      	lsls	r2, r2, #15
 800089a:	e78f      	b.n	80007bc <__aeabi_fsub+0xb8>
 800089c:	4663      	mov	r3, ip
 800089e:	1a5f      	subs	r7, r3, r1
 80008a0:	017b      	lsls	r3, r7, #5
 80008a2:	d500      	bpl.n	80008a6 <__aeabi_fsub+0x1a2>
 80008a4:	e0fe      	b.n	8000aa4 <__aeabi_fsub+0x3a0>
 80008a6:	2f00      	cmp	r7, #0
 80008a8:	d000      	beq.n	80008ac <__aeabi_fsub+0x1a8>
 80008aa:	e765      	b.n	8000778 <__aeabi_fsub+0x74>
 80008ac:	2400      	movs	r4, #0
 80008ae:	2000      	movs	r0, #0
 80008b0:	2200      	movs	r2, #0
 80008b2:	e783      	b.n	80007bc <__aeabi_fsub+0xb8>
 80008b4:	4663      	mov	r3, ip
 80008b6:	1a59      	subs	r1, r3, r1
 80008b8:	014b      	lsls	r3, r1, #5
 80008ba:	d400      	bmi.n	80008be <__aeabi_fsub+0x1ba>
 80008bc:	e119      	b.n	8000af2 <__aeabi_fsub+0x3ee>
 80008be:	018f      	lsls	r7, r1, #6
 80008c0:	09bf      	lsrs	r7, r7, #6
 80008c2:	0038      	movs	r0, r7
 80008c4:	f000 ff34 	bl	8001730 <__clzsi2>
 80008c8:	003b      	movs	r3, r7
 80008ca:	3805      	subs	r0, #5
 80008cc:	4083      	lsls	r3, r0
 80008ce:	2501      	movs	r5, #1
 80008d0:	2220      	movs	r2, #32
 80008d2:	1b40      	subs	r0, r0, r5
 80008d4:	3001      	adds	r0, #1
 80008d6:	1a12      	subs	r2, r2, r0
 80008d8:	0019      	movs	r1, r3
 80008da:	4093      	lsls	r3, r2
 80008dc:	40c1      	lsrs	r1, r0
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	4193      	sbcs	r3, r2
 80008e2:	4319      	orrs	r1, r3
 80008e4:	468c      	mov	ip, r1
 80008e6:	1e0b      	subs	r3, r1, #0
 80008e8:	d0e1      	beq.n	80008ae <__aeabi_fsub+0x1aa>
 80008ea:	075b      	lsls	r3, r3, #29
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fsub+0x1ec>
 80008ee:	e152      	b.n	8000b96 <__aeabi_fsub+0x492>
 80008f0:	230f      	movs	r3, #15
 80008f2:	2500      	movs	r5, #0
 80008f4:	400b      	ands	r3, r1
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	d000      	beq.n	80008fc <__aeabi_fsub+0x1f8>
 80008fa:	e752      	b.n	80007a2 <__aeabi_fsub+0x9e>
 80008fc:	2001      	movs	r0, #1
 80008fe:	014a      	lsls	r2, r1, #5
 8000900:	d400      	bmi.n	8000904 <__aeabi_fsub+0x200>
 8000902:	e092      	b.n	8000a2a <__aeabi_fsub+0x326>
 8000904:	b2c0      	uxtb	r0, r0
 8000906:	4663      	mov	r3, ip
 8000908:	019a      	lsls	r2, r3, #6
 800090a:	0a52      	lsrs	r2, r2, #9
 800090c:	e756      	b.n	80007bc <__aeabi_fsub+0xb8>
 800090e:	4663      	mov	r3, ip
 8000910:	075b      	lsls	r3, r3, #29
 8000912:	d005      	beq.n	8000920 <__aeabi_fsub+0x21c>
 8000914:	230f      	movs	r3, #15
 8000916:	4662      	mov	r2, ip
 8000918:	4013      	ands	r3, r2
 800091a:	2b04      	cmp	r3, #4
 800091c:	d000      	beq.n	8000920 <__aeabi_fsub+0x21c>
 800091e:	e740      	b.n	80007a2 <__aeabi_fsub+0x9e>
 8000920:	002b      	movs	r3, r5
 8000922:	e765      	b.n	80007f0 <__aeabi_fsub+0xec>
 8000924:	0007      	movs	r7, r0
 8000926:	2f00      	cmp	r7, #0
 8000928:	d100      	bne.n	800092c <__aeabi_fsub+0x228>
 800092a:	e745      	b.n	80007b8 <__aeabi_fsub+0xb4>
 800092c:	2280      	movs	r2, #128	@ 0x80
 800092e:	03d2      	lsls	r2, r2, #15
 8000930:	433a      	orrs	r2, r7
 8000932:	0252      	lsls	r2, r2, #9
 8000934:	20ff      	movs	r0, #255	@ 0xff
 8000936:	0a52      	lsrs	r2, r2, #9
 8000938:	e740      	b.n	80007bc <__aeabi_fsub+0xb8>
 800093a:	2b00      	cmp	r3, #0
 800093c:	d179      	bne.n	8000a32 <__aeabi_fsub+0x32e>
 800093e:	22fe      	movs	r2, #254	@ 0xfe
 8000940:	1c6b      	adds	r3, r5, #1
 8000942:	421a      	tst	r2, r3
 8000944:	d1aa      	bne.n	800089c <__aeabi_fsub+0x198>
 8000946:	4663      	mov	r3, ip
 8000948:	2b00      	cmp	r3, #0
 800094a:	d100      	bne.n	800094e <__aeabi_fsub+0x24a>
 800094c:	e0f5      	b.n	8000b3a <__aeabi_fsub+0x436>
 800094e:	2900      	cmp	r1, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_fsub+0x250>
 8000952:	e0d1      	b.n	8000af8 <__aeabi_fsub+0x3f4>
 8000954:	1a5f      	subs	r7, r3, r1
 8000956:	2380      	movs	r3, #128	@ 0x80
 8000958:	04db      	lsls	r3, r3, #19
 800095a:	421f      	tst	r7, r3
 800095c:	d100      	bne.n	8000960 <__aeabi_fsub+0x25c>
 800095e:	e10e      	b.n	8000b7e <__aeabi_fsub+0x47a>
 8000960:	4662      	mov	r2, ip
 8000962:	2401      	movs	r4, #1
 8000964:	1a8a      	subs	r2, r1, r2
 8000966:	4694      	mov	ip, r2
 8000968:	2000      	movs	r0, #0
 800096a:	4034      	ands	r4, r6
 800096c:	2a00      	cmp	r2, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_fsub+0x26e>
 8000970:	e724      	b.n	80007bc <__aeabi_fsub+0xb8>
 8000972:	2001      	movs	r0, #1
 8000974:	421a      	tst	r2, r3
 8000976:	d1c6      	bne.n	8000906 <__aeabi_fsub+0x202>
 8000978:	2300      	movs	r3, #0
 800097a:	08d7      	lsrs	r7, r2, #3
 800097c:	e73d      	b.n	80007fa <__aeabi_fsub+0xf6>
 800097e:	2b00      	cmp	r3, #0
 8000980:	d017      	beq.n	80009b2 <__aeabi_fsub+0x2ae>
 8000982:	2d00      	cmp	r5, #0
 8000984:	d000      	beq.n	8000988 <__aeabi_fsub+0x284>
 8000986:	e0af      	b.n	8000ae8 <__aeabi_fsub+0x3e4>
 8000988:	23ff      	movs	r3, #255	@ 0xff
 800098a:	4665      	mov	r5, ip
 800098c:	2d00      	cmp	r5, #0
 800098e:	d100      	bne.n	8000992 <__aeabi_fsub+0x28e>
 8000990:	e0ad      	b.n	8000aee <__aeabi_fsub+0x3ea>
 8000992:	1e5e      	subs	r6, r3, #1
 8000994:	2b01      	cmp	r3, #1
 8000996:	d100      	bne.n	800099a <__aeabi_fsub+0x296>
 8000998:	e089      	b.n	8000aae <__aeabi_fsub+0x3aa>
 800099a:	2bff      	cmp	r3, #255	@ 0xff
 800099c:	d0c2      	beq.n	8000924 <__aeabi_fsub+0x220>
 800099e:	2e1b      	cmp	r6, #27
 80009a0:	dc00      	bgt.n	80009a4 <__aeabi_fsub+0x2a0>
 80009a2:	e0ab      	b.n	8000afc <__aeabi_fsub+0x3f8>
 80009a4:	1d4b      	adds	r3, r1, #5
 80009a6:	469c      	mov	ip, r3
 80009a8:	0013      	movs	r3, r2
 80009aa:	e721      	b.n	80007f0 <__aeabi_fsub+0xec>
 80009ac:	464b      	mov	r3, r9
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d170      	bne.n	8000a94 <__aeabi_fsub+0x390>
 80009b2:	22fe      	movs	r2, #254	@ 0xfe
 80009b4:	1c6b      	adds	r3, r5, #1
 80009b6:	421a      	tst	r2, r3
 80009b8:	d15e      	bne.n	8000a78 <__aeabi_fsub+0x374>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fsub+0x2bc>
 80009be:	e0c3      	b.n	8000b48 <__aeabi_fsub+0x444>
 80009c0:	4663      	mov	r3, ip
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fsub+0x2c4>
 80009c6:	e0d0      	b.n	8000b6a <__aeabi_fsub+0x466>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	d100      	bne.n	80009ce <__aeabi_fsub+0x2ca>
 80009cc:	e094      	b.n	8000af8 <__aeabi_fsub+0x3f4>
 80009ce:	000a      	movs	r2, r1
 80009d0:	4462      	add	r2, ip
 80009d2:	0153      	lsls	r3, r2, #5
 80009d4:	d400      	bmi.n	80009d8 <__aeabi_fsub+0x2d4>
 80009d6:	e0d8      	b.n	8000b8a <__aeabi_fsub+0x486>
 80009d8:	0192      	lsls	r2, r2, #6
 80009da:	2001      	movs	r0, #1
 80009dc:	0a52      	lsrs	r2, r2, #9
 80009de:	e6ed      	b.n	80007bc <__aeabi_fsub+0xb8>
 80009e0:	0008      	movs	r0, r1
 80009e2:	2220      	movs	r2, #32
 80009e4:	40d8      	lsrs	r0, r3
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	4099      	lsls	r1, r3
 80009ea:	000b      	movs	r3, r1
 80009ec:	1e5a      	subs	r2, r3, #1
 80009ee:	4193      	sbcs	r3, r2
 80009f0:	4303      	orrs	r3, r0
 80009f2:	449c      	add	ip, r3
 80009f4:	4663      	mov	r3, ip
 80009f6:	015b      	lsls	r3, r3, #5
 80009f8:	d589      	bpl.n	800090e <__aeabi_fsub+0x20a>
 80009fa:	3501      	adds	r5, #1
 80009fc:	2dff      	cmp	r5, #255	@ 0xff
 80009fe:	d100      	bne.n	8000a02 <__aeabi_fsub+0x2fe>
 8000a00:	e6da      	b.n	80007b8 <__aeabi_fsub+0xb4>
 8000a02:	4662      	mov	r2, ip
 8000a04:	2301      	movs	r3, #1
 8000a06:	4919      	ldr	r1, [pc, #100]	@ (8000a6c <__aeabi_fsub+0x368>)
 8000a08:	4013      	ands	r3, r2
 8000a0a:	0852      	lsrs	r2, r2, #1
 8000a0c:	400a      	ands	r2, r1
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	0013      	movs	r3, r2
 8000a12:	4694      	mov	ip, r2
 8000a14:	075b      	lsls	r3, r3, #29
 8000a16:	d004      	beq.n	8000a22 <__aeabi_fsub+0x31e>
 8000a18:	230f      	movs	r3, #15
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_fsub+0x31e>
 8000a20:	e6bf      	b.n	80007a2 <__aeabi_fsub+0x9e>
 8000a22:	4663      	mov	r3, ip
 8000a24:	015b      	lsls	r3, r3, #5
 8000a26:	d500      	bpl.n	8000a2a <__aeabi_fsub+0x326>
 8000a28:	e6c2      	b.n	80007b0 <__aeabi_fsub+0xac>
 8000a2a:	4663      	mov	r3, ip
 8000a2c:	08df      	lsrs	r7, r3, #3
 8000a2e:	002b      	movs	r3, r5
 8000a30:	e6e3      	b.n	80007fa <__aeabi_fsub+0xf6>
 8000a32:	1b53      	subs	r3, r2, r5
 8000a34:	2d00      	cmp	r5, #0
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fsub+0x336>
 8000a38:	e6f4      	b.n	8000824 <__aeabi_fsub+0x120>
 8000a3a:	2080      	movs	r0, #128	@ 0x80
 8000a3c:	4664      	mov	r4, ip
 8000a3e:	04c0      	lsls	r0, r0, #19
 8000a40:	4304      	orrs	r4, r0
 8000a42:	46a4      	mov	ip, r4
 8000a44:	0034      	movs	r4, r6
 8000a46:	2001      	movs	r0, #1
 8000a48:	2b1b      	cmp	r3, #27
 8000a4a:	dc09      	bgt.n	8000a60 <__aeabi_fsub+0x35c>
 8000a4c:	2520      	movs	r5, #32
 8000a4e:	4660      	mov	r0, ip
 8000a50:	40d8      	lsrs	r0, r3
 8000a52:	1aeb      	subs	r3, r5, r3
 8000a54:	4665      	mov	r5, ip
 8000a56:	409d      	lsls	r5, r3
 8000a58:	002b      	movs	r3, r5
 8000a5a:	1e5d      	subs	r5, r3, #1
 8000a5c:	41ab      	sbcs	r3, r5
 8000a5e:	4318      	orrs	r0, r3
 8000a60:	1a0b      	subs	r3, r1, r0
 8000a62:	469c      	mov	ip, r3
 8000a64:	0015      	movs	r5, r2
 8000a66:	e680      	b.n	800076a <__aeabi_fsub+0x66>
 8000a68:	fbffffff 	.word	0xfbffffff
 8000a6c:	7dffffff 	.word	0x7dffffff
 8000a70:	22fe      	movs	r2, #254	@ 0xfe
 8000a72:	1c6b      	adds	r3, r5, #1
 8000a74:	4213      	tst	r3, r2
 8000a76:	d0a3      	beq.n	80009c0 <__aeabi_fsub+0x2bc>
 8000a78:	2bff      	cmp	r3, #255	@ 0xff
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_fsub+0x37a>
 8000a7c:	e69c      	b.n	80007b8 <__aeabi_fsub+0xb4>
 8000a7e:	4461      	add	r1, ip
 8000a80:	0849      	lsrs	r1, r1, #1
 8000a82:	074a      	lsls	r2, r1, #29
 8000a84:	d049      	beq.n	8000b1a <__aeabi_fsub+0x416>
 8000a86:	220f      	movs	r2, #15
 8000a88:	400a      	ands	r2, r1
 8000a8a:	2a04      	cmp	r2, #4
 8000a8c:	d045      	beq.n	8000b1a <__aeabi_fsub+0x416>
 8000a8e:	1d0a      	adds	r2, r1, #4
 8000a90:	4694      	mov	ip, r2
 8000a92:	e6ad      	b.n	80007f0 <__aeabi_fsub+0xec>
 8000a94:	2d00      	cmp	r5, #0
 8000a96:	d100      	bne.n	8000a9a <__aeabi_fsub+0x396>
 8000a98:	e776      	b.n	8000988 <__aeabi_fsub+0x284>
 8000a9a:	e68d      	b.n	80007b8 <__aeabi_fsub+0xb4>
 8000a9c:	0034      	movs	r4, r6
 8000a9e:	20ff      	movs	r0, #255	@ 0xff
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	e68b      	b.n	80007bc <__aeabi_fsub+0xb8>
 8000aa4:	4663      	mov	r3, ip
 8000aa6:	2401      	movs	r4, #1
 8000aa8:	1acf      	subs	r7, r1, r3
 8000aaa:	4034      	ands	r4, r6
 8000aac:	e664      	b.n	8000778 <__aeabi_fsub+0x74>
 8000aae:	4461      	add	r1, ip
 8000ab0:	014b      	lsls	r3, r1, #5
 8000ab2:	d56d      	bpl.n	8000b90 <__aeabi_fsub+0x48c>
 8000ab4:	0848      	lsrs	r0, r1, #1
 8000ab6:	4944      	ldr	r1, [pc, #272]	@ (8000bc8 <__aeabi_fsub+0x4c4>)
 8000ab8:	4001      	ands	r1, r0
 8000aba:	0743      	lsls	r3, r0, #29
 8000abc:	d02c      	beq.n	8000b18 <__aeabi_fsub+0x414>
 8000abe:	230f      	movs	r3, #15
 8000ac0:	4003      	ands	r3, r0
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	d028      	beq.n	8000b18 <__aeabi_fsub+0x414>
 8000ac6:	1d0b      	adds	r3, r1, #4
 8000ac8:	469c      	mov	ip, r3
 8000aca:	2302      	movs	r3, #2
 8000acc:	e690      	b.n	80007f0 <__aeabi_fsub+0xec>
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_fsub+0x3d0>
 8000ad2:	e72b      	b.n	800092c <__aeabi_fsub+0x228>
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	03db      	lsls	r3, r3, #15
 8000ad8:	429f      	cmp	r7, r3
 8000ada:	d200      	bcs.n	8000ade <__aeabi_fsub+0x3da>
 8000adc:	e726      	b.n	800092c <__aeabi_fsub+0x228>
 8000ade:	4298      	cmp	r0, r3
 8000ae0:	d300      	bcc.n	8000ae4 <__aeabi_fsub+0x3e0>
 8000ae2:	e723      	b.n	800092c <__aeabi_fsub+0x228>
 8000ae4:	2401      	movs	r4, #1
 8000ae6:	4034      	ands	r4, r6
 8000ae8:	0007      	movs	r7, r0
 8000aea:	e71f      	b.n	800092c <__aeabi_fsub+0x228>
 8000aec:	0034      	movs	r4, r6
 8000aee:	468c      	mov	ip, r1
 8000af0:	e67e      	b.n	80007f0 <__aeabi_fsub+0xec>
 8000af2:	2301      	movs	r3, #1
 8000af4:	08cf      	lsrs	r7, r1, #3
 8000af6:	e680      	b.n	80007fa <__aeabi_fsub+0xf6>
 8000af8:	2300      	movs	r3, #0
 8000afa:	e67e      	b.n	80007fa <__aeabi_fsub+0xf6>
 8000afc:	2020      	movs	r0, #32
 8000afe:	4665      	mov	r5, ip
 8000b00:	1b80      	subs	r0, r0, r6
 8000b02:	4085      	lsls	r5, r0
 8000b04:	4663      	mov	r3, ip
 8000b06:	0028      	movs	r0, r5
 8000b08:	40f3      	lsrs	r3, r6
 8000b0a:	1e45      	subs	r5, r0, #1
 8000b0c:	41a8      	sbcs	r0, r5
 8000b0e:	4303      	orrs	r3, r0
 8000b10:	469c      	mov	ip, r3
 8000b12:	0015      	movs	r5, r2
 8000b14:	448c      	add	ip, r1
 8000b16:	e76d      	b.n	80009f4 <__aeabi_fsub+0x2f0>
 8000b18:	2302      	movs	r3, #2
 8000b1a:	08cf      	lsrs	r7, r1, #3
 8000b1c:	e66d      	b.n	80007fa <__aeabi_fsub+0xf6>
 8000b1e:	1b0f      	subs	r7, r1, r4
 8000b20:	017b      	lsls	r3, r7, #5
 8000b22:	d528      	bpl.n	8000b76 <__aeabi_fsub+0x472>
 8000b24:	01bf      	lsls	r7, r7, #6
 8000b26:	09bf      	lsrs	r7, r7, #6
 8000b28:	0038      	movs	r0, r7
 8000b2a:	f000 fe01 	bl	8001730 <__clzsi2>
 8000b2e:	003b      	movs	r3, r7
 8000b30:	3805      	subs	r0, #5
 8000b32:	4083      	lsls	r3, r0
 8000b34:	0034      	movs	r4, r6
 8000b36:	2501      	movs	r5, #1
 8000b38:	e6ca      	b.n	80008d0 <__aeabi_fsub+0x1cc>
 8000b3a:	2900      	cmp	r1, #0
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_fsub+0x43c>
 8000b3e:	e6b5      	b.n	80008ac <__aeabi_fsub+0x1a8>
 8000b40:	2401      	movs	r4, #1
 8000b42:	0007      	movs	r7, r0
 8000b44:	4034      	ands	r4, r6
 8000b46:	e658      	b.n	80007fa <__aeabi_fsub+0xf6>
 8000b48:	4663      	mov	r3, ip
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_fsub+0x44c>
 8000b4e:	e6e9      	b.n	8000924 <__aeabi_fsub+0x220>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	d100      	bne.n	8000b56 <__aeabi_fsub+0x452>
 8000b54:	e6ea      	b.n	800092c <__aeabi_fsub+0x228>
 8000b56:	2380      	movs	r3, #128	@ 0x80
 8000b58:	03db      	lsls	r3, r3, #15
 8000b5a:	429f      	cmp	r7, r3
 8000b5c:	d200      	bcs.n	8000b60 <__aeabi_fsub+0x45c>
 8000b5e:	e6e5      	b.n	800092c <__aeabi_fsub+0x228>
 8000b60:	4298      	cmp	r0, r3
 8000b62:	d300      	bcc.n	8000b66 <__aeabi_fsub+0x462>
 8000b64:	e6e2      	b.n	800092c <__aeabi_fsub+0x228>
 8000b66:	0007      	movs	r7, r0
 8000b68:	e6e0      	b.n	800092c <__aeabi_fsub+0x228>
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_fsub+0x46c>
 8000b6e:	e69e      	b.n	80008ae <__aeabi_fsub+0x1aa>
 8000b70:	2300      	movs	r3, #0
 8000b72:	08cf      	lsrs	r7, r1, #3
 8000b74:	e641      	b.n	80007fa <__aeabi_fsub+0xf6>
 8000b76:	0034      	movs	r4, r6
 8000b78:	2301      	movs	r3, #1
 8000b7a:	08ff      	lsrs	r7, r7, #3
 8000b7c:	e63d      	b.n	80007fa <__aeabi_fsub+0xf6>
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fsub+0x480>
 8000b82:	e693      	b.n	80008ac <__aeabi_fsub+0x1a8>
 8000b84:	2300      	movs	r3, #0
 8000b86:	08ff      	lsrs	r7, r7, #3
 8000b88:	e637      	b.n	80007fa <__aeabi_fsub+0xf6>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	08d7      	lsrs	r7, r2, #3
 8000b8e:	e634      	b.n	80007fa <__aeabi_fsub+0xf6>
 8000b90:	2301      	movs	r3, #1
 8000b92:	08cf      	lsrs	r7, r1, #3
 8000b94:	e631      	b.n	80007fa <__aeabi_fsub+0xf6>
 8000b96:	2280      	movs	r2, #128	@ 0x80
 8000b98:	000b      	movs	r3, r1
 8000b9a:	04d2      	lsls	r2, r2, #19
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	4211      	tst	r1, r2
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_fsub+0x4a2>
 8000ba4:	e6ae      	b.n	8000904 <__aeabi_fsub+0x200>
 8000ba6:	08cf      	lsrs	r7, r1, #3
 8000ba8:	e627      	b.n	80007fa <__aeabi_fsub+0xf6>
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_fsub+0x4ac>
 8000bae:	e75f      	b.n	8000a70 <__aeabi_fsub+0x36c>
 8000bb0:	1b56      	subs	r6, r2, r5
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d101      	bne.n	8000bba <__aeabi_fsub+0x4b6>
 8000bb6:	0033      	movs	r3, r6
 8000bb8:	e6e7      	b.n	800098a <__aeabi_fsub+0x286>
 8000bba:	2380      	movs	r3, #128	@ 0x80
 8000bbc:	4660      	mov	r0, ip
 8000bbe:	04db      	lsls	r3, r3, #19
 8000bc0:	4318      	orrs	r0, r3
 8000bc2:	4684      	mov	ip, r0
 8000bc4:	e6eb      	b.n	800099e <__aeabi_fsub+0x29a>
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	7dffffff 	.word	0x7dffffff

08000bcc <__aeabi_ui2f>:
 8000bcc:	b510      	push	{r4, lr}
 8000bce:	1e04      	subs	r4, r0, #0
 8000bd0:	d00d      	beq.n	8000bee <__aeabi_ui2f+0x22>
 8000bd2:	f000 fdad 	bl	8001730 <__clzsi2>
 8000bd6:	239e      	movs	r3, #158	@ 0x9e
 8000bd8:	1a1b      	subs	r3, r3, r0
 8000bda:	2b96      	cmp	r3, #150	@ 0x96
 8000bdc:	dc0c      	bgt.n	8000bf8 <__aeabi_ui2f+0x2c>
 8000bde:	2808      	cmp	r0, #8
 8000be0:	d034      	beq.n	8000c4c <__aeabi_ui2f+0x80>
 8000be2:	3808      	subs	r0, #8
 8000be4:	4084      	lsls	r4, r0
 8000be6:	0264      	lsls	r4, r4, #9
 8000be8:	0a64      	lsrs	r4, r4, #9
 8000bea:	b2d8      	uxtb	r0, r3
 8000bec:	e001      	b.n	8000bf2 <__aeabi_ui2f+0x26>
 8000bee:	2000      	movs	r0, #0
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	05c0      	lsls	r0, r0, #23
 8000bf4:	4320      	orrs	r0, r4
 8000bf6:	bd10      	pop	{r4, pc}
 8000bf8:	2b99      	cmp	r3, #153	@ 0x99
 8000bfa:	dc13      	bgt.n	8000c24 <__aeabi_ui2f+0x58>
 8000bfc:	1f42      	subs	r2, r0, #5
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <__aeabi_ui2f+0x88>)
 8000c02:	4022      	ands	r2, r4
 8000c04:	0761      	lsls	r1, r4, #29
 8000c06:	d01c      	beq.n	8000c42 <__aeabi_ui2f+0x76>
 8000c08:	210f      	movs	r1, #15
 8000c0a:	4021      	ands	r1, r4
 8000c0c:	2904      	cmp	r1, #4
 8000c0e:	d018      	beq.n	8000c42 <__aeabi_ui2f+0x76>
 8000c10:	3204      	adds	r2, #4
 8000c12:	08d4      	lsrs	r4, r2, #3
 8000c14:	0152      	lsls	r2, r2, #5
 8000c16:	d515      	bpl.n	8000c44 <__aeabi_ui2f+0x78>
 8000c18:	239f      	movs	r3, #159	@ 0x9f
 8000c1a:	0264      	lsls	r4, r4, #9
 8000c1c:	1a18      	subs	r0, r3, r0
 8000c1e:	0a64      	lsrs	r4, r4, #9
 8000c20:	b2c0      	uxtb	r0, r0
 8000c22:	e7e6      	b.n	8000bf2 <__aeabi_ui2f+0x26>
 8000c24:	0002      	movs	r2, r0
 8000c26:	0021      	movs	r1, r4
 8000c28:	321b      	adds	r2, #27
 8000c2a:	4091      	lsls	r1, r2
 8000c2c:	000a      	movs	r2, r1
 8000c2e:	1e51      	subs	r1, r2, #1
 8000c30:	418a      	sbcs	r2, r1
 8000c32:	2105      	movs	r1, #5
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	40cc      	lsrs	r4, r1
 8000c38:	4314      	orrs	r4, r2
 8000c3a:	4a06      	ldr	r2, [pc, #24]	@ (8000c54 <__aeabi_ui2f+0x88>)
 8000c3c:	4022      	ands	r2, r4
 8000c3e:	0761      	lsls	r1, r4, #29
 8000c40:	d1e2      	bne.n	8000c08 <__aeabi_ui2f+0x3c>
 8000c42:	08d4      	lsrs	r4, r2, #3
 8000c44:	0264      	lsls	r4, r4, #9
 8000c46:	0a64      	lsrs	r4, r4, #9
 8000c48:	b2d8      	uxtb	r0, r3
 8000c4a:	e7d2      	b.n	8000bf2 <__aeabi_ui2f+0x26>
 8000c4c:	0264      	lsls	r4, r4, #9
 8000c4e:	0a64      	lsrs	r4, r4, #9
 8000c50:	308e      	adds	r0, #142	@ 0x8e
 8000c52:	e7ce      	b.n	8000bf2 <__aeabi_ui2f+0x26>
 8000c54:	fbffffff 	.word	0xfbffffff

08000c58 <__aeabi_dadd>:
 8000c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5a:	464f      	mov	r7, r9
 8000c5c:	4646      	mov	r6, r8
 8000c5e:	46d6      	mov	lr, sl
 8000c60:	b5c0      	push	{r6, r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	9000      	str	r0, [sp, #0]
 8000c66:	9101      	str	r1, [sp, #4]
 8000c68:	030e      	lsls	r6, r1, #12
 8000c6a:	004c      	lsls	r4, r1, #1
 8000c6c:	0fcd      	lsrs	r5, r1, #31
 8000c6e:	0a71      	lsrs	r1, r6, #9
 8000c70:	9e00      	ldr	r6, [sp, #0]
 8000c72:	005f      	lsls	r7, r3, #1
 8000c74:	0f76      	lsrs	r6, r6, #29
 8000c76:	430e      	orrs	r6, r1
 8000c78:	9900      	ldr	r1, [sp, #0]
 8000c7a:	9200      	str	r2, [sp, #0]
 8000c7c:	9301      	str	r3, [sp, #4]
 8000c7e:	00c9      	lsls	r1, r1, #3
 8000c80:	4689      	mov	r9, r1
 8000c82:	0319      	lsls	r1, r3, #12
 8000c84:	0d7b      	lsrs	r3, r7, #21
 8000c86:	4698      	mov	r8, r3
 8000c88:	9b01      	ldr	r3, [sp, #4]
 8000c8a:	0a49      	lsrs	r1, r1, #9
 8000c8c:	0fdb      	lsrs	r3, r3, #31
 8000c8e:	469c      	mov	ip, r3
 8000c90:	9b00      	ldr	r3, [sp, #0]
 8000c92:	9a00      	ldr	r2, [sp, #0]
 8000c94:	0f5b      	lsrs	r3, r3, #29
 8000c96:	430b      	orrs	r3, r1
 8000c98:	4641      	mov	r1, r8
 8000c9a:	0d64      	lsrs	r4, r4, #21
 8000c9c:	00d2      	lsls	r2, r2, #3
 8000c9e:	1a61      	subs	r1, r4, r1
 8000ca0:	4565      	cmp	r5, ip
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_dadd+0x4e>
 8000ca4:	e0a6      	b.n	8000df4 <__aeabi_dadd+0x19c>
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	dd72      	ble.n	8000d90 <__aeabi_dadd+0x138>
 8000caa:	4647      	mov	r7, r8
 8000cac:	2f00      	cmp	r7, #0
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_dadd+0x5a>
 8000cb0:	e0dd      	b.n	8000e6e <__aeabi_dadd+0x216>
 8000cb2:	4fcc      	ldr	r7, [pc, #816]	@ (8000fe4 <__aeabi_dadd+0x38c>)
 8000cb4:	42bc      	cmp	r4, r7
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dadd+0x62>
 8000cb8:	e19a      	b.n	8000ff0 <__aeabi_dadd+0x398>
 8000cba:	2701      	movs	r7, #1
 8000cbc:	2938      	cmp	r1, #56	@ 0x38
 8000cbe:	dc17      	bgt.n	8000cf0 <__aeabi_dadd+0x98>
 8000cc0:	2780      	movs	r7, #128	@ 0x80
 8000cc2:	043f      	lsls	r7, r7, #16
 8000cc4:	433b      	orrs	r3, r7
 8000cc6:	291f      	cmp	r1, #31
 8000cc8:	dd00      	ble.n	8000ccc <__aeabi_dadd+0x74>
 8000cca:	e1dd      	b.n	8001088 <__aeabi_dadd+0x430>
 8000ccc:	2720      	movs	r7, #32
 8000cce:	1a78      	subs	r0, r7, r1
 8000cd0:	001f      	movs	r7, r3
 8000cd2:	4087      	lsls	r7, r0
 8000cd4:	46ba      	mov	sl, r7
 8000cd6:	0017      	movs	r7, r2
 8000cd8:	40cf      	lsrs	r7, r1
 8000cda:	4684      	mov	ip, r0
 8000cdc:	0038      	movs	r0, r7
 8000cde:	4657      	mov	r7, sl
 8000ce0:	4307      	orrs	r7, r0
 8000ce2:	4660      	mov	r0, ip
 8000ce4:	4082      	lsls	r2, r0
 8000ce6:	40cb      	lsrs	r3, r1
 8000ce8:	1e50      	subs	r0, r2, #1
 8000cea:	4182      	sbcs	r2, r0
 8000cec:	1af6      	subs	r6, r6, r3
 8000cee:	4317      	orrs	r7, r2
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	1bdf      	subs	r7, r3, r7
 8000cf4:	45b9      	cmp	r9, r7
 8000cf6:	4180      	sbcs	r0, r0
 8000cf8:	4240      	negs	r0, r0
 8000cfa:	1a36      	subs	r6, r6, r0
 8000cfc:	0233      	lsls	r3, r6, #8
 8000cfe:	d400      	bmi.n	8000d02 <__aeabi_dadd+0xaa>
 8000d00:	e0ff      	b.n	8000f02 <__aeabi_dadd+0x2aa>
 8000d02:	0276      	lsls	r6, r6, #9
 8000d04:	0a76      	lsrs	r6, r6, #9
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d100      	bne.n	8000d0c <__aeabi_dadd+0xb4>
 8000d0a:	e13c      	b.n	8000f86 <__aeabi_dadd+0x32e>
 8000d0c:	0030      	movs	r0, r6
 8000d0e:	f000 fd0f 	bl	8001730 <__clzsi2>
 8000d12:	0003      	movs	r3, r0
 8000d14:	3b08      	subs	r3, #8
 8000d16:	2120      	movs	r1, #32
 8000d18:	0038      	movs	r0, r7
 8000d1a:	1aca      	subs	r2, r1, r3
 8000d1c:	40d0      	lsrs	r0, r2
 8000d1e:	409e      	lsls	r6, r3
 8000d20:	0002      	movs	r2, r0
 8000d22:	409f      	lsls	r7, r3
 8000d24:	4332      	orrs	r2, r6
 8000d26:	429c      	cmp	r4, r3
 8000d28:	dd00      	ble.n	8000d2c <__aeabi_dadd+0xd4>
 8000d2a:	e1a6      	b.n	800107a <__aeabi_dadd+0x422>
 8000d2c:	1b18      	subs	r0, r3, r4
 8000d2e:	3001      	adds	r0, #1
 8000d30:	1a09      	subs	r1, r1, r0
 8000d32:	003e      	movs	r6, r7
 8000d34:	408f      	lsls	r7, r1
 8000d36:	40c6      	lsrs	r6, r0
 8000d38:	1e7b      	subs	r3, r7, #1
 8000d3a:	419f      	sbcs	r7, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	408b      	lsls	r3, r1
 8000d40:	4337      	orrs	r7, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	40c2      	lsrs	r2, r0
 8000d46:	003b      	movs	r3, r7
 8000d48:	0016      	movs	r6, r2
 8000d4a:	2400      	movs	r4, #0
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_dadd+0xfa>
 8000d50:	e1df      	b.n	8001112 <__aeabi_dadd+0x4ba>
 8000d52:	077b      	lsls	r3, r7, #29
 8000d54:	d100      	bne.n	8000d58 <__aeabi_dadd+0x100>
 8000d56:	e332      	b.n	80013be <__aeabi_dadd+0x766>
 8000d58:	230f      	movs	r3, #15
 8000d5a:	003a      	movs	r2, r7
 8000d5c:	403b      	ands	r3, r7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	d004      	beq.n	8000d6c <__aeabi_dadd+0x114>
 8000d62:	1d3a      	adds	r2, r7, #4
 8000d64:	42ba      	cmp	r2, r7
 8000d66:	41bf      	sbcs	r7, r7
 8000d68:	427f      	negs	r7, r7
 8000d6a:	19f6      	adds	r6, r6, r7
 8000d6c:	0233      	lsls	r3, r6, #8
 8000d6e:	d400      	bmi.n	8000d72 <__aeabi_dadd+0x11a>
 8000d70:	e323      	b.n	80013ba <__aeabi_dadd+0x762>
 8000d72:	4b9c      	ldr	r3, [pc, #624]	@ (8000fe4 <__aeabi_dadd+0x38c>)
 8000d74:	3401      	adds	r4, #1
 8000d76:	429c      	cmp	r4, r3
 8000d78:	d100      	bne.n	8000d7c <__aeabi_dadd+0x124>
 8000d7a:	e0b4      	b.n	8000ee6 <__aeabi_dadd+0x28e>
 8000d7c:	4b9a      	ldr	r3, [pc, #616]	@ (8000fe8 <__aeabi_dadd+0x390>)
 8000d7e:	0564      	lsls	r4, r4, #21
 8000d80:	401e      	ands	r6, r3
 8000d82:	0d64      	lsrs	r4, r4, #21
 8000d84:	0777      	lsls	r7, r6, #29
 8000d86:	08d2      	lsrs	r2, r2, #3
 8000d88:	0276      	lsls	r6, r6, #9
 8000d8a:	4317      	orrs	r7, r2
 8000d8c:	0b36      	lsrs	r6, r6, #12
 8000d8e:	e0ac      	b.n	8000eea <__aeabi_dadd+0x292>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dadd+0x13e>
 8000d94:	e07e      	b.n	8000e94 <__aeabi_dadd+0x23c>
 8000d96:	4641      	mov	r1, r8
 8000d98:	1b09      	subs	r1, r1, r4
 8000d9a:	2c00      	cmp	r4, #0
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_dadd+0x148>
 8000d9e:	e160      	b.n	8001062 <__aeabi_dadd+0x40a>
 8000da0:	0034      	movs	r4, r6
 8000da2:	4648      	mov	r0, r9
 8000da4:	4304      	orrs	r4, r0
 8000da6:	d100      	bne.n	8000daa <__aeabi_dadd+0x152>
 8000da8:	e1c9      	b.n	800113e <__aeabi_dadd+0x4e6>
 8000daa:	1e4c      	subs	r4, r1, #1
 8000dac:	2901      	cmp	r1, #1
 8000dae:	d100      	bne.n	8000db2 <__aeabi_dadd+0x15a>
 8000db0:	e22e      	b.n	8001210 <__aeabi_dadd+0x5b8>
 8000db2:	4d8c      	ldr	r5, [pc, #560]	@ (8000fe4 <__aeabi_dadd+0x38c>)
 8000db4:	42a9      	cmp	r1, r5
 8000db6:	d100      	bne.n	8000dba <__aeabi_dadd+0x162>
 8000db8:	e224      	b.n	8001204 <__aeabi_dadd+0x5ac>
 8000dba:	2701      	movs	r7, #1
 8000dbc:	2c38      	cmp	r4, #56	@ 0x38
 8000dbe:	dc11      	bgt.n	8000de4 <__aeabi_dadd+0x18c>
 8000dc0:	0021      	movs	r1, r4
 8000dc2:	291f      	cmp	r1, #31
 8000dc4:	dd00      	ble.n	8000dc8 <__aeabi_dadd+0x170>
 8000dc6:	e20b      	b.n	80011e0 <__aeabi_dadd+0x588>
 8000dc8:	2420      	movs	r4, #32
 8000dca:	0037      	movs	r7, r6
 8000dcc:	4648      	mov	r0, r9
 8000dce:	1a64      	subs	r4, r4, r1
 8000dd0:	40a7      	lsls	r7, r4
 8000dd2:	40c8      	lsrs	r0, r1
 8000dd4:	4307      	orrs	r7, r0
 8000dd6:	4648      	mov	r0, r9
 8000dd8:	40a0      	lsls	r0, r4
 8000dda:	40ce      	lsrs	r6, r1
 8000ddc:	1e44      	subs	r4, r0, #1
 8000dde:	41a0      	sbcs	r0, r4
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	4307      	orrs	r7, r0
 8000de4:	1bd7      	subs	r7, r2, r7
 8000de6:	42ba      	cmp	r2, r7
 8000de8:	4192      	sbcs	r2, r2
 8000dea:	4252      	negs	r2, r2
 8000dec:	4665      	mov	r5, ip
 8000dee:	4644      	mov	r4, r8
 8000df0:	1a9e      	subs	r6, r3, r2
 8000df2:	e783      	b.n	8000cfc <__aeabi_dadd+0xa4>
 8000df4:	2900      	cmp	r1, #0
 8000df6:	dc00      	bgt.n	8000dfa <__aeabi_dadd+0x1a2>
 8000df8:	e09c      	b.n	8000f34 <__aeabi_dadd+0x2dc>
 8000dfa:	4647      	mov	r7, r8
 8000dfc:	2f00      	cmp	r7, #0
 8000dfe:	d167      	bne.n	8000ed0 <__aeabi_dadd+0x278>
 8000e00:	001f      	movs	r7, r3
 8000e02:	4317      	orrs	r7, r2
 8000e04:	d100      	bne.n	8000e08 <__aeabi_dadd+0x1b0>
 8000e06:	e0e4      	b.n	8000fd2 <__aeabi_dadd+0x37a>
 8000e08:	1e48      	subs	r0, r1, #1
 8000e0a:	2901      	cmp	r1, #1
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_dadd+0x1b8>
 8000e0e:	e19b      	b.n	8001148 <__aeabi_dadd+0x4f0>
 8000e10:	4f74      	ldr	r7, [pc, #464]	@ (8000fe4 <__aeabi_dadd+0x38c>)
 8000e12:	42b9      	cmp	r1, r7
 8000e14:	d100      	bne.n	8000e18 <__aeabi_dadd+0x1c0>
 8000e16:	e0eb      	b.n	8000ff0 <__aeabi_dadd+0x398>
 8000e18:	2701      	movs	r7, #1
 8000e1a:	0001      	movs	r1, r0
 8000e1c:	2838      	cmp	r0, #56	@ 0x38
 8000e1e:	dc11      	bgt.n	8000e44 <__aeabi_dadd+0x1ec>
 8000e20:	291f      	cmp	r1, #31
 8000e22:	dd00      	ble.n	8000e26 <__aeabi_dadd+0x1ce>
 8000e24:	e1c7      	b.n	80011b6 <__aeabi_dadd+0x55e>
 8000e26:	2720      	movs	r7, #32
 8000e28:	1a78      	subs	r0, r7, r1
 8000e2a:	001f      	movs	r7, r3
 8000e2c:	4684      	mov	ip, r0
 8000e2e:	4087      	lsls	r7, r0
 8000e30:	0010      	movs	r0, r2
 8000e32:	40c8      	lsrs	r0, r1
 8000e34:	4307      	orrs	r7, r0
 8000e36:	4660      	mov	r0, ip
 8000e38:	4082      	lsls	r2, r0
 8000e3a:	40cb      	lsrs	r3, r1
 8000e3c:	1e50      	subs	r0, r2, #1
 8000e3e:	4182      	sbcs	r2, r0
 8000e40:	18f6      	adds	r6, r6, r3
 8000e42:	4317      	orrs	r7, r2
 8000e44:	444f      	add	r7, r9
 8000e46:	454f      	cmp	r7, r9
 8000e48:	4180      	sbcs	r0, r0
 8000e4a:	4240      	negs	r0, r0
 8000e4c:	1836      	adds	r6, r6, r0
 8000e4e:	0233      	lsls	r3, r6, #8
 8000e50:	d557      	bpl.n	8000f02 <__aeabi_dadd+0x2aa>
 8000e52:	4b64      	ldr	r3, [pc, #400]	@ (8000fe4 <__aeabi_dadd+0x38c>)
 8000e54:	3401      	adds	r4, #1
 8000e56:	429c      	cmp	r4, r3
 8000e58:	d045      	beq.n	8000ee6 <__aeabi_dadd+0x28e>
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	4b62      	ldr	r3, [pc, #392]	@ (8000fe8 <__aeabi_dadd+0x390>)
 8000e5e:	087a      	lsrs	r2, r7, #1
 8000e60:	401e      	ands	r6, r3
 8000e62:	4039      	ands	r1, r7
 8000e64:	430a      	orrs	r2, r1
 8000e66:	07f7      	lsls	r7, r6, #31
 8000e68:	4317      	orrs	r7, r2
 8000e6a:	0876      	lsrs	r6, r6, #1
 8000e6c:	e771      	b.n	8000d52 <__aeabi_dadd+0xfa>
 8000e6e:	001f      	movs	r7, r3
 8000e70:	4317      	orrs	r7, r2
 8000e72:	d100      	bne.n	8000e76 <__aeabi_dadd+0x21e>
 8000e74:	e0ad      	b.n	8000fd2 <__aeabi_dadd+0x37a>
 8000e76:	1e4f      	subs	r7, r1, #1
 8000e78:	46bc      	mov	ip, r7
 8000e7a:	2901      	cmp	r1, #1
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_dadd+0x228>
 8000e7e:	e182      	b.n	8001186 <__aeabi_dadd+0x52e>
 8000e80:	4f58      	ldr	r7, [pc, #352]	@ (8000fe4 <__aeabi_dadd+0x38c>)
 8000e82:	42b9      	cmp	r1, r7
 8000e84:	d100      	bne.n	8000e88 <__aeabi_dadd+0x230>
 8000e86:	e190      	b.n	80011aa <__aeabi_dadd+0x552>
 8000e88:	4661      	mov	r1, ip
 8000e8a:	2701      	movs	r7, #1
 8000e8c:	2938      	cmp	r1, #56	@ 0x38
 8000e8e:	dd00      	ble.n	8000e92 <__aeabi_dadd+0x23a>
 8000e90:	e72e      	b.n	8000cf0 <__aeabi_dadd+0x98>
 8000e92:	e718      	b.n	8000cc6 <__aeabi_dadd+0x6e>
 8000e94:	4f55      	ldr	r7, [pc, #340]	@ (8000fec <__aeabi_dadd+0x394>)
 8000e96:	1c61      	adds	r1, r4, #1
 8000e98:	4239      	tst	r1, r7
 8000e9a:	d000      	beq.n	8000e9e <__aeabi_dadd+0x246>
 8000e9c:	e0d0      	b.n	8001040 <__aeabi_dadd+0x3e8>
 8000e9e:	0031      	movs	r1, r6
 8000ea0:	4648      	mov	r0, r9
 8000ea2:	001f      	movs	r7, r3
 8000ea4:	4301      	orrs	r1, r0
 8000ea6:	4317      	orrs	r7, r2
 8000ea8:	2c00      	cmp	r4, #0
 8000eaa:	d000      	beq.n	8000eae <__aeabi_dadd+0x256>
 8000eac:	e13d      	b.n	800112a <__aeabi_dadd+0x4d2>
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_dadd+0x25c>
 8000eb2:	e1bc      	b.n	800122e <__aeabi_dadd+0x5d6>
 8000eb4:	2f00      	cmp	r7, #0
 8000eb6:	d000      	beq.n	8000eba <__aeabi_dadd+0x262>
 8000eb8:	e1bf      	b.n	800123a <__aeabi_dadd+0x5e2>
 8000eba:	464b      	mov	r3, r9
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	08d8      	lsrs	r0, r3, #3
 8000ec0:	0777      	lsls	r7, r6, #29
 8000ec2:	4307      	orrs	r7, r0
 8000ec4:	08f0      	lsrs	r0, r6, #3
 8000ec6:	0306      	lsls	r6, r0, #12
 8000ec8:	054c      	lsls	r4, r1, #21
 8000eca:	0b36      	lsrs	r6, r6, #12
 8000ecc:	0d64      	lsrs	r4, r4, #21
 8000ece:	e00c      	b.n	8000eea <__aeabi_dadd+0x292>
 8000ed0:	4f44      	ldr	r7, [pc, #272]	@ (8000fe4 <__aeabi_dadd+0x38c>)
 8000ed2:	42bc      	cmp	r4, r7
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_dadd+0x280>
 8000ed6:	e08b      	b.n	8000ff0 <__aeabi_dadd+0x398>
 8000ed8:	2701      	movs	r7, #1
 8000eda:	2938      	cmp	r1, #56	@ 0x38
 8000edc:	dcb2      	bgt.n	8000e44 <__aeabi_dadd+0x1ec>
 8000ede:	2780      	movs	r7, #128	@ 0x80
 8000ee0:	043f      	lsls	r7, r7, #16
 8000ee2:	433b      	orrs	r3, r7
 8000ee4:	e79c      	b.n	8000e20 <__aeabi_dadd+0x1c8>
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	2700      	movs	r7, #0
 8000eea:	0524      	lsls	r4, r4, #20
 8000eec:	4334      	orrs	r4, r6
 8000eee:	07ed      	lsls	r5, r5, #31
 8000ef0:	432c      	orrs	r4, r5
 8000ef2:	0038      	movs	r0, r7
 8000ef4:	0021      	movs	r1, r4
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bce0      	pop	{r5, r6, r7}
 8000efa:	46ba      	mov	sl, r7
 8000efc:	46b1      	mov	r9, r6
 8000efe:	46a8      	mov	r8, r5
 8000f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f02:	077b      	lsls	r3, r7, #29
 8000f04:	d004      	beq.n	8000f10 <__aeabi_dadd+0x2b8>
 8000f06:	230f      	movs	r3, #15
 8000f08:	403b      	ands	r3, r7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_dadd+0x2b8>
 8000f0e:	e728      	b.n	8000d62 <__aeabi_dadd+0x10a>
 8000f10:	08f8      	lsrs	r0, r7, #3
 8000f12:	4b34      	ldr	r3, [pc, #208]	@ (8000fe4 <__aeabi_dadd+0x38c>)
 8000f14:	0777      	lsls	r7, r6, #29
 8000f16:	4307      	orrs	r7, r0
 8000f18:	08f0      	lsrs	r0, r6, #3
 8000f1a:	429c      	cmp	r4, r3
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_dadd+0x2c8>
 8000f1e:	e24a      	b.n	80013b6 <__aeabi_dadd+0x75e>
 8000f20:	003b      	movs	r3, r7
 8000f22:	4303      	orrs	r3, r0
 8000f24:	d059      	beq.n	8000fda <__aeabi_dadd+0x382>
 8000f26:	2680      	movs	r6, #128	@ 0x80
 8000f28:	0336      	lsls	r6, r6, #12
 8000f2a:	4306      	orrs	r6, r0
 8000f2c:	0336      	lsls	r6, r6, #12
 8000f2e:	4c2d      	ldr	r4, [pc, #180]	@ (8000fe4 <__aeabi_dadd+0x38c>)
 8000f30:	0b36      	lsrs	r6, r6, #12
 8000f32:	e7da      	b.n	8000eea <__aeabi_dadd+0x292>
 8000f34:	2900      	cmp	r1, #0
 8000f36:	d061      	beq.n	8000ffc <__aeabi_dadd+0x3a4>
 8000f38:	4641      	mov	r1, r8
 8000f3a:	1b09      	subs	r1, r1, r4
 8000f3c:	2c00      	cmp	r4, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dadd+0x2ea>
 8000f40:	e0b9      	b.n	80010b6 <__aeabi_dadd+0x45e>
 8000f42:	4c28      	ldr	r4, [pc, #160]	@ (8000fe4 <__aeabi_dadd+0x38c>)
 8000f44:	45a0      	cmp	r8, r4
 8000f46:	d100      	bne.n	8000f4a <__aeabi_dadd+0x2f2>
 8000f48:	e1a5      	b.n	8001296 <__aeabi_dadd+0x63e>
 8000f4a:	2701      	movs	r7, #1
 8000f4c:	2938      	cmp	r1, #56	@ 0x38
 8000f4e:	dc13      	bgt.n	8000f78 <__aeabi_dadd+0x320>
 8000f50:	2480      	movs	r4, #128	@ 0x80
 8000f52:	0424      	lsls	r4, r4, #16
 8000f54:	4326      	orrs	r6, r4
 8000f56:	291f      	cmp	r1, #31
 8000f58:	dd00      	ble.n	8000f5c <__aeabi_dadd+0x304>
 8000f5a:	e1c8      	b.n	80012ee <__aeabi_dadd+0x696>
 8000f5c:	2420      	movs	r4, #32
 8000f5e:	0037      	movs	r7, r6
 8000f60:	4648      	mov	r0, r9
 8000f62:	1a64      	subs	r4, r4, r1
 8000f64:	40a7      	lsls	r7, r4
 8000f66:	40c8      	lsrs	r0, r1
 8000f68:	4307      	orrs	r7, r0
 8000f6a:	4648      	mov	r0, r9
 8000f6c:	40a0      	lsls	r0, r4
 8000f6e:	40ce      	lsrs	r6, r1
 8000f70:	1e44      	subs	r4, r0, #1
 8000f72:	41a0      	sbcs	r0, r4
 8000f74:	199b      	adds	r3, r3, r6
 8000f76:	4307      	orrs	r7, r0
 8000f78:	18bf      	adds	r7, r7, r2
 8000f7a:	4297      	cmp	r7, r2
 8000f7c:	4192      	sbcs	r2, r2
 8000f7e:	4252      	negs	r2, r2
 8000f80:	4644      	mov	r4, r8
 8000f82:	18d6      	adds	r6, r2, r3
 8000f84:	e763      	b.n	8000e4e <__aeabi_dadd+0x1f6>
 8000f86:	0038      	movs	r0, r7
 8000f88:	f000 fbd2 	bl	8001730 <__clzsi2>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	3318      	adds	r3, #24
 8000f90:	2b1f      	cmp	r3, #31
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_dadd+0x33e>
 8000f94:	e6bf      	b.n	8000d16 <__aeabi_dadd+0xbe>
 8000f96:	003a      	movs	r2, r7
 8000f98:	3808      	subs	r0, #8
 8000f9a:	4082      	lsls	r2, r0
 8000f9c:	429c      	cmp	r4, r3
 8000f9e:	dd00      	ble.n	8000fa2 <__aeabi_dadd+0x34a>
 8000fa0:	e083      	b.n	80010aa <__aeabi_dadd+0x452>
 8000fa2:	1b1b      	subs	r3, r3, r4
 8000fa4:	1c58      	adds	r0, r3, #1
 8000fa6:	281f      	cmp	r0, #31
 8000fa8:	dc00      	bgt.n	8000fac <__aeabi_dadd+0x354>
 8000faa:	e1b4      	b.n	8001316 <__aeabi_dadd+0x6be>
 8000fac:	0017      	movs	r7, r2
 8000fae:	3b1f      	subs	r3, #31
 8000fb0:	40df      	lsrs	r7, r3
 8000fb2:	2820      	cmp	r0, #32
 8000fb4:	d005      	beq.n	8000fc2 <__aeabi_dadd+0x36a>
 8000fb6:	2340      	movs	r3, #64	@ 0x40
 8000fb8:	1a1b      	subs	r3, r3, r0
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	1e53      	subs	r3, r2, #1
 8000fbe:	419a      	sbcs	r2, r3
 8000fc0:	4317      	orrs	r7, r2
 8000fc2:	2400      	movs	r4, #0
 8000fc4:	2f00      	cmp	r7, #0
 8000fc6:	d00a      	beq.n	8000fde <__aeabi_dadd+0x386>
 8000fc8:	077b      	lsls	r3, r7, #29
 8000fca:	d000      	beq.n	8000fce <__aeabi_dadd+0x376>
 8000fcc:	e6c4      	b.n	8000d58 <__aeabi_dadd+0x100>
 8000fce:	0026      	movs	r6, r4
 8000fd0:	e79e      	b.n	8000f10 <__aeabi_dadd+0x2b8>
 8000fd2:	464b      	mov	r3, r9
 8000fd4:	000c      	movs	r4, r1
 8000fd6:	08d8      	lsrs	r0, r3, #3
 8000fd8:	e79b      	b.n	8000f12 <__aeabi_dadd+0x2ba>
 8000fda:	2700      	movs	r7, #0
 8000fdc:	4c01      	ldr	r4, [pc, #4]	@ (8000fe4 <__aeabi_dadd+0x38c>)
 8000fde:	2600      	movs	r6, #0
 8000fe0:	e783      	b.n	8000eea <__aeabi_dadd+0x292>
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	000007ff 	.word	0x000007ff
 8000fe8:	ff7fffff 	.word	0xff7fffff
 8000fec:	000007fe 	.word	0x000007fe
 8000ff0:	464b      	mov	r3, r9
 8000ff2:	0777      	lsls	r7, r6, #29
 8000ff4:	08d8      	lsrs	r0, r3, #3
 8000ff6:	4307      	orrs	r7, r0
 8000ff8:	08f0      	lsrs	r0, r6, #3
 8000ffa:	e791      	b.n	8000f20 <__aeabi_dadd+0x2c8>
 8000ffc:	4fcd      	ldr	r7, [pc, #820]	@ (8001334 <__aeabi_dadd+0x6dc>)
 8000ffe:	1c61      	adds	r1, r4, #1
 8001000:	4239      	tst	r1, r7
 8001002:	d16b      	bne.n	80010dc <__aeabi_dadd+0x484>
 8001004:	0031      	movs	r1, r6
 8001006:	4648      	mov	r0, r9
 8001008:	4301      	orrs	r1, r0
 800100a:	2c00      	cmp	r4, #0
 800100c:	d000      	beq.n	8001010 <__aeabi_dadd+0x3b8>
 800100e:	e14b      	b.n	80012a8 <__aeabi_dadd+0x650>
 8001010:	001f      	movs	r7, r3
 8001012:	4317      	orrs	r7, r2
 8001014:	2900      	cmp	r1, #0
 8001016:	d100      	bne.n	800101a <__aeabi_dadd+0x3c2>
 8001018:	e181      	b.n	800131e <__aeabi_dadd+0x6c6>
 800101a:	2f00      	cmp	r7, #0
 800101c:	d100      	bne.n	8001020 <__aeabi_dadd+0x3c8>
 800101e:	e74c      	b.n	8000eba <__aeabi_dadd+0x262>
 8001020:	444a      	add	r2, r9
 8001022:	454a      	cmp	r2, r9
 8001024:	4180      	sbcs	r0, r0
 8001026:	18f6      	adds	r6, r6, r3
 8001028:	4240      	negs	r0, r0
 800102a:	1836      	adds	r6, r6, r0
 800102c:	0233      	lsls	r3, r6, #8
 800102e:	d500      	bpl.n	8001032 <__aeabi_dadd+0x3da>
 8001030:	e1b0      	b.n	8001394 <__aeabi_dadd+0x73c>
 8001032:	0017      	movs	r7, r2
 8001034:	4691      	mov	r9, r2
 8001036:	4337      	orrs	r7, r6
 8001038:	d000      	beq.n	800103c <__aeabi_dadd+0x3e4>
 800103a:	e73e      	b.n	8000eba <__aeabi_dadd+0x262>
 800103c:	2600      	movs	r6, #0
 800103e:	e754      	b.n	8000eea <__aeabi_dadd+0x292>
 8001040:	4649      	mov	r1, r9
 8001042:	1a89      	subs	r1, r1, r2
 8001044:	4688      	mov	r8, r1
 8001046:	45c1      	cmp	r9, r8
 8001048:	41bf      	sbcs	r7, r7
 800104a:	1af1      	subs	r1, r6, r3
 800104c:	427f      	negs	r7, r7
 800104e:	1bc9      	subs	r1, r1, r7
 8001050:	020f      	lsls	r7, r1, #8
 8001052:	d461      	bmi.n	8001118 <__aeabi_dadd+0x4c0>
 8001054:	4647      	mov	r7, r8
 8001056:	430f      	orrs	r7, r1
 8001058:	d100      	bne.n	800105c <__aeabi_dadd+0x404>
 800105a:	e0bd      	b.n	80011d8 <__aeabi_dadd+0x580>
 800105c:	000e      	movs	r6, r1
 800105e:	4647      	mov	r7, r8
 8001060:	e651      	b.n	8000d06 <__aeabi_dadd+0xae>
 8001062:	4cb5      	ldr	r4, [pc, #724]	@ (8001338 <__aeabi_dadd+0x6e0>)
 8001064:	45a0      	cmp	r8, r4
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0x412>
 8001068:	e100      	b.n	800126c <__aeabi_dadd+0x614>
 800106a:	2701      	movs	r7, #1
 800106c:	2938      	cmp	r1, #56	@ 0x38
 800106e:	dd00      	ble.n	8001072 <__aeabi_dadd+0x41a>
 8001070:	e6b8      	b.n	8000de4 <__aeabi_dadd+0x18c>
 8001072:	2480      	movs	r4, #128	@ 0x80
 8001074:	0424      	lsls	r4, r4, #16
 8001076:	4326      	orrs	r6, r4
 8001078:	e6a3      	b.n	8000dc2 <__aeabi_dadd+0x16a>
 800107a:	4eb0      	ldr	r6, [pc, #704]	@ (800133c <__aeabi_dadd+0x6e4>)
 800107c:	1ae4      	subs	r4, r4, r3
 800107e:	4016      	ands	r6, r2
 8001080:	077b      	lsls	r3, r7, #29
 8001082:	d000      	beq.n	8001086 <__aeabi_dadd+0x42e>
 8001084:	e73f      	b.n	8000f06 <__aeabi_dadd+0x2ae>
 8001086:	e743      	b.n	8000f10 <__aeabi_dadd+0x2b8>
 8001088:	000f      	movs	r7, r1
 800108a:	0018      	movs	r0, r3
 800108c:	3f20      	subs	r7, #32
 800108e:	40f8      	lsrs	r0, r7
 8001090:	4684      	mov	ip, r0
 8001092:	2920      	cmp	r1, #32
 8001094:	d003      	beq.n	800109e <__aeabi_dadd+0x446>
 8001096:	2740      	movs	r7, #64	@ 0x40
 8001098:	1a79      	subs	r1, r7, r1
 800109a:	408b      	lsls	r3, r1
 800109c:	431a      	orrs	r2, r3
 800109e:	1e53      	subs	r3, r2, #1
 80010a0:	419a      	sbcs	r2, r3
 80010a2:	4663      	mov	r3, ip
 80010a4:	0017      	movs	r7, r2
 80010a6:	431f      	orrs	r7, r3
 80010a8:	e622      	b.n	8000cf0 <__aeabi_dadd+0x98>
 80010aa:	48a4      	ldr	r0, [pc, #656]	@ (800133c <__aeabi_dadd+0x6e4>)
 80010ac:	1ae1      	subs	r1, r4, r3
 80010ae:	4010      	ands	r0, r2
 80010b0:	0747      	lsls	r7, r0, #29
 80010b2:	08c0      	lsrs	r0, r0, #3
 80010b4:	e707      	b.n	8000ec6 <__aeabi_dadd+0x26e>
 80010b6:	0034      	movs	r4, r6
 80010b8:	4648      	mov	r0, r9
 80010ba:	4304      	orrs	r4, r0
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dadd+0x468>
 80010be:	e0fa      	b.n	80012b6 <__aeabi_dadd+0x65e>
 80010c0:	1e4c      	subs	r4, r1, #1
 80010c2:	2901      	cmp	r1, #1
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dadd+0x470>
 80010c6:	e0d7      	b.n	8001278 <__aeabi_dadd+0x620>
 80010c8:	4f9b      	ldr	r7, [pc, #620]	@ (8001338 <__aeabi_dadd+0x6e0>)
 80010ca:	42b9      	cmp	r1, r7
 80010cc:	d100      	bne.n	80010d0 <__aeabi_dadd+0x478>
 80010ce:	e0e2      	b.n	8001296 <__aeabi_dadd+0x63e>
 80010d0:	2701      	movs	r7, #1
 80010d2:	2c38      	cmp	r4, #56	@ 0x38
 80010d4:	dd00      	ble.n	80010d8 <__aeabi_dadd+0x480>
 80010d6:	e74f      	b.n	8000f78 <__aeabi_dadd+0x320>
 80010d8:	0021      	movs	r1, r4
 80010da:	e73c      	b.n	8000f56 <__aeabi_dadd+0x2fe>
 80010dc:	4c96      	ldr	r4, [pc, #600]	@ (8001338 <__aeabi_dadd+0x6e0>)
 80010de:	42a1      	cmp	r1, r4
 80010e0:	d100      	bne.n	80010e4 <__aeabi_dadd+0x48c>
 80010e2:	e0dd      	b.n	80012a0 <__aeabi_dadd+0x648>
 80010e4:	444a      	add	r2, r9
 80010e6:	454a      	cmp	r2, r9
 80010e8:	4180      	sbcs	r0, r0
 80010ea:	18f3      	adds	r3, r6, r3
 80010ec:	4240      	negs	r0, r0
 80010ee:	1818      	adds	r0, r3, r0
 80010f0:	07c7      	lsls	r7, r0, #31
 80010f2:	0852      	lsrs	r2, r2, #1
 80010f4:	4317      	orrs	r7, r2
 80010f6:	0846      	lsrs	r6, r0, #1
 80010f8:	0752      	lsls	r2, r2, #29
 80010fa:	d005      	beq.n	8001108 <__aeabi_dadd+0x4b0>
 80010fc:	220f      	movs	r2, #15
 80010fe:	000c      	movs	r4, r1
 8001100:	403a      	ands	r2, r7
 8001102:	2a04      	cmp	r2, #4
 8001104:	d000      	beq.n	8001108 <__aeabi_dadd+0x4b0>
 8001106:	e62c      	b.n	8000d62 <__aeabi_dadd+0x10a>
 8001108:	0776      	lsls	r6, r6, #29
 800110a:	08ff      	lsrs	r7, r7, #3
 800110c:	4337      	orrs	r7, r6
 800110e:	0900      	lsrs	r0, r0, #4
 8001110:	e6d9      	b.n	8000ec6 <__aeabi_dadd+0x26e>
 8001112:	2700      	movs	r7, #0
 8001114:	2600      	movs	r6, #0
 8001116:	e6e8      	b.n	8000eea <__aeabi_dadd+0x292>
 8001118:	4649      	mov	r1, r9
 800111a:	1a57      	subs	r7, r2, r1
 800111c:	42ba      	cmp	r2, r7
 800111e:	4192      	sbcs	r2, r2
 8001120:	1b9e      	subs	r6, r3, r6
 8001122:	4252      	negs	r2, r2
 8001124:	4665      	mov	r5, ip
 8001126:	1ab6      	subs	r6, r6, r2
 8001128:	e5ed      	b.n	8000d06 <__aeabi_dadd+0xae>
 800112a:	2900      	cmp	r1, #0
 800112c:	d000      	beq.n	8001130 <__aeabi_dadd+0x4d8>
 800112e:	e0c6      	b.n	80012be <__aeabi_dadd+0x666>
 8001130:	2f00      	cmp	r7, #0
 8001132:	d167      	bne.n	8001204 <__aeabi_dadd+0x5ac>
 8001134:	2680      	movs	r6, #128	@ 0x80
 8001136:	2500      	movs	r5, #0
 8001138:	4c7f      	ldr	r4, [pc, #508]	@ (8001338 <__aeabi_dadd+0x6e0>)
 800113a:	0336      	lsls	r6, r6, #12
 800113c:	e6d5      	b.n	8000eea <__aeabi_dadd+0x292>
 800113e:	4665      	mov	r5, ip
 8001140:	000c      	movs	r4, r1
 8001142:	001e      	movs	r6, r3
 8001144:	08d0      	lsrs	r0, r2, #3
 8001146:	e6e4      	b.n	8000f12 <__aeabi_dadd+0x2ba>
 8001148:	444a      	add	r2, r9
 800114a:	454a      	cmp	r2, r9
 800114c:	4180      	sbcs	r0, r0
 800114e:	18f3      	adds	r3, r6, r3
 8001150:	4240      	negs	r0, r0
 8001152:	1818      	adds	r0, r3, r0
 8001154:	0011      	movs	r1, r2
 8001156:	0203      	lsls	r3, r0, #8
 8001158:	d400      	bmi.n	800115c <__aeabi_dadd+0x504>
 800115a:	e096      	b.n	800128a <__aeabi_dadd+0x632>
 800115c:	4b77      	ldr	r3, [pc, #476]	@ (800133c <__aeabi_dadd+0x6e4>)
 800115e:	0849      	lsrs	r1, r1, #1
 8001160:	4018      	ands	r0, r3
 8001162:	07c3      	lsls	r3, r0, #31
 8001164:	430b      	orrs	r3, r1
 8001166:	0844      	lsrs	r4, r0, #1
 8001168:	0749      	lsls	r1, r1, #29
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0x516>
 800116c:	e129      	b.n	80013c2 <__aeabi_dadd+0x76a>
 800116e:	220f      	movs	r2, #15
 8001170:	401a      	ands	r2, r3
 8001172:	2a04      	cmp	r2, #4
 8001174:	d100      	bne.n	8001178 <__aeabi_dadd+0x520>
 8001176:	e0ea      	b.n	800134e <__aeabi_dadd+0x6f6>
 8001178:	1d1f      	adds	r7, r3, #4
 800117a:	429f      	cmp	r7, r3
 800117c:	41b6      	sbcs	r6, r6
 800117e:	4276      	negs	r6, r6
 8001180:	1936      	adds	r6, r6, r4
 8001182:	2402      	movs	r4, #2
 8001184:	e6c4      	b.n	8000f10 <__aeabi_dadd+0x2b8>
 8001186:	4649      	mov	r1, r9
 8001188:	1a8f      	subs	r7, r1, r2
 800118a:	45b9      	cmp	r9, r7
 800118c:	4180      	sbcs	r0, r0
 800118e:	1af6      	subs	r6, r6, r3
 8001190:	4240      	negs	r0, r0
 8001192:	1a36      	subs	r6, r6, r0
 8001194:	0233      	lsls	r3, r6, #8
 8001196:	d406      	bmi.n	80011a6 <__aeabi_dadd+0x54e>
 8001198:	0773      	lsls	r3, r6, #29
 800119a:	08ff      	lsrs	r7, r7, #3
 800119c:	2101      	movs	r1, #1
 800119e:	431f      	orrs	r7, r3
 80011a0:	08f0      	lsrs	r0, r6, #3
 80011a2:	e690      	b.n	8000ec6 <__aeabi_dadd+0x26e>
 80011a4:	4665      	mov	r5, ip
 80011a6:	2401      	movs	r4, #1
 80011a8:	e5ab      	b.n	8000d02 <__aeabi_dadd+0xaa>
 80011aa:	464b      	mov	r3, r9
 80011ac:	0777      	lsls	r7, r6, #29
 80011ae:	08d8      	lsrs	r0, r3, #3
 80011b0:	4307      	orrs	r7, r0
 80011b2:	08f0      	lsrs	r0, r6, #3
 80011b4:	e6b4      	b.n	8000f20 <__aeabi_dadd+0x2c8>
 80011b6:	000f      	movs	r7, r1
 80011b8:	0018      	movs	r0, r3
 80011ba:	3f20      	subs	r7, #32
 80011bc:	40f8      	lsrs	r0, r7
 80011be:	4684      	mov	ip, r0
 80011c0:	2920      	cmp	r1, #32
 80011c2:	d003      	beq.n	80011cc <__aeabi_dadd+0x574>
 80011c4:	2740      	movs	r7, #64	@ 0x40
 80011c6:	1a79      	subs	r1, r7, r1
 80011c8:	408b      	lsls	r3, r1
 80011ca:	431a      	orrs	r2, r3
 80011cc:	1e53      	subs	r3, r2, #1
 80011ce:	419a      	sbcs	r2, r3
 80011d0:	4663      	mov	r3, ip
 80011d2:	0017      	movs	r7, r2
 80011d4:	431f      	orrs	r7, r3
 80011d6:	e635      	b.n	8000e44 <__aeabi_dadd+0x1ec>
 80011d8:	2500      	movs	r5, #0
 80011da:	2400      	movs	r4, #0
 80011dc:	2600      	movs	r6, #0
 80011de:	e684      	b.n	8000eea <__aeabi_dadd+0x292>
 80011e0:	000c      	movs	r4, r1
 80011e2:	0035      	movs	r5, r6
 80011e4:	3c20      	subs	r4, #32
 80011e6:	40e5      	lsrs	r5, r4
 80011e8:	2920      	cmp	r1, #32
 80011ea:	d005      	beq.n	80011f8 <__aeabi_dadd+0x5a0>
 80011ec:	2440      	movs	r4, #64	@ 0x40
 80011ee:	1a61      	subs	r1, r4, r1
 80011f0:	408e      	lsls	r6, r1
 80011f2:	4649      	mov	r1, r9
 80011f4:	4331      	orrs	r1, r6
 80011f6:	4689      	mov	r9, r1
 80011f8:	4648      	mov	r0, r9
 80011fa:	1e41      	subs	r1, r0, #1
 80011fc:	4188      	sbcs	r0, r1
 80011fe:	0007      	movs	r7, r0
 8001200:	432f      	orrs	r7, r5
 8001202:	e5ef      	b.n	8000de4 <__aeabi_dadd+0x18c>
 8001204:	08d2      	lsrs	r2, r2, #3
 8001206:	075f      	lsls	r7, r3, #29
 8001208:	4665      	mov	r5, ip
 800120a:	4317      	orrs	r7, r2
 800120c:	08d8      	lsrs	r0, r3, #3
 800120e:	e687      	b.n	8000f20 <__aeabi_dadd+0x2c8>
 8001210:	1a17      	subs	r7, r2, r0
 8001212:	42ba      	cmp	r2, r7
 8001214:	4192      	sbcs	r2, r2
 8001216:	1b9e      	subs	r6, r3, r6
 8001218:	4252      	negs	r2, r2
 800121a:	1ab6      	subs	r6, r6, r2
 800121c:	0233      	lsls	r3, r6, #8
 800121e:	d4c1      	bmi.n	80011a4 <__aeabi_dadd+0x54c>
 8001220:	0773      	lsls	r3, r6, #29
 8001222:	08ff      	lsrs	r7, r7, #3
 8001224:	4665      	mov	r5, ip
 8001226:	2101      	movs	r1, #1
 8001228:	431f      	orrs	r7, r3
 800122a:	08f0      	lsrs	r0, r6, #3
 800122c:	e64b      	b.n	8000ec6 <__aeabi_dadd+0x26e>
 800122e:	2f00      	cmp	r7, #0
 8001230:	d07b      	beq.n	800132a <__aeabi_dadd+0x6d2>
 8001232:	4665      	mov	r5, ip
 8001234:	001e      	movs	r6, r3
 8001236:	4691      	mov	r9, r2
 8001238:	e63f      	b.n	8000eba <__aeabi_dadd+0x262>
 800123a:	1a81      	subs	r1, r0, r2
 800123c:	4688      	mov	r8, r1
 800123e:	45c1      	cmp	r9, r8
 8001240:	41a4      	sbcs	r4, r4
 8001242:	1af1      	subs	r1, r6, r3
 8001244:	4264      	negs	r4, r4
 8001246:	1b09      	subs	r1, r1, r4
 8001248:	2480      	movs	r4, #128	@ 0x80
 800124a:	0424      	lsls	r4, r4, #16
 800124c:	4221      	tst	r1, r4
 800124e:	d077      	beq.n	8001340 <__aeabi_dadd+0x6e8>
 8001250:	1a10      	subs	r0, r2, r0
 8001252:	4282      	cmp	r2, r0
 8001254:	4192      	sbcs	r2, r2
 8001256:	0007      	movs	r7, r0
 8001258:	1b9e      	subs	r6, r3, r6
 800125a:	4252      	negs	r2, r2
 800125c:	1ab6      	subs	r6, r6, r2
 800125e:	4337      	orrs	r7, r6
 8001260:	d000      	beq.n	8001264 <__aeabi_dadd+0x60c>
 8001262:	e0a0      	b.n	80013a6 <__aeabi_dadd+0x74e>
 8001264:	4665      	mov	r5, ip
 8001266:	2400      	movs	r4, #0
 8001268:	2600      	movs	r6, #0
 800126a:	e63e      	b.n	8000eea <__aeabi_dadd+0x292>
 800126c:	075f      	lsls	r7, r3, #29
 800126e:	08d2      	lsrs	r2, r2, #3
 8001270:	4665      	mov	r5, ip
 8001272:	4317      	orrs	r7, r2
 8001274:	08d8      	lsrs	r0, r3, #3
 8001276:	e653      	b.n	8000f20 <__aeabi_dadd+0x2c8>
 8001278:	1881      	adds	r1, r0, r2
 800127a:	4291      	cmp	r1, r2
 800127c:	4192      	sbcs	r2, r2
 800127e:	18f0      	adds	r0, r6, r3
 8001280:	4252      	negs	r2, r2
 8001282:	1880      	adds	r0, r0, r2
 8001284:	0203      	lsls	r3, r0, #8
 8001286:	d500      	bpl.n	800128a <__aeabi_dadd+0x632>
 8001288:	e768      	b.n	800115c <__aeabi_dadd+0x504>
 800128a:	0747      	lsls	r7, r0, #29
 800128c:	08c9      	lsrs	r1, r1, #3
 800128e:	430f      	orrs	r7, r1
 8001290:	08c0      	lsrs	r0, r0, #3
 8001292:	2101      	movs	r1, #1
 8001294:	e617      	b.n	8000ec6 <__aeabi_dadd+0x26e>
 8001296:	08d2      	lsrs	r2, r2, #3
 8001298:	075f      	lsls	r7, r3, #29
 800129a:	4317      	orrs	r7, r2
 800129c:	08d8      	lsrs	r0, r3, #3
 800129e:	e63f      	b.n	8000f20 <__aeabi_dadd+0x2c8>
 80012a0:	000c      	movs	r4, r1
 80012a2:	2600      	movs	r6, #0
 80012a4:	2700      	movs	r7, #0
 80012a6:	e620      	b.n	8000eea <__aeabi_dadd+0x292>
 80012a8:	2900      	cmp	r1, #0
 80012aa:	d156      	bne.n	800135a <__aeabi_dadd+0x702>
 80012ac:	075f      	lsls	r7, r3, #29
 80012ae:	08d2      	lsrs	r2, r2, #3
 80012b0:	4317      	orrs	r7, r2
 80012b2:	08d8      	lsrs	r0, r3, #3
 80012b4:	e634      	b.n	8000f20 <__aeabi_dadd+0x2c8>
 80012b6:	000c      	movs	r4, r1
 80012b8:	001e      	movs	r6, r3
 80012ba:	08d0      	lsrs	r0, r2, #3
 80012bc:	e629      	b.n	8000f12 <__aeabi_dadd+0x2ba>
 80012be:	08c1      	lsrs	r1, r0, #3
 80012c0:	0770      	lsls	r0, r6, #29
 80012c2:	4301      	orrs	r1, r0
 80012c4:	08f0      	lsrs	r0, r6, #3
 80012c6:	2f00      	cmp	r7, #0
 80012c8:	d062      	beq.n	8001390 <__aeabi_dadd+0x738>
 80012ca:	2480      	movs	r4, #128	@ 0x80
 80012cc:	0324      	lsls	r4, r4, #12
 80012ce:	4220      	tst	r0, r4
 80012d0:	d007      	beq.n	80012e2 <__aeabi_dadd+0x68a>
 80012d2:	08de      	lsrs	r6, r3, #3
 80012d4:	4226      	tst	r6, r4
 80012d6:	d104      	bne.n	80012e2 <__aeabi_dadd+0x68a>
 80012d8:	4665      	mov	r5, ip
 80012da:	0030      	movs	r0, r6
 80012dc:	08d1      	lsrs	r1, r2, #3
 80012de:	075b      	lsls	r3, r3, #29
 80012e0:	4319      	orrs	r1, r3
 80012e2:	0f4f      	lsrs	r7, r1, #29
 80012e4:	00c9      	lsls	r1, r1, #3
 80012e6:	08c9      	lsrs	r1, r1, #3
 80012e8:	077f      	lsls	r7, r7, #29
 80012ea:	430f      	orrs	r7, r1
 80012ec:	e618      	b.n	8000f20 <__aeabi_dadd+0x2c8>
 80012ee:	000c      	movs	r4, r1
 80012f0:	0030      	movs	r0, r6
 80012f2:	3c20      	subs	r4, #32
 80012f4:	40e0      	lsrs	r0, r4
 80012f6:	4684      	mov	ip, r0
 80012f8:	2920      	cmp	r1, #32
 80012fa:	d005      	beq.n	8001308 <__aeabi_dadd+0x6b0>
 80012fc:	2440      	movs	r4, #64	@ 0x40
 80012fe:	1a61      	subs	r1, r4, r1
 8001300:	408e      	lsls	r6, r1
 8001302:	4649      	mov	r1, r9
 8001304:	4331      	orrs	r1, r6
 8001306:	4689      	mov	r9, r1
 8001308:	4648      	mov	r0, r9
 800130a:	1e41      	subs	r1, r0, #1
 800130c:	4188      	sbcs	r0, r1
 800130e:	4661      	mov	r1, ip
 8001310:	0007      	movs	r7, r0
 8001312:	430f      	orrs	r7, r1
 8001314:	e630      	b.n	8000f78 <__aeabi_dadd+0x320>
 8001316:	2120      	movs	r1, #32
 8001318:	2700      	movs	r7, #0
 800131a:	1a09      	subs	r1, r1, r0
 800131c:	e50e      	b.n	8000d3c <__aeabi_dadd+0xe4>
 800131e:	001e      	movs	r6, r3
 8001320:	2f00      	cmp	r7, #0
 8001322:	d000      	beq.n	8001326 <__aeabi_dadd+0x6ce>
 8001324:	e522      	b.n	8000d6c <__aeabi_dadd+0x114>
 8001326:	2400      	movs	r4, #0
 8001328:	e758      	b.n	80011dc <__aeabi_dadd+0x584>
 800132a:	2500      	movs	r5, #0
 800132c:	2400      	movs	r4, #0
 800132e:	2600      	movs	r6, #0
 8001330:	e5db      	b.n	8000eea <__aeabi_dadd+0x292>
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	000007fe 	.word	0x000007fe
 8001338:	000007ff 	.word	0x000007ff
 800133c:	ff7fffff 	.word	0xff7fffff
 8001340:	4647      	mov	r7, r8
 8001342:	430f      	orrs	r7, r1
 8001344:	d100      	bne.n	8001348 <__aeabi_dadd+0x6f0>
 8001346:	e747      	b.n	80011d8 <__aeabi_dadd+0x580>
 8001348:	000e      	movs	r6, r1
 800134a:	46c1      	mov	r9, r8
 800134c:	e5b5      	b.n	8000eba <__aeabi_dadd+0x262>
 800134e:	08df      	lsrs	r7, r3, #3
 8001350:	0764      	lsls	r4, r4, #29
 8001352:	2102      	movs	r1, #2
 8001354:	4327      	orrs	r7, r4
 8001356:	0900      	lsrs	r0, r0, #4
 8001358:	e5b5      	b.n	8000ec6 <__aeabi_dadd+0x26e>
 800135a:	0019      	movs	r1, r3
 800135c:	08c0      	lsrs	r0, r0, #3
 800135e:	0777      	lsls	r7, r6, #29
 8001360:	4307      	orrs	r7, r0
 8001362:	4311      	orrs	r1, r2
 8001364:	08f0      	lsrs	r0, r6, #3
 8001366:	2900      	cmp	r1, #0
 8001368:	d100      	bne.n	800136c <__aeabi_dadd+0x714>
 800136a:	e5d9      	b.n	8000f20 <__aeabi_dadd+0x2c8>
 800136c:	2180      	movs	r1, #128	@ 0x80
 800136e:	0309      	lsls	r1, r1, #12
 8001370:	4208      	tst	r0, r1
 8001372:	d007      	beq.n	8001384 <__aeabi_dadd+0x72c>
 8001374:	08dc      	lsrs	r4, r3, #3
 8001376:	420c      	tst	r4, r1
 8001378:	d104      	bne.n	8001384 <__aeabi_dadd+0x72c>
 800137a:	08d2      	lsrs	r2, r2, #3
 800137c:	075b      	lsls	r3, r3, #29
 800137e:	431a      	orrs	r2, r3
 8001380:	0017      	movs	r7, r2
 8001382:	0020      	movs	r0, r4
 8001384:	0f7b      	lsrs	r3, r7, #29
 8001386:	00ff      	lsls	r7, r7, #3
 8001388:	08ff      	lsrs	r7, r7, #3
 800138a:	075b      	lsls	r3, r3, #29
 800138c:	431f      	orrs	r7, r3
 800138e:	e5c7      	b.n	8000f20 <__aeabi_dadd+0x2c8>
 8001390:	000f      	movs	r7, r1
 8001392:	e5c5      	b.n	8000f20 <__aeabi_dadd+0x2c8>
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <__aeabi_dadd+0x788>)
 8001396:	08d2      	lsrs	r2, r2, #3
 8001398:	4033      	ands	r3, r6
 800139a:	075f      	lsls	r7, r3, #29
 800139c:	025b      	lsls	r3, r3, #9
 800139e:	2401      	movs	r4, #1
 80013a0:	4317      	orrs	r7, r2
 80013a2:	0b1e      	lsrs	r6, r3, #12
 80013a4:	e5a1      	b.n	8000eea <__aeabi_dadd+0x292>
 80013a6:	4226      	tst	r6, r4
 80013a8:	d012      	beq.n	80013d0 <__aeabi_dadd+0x778>
 80013aa:	4b0d      	ldr	r3, [pc, #52]	@ (80013e0 <__aeabi_dadd+0x788>)
 80013ac:	4665      	mov	r5, ip
 80013ae:	0002      	movs	r2, r0
 80013b0:	2401      	movs	r4, #1
 80013b2:	401e      	ands	r6, r3
 80013b4:	e4e6      	b.n	8000d84 <__aeabi_dadd+0x12c>
 80013b6:	0021      	movs	r1, r4
 80013b8:	e585      	b.n	8000ec6 <__aeabi_dadd+0x26e>
 80013ba:	0017      	movs	r7, r2
 80013bc:	e5a8      	b.n	8000f10 <__aeabi_dadd+0x2b8>
 80013be:	003a      	movs	r2, r7
 80013c0:	e4d4      	b.n	8000d6c <__aeabi_dadd+0x114>
 80013c2:	08db      	lsrs	r3, r3, #3
 80013c4:	0764      	lsls	r4, r4, #29
 80013c6:	431c      	orrs	r4, r3
 80013c8:	0027      	movs	r7, r4
 80013ca:	2102      	movs	r1, #2
 80013cc:	0900      	lsrs	r0, r0, #4
 80013ce:	e57a      	b.n	8000ec6 <__aeabi_dadd+0x26e>
 80013d0:	08c0      	lsrs	r0, r0, #3
 80013d2:	0777      	lsls	r7, r6, #29
 80013d4:	4307      	orrs	r7, r0
 80013d6:	4665      	mov	r5, ip
 80013d8:	2100      	movs	r1, #0
 80013da:	08f0      	lsrs	r0, r6, #3
 80013dc:	e573      	b.n	8000ec6 <__aeabi_dadd+0x26e>
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	ff7fffff 	.word	0xff7fffff

080013e4 <__eqdf2>:
 80013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e6:	4657      	mov	r7, sl
 80013e8:	46de      	mov	lr, fp
 80013ea:	464e      	mov	r6, r9
 80013ec:	4645      	mov	r5, r8
 80013ee:	b5e0      	push	{r5, r6, r7, lr}
 80013f0:	000d      	movs	r5, r1
 80013f2:	0004      	movs	r4, r0
 80013f4:	0fe8      	lsrs	r0, r5, #31
 80013f6:	4683      	mov	fp, r0
 80013f8:	0309      	lsls	r1, r1, #12
 80013fa:	0fd8      	lsrs	r0, r3, #31
 80013fc:	0b09      	lsrs	r1, r1, #12
 80013fe:	4682      	mov	sl, r0
 8001400:	4819      	ldr	r0, [pc, #100]	@ (8001468 <__eqdf2+0x84>)
 8001402:	468c      	mov	ip, r1
 8001404:	031f      	lsls	r7, r3, #12
 8001406:	0069      	lsls	r1, r5, #1
 8001408:	005e      	lsls	r6, r3, #1
 800140a:	0d49      	lsrs	r1, r1, #21
 800140c:	0b3f      	lsrs	r7, r7, #12
 800140e:	0d76      	lsrs	r6, r6, #21
 8001410:	4281      	cmp	r1, r0
 8001412:	d018      	beq.n	8001446 <__eqdf2+0x62>
 8001414:	4286      	cmp	r6, r0
 8001416:	d00f      	beq.n	8001438 <__eqdf2+0x54>
 8001418:	2001      	movs	r0, #1
 800141a:	42b1      	cmp	r1, r6
 800141c:	d10d      	bne.n	800143a <__eqdf2+0x56>
 800141e:	45bc      	cmp	ip, r7
 8001420:	d10b      	bne.n	800143a <__eqdf2+0x56>
 8001422:	4294      	cmp	r4, r2
 8001424:	d109      	bne.n	800143a <__eqdf2+0x56>
 8001426:	45d3      	cmp	fp, sl
 8001428:	d01c      	beq.n	8001464 <__eqdf2+0x80>
 800142a:	2900      	cmp	r1, #0
 800142c:	d105      	bne.n	800143a <__eqdf2+0x56>
 800142e:	4660      	mov	r0, ip
 8001430:	4320      	orrs	r0, r4
 8001432:	1e43      	subs	r3, r0, #1
 8001434:	4198      	sbcs	r0, r3
 8001436:	e000      	b.n	800143a <__eqdf2+0x56>
 8001438:	2001      	movs	r0, #1
 800143a:	bcf0      	pop	{r4, r5, r6, r7}
 800143c:	46bb      	mov	fp, r7
 800143e:	46b2      	mov	sl, r6
 8001440:	46a9      	mov	r9, r5
 8001442:	46a0      	mov	r8, r4
 8001444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001446:	2001      	movs	r0, #1
 8001448:	428e      	cmp	r6, r1
 800144a:	d1f6      	bne.n	800143a <__eqdf2+0x56>
 800144c:	4661      	mov	r1, ip
 800144e:	4339      	orrs	r1, r7
 8001450:	000f      	movs	r7, r1
 8001452:	4317      	orrs	r7, r2
 8001454:	4327      	orrs	r7, r4
 8001456:	d1f0      	bne.n	800143a <__eqdf2+0x56>
 8001458:	465b      	mov	r3, fp
 800145a:	4652      	mov	r2, sl
 800145c:	1a98      	subs	r0, r3, r2
 800145e:	1e43      	subs	r3, r0, #1
 8001460:	4198      	sbcs	r0, r3
 8001462:	e7ea      	b.n	800143a <__eqdf2+0x56>
 8001464:	2000      	movs	r0, #0
 8001466:	e7e8      	b.n	800143a <__eqdf2+0x56>
 8001468:	000007ff 	.word	0x000007ff

0800146c <__gedf2>:
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	4657      	mov	r7, sl
 8001470:	464e      	mov	r6, r9
 8001472:	4645      	mov	r5, r8
 8001474:	46de      	mov	lr, fp
 8001476:	b5e0      	push	{r5, r6, r7, lr}
 8001478:	000d      	movs	r5, r1
 800147a:	030e      	lsls	r6, r1, #12
 800147c:	0049      	lsls	r1, r1, #1
 800147e:	0d49      	lsrs	r1, r1, #21
 8001480:	468a      	mov	sl, r1
 8001482:	0fdf      	lsrs	r7, r3, #31
 8001484:	0fe9      	lsrs	r1, r5, #31
 8001486:	46bc      	mov	ip, r7
 8001488:	b083      	sub	sp, #12
 800148a:	4f2f      	ldr	r7, [pc, #188]	@ (8001548 <__gedf2+0xdc>)
 800148c:	0004      	movs	r4, r0
 800148e:	4680      	mov	r8, r0
 8001490:	9101      	str	r1, [sp, #4]
 8001492:	0058      	lsls	r0, r3, #1
 8001494:	0319      	lsls	r1, r3, #12
 8001496:	4691      	mov	r9, r2
 8001498:	0b36      	lsrs	r6, r6, #12
 800149a:	0b09      	lsrs	r1, r1, #12
 800149c:	0d40      	lsrs	r0, r0, #21
 800149e:	45ba      	cmp	sl, r7
 80014a0:	d01d      	beq.n	80014de <__gedf2+0x72>
 80014a2:	42b8      	cmp	r0, r7
 80014a4:	d00d      	beq.n	80014c2 <__gedf2+0x56>
 80014a6:	4657      	mov	r7, sl
 80014a8:	2f00      	cmp	r7, #0
 80014aa:	d12a      	bne.n	8001502 <__gedf2+0x96>
 80014ac:	4334      	orrs	r4, r6
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d124      	bne.n	80014fc <__gedf2+0x90>
 80014b2:	430a      	orrs	r2, r1
 80014b4:	d036      	beq.n	8001524 <__gedf2+0xb8>
 80014b6:	2c00      	cmp	r4, #0
 80014b8:	d141      	bne.n	800153e <__gedf2+0xd2>
 80014ba:	4663      	mov	r3, ip
 80014bc:	0058      	lsls	r0, r3, #1
 80014be:	3801      	subs	r0, #1
 80014c0:	e015      	b.n	80014ee <__gedf2+0x82>
 80014c2:	4311      	orrs	r1, r2
 80014c4:	d138      	bne.n	8001538 <__gedf2+0xcc>
 80014c6:	4653      	mov	r3, sl
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <__gedf2+0x64>
 80014cc:	4326      	orrs	r6, r4
 80014ce:	d0f4      	beq.n	80014ba <__gedf2+0x4e>
 80014d0:	9b01      	ldr	r3, [sp, #4]
 80014d2:	4563      	cmp	r3, ip
 80014d4:	d107      	bne.n	80014e6 <__gedf2+0x7a>
 80014d6:	9b01      	ldr	r3, [sp, #4]
 80014d8:	0058      	lsls	r0, r3, #1
 80014da:	3801      	subs	r0, #1
 80014dc:	e007      	b.n	80014ee <__gedf2+0x82>
 80014de:	4326      	orrs	r6, r4
 80014e0:	d12a      	bne.n	8001538 <__gedf2+0xcc>
 80014e2:	4550      	cmp	r0, sl
 80014e4:	d021      	beq.n	800152a <__gedf2+0xbe>
 80014e6:	2001      	movs	r0, #1
 80014e8:	9b01      	ldr	r3, [sp, #4]
 80014ea:	425f      	negs	r7, r3
 80014ec:	4338      	orrs	r0, r7
 80014ee:	b003      	add	sp, #12
 80014f0:	bcf0      	pop	{r4, r5, r6, r7}
 80014f2:	46bb      	mov	fp, r7
 80014f4:	46b2      	mov	sl, r6
 80014f6:	46a9      	mov	r9, r5
 80014f8:	46a0      	mov	r8, r4
 80014fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fc:	2c00      	cmp	r4, #0
 80014fe:	d0dc      	beq.n	80014ba <__gedf2+0x4e>
 8001500:	e7e6      	b.n	80014d0 <__gedf2+0x64>
 8001502:	2800      	cmp	r0, #0
 8001504:	d0ef      	beq.n	80014e6 <__gedf2+0x7a>
 8001506:	9b01      	ldr	r3, [sp, #4]
 8001508:	4563      	cmp	r3, ip
 800150a:	d1ec      	bne.n	80014e6 <__gedf2+0x7a>
 800150c:	4582      	cmp	sl, r0
 800150e:	dcea      	bgt.n	80014e6 <__gedf2+0x7a>
 8001510:	dbe1      	blt.n	80014d6 <__gedf2+0x6a>
 8001512:	428e      	cmp	r6, r1
 8001514:	d8e7      	bhi.n	80014e6 <__gedf2+0x7a>
 8001516:	d1de      	bne.n	80014d6 <__gedf2+0x6a>
 8001518:	45c8      	cmp	r8, r9
 800151a:	d8e4      	bhi.n	80014e6 <__gedf2+0x7a>
 800151c:	2000      	movs	r0, #0
 800151e:	45c8      	cmp	r8, r9
 8001520:	d2e5      	bcs.n	80014ee <__gedf2+0x82>
 8001522:	e7d8      	b.n	80014d6 <__gedf2+0x6a>
 8001524:	2c00      	cmp	r4, #0
 8001526:	d0e2      	beq.n	80014ee <__gedf2+0x82>
 8001528:	e7dd      	b.n	80014e6 <__gedf2+0x7a>
 800152a:	4311      	orrs	r1, r2
 800152c:	d104      	bne.n	8001538 <__gedf2+0xcc>
 800152e:	9b01      	ldr	r3, [sp, #4]
 8001530:	4563      	cmp	r3, ip
 8001532:	d1d8      	bne.n	80014e6 <__gedf2+0x7a>
 8001534:	2000      	movs	r0, #0
 8001536:	e7da      	b.n	80014ee <__gedf2+0x82>
 8001538:	2002      	movs	r0, #2
 800153a:	4240      	negs	r0, r0
 800153c:	e7d7      	b.n	80014ee <__gedf2+0x82>
 800153e:	9b01      	ldr	r3, [sp, #4]
 8001540:	4563      	cmp	r3, ip
 8001542:	d0e6      	beq.n	8001512 <__gedf2+0xa6>
 8001544:	e7cf      	b.n	80014e6 <__gedf2+0x7a>
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	000007ff 	.word	0x000007ff

0800154c <__ledf2>:
 800154c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154e:	4657      	mov	r7, sl
 8001550:	464e      	mov	r6, r9
 8001552:	4645      	mov	r5, r8
 8001554:	46de      	mov	lr, fp
 8001556:	b5e0      	push	{r5, r6, r7, lr}
 8001558:	000d      	movs	r5, r1
 800155a:	030e      	lsls	r6, r1, #12
 800155c:	0049      	lsls	r1, r1, #1
 800155e:	0d49      	lsrs	r1, r1, #21
 8001560:	468a      	mov	sl, r1
 8001562:	0fdf      	lsrs	r7, r3, #31
 8001564:	0fe9      	lsrs	r1, r5, #31
 8001566:	46bc      	mov	ip, r7
 8001568:	b083      	sub	sp, #12
 800156a:	4f2e      	ldr	r7, [pc, #184]	@ (8001624 <__ledf2+0xd8>)
 800156c:	0004      	movs	r4, r0
 800156e:	4680      	mov	r8, r0
 8001570:	9101      	str	r1, [sp, #4]
 8001572:	0058      	lsls	r0, r3, #1
 8001574:	0319      	lsls	r1, r3, #12
 8001576:	4691      	mov	r9, r2
 8001578:	0b36      	lsrs	r6, r6, #12
 800157a:	0b09      	lsrs	r1, r1, #12
 800157c:	0d40      	lsrs	r0, r0, #21
 800157e:	45ba      	cmp	sl, r7
 8001580:	d01e      	beq.n	80015c0 <__ledf2+0x74>
 8001582:	42b8      	cmp	r0, r7
 8001584:	d00d      	beq.n	80015a2 <__ledf2+0x56>
 8001586:	4657      	mov	r7, sl
 8001588:	2f00      	cmp	r7, #0
 800158a:	d127      	bne.n	80015dc <__ledf2+0x90>
 800158c:	4334      	orrs	r4, r6
 800158e:	2800      	cmp	r0, #0
 8001590:	d133      	bne.n	80015fa <__ledf2+0xae>
 8001592:	430a      	orrs	r2, r1
 8001594:	d034      	beq.n	8001600 <__ledf2+0xb4>
 8001596:	2c00      	cmp	r4, #0
 8001598:	d140      	bne.n	800161c <__ledf2+0xd0>
 800159a:	4663      	mov	r3, ip
 800159c:	0058      	lsls	r0, r3, #1
 800159e:	3801      	subs	r0, #1
 80015a0:	e015      	b.n	80015ce <__ledf2+0x82>
 80015a2:	4311      	orrs	r1, r2
 80015a4:	d112      	bne.n	80015cc <__ledf2+0x80>
 80015a6:	4653      	mov	r3, sl
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <__ledf2+0x64>
 80015ac:	4326      	orrs	r6, r4
 80015ae:	d0f4      	beq.n	800159a <__ledf2+0x4e>
 80015b0:	9b01      	ldr	r3, [sp, #4]
 80015b2:	4563      	cmp	r3, ip
 80015b4:	d01d      	beq.n	80015f2 <__ledf2+0xa6>
 80015b6:	2001      	movs	r0, #1
 80015b8:	9b01      	ldr	r3, [sp, #4]
 80015ba:	425f      	negs	r7, r3
 80015bc:	4338      	orrs	r0, r7
 80015be:	e006      	b.n	80015ce <__ledf2+0x82>
 80015c0:	4326      	orrs	r6, r4
 80015c2:	d103      	bne.n	80015cc <__ledf2+0x80>
 80015c4:	4550      	cmp	r0, sl
 80015c6:	d1f6      	bne.n	80015b6 <__ledf2+0x6a>
 80015c8:	4311      	orrs	r1, r2
 80015ca:	d01c      	beq.n	8001606 <__ledf2+0xba>
 80015cc:	2002      	movs	r0, #2
 80015ce:	b003      	add	sp, #12
 80015d0:	bcf0      	pop	{r4, r5, r6, r7}
 80015d2:	46bb      	mov	fp, r7
 80015d4:	46b2      	mov	sl, r6
 80015d6:	46a9      	mov	r9, r5
 80015d8:	46a0      	mov	r8, r4
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015dc:	2800      	cmp	r0, #0
 80015de:	d0ea      	beq.n	80015b6 <__ledf2+0x6a>
 80015e0:	9b01      	ldr	r3, [sp, #4]
 80015e2:	4563      	cmp	r3, ip
 80015e4:	d1e7      	bne.n	80015b6 <__ledf2+0x6a>
 80015e6:	4582      	cmp	sl, r0
 80015e8:	dce5      	bgt.n	80015b6 <__ledf2+0x6a>
 80015ea:	db02      	blt.n	80015f2 <__ledf2+0xa6>
 80015ec:	428e      	cmp	r6, r1
 80015ee:	d8e2      	bhi.n	80015b6 <__ledf2+0x6a>
 80015f0:	d00e      	beq.n	8001610 <__ledf2+0xc4>
 80015f2:	9b01      	ldr	r3, [sp, #4]
 80015f4:	0058      	lsls	r0, r3, #1
 80015f6:	3801      	subs	r0, #1
 80015f8:	e7e9      	b.n	80015ce <__ledf2+0x82>
 80015fa:	2c00      	cmp	r4, #0
 80015fc:	d0cd      	beq.n	800159a <__ledf2+0x4e>
 80015fe:	e7d7      	b.n	80015b0 <__ledf2+0x64>
 8001600:	2c00      	cmp	r4, #0
 8001602:	d0e4      	beq.n	80015ce <__ledf2+0x82>
 8001604:	e7d7      	b.n	80015b6 <__ledf2+0x6a>
 8001606:	9b01      	ldr	r3, [sp, #4]
 8001608:	2000      	movs	r0, #0
 800160a:	4563      	cmp	r3, ip
 800160c:	d0df      	beq.n	80015ce <__ledf2+0x82>
 800160e:	e7d2      	b.n	80015b6 <__ledf2+0x6a>
 8001610:	45c8      	cmp	r8, r9
 8001612:	d8d0      	bhi.n	80015b6 <__ledf2+0x6a>
 8001614:	2000      	movs	r0, #0
 8001616:	45c8      	cmp	r8, r9
 8001618:	d2d9      	bcs.n	80015ce <__ledf2+0x82>
 800161a:	e7ea      	b.n	80015f2 <__ledf2+0xa6>
 800161c:	9b01      	ldr	r3, [sp, #4]
 800161e:	4563      	cmp	r3, ip
 8001620:	d0e4      	beq.n	80015ec <__ledf2+0xa0>
 8001622:	e7c8      	b.n	80015b6 <__ledf2+0x6a>
 8001624:	000007ff 	.word	0x000007ff

08001628 <__aeabi_d2iz>:
 8001628:	000b      	movs	r3, r1
 800162a:	0002      	movs	r2, r0
 800162c:	b570      	push	{r4, r5, r6, lr}
 800162e:	4d16      	ldr	r5, [pc, #88]	@ (8001688 <__aeabi_d2iz+0x60>)
 8001630:	030c      	lsls	r4, r1, #12
 8001632:	b082      	sub	sp, #8
 8001634:	0049      	lsls	r1, r1, #1
 8001636:	2000      	movs	r0, #0
 8001638:	9200      	str	r2, [sp, #0]
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	0b24      	lsrs	r4, r4, #12
 800163e:	0d49      	lsrs	r1, r1, #21
 8001640:	0fde      	lsrs	r6, r3, #31
 8001642:	42a9      	cmp	r1, r5
 8001644:	dd04      	ble.n	8001650 <__aeabi_d2iz+0x28>
 8001646:	4811      	ldr	r0, [pc, #68]	@ (800168c <__aeabi_d2iz+0x64>)
 8001648:	4281      	cmp	r1, r0
 800164a:	dd03      	ble.n	8001654 <__aeabi_d2iz+0x2c>
 800164c:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <__aeabi_d2iz+0x68>)
 800164e:	18f0      	adds	r0, r6, r3
 8001650:	b002      	add	sp, #8
 8001652:	bd70      	pop	{r4, r5, r6, pc}
 8001654:	2080      	movs	r0, #128	@ 0x80
 8001656:	0340      	lsls	r0, r0, #13
 8001658:	4320      	orrs	r0, r4
 800165a:	4c0e      	ldr	r4, [pc, #56]	@ (8001694 <__aeabi_d2iz+0x6c>)
 800165c:	1a64      	subs	r4, r4, r1
 800165e:	2c1f      	cmp	r4, #31
 8001660:	dd08      	ble.n	8001674 <__aeabi_d2iz+0x4c>
 8001662:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <__aeabi_d2iz+0x70>)
 8001664:	1a5b      	subs	r3, r3, r1
 8001666:	40d8      	lsrs	r0, r3
 8001668:	0003      	movs	r3, r0
 800166a:	4258      	negs	r0, r3
 800166c:	2e00      	cmp	r6, #0
 800166e:	d1ef      	bne.n	8001650 <__aeabi_d2iz+0x28>
 8001670:	0018      	movs	r0, r3
 8001672:	e7ed      	b.n	8001650 <__aeabi_d2iz+0x28>
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <__aeabi_d2iz+0x74>)
 8001676:	9a00      	ldr	r2, [sp, #0]
 8001678:	469c      	mov	ip, r3
 800167a:	0003      	movs	r3, r0
 800167c:	4461      	add	r1, ip
 800167e:	408b      	lsls	r3, r1
 8001680:	40e2      	lsrs	r2, r4
 8001682:	4313      	orrs	r3, r2
 8001684:	e7f1      	b.n	800166a <__aeabi_d2iz+0x42>
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	000003fe 	.word	0x000003fe
 800168c:	0000041d 	.word	0x0000041d
 8001690:	7fffffff 	.word	0x7fffffff
 8001694:	00000433 	.word	0x00000433
 8001698:	00000413 	.word	0x00000413
 800169c:	fffffbed 	.word	0xfffffbed

080016a0 <__aeabi_f2d>:
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	0242      	lsls	r2, r0, #9
 80016a4:	0043      	lsls	r3, r0, #1
 80016a6:	0fc4      	lsrs	r4, r0, #31
 80016a8:	20fe      	movs	r0, #254	@ 0xfe
 80016aa:	0e1b      	lsrs	r3, r3, #24
 80016ac:	1c59      	adds	r1, r3, #1
 80016ae:	0a55      	lsrs	r5, r2, #9
 80016b0:	4208      	tst	r0, r1
 80016b2:	d00c      	beq.n	80016ce <__aeabi_f2d+0x2e>
 80016b4:	21e0      	movs	r1, #224	@ 0xe0
 80016b6:	0089      	lsls	r1, r1, #2
 80016b8:	468c      	mov	ip, r1
 80016ba:	076d      	lsls	r5, r5, #29
 80016bc:	0b12      	lsrs	r2, r2, #12
 80016be:	4463      	add	r3, ip
 80016c0:	051b      	lsls	r3, r3, #20
 80016c2:	4313      	orrs	r3, r2
 80016c4:	07e4      	lsls	r4, r4, #31
 80016c6:	4323      	orrs	r3, r4
 80016c8:	0028      	movs	r0, r5
 80016ca:	0019      	movs	r1, r3
 80016cc:	bd70      	pop	{r4, r5, r6, pc}
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d114      	bne.n	80016fc <__aeabi_f2d+0x5c>
 80016d2:	2d00      	cmp	r5, #0
 80016d4:	d01b      	beq.n	800170e <__aeabi_f2d+0x6e>
 80016d6:	0028      	movs	r0, r5
 80016d8:	f000 f82a 	bl	8001730 <__clzsi2>
 80016dc:	280a      	cmp	r0, #10
 80016de:	dc1c      	bgt.n	800171a <__aeabi_f2d+0x7a>
 80016e0:	230b      	movs	r3, #11
 80016e2:	002a      	movs	r2, r5
 80016e4:	1a1b      	subs	r3, r3, r0
 80016e6:	40da      	lsrs	r2, r3
 80016e8:	0003      	movs	r3, r0
 80016ea:	3315      	adds	r3, #21
 80016ec:	409d      	lsls	r5, r3
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <__aeabi_f2d+0x88>)
 80016f0:	0312      	lsls	r2, r2, #12
 80016f2:	1a1b      	subs	r3, r3, r0
 80016f4:	055b      	lsls	r3, r3, #21
 80016f6:	0b12      	lsrs	r2, r2, #12
 80016f8:	0d5b      	lsrs	r3, r3, #21
 80016fa:	e7e1      	b.n	80016c0 <__aeabi_f2d+0x20>
 80016fc:	2d00      	cmp	r5, #0
 80016fe:	d009      	beq.n	8001714 <__aeabi_f2d+0x74>
 8001700:	0b13      	lsrs	r3, r2, #12
 8001702:	2280      	movs	r2, #128	@ 0x80
 8001704:	0312      	lsls	r2, r2, #12
 8001706:	431a      	orrs	r2, r3
 8001708:	076d      	lsls	r5, r5, #29
 800170a:	4b08      	ldr	r3, [pc, #32]	@ (800172c <__aeabi_f2d+0x8c>)
 800170c:	e7d8      	b.n	80016c0 <__aeabi_f2d+0x20>
 800170e:	2300      	movs	r3, #0
 8001710:	2200      	movs	r2, #0
 8001712:	e7d5      	b.n	80016c0 <__aeabi_f2d+0x20>
 8001714:	2200      	movs	r2, #0
 8001716:	4b05      	ldr	r3, [pc, #20]	@ (800172c <__aeabi_f2d+0x8c>)
 8001718:	e7d2      	b.n	80016c0 <__aeabi_f2d+0x20>
 800171a:	0003      	movs	r3, r0
 800171c:	002a      	movs	r2, r5
 800171e:	3b0b      	subs	r3, #11
 8001720:	409a      	lsls	r2, r3
 8001722:	2500      	movs	r5, #0
 8001724:	e7e3      	b.n	80016ee <__aeabi_f2d+0x4e>
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	00000389 	.word	0x00000389
 800172c:	000007ff 	.word	0x000007ff

08001730 <__clzsi2>:
 8001730:	211c      	movs	r1, #28
 8001732:	2301      	movs	r3, #1
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	4298      	cmp	r0, r3
 8001738:	d301      	bcc.n	800173e <__clzsi2+0xe>
 800173a:	0c00      	lsrs	r0, r0, #16
 800173c:	3910      	subs	r1, #16
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	4298      	cmp	r0, r3
 8001742:	d301      	bcc.n	8001748 <__clzsi2+0x18>
 8001744:	0a00      	lsrs	r0, r0, #8
 8001746:	3908      	subs	r1, #8
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	4298      	cmp	r0, r3
 800174c:	d301      	bcc.n	8001752 <__clzsi2+0x22>
 800174e:	0900      	lsrs	r0, r0, #4
 8001750:	3904      	subs	r1, #4
 8001752:	a202      	add	r2, pc, #8	@ (adr r2, 800175c <__clzsi2+0x2c>)
 8001754:	5c10      	ldrb	r0, [r2, r0]
 8001756:	1840      	adds	r0, r0, r1
 8001758:	4770      	bx	lr
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	02020304 	.word	0x02020304
 8001760:	01010101 	.word	0x01010101
	...

0800176c <__clzdi2>:
 800176c:	b510      	push	{r4, lr}
 800176e:	2900      	cmp	r1, #0
 8001770:	d103      	bne.n	800177a <__clzdi2+0xe>
 8001772:	f7ff ffdd 	bl	8001730 <__clzsi2>
 8001776:	3020      	adds	r0, #32
 8001778:	e002      	b.n	8001780 <__clzdi2+0x14>
 800177a:	0008      	movs	r0, r1
 800177c:	f7ff ffd8 	bl	8001730 <__clzsi2>
 8001780:	bd10      	pop	{r4, pc}
 8001782:	46c0      	nop			@ (mov r8, r8)

08001784 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001784:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */
  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001786:	f000 ff3f 	bl	8002608 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800178a:	f000 f947 	bl	8001a1c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800178e:	bd10      	pop	{r4, pc}

08001790 <MX_LoRaWAN_Process>:
void MX_LoRaWAN_Process(void)
{
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001790:	2001      	movs	r0, #1
{
 8001792:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001794:	4240      	negs	r0, r0
 8001796:	f00c fb99 	bl	800decc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800179a:	bd10      	pop	{r4, pc}

0800179c <OnTxTimerEvent>:
  }

  /* USER CODE END SendTxData_1 */
}
static void OnTxTimerEvent(void *context)
{
 800179c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800179e:	2100      	movs	r1, #0
 80017a0:	2002      	movs	r0, #2
 80017a2:	f00c fb5f 	bl	800de64 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 80017a6:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <OnTxTimerEvent+0x14>)
 80017a8:	f00c fd9e 	bl	800e2e8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 80017ac:	bd10      	pop	{r4, pc}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	20000120 	.word	0x20000120

080017b4 <OnMacProcessNotify>:
  }
  /* USER CODE END OnJoinRequest_1 */
}

static void OnMacProcessNotify(void)
{
 80017b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80017b6:	2100      	movs	r1, #0
 80017b8:	2001      	movs	r0, #1
 80017ba:	f00c fb53 	bl	800de64 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 80017be:	bd10      	pop	{r4, pc}

080017c0 <OnRxData>:
{
 80017c0:	b530      	push	{r4, r5, lr}
 80017c2:	0004      	movs	r4, r0
 80017c4:	000d      	movs	r5, r1
 80017c6:	b087      	sub	sp, #28
  if ((appData != NULL) || (params != NULL))
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d101      	bne.n	80017d0 <OnRxData+0x10>
 80017cc:	2900      	cmp	r1, #0
 80017ce:	d036      	beq.n	800183e <OnRxData+0x7e>
    LED_On(LED_BLUE);
 80017d0:	2002      	movs	r0, #2
 80017d2:	f001 fa11 	bl	8002bf8 <BSP_LED_On>
    UTIL_TIMER_Start(&RxLedTimer);
 80017d6:	4829      	ldr	r0, [pc, #164]	@ (800187c <OnRxData+0xbc>)
 80017d8:	f00c fd86 	bl	800e2e8 <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 80017dc:	2200      	movs	r2, #0
 80017de:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <OnRxData+0xc0>)
 80017e0:	0011      	movs	r1, r2
 80017e2:	2002      	movs	r0, #2
 80017e4:	f00c fa14 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 80017e8:	2204      	movs	r2, #4
 80017ea:	56aa      	ldrsb	r2, [r5, r2]
 80017ec:	210c      	movs	r1, #12
 80017ee:	9205      	str	r2, [sp, #20]
 80017f0:	2203      	movs	r2, #3
 80017f2:	56aa      	ldrsb	r2, [r5, r2]
 80017f4:	4b23      	ldr	r3, [pc, #140]	@ (8001884 <OnRxData+0xc4>)
 80017f6:	9204      	str	r2, [sp, #16]
 80017f8:	2202      	movs	r2, #2
 80017fa:	56aa      	ldrsb	r2, [r5, r2]
 80017fc:	2003      	movs	r0, #3
 80017fe:	9203      	str	r2, [sp, #12]
 8001800:	7822      	ldrb	r2, [r4, #0]
 8001802:	9202      	str	r2, [sp, #8]
 8001804:	5669      	ldrsb	r1, [r5, r1]
 8001806:	4a20      	ldr	r2, [pc, #128]	@ (8001888 <OnRxData+0xc8>)
 8001808:	0089      	lsls	r1, r1, #2
 800180a:	588a      	ldr	r2, [r1, r2]
 800180c:	9201      	str	r2, [sp, #4]
 800180e:	68aa      	ldr	r2, [r5, #8]
 8001810:	9200      	str	r2, [sp, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	0011      	movs	r1, r2
 8001816:	f00c f9fb 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 800181a:	7823      	ldrb	r3, [r4, #0]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d010      	beq.n	8001842 <OnRxData+0x82>
 8001820:	2b03      	cmp	r3, #3
 8001822:	d10c      	bne.n	800183e <OnRxData+0x7e>
        if (appData->BufferSize == 1)
 8001824:	7863      	ldrb	r3, [r4, #1]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d109      	bne.n	800183e <OnRxData+0x7e>
          switch (appData->Buffer[0])
 800182a:	6863      	ldr	r3, [r4, #4]
 800182c:	7818      	ldrb	r0, [r3, #0]
 800182e:	2801      	cmp	r0, #1
 8001830:	d003      	beq.n	800183a <OnRxData+0x7a>
 8001832:	2802      	cmp	r0, #2
 8001834:	d001      	beq.n	800183a <OnRxData+0x7a>
 8001836:	2800      	cmp	r0, #0
 8001838:	d101      	bne.n	800183e <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_C);
 800183a:	f005 fc2f 	bl	800709c <LmHandlerRequestClass>
}
 800183e:	b007      	add	sp, #28
 8001840:	bd30      	pop	{r4, r5, pc}
        if (appData->BufferSize == 1)
 8001842:	7865      	ldrb	r5, [r4, #1]
 8001844:	2d01      	cmp	r5, #1
 8001846:	d1fa      	bne.n	800183e <OnRxData+0x7e>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8001848:	6863      	ldr	r3, [r4, #4]
 800184a:	781b      	ldrb	r3, [r3, #0]
          if (AppLedStateOn == RESET)
 800184c:	0019      	movs	r1, r3
 800184e:	4029      	ands	r1, r5
 8001850:	422b      	tst	r3, r5
 8001852:	d108      	bne.n	8001866 <OnRxData+0xa6>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8001854:	000a      	movs	r2, r1
 8001856:	4b0d      	ldr	r3, [pc, #52]	@ (800188c <OnRxData+0xcc>)
 8001858:	2003      	movs	r0, #3
 800185a:	f00c f9d9 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
            LED_Off(LED_RED1);
 800185e:	0028      	movs	r0, r5
 8001860:	f001 f9da 	bl	8002c18 <BSP_LED_Off>
 8001864:	e7eb      	b.n	800183e <OnRxData+0x7e>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8001866:	2200      	movs	r2, #0
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <OnRxData+0xd0>)
 800186a:	0011      	movs	r1, r2
 800186c:	2003      	movs	r0, #3
 800186e:	f00c f9cf 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 8001872:	0028      	movs	r0, r5
 8001874:	f001 f9c0 	bl	8002bf8 <BSP_LED_On>
}
 8001878:	e7e1      	b.n	800183e <OnRxData+0x7e>
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	20000138 	.word	0x20000138
 8001880:	0800ee74 	.word	0x0800ee74
 8001884:	0800eea5 	.word	0x0800eea5
 8001888:	0800e804 	.word	0x0800e804
 800188c:	0800eeec 	.word	0x0800eeec
 8001890:	0800eef6 	.word	0x0800eef6

08001894 <OnRxTimerLedEvent>:
{
 8001894:	b510      	push	{r4, lr}
  LED_Off(LED_BLUE) ;
 8001896:	2002      	movs	r0, #2
 8001898:	f001 f9be 	bl	8002c18 <BSP_LED_Off>
}
 800189c:	bd10      	pop	{r4, pc}

0800189e <OnTxTimerLedEvent>:
{
 800189e:	b510      	push	{r4, lr}
  LED_Off(LED_RED2);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f001 f9b9 	bl	8002c18 <BSP_LED_Off>
}
 80018a6:	bd10      	pop	{r4, pc}

080018a8 <SendTxData>:
{
 80018a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  AppData.Port = 2; // Porta padrão para dados customizados
 80018aa:	2302      	movs	r3, #2
  UTIL_TIMER_Time_t nextTxIn = 0;
 80018ac:	2500      	movs	r5, #0
  AppData.BufferSize = 1;   // Apenas 1 byte
 80018ae:	2401      	movs	r4, #1
  AppData.Port = 2; // Porta padrão para dados customizados
 80018b0:	4814      	ldr	r0, [pc, #80]	@ (8001904 <SendTxData+0x5c>)
  AppData.Buffer[0] = spi_rx_buffer;//test; // Armazena o valor no buffer
 80018b2:	4a15      	ldr	r2, [pc, #84]	@ (8001908 <SendTxData+0x60>)
  AppData.Port = 2; // Porta padrão para dados customizados
 80018b4:	7003      	strb	r3, [r0, #0]
  AppData.Buffer[0] = spi_rx_buffer;//test; // Armazena o valor no buffer
 80018b6:	7812      	ldrb	r2, [r2, #0]
 80018b8:	6843      	ldr	r3, [r0, #4]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 80018ba:	0029      	movs	r1, r5
  UTIL_TIMER_Time_t nextTxIn = 0;
 80018bc:	9503      	str	r5, [sp, #12]
  AppData.Buffer[0] = spi_rx_buffer;//test; // Armazena o valor no buffer
 80018be:	701a      	strb	r2, [r3, #0]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 80018c0:	002b      	movs	r3, r5
 80018c2:	aa03      	add	r2, sp, #12
  AppData.BufferSize = 1;   // Apenas 1 byte
 80018c4:	7044      	strb	r4, [r0, #1]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 80018c6:	f005 fc7f 	bl	80071c8 <LmHandlerSend>
 80018ca:	0001      	movs	r1, r0
 80018cc:	42a8      	cmp	r0, r5
 80018ce:	d108      	bne.n	80018e2 <SendTxData+0x3a>
    APP_LOG(TS_ON, VLEVEL_L, "TESTE ENVIADO: %d (0x%02X)\r\n", test, test);
 80018d0:	227b      	movs	r2, #123	@ 0x7b
 80018d2:	0020      	movs	r0, r4
 80018d4:	9201      	str	r2, [sp, #4]
 80018d6:	9200      	str	r2, [sp, #0]
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <SendTxData+0x64>)
 80018da:	0022      	movs	r2, r4
 80018dc:	f00c f998 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
}
 80018e0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
  else if (nextTxIn > 0)
 80018e2:	9803      	ldr	r0, [sp, #12]
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d0fb      	beq.n	80018e0 <SendTxData+0x38>
    APP_LOG(TS_ON, VLEVEL_L, "Próximo envio em: ~%d segundos\r\n", (nextTxIn / 1000));
 80018e8:	21fa      	movs	r1, #250	@ 0xfa
 80018ea:	0089      	lsls	r1, r1, #2
 80018ec:	f7fe fc3c 	bl	8000168 <__udivsi3>
 80018f0:	4e07      	ldr	r6, [pc, #28]	@ (8001910 <SendTxData+0x68>)
 80018f2:	9000      	str	r0, [sp, #0]
 80018f4:	0033      	movs	r3, r6
 80018f6:	0022      	movs	r2, r4
 80018f8:	0029      	movs	r1, r5
 80018fa:	0020      	movs	r0, r4
 80018fc:	f00c f988 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
}
 8001900:	e7ee      	b.n	80018e0 <SendTxData+0x38>
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	20000000 	.word	0x20000000
 8001908:	20000338 	.word	0x20000338
 800190c:	0800eeff 	.word	0x0800eeff
 8001910:	0800ef1c 	.word	0x0800ef1c

08001914 <OnJoinTimerLedEvent>:
{
 8001914:	b510      	push	{r4, lr}
  LED_Toggle(LED_RED1) ;
 8001916:	2001      	movs	r0, #1
 8001918:	f001 f98e 	bl	8002c38 <BSP_LED_Toggle>
}
 800191c:	bd10      	pop	{r4, pc}
	...

08001920 <OnTxData>:
{
 8001920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001922:	1e04      	subs	r4, r0, #0
  if ((params != NULL))
 8001924:	d033      	beq.n	800198e <OnTxData+0x6e>
    if (params->IsMcpsConfirm != 0)
 8001926:	7803      	ldrb	r3, [r0, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d030      	beq.n	800198e <OnTxData+0x6e>
      LED_On(LED_RED2) ;
 800192c:	2003      	movs	r0, #3
 800192e:	f001 f963 	bl	8002bf8 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 8001932:	481b      	ldr	r0, [pc, #108]	@ (80019a0 <OnTxData+0x80>)
 8001934:	f00c fcd8 	bl	800e2e8 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8001938:	2200      	movs	r2, #0
 800193a:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <OnTxData+0x84>)
 800193c:	0011      	movs	r1, r2
 800193e:	2002      	movs	r0, #2
 8001940:	f00c f966 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8001944:	2214      	movs	r2, #20
 8001946:	56a2      	ldrsb	r2, [r4, r2]
 8001948:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <OnTxData+0x88>)
 800194a:	9203      	str	r2, [sp, #12]
 800194c:	2204      	movs	r2, #4
 800194e:	56a2      	ldrsb	r2, [r4, r2]
 8001950:	2003      	movs	r0, #3
 8001952:	9202      	str	r2, [sp, #8]
 8001954:	7b22      	ldrb	r2, [r4, #12]
 8001956:	9201      	str	r2, [sp, #4]
 8001958:	68a2      	ldr	r2, [r4, #8]
 800195a:	9200      	str	r2, [sp, #0]
 800195c:	2200      	movs	r2, #0
 800195e:	0011      	movs	r1, r2
 8001960:	f00c f956 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8001964:	2200      	movs	r2, #0
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <OnTxData+0x8c>)
 8001968:	0011      	movs	r1, r2
 800196a:	2003      	movs	r0, #3
 800196c:	f00c f950 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8001970:	78a3      	ldrb	r3, [r4, #2]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10c      	bne.n	8001990 <OnTxData+0x70>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8001976:	78e3      	ldrb	r3, [r4, #3]
 8001978:	4a0d      	ldr	r2, [pc, #52]	@ (80019b0 <OnTxData+0x90>)
 800197a:	2b00      	cmp	r3, #0
 800197c:	d000      	beq.n	8001980 <OnTxData+0x60>
 800197e:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <OnTxData+0x94>)
 8001980:	9200      	str	r2, [sp, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	2003      	movs	r0, #3
 8001986:	0011      	movs	r1, r2
 8001988:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <OnTxData+0x98>)
 800198a:	f00c f941 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
}
 800198e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8001990:	2200      	movs	r2, #0
 8001992:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <OnTxData+0x9c>)
 8001994:	0011      	movs	r1, r2
 8001996:	2003      	movs	r0, #3
 8001998:	f00c f93a 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
}
 800199c:	e7f7      	b.n	800198e <OnTxData+0x6e>
 800199e:	46c0      	nop			@ (mov r8, r8)
 80019a0:	20000150 	.word	0x20000150
 80019a4:	0800ef43 	.word	0x0800ef43
 80019a8:	0800ef74 	.word	0x0800ef74
 80019ac:	0800efa5 	.word	0x0800efa5
 80019b0:	0800ef3e 	.word	0x0800ef3e
 80019b4:	0800ef3f 	.word	0x0800ef3f
 80019b8:	0800efb2 	.word	0x0800efb2
 80019bc:	0800efc3 	.word	0x0800efc3

080019c0 <OnJoinRequest>:
{
 80019c0:	b570      	push	{r4, r5, r6, lr}
 80019c2:	1e05      	subs	r5, r0, #0
  if (joinParams != NULL)
 80019c4:	d018      	beq.n	80019f8 <OnJoinRequest+0x38>
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80019c6:	2401      	movs	r4, #1
 80019c8:	5704      	ldrsb	r4, [r0, r4]
 80019ca:	2c00      	cmp	r4, #0
 80019cc:	d117      	bne.n	80019fe <OnJoinRequest+0x3e>
      UTIL_TIMER_Stop(&JoinLedTimer);
 80019ce:	480e      	ldr	r0, [pc, #56]	@ (8001a08 <OnJoinRequest+0x48>)
 80019d0:	f00c fc36 	bl	800e240 <UTIL_TIMER_Stop>
      LED_Off(LED_RED1) ;
 80019d4:	2001      	movs	r0, #1
 80019d6:	f001 f91f 	bl	8002c18 <BSP_LED_Off>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 80019da:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <OnJoinRequest+0x4c>)
 80019dc:	0022      	movs	r2, r4
 80019de:	0021      	movs	r1, r4
 80019e0:	2002      	movs	r0, #2
 80019e2:	f00c f915 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 80019e6:	78ab      	ldrb	r3, [r5, #2]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d106      	bne.n	80019fa <OnJoinRequest+0x3a>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <OnJoinRequest+0x50>)
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 80019ee:	0022      	movs	r2, r4
 80019f0:	0021      	movs	r1, r4
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 80019f2:	2002      	movs	r0, #2
 80019f4:	f00c f90c 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
}
 80019f8:	bd70      	pop	{r4, r5, r6, pc}
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <OnJoinRequest+0x54>)
 80019fc:	e7f7      	b.n	80019ee <OnJoinRequest+0x2e>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 80019fe:	2200      	movs	r2, #0
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <OnJoinRequest+0x58>)
 8001a02:	0011      	movs	r1, r2
 8001a04:	e7f5      	b.n	80019f2 <OnJoinRequest+0x32>
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	20000168 	.word	0x20000168
 8001a0c:	0800efd1 	.word	0x0800efd1
 8001a10:	0800efe6 	.word	0x0800efe6
 8001a14:	0800f003 	.word	0x0800f003
 8001a18:	0800f020 	.word	0x0800f020

08001a1c <LoRaWAN_Init>:
{
 8001a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8001a1e:	2400      	movs	r4, #0
 8001a20:	2601      	movs	r6, #1
{
 8001a22:	b087      	sub	sp, #28
  LED_Init(LED_BLUE);
 8001a24:	2002      	movs	r0, #2
 8001a26:	f001 f8a5 	bl	8002b74 <BSP_LED_Init>
  LED_Init(LED_RED1);
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f001 f8a2 	bl	8002b74 <BSP_LED_Init>
  LED_Init(LED_RED2);
 8001a30:	2003      	movs	r0, #3
 8001a32:	f001 f89f 	bl	8002b74 <BSP_LED_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8001a36:	0022      	movs	r2, r4
 8001a38:	0021      	movs	r1, r4
 8001a3a:	9601      	str	r6, [sp, #4]
 8001a3c:	9600      	str	r6, [sp, #0]
 8001a3e:	4b36      	ldr	r3, [pc, #216]	@ (8001b18 <LoRaWAN_Init+0xfc>)
 8001a40:	9402      	str	r4, [sp, #8]
 8001a42:	2002      	movs	r0, #2
 8001a44:	f00c f8e4 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8001a48:	2702      	movs	r7, #2
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	9201      	str	r2, [sp, #4]
 8001a50:	0038      	movs	r0, r7
 8001a52:	0022      	movs	r2, r4
 8001a54:	4b31      	ldr	r3, [pc, #196]	@ (8001b1c <LoRaWAN_Init+0x100>)
 8001a56:	9402      	str	r4, [sp, #8]
 8001a58:	9700      	str	r7, [sp, #0]
 8001a5a:	f00c f8d9 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8001a5e:	0022      	movs	r2, r4
 8001a60:	0021      	movs	r1, r4
 8001a62:	9601      	str	r6, [sp, #4]
 8001a64:	9600      	str	r6, [sp, #0]
 8001a66:	0038      	movs	r0, r7
 8001a68:	4b2d      	ldr	r3, [pc, #180]	@ (8001b20 <LoRaWAN_Init+0x104>)
 8001a6a:	9402      	str	r4, [sp, #8]
 8001a6c:	f00c f8d0 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8001a70:	2101      	movs	r1, #1
 8001a72:	482c      	ldr	r0, [pc, #176]	@ (8001b24 <LoRaWAN_Init+0x108>)
 8001a74:	0022      	movs	r2, r4
 8001a76:	4b2c      	ldr	r3, [pc, #176]	@ (8001b28 <LoRaWAN_Init+0x10c>)
 8001a78:	9400      	str	r4, [sp, #0]
 8001a7a:	4249      	negs	r1, r1
 8001a7c:	4d2b      	ldr	r5, [pc, #172]	@ (8001b2c <LoRaWAN_Init+0x110>)
 8001a7e:	9005      	str	r0, [sp, #20]
 8001a80:	f00c fb80 	bl	800e184 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8001a84:	2101      	movs	r1, #1
 8001a86:	0022      	movs	r2, r4
 8001a88:	4b29      	ldr	r3, [pc, #164]	@ (8001b30 <LoRaWAN_Init+0x114>)
 8001a8a:	9400      	str	r4, [sp, #0]
 8001a8c:	4249      	negs	r1, r1
 8001a8e:	4829      	ldr	r0, [pc, #164]	@ (8001b34 <LoRaWAN_Init+0x118>)
 8001a90:	f00c fb78 	bl	800e184 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8001a94:	2101      	movs	r1, #1
 8001a96:	4b28      	ldr	r3, [pc, #160]	@ (8001b38 <LoRaWAN_Init+0x11c>)
 8001a98:	0032      	movs	r2, r6
 8001a9a:	9400      	str	r4, [sp, #0]
 8001a9c:	4249      	negs	r1, r1
 8001a9e:	4827      	ldr	r0, [pc, #156]	@ (8001b3c <LoRaWAN_Init+0x120>)
 8001aa0:	f00c fb70 	bl	800e184 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 8001aa4:	21fa      	movs	r1, #250	@ 0xfa
 8001aa6:	9805      	ldr	r0, [sp, #20]
 8001aa8:	0049      	lsls	r1, r1, #1
 8001aaa:	f00c fc5b 	bl	800e364 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8001aae:	21fa      	movs	r1, #250	@ 0xfa
 8001ab0:	4820      	ldr	r0, [pc, #128]	@ (8001b34 <LoRaWAN_Init+0x118>)
 8001ab2:	0049      	lsls	r1, r1, #1
 8001ab4:	f00c fc56 	bl	800e364 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8001ab8:	21fa      	movs	r1, #250	@ 0xfa
 8001aba:	4820      	ldr	r0, [pc, #128]	@ (8001b3c <LoRaWAN_Init+0x120>)
 8001abc:	0049      	lsls	r1, r1, #1
 8001abe:	f00c fc51 	bl	800e364 <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8001ac2:	0021      	movs	r1, r4
 8001ac4:	0030      	movs	r0, r6
 8001ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b40 <LoRaWAN_Init+0x124>)
 8001ac8:	f00c fa66 	bl	800df98 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8001acc:	0021      	movs	r1, r4
 8001ace:	4a1d      	ldr	r2, [pc, #116]	@ (8001b44 <LoRaWAN_Init+0x128>)
 8001ad0:	0038      	movs	r0, r7
 8001ad2:	f00c fa61 	bl	800df98 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8001ad6:	f000 f847 	bl	8001b68 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 8001ada:	4e1b      	ldr	r6, [pc, #108]	@ (8001b48 <LoRaWAN_Init+0x12c>)
 8001adc:	481b      	ldr	r0, [pc, #108]	@ (8001b4c <LoRaWAN_Init+0x130>)
 8001ade:	f005 fd27 	bl	8007530 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8001ae2:	0030      	movs	r0, r6
 8001ae4:	303c      	adds	r0, #60	@ 0x3c
 8001ae6:	f005 f9e1 	bl	8006eac <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8001aea:	4814      	ldr	r0, [pc, #80]	@ (8001b3c <LoRaWAN_Init+0x120>)
 8001aec:	f00c fbfc 	bl	800e2e8 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 8001af0:	0038      	movs	r0, r7
 8001af2:	f005 fb29 	bl	8007148 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8001af6:	2101      	movs	r1, #1
 8001af8:	0022      	movs	r2, r4
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <LoRaWAN_Init+0x134>)
 8001afc:	0028      	movs	r0, r5
 8001afe:	9400      	str	r4, [sp, #0]
 8001b00:	4249      	negs	r1, r1
 8001b02:	f00c fb3f 	bl	800e184 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8001b06:	4913      	ldr	r1, [pc, #76]	@ (8001b54 <LoRaWAN_Init+0x138>)
 8001b08:	0028      	movs	r0, r5
 8001b0a:	f00c fc2b 	bl	800e364 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8001b0e:	0028      	movs	r0, r5
 8001b10:	f00c fbea 	bl	800e2e8 <UTIL_TIMER_Start>
}
 8001b14:	b007      	add	sp, #28
 8001b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b18:	0800f039 	.word	0x0800f039
 8001b1c:	0800f059 	.word	0x0800f059
 8001b20:	0800f079 	.word	0x0800f079
 8001b24:	20000150 	.word	0x20000150
 8001b28:	0800189f 	.word	0x0800189f
 8001b2c:	20000120 	.word	0x20000120
 8001b30:	08001895 	.word	0x08001895
 8001b34:	20000138 	.word	0x20000138
 8001b38:	08001915 	.word	0x08001915
 8001b3c:	20000168 	.word	0x20000168
 8001b40:	08007039 	.word	0x08007039
 8001b44:	080018a9 	.word	0x080018a9
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	0800179d 	.word	0x0800179d
 8001b54:	00002710 	.word	0x00002710

08001b58 <HAL_GPIO_EXTI_Callback>:
{
 8001b58:	b510      	push	{r4, lr}
  switch (GPIO_Pin)
 8001b5a:	2804      	cmp	r0, #4
 8001b5c:	d103      	bne.n	8001b66 <HAL_GPIO_EXTI_Callback+0xe>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8001b5e:	2100      	movs	r1, #0
 8001b60:	3802      	subs	r0, #2
 8001b62:	f00c f97f 	bl	800de64 <UTIL_SEQ_SetTask>
}
 8001b66:	bd10      	pop	{r4, pc}

08001b68 <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4b04      	ldr	r3, [pc, #16]	@ (8001b7c <LoraInfo_Init+0x14>)
 8001b6c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8001b6e:	60da      	str	r2, [r3, #12]

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923) ;
#endif /* REGION_AS923 */
#ifdef  REGION_AU915
  loraInfo.Region |= (1 << LORAMAC_REGION_AU915) ;
 8001b70:	3202      	adds	r2, #2
 8001b72:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8001b74:	3201      	adds	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8001b78:	4770      	bx	lr
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	20000274 	.word	0x20000274

08001b80 <LoraInfo_GetPtr>:
LoraInfo_t *LoraInfo_GetPtr(void)
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8001b80:	4800      	ldr	r0, [pc, #0]	@ (8001b84 <LoraInfo_GetPtr+0x4>)
}
 8001b82:	4770      	bx	lr
 8001b84:	20000274 	.word	0x20000274

08001b88 <MX_ADC_Init>:
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc.Init.LowPowerAutoPowerOff  = DISABLE;
  hadc.Init.LowPowerFrequencyMode = ENABLE;
  hadc.Init.LowPowerAutoWait      = DISABLE;
  hadc.Init.Resolution            = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8001b88:	2107      	movs	r1, #7
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8001b8a:	2201      	movs	r2, #1
{
 8001b8c:	b510      	push	{r4, lr}
  hadc.Init.OversamplingMode      = DISABLE;
 8001b8e:	4c13      	ldr	r4, [pc, #76]	@ (8001bdc <MX_ADC_Init+0x54>)
 8001b90:	2300      	movs	r3, #0
  hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8001b92:	63a1      	str	r1, [r4, #56]	@ 0x38
  hadc.Instance  = ADC1;
 8001b94:	4912      	ldr	r1, [pc, #72]	@ (8001be0 <MX_ADC_Init+0x58>)
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8001b96:	6362      	str	r2, [r4, #52]	@ 0x34
  hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8001b98:	6122      	str	r2, [r4, #16]
  hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode    = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8001b9a:	3203      	adds	r2, #3
  hadc.Instance  = ADC1;
 8001b9c:	6021      	str	r1, [r4, #0]
  hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8001b9e:	6162      	str	r2, [r4, #20]
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ba0:	2180      	movs	r1, #128	@ 0x80
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001ba2:	0022      	movs	r2, r4
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ba4:	0609      	lsls	r1, r1, #24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001ba6:	322c      	adds	r2, #44	@ 0x2c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001ba8:	0020      	movs	r0, r4
  hadc.Init.OversamplingMode      = DISABLE;
 8001baa:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bac:	62a3      	str	r3, [r4, #40]	@ 0x28
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bae:	6061      	str	r1, [r4, #4]
  hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 8001bb0:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8001bb2:	60e3      	str	r3, [r4, #12]
  hadc.Init.LowPowerAutoWait      = DISABLE;
 8001bb4:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 8001bb6:	61e3      	str	r3, [r4, #28]
  hadc.Init.ContinuousConvMode    = DISABLE;
 8001bb8:	8423      	strh	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001bba:	7013      	strb	r3, [r2, #0]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001bbc:	f001 fb5c 	bl	8003278 <HAL_ADC_Init>
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_ADC_Init+0x40>
  {
    Error_Handler();
 8001bc4:	f000 f986 	bl	8001ed4 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	0020      	movs	r0, r4
 8001bcc:	f001 fd80 	bl	80036d0 <HAL_ADCEx_Calibration_Start>
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_ADC_Init+0x50>
  {
    Error_Handler();
 8001bd4:	f000 f97e 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001bd8:	bd10      	pop	{r4, pc}
 8001bda:	46c0      	nop			@ (mov r8, r8)
 8001bdc:	20000284 	.word	0x20000284
 8001be0:	40012400 	.word	0x40012400

08001be4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_ADC_MspInit+0x18>)
 8001be6:	6802      	ldr	r2, [r0, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d105      	bne.n	8001bf8 <HAL_ADC_MspInit+0x14>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bec:	2380      	movs	r3, #128	@ 0x80
 8001bee:	4a04      	ldr	r2, [pc, #16]	@ (8001c00 <HAL_ADC_MspInit+0x1c>)
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	6353      	str	r3, [r2, #52]	@ 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 8001bf8:	4770      	bx	lr
 8001bfa:	46c0      	nop			@ (mov r8, r8)
 8001bfc:	40012400 	.word	0x40012400
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <HAL_ADC_MspDeInit+0x24>)
 8001c06:	6802      	ldr	r2, [r0, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d10c      	bne.n	8001c26 <HAL_ADC_MspDeInit+0x22>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 8001c0c:	2280      	movs	r2, #128	@ 0x80
 8001c0e:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <HAL_ADC_MspDeInit+0x28>)
 8001c10:	0092      	lsls	r2, r2, #2
 8001c12:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001c14:	430a      	orrs	r2, r1
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8001c18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c1a:	4905      	ldr	r1, [pc, #20]	@ (8001c30 <HAL_ADC_MspDeInit+0x2c>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c22:	400a      	ands	r2, r1
 8001c24:	635a      	str	r2, [r3, #52]	@ 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001c26:	4770      	bx	lr
 8001c28:	40012400 	.word	0x40012400
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	fffffdff 	.word	0xfffffdff

08001c34 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c36:	2208      	movs	r2, #8
 8001c38:	2100      	movs	r1, #0
{
 8001c3a:	0006      	movs	r6, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c3c:	4668      	mov	r0, sp
 8001c3e:	f00c fd23 	bl	800e688 <memset>

  MX_ADC_Init();
 8001c42:	f7ff ffa1 	bl	8001b88 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8001c46:	2308      	movs	r3, #8
 8001c48:	491f      	ldr	r1, [pc, #124]	@ (8001cc8 <ADC_ReadChannels+0x94>)
 8001c4a:	684a      	ldr	r2, [r1, #4]
 8001c4c:	421a      	tst	r2, r3
 8001c4e:	d0fc      	beq.n	8001c4a <ADC_ReadChannels+0x16>

  __HAL_RCC_ADC1_CLK_ENABLE();
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	4d1e      	ldr	r5, [pc, #120]	@ (8001ccc <ADC_ReadChannels+0x98>)

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8001c54:	4c1e      	ldr	r4, [pc, #120]	@ (8001cd0 <ADC_ReadChannels+0x9c>)
  __HAL_RCC_ADC1_CLK_ENABLE();
 8001c56:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4313      	orrs	r3, r2
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8001c5c:	2100      	movs	r1, #0
  __HAL_RCC_ADC1_CLK_ENABLE();
 8001c5e:	636b      	str	r3, [r5, #52]	@ 0x34
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8001c60:	0020      	movs	r0, r4
 8001c62:	f001 fd35 	bl	80036d0 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 8001c66:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <ADC_ReadChannels+0xa0>)
  sConfig.Rank = ADC_RANK_NONE;
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001c68:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_MASK;
 8001c6a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd8 <ADC_ReadChannels+0xa4>)
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001c6e:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_NONE;
 8001c70:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001c72:	f001 fcd9 	bl	8003628 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001c76:	2380      	movs	r3, #128	@ 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c78:	4669      	mov	r1, sp
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001c7a:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c7c:	0020      	movs	r0, r4
  sConfig.Channel = channel;
 8001c7e:	9600      	str	r6, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001c80:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c82:	f001 fcd1 	bl	8003628 <HAL_ADC_ConfigChannel>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d001      	beq.n	8001c8e <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
 8001c8a:	f000 f923 	bl	8001ed4 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001c8e:	0020      	movs	r0, r4
 8001c90:	f001 fc1c 	bl	80034cc <HAL_ADC_Start>
 8001c94:	2800      	cmp	r0, #0
 8001c96:	d001      	beq.n	8001c9c <ADC_ReadChannels+0x68>
  {
    /* Start Error */
    Error_Handler();
 8001c98:	f000 f91c 	bl	8001ed4 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	0020      	movs	r0, r4
 8001ca0:	4249      	negs	r1, r1
 8001ca2:	f001 fc5d 	bl	8003560 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8001ca6:	0020      	movs	r0, r4
 8001ca8:	f001 fc3c 	bl	8003524 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001cac:	0020      	movs	r0, r4
 8001cae:	f001 fcb7 	bl	8003620 <HAL_ADC_GetValue>
 8001cb2:	0006      	movs	r6, r0

  HAL_ADC_DeInit(&hadc);
 8001cb4:	0020      	movs	r0, r4
 8001cb6:	f001 fbb5 	bl	8003424 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 8001cba:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001cbc:	4a07      	ldr	r2, [pc, #28]	@ (8001cdc <ADC_ReadChannels+0xa8>)

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001cbe:	0030      	movs	r0, r6
  __HAL_RCC_ADC1_CLK_DISABLE();
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	636b      	str	r3, [r5, #52]	@ 0x34
}
 8001cc4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001cc6:	46c0      	nop			@ (mov r8, r8)
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	20000284 	.word	0x20000284
 8001cd4:	0007ffff 	.word	0x0007ffff
 8001cd8:	00001001 	.word	0x00001001
 8001cdc:	fffffdff 	.word	0xfffffdff

08001ce0 <SYS_InitMeasurement>:
  hadc.Instance = ADC1;
 8001ce0:	4b01      	ldr	r3, [pc, #4]	@ (8001ce8 <SYS_InitMeasurement+0x8>)
 8001ce2:	4a02      	ldr	r2, [pc, #8]	@ (8001cec <SYS_InitMeasurement+0xc>)
 8001ce4:	601a      	str	r2, [r3, #0]
}
 8001ce6:	4770      	bx	lr
 8001ce8:	20000284 	.word	0x20000284
 8001cec:	40012400 	.word	0x40012400

08001cf0 <SYS_GetBatteryLevel>:
{
 8001cf0:	b510      	push	{r4, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001cf2:	4807      	ldr	r0, [pc, #28]	@ (8001d10 <SYS_GetBatteryLevel+0x20>)
 8001cf4:	f7ff ff9e 	bl	8001c34 <ADC_ReadChannels>
 8001cf8:	0001      	movs	r1, r0
    batteryLevelmV = 0;
 8001cfa:	2000      	movs	r0, #0
  if (measuredLevel == 0)
 8001cfc:	4281      	cmp	r1, r0
 8001cfe:	d006      	beq.n	8001d0e <SYS_GetBatteryLevel+0x1e>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8001d00:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <SYS_GetBatteryLevel+0x24>)
 8001d02:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <SYS_GetBatteryLevel+0x28>)
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	4358      	muls	r0, r3
 8001d08:	f7fe fa2e 	bl	8000168 <__udivsi3>
 8001d0c:	b280      	uxth	r0, r0
}
 8001d0e:	bd10      	pop	{r4, pc}
 8001d10:	44020000 	.word	0x44020000
 8001d14:	1ff80078 	.word	0x1ff80078
 8001d18:	00000bb8 	.word	0x00000bb8

08001d1c <SYS_GetTemperatureLevel>:
{
 8001d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001d1e:	f7ff ffe7 	bl	8001cf0 <SYS_GetBatteryLevel>
 8001d22:	0005      	movs	r5, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001d24:	480f      	ldr	r0, [pc, #60]	@ (8001d64 <SYS_GetTemperatureLevel+0x48>)
 8001d26:	f7ff ff85 	bl	8001c34 <ADC_ReadChannels>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <SYS_GetTemperatureLevel+0x4c>)
 8001d2c:	4368      	muls	r0, r5
 8001d2e:	490f      	ldr	r1, [pc, #60]	@ (8001d6c <SYS_GetTemperatureLevel+0x50>)
 8001d30:	881c      	ldrh	r4, [r3, #0]
 8001d32:	f7fe fa19 	bl	8000168 <__udivsi3>
 8001d36:	1b03      	subs	r3, r0, r4
 8001d38:	2050      	movs	r0, #80	@ 0x50
 8001d3a:	4358      	muls	r0, r3
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <SYS_GetTemperatureLevel+0x54>)
 8001d3e:	0200      	lsls	r0, r0, #8
 8001d40:	8819      	ldrh	r1, [r3, #0]
 8001d42:	1b09      	subs	r1, r1, r4
 8001d44:	f7fe fa9a 	bl	800027c <__divsi3>
 8001d48:	23f0      	movs	r3, #240	@ 0xf0
 8001d4a:	015b      	lsls	r3, r3, #5
 8001d4c:	18c4      	adds	r4, r0, r3
 8001d4e:	b224      	sxth	r4, r4
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 8001d50:	1222      	asrs	r2, r4, #8
 8001d52:	9200      	str	r2, [sp, #0]
 8001d54:	2201      	movs	r2, #1
 8001d56:	2100      	movs	r1, #0
 8001d58:	0010      	movs	r0, r2
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <SYS_GetTemperatureLevel+0x58>)
 8001d5c:	f00b ff58 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
}
 8001d60:	0020      	movs	r0, r4
 8001d62:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8001d64:	48040000 	.word	0x48040000
 8001d68:	1ff8007a 	.word	0x1ff8007a
 8001d6c:	00000bb8 	.word	0x00000bb8
 8001d70:	1ff8007e 	.word	0x1ff8007e
 8001d74:	0800f0cb 	.word	0x0800f0cb

08001d78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d78:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <MX_DMA_Init+0x28>)
  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001d7e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d82:	430a      	orrs	r2, r1
 8001d84:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	400b      	ands	r3, r1
 8001d8c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001d8e:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d90:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001d92:	f001 fced 	bl	8003770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8001d96:	200b      	movs	r0, #11
 8001d98:	f001 fd14 	bl	80037c4 <HAL_NVIC_EnableIRQ>

}
 8001d9c:	bd07      	pop	{r0, r1, r2, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	40021000 	.word	0x40021000

08001da4 <SystemClock_Config>:
		HAL_Delay(5);

	}
}

void SystemClock_Config(void){
 8001da4:	b510      	push	{r4, lr}
 8001da6:	b094      	sub	sp, #80	@ 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da8:	222c      	movs	r2, #44	@ 0x2c
 8001daa:	2100      	movs	r1, #0
 8001dac:	a807      	add	r0, sp, #28
 8001dae:	f00c fc6b 	bl	800e688 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db2:	2214      	movs	r2, #20
 8001db4:	2100      	movs	r1, #0
 8001db6:	a801      	add	r0, sp, #4
 8001db8:	f00c fc66 	bl	800e688 <memset>

	RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
	RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8001dc0:	9310      	str	r3, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8001dc2:	2380      	movs	r3, #128	@ 0x80
 8001dc4:	031b      	lsls	r3, r3, #12
 8001dc6:	9312      	str	r3, [sp, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8001dc8:	2380      	movs	r3, #128	@ 0x80
	RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8001dca:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dcc:	2410      	movs	r4, #16
	RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8001dce:	041b      	lsls	r3, r3, #16

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8001dd0:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8001dd2:	9209      	str	r2, [sp, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dd4:	940a      	str	r4, [sp, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8001dd6:	9313      	str	r3, [sp, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8001dd8:	f002 f8a2 	bl	8003f20 <HAL_RCC_OscConfig>
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	d001      	beq.n	8001de4 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de0:	b672      	cpsid	i

/* USER CODE END 4 */

void Error_Handler(void){
	__disable_irq();
	while (1) {}
 8001de2:	e7fe      	b.n	8001de2 <SystemClock_Config+0x3e>
	__HAL_RCC_PWR_CLK_ENABLE();
 8001de4:	2380      	movs	r3, #128	@ 0x80
 8001de6:	4a11      	ldr	r2, [pc, #68]	@ (8001e2c <SystemClock_Config+0x88>)
 8001de8:	055b      	lsls	r3, r3, #21
 8001dea:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6393      	str	r3, [r2, #56]	@ 0x38
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df0:	4a0f      	ldr	r2, [pc, #60]	@ (8001e30 <SystemClock_Config+0x8c>)
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <SystemClock_Config+0x90>)
 8001df4:	6811      	ldr	r1, [r2, #0]
 8001df6:	4019      	ands	r1, r3
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	6013      	str	r3, [r2, #0]
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8001e00:	6851      	ldr	r1, [r2, #4]
 8001e02:	000b      	movs	r3, r1
 8001e04:	4023      	ands	r3, r4
 8001e06:	4221      	tst	r1, r4
 8001e08:	d1fa      	bne.n	8001e00 <SystemClock_Config+0x5c>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001e0a:	220f      	movs	r2, #15
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK){
 8001e0c:	2101      	movs	r1, #1
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001e0e:	9201      	str	r2, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK){
 8001e10:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e12:	3a0c      	subs	r2, #12
 8001e14:	9202      	str	r2, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e16:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e18:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e1a:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK){
 8001e1c:	f002 fb0a 	bl	8004434 <HAL_RCC_ClockConfig>
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d001      	beq.n	8001e28 <SystemClock_Config+0x84>
 8001e24:	b672      	cpsid	i
	while (1) {}
 8001e26:	e7fe      	b.n	8001e26 <SystemClock_Config+0x82>
}
 8001e28:	b014      	add	sp, #80	@ 0x50
 8001e2a:	bd10      	pop	{r4, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40007000 	.word	0x40007000
 8001e34:	ffffe7ff 	.word	0xffffe7ff

08001e38 <main>:
int main(void){
 8001e38:	b570      	push	{r4, r5, r6, lr}
	HAL_Init();
 8001e3a:	f001 f929 	bl	8003090 <HAL_Init>
	SystemClock_Config();
 8001e3e:	f7ff ffb1 	bl	8001da4 <SystemClock_Config>
	MX_DMA_Init();
 8001e42:	f7ff ff99 	bl	8001d78 <MX_DMA_Init>
	hspi2.Instance = SPI2;
 8001e46:	4c18      	ldr	r4, [pc, #96]	@ (8001ea8 <main+0x70>)
 8001e48:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <main+0x74>)
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e4a:	0020      	movs	r0, r4
	hspi2.Instance = SPI2;
 8001e4c:	6023      	str	r3, [r4, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	6063      	str	r3, [r4, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e52:	60a3      	str	r3, [r4, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e54:	60e3      	str	r3, [r4, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e56:	6123      	str	r3, [r4, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e58:	6163      	str	r3, [r4, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_INPUT;//HARD_INPUT
 8001e5a:	61a3      	str	r3, [r4, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e5c:	6223      	str	r3, [r4, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e5e:	6263      	str	r3, [r4, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e60:	62a3      	str	r3, [r4, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
 8001e62:	3307      	adds	r3, #7
 8001e64:	62e3      	str	r3, [r4, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e66:	f003 f8e5 	bl	8005034 <HAL_SPI_Init>
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	d001      	beq.n	8001e72 <main+0x3a>
 8001e6e:	b672      	cpsid	i
	while (1) {}
 8001e70:	e7fe      	b.n	8001e70 <main+0x38>
	HAL_SPI_Receive_DMA(&hspi2, &spi_rx_buffer, BUFFER_SIZE);
 8001e72:	0021      	movs	r1, r4
 8001e74:	2201      	movs	r2, #1
 8001e76:	3158      	adds	r1, #88	@ 0x58
 8001e78:	0020      	movs	r0, r4
 8001e7a:	f003 fb1d 	bl	80054b8 <HAL_SPI_Receive_DMA>
	MX_LoRaWAN_Init();
 8001e7e:	2552      	movs	r5, #82	@ 0x52
 8001e80:	f7ff fc80 	bl	8001784 <MX_LoRaWAN_Init>
	for(uint8_t i = 0; i < 82; i++){
 8001e84:	3d01      	subs	r5, #1
 8001e86:	b2ed      	uxtb	r5, r5
		MX_LoRaWAN_Process();
 8001e88:	f7ff fc82 	bl	8001790 <MX_LoRaWAN_Process>
	for(uint8_t i = 0; i < 82; i++){
 8001e8c:	2d00      	cmp	r5, #0
 8001e8e:	d1f9      	bne.n	8001e84 <main+0x4c>
		if(spi_rx_buffer != 0){
 8001e90:	0023      	movs	r3, r4
 8001e92:	3358      	adds	r3, #88	@ 0x58
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <main+0x66>
			MX_LoRaWAN_Process();
 8001e9a:	f7ff fc79 	bl	8001790 <MX_LoRaWAN_Process>
		HAL_Delay(5);
 8001e9e:	2005      	movs	r0, #5
 8001ea0:	f000 fc63 	bl	800276a <HAL_Delay>
		if(spi_rx_buffer != 0){
 8001ea4:	e7f4      	b.n	8001e90 <main+0x58>
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	200002e0 	.word	0x200002e0
 8001eac:	40003800 	.word	0x40003800

08001eb0 <HAL_SPI_RxCpltCallback>:
	if (hspi->Instance == SPI2) // Check if the callback is for SPI2
 8001eb0:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <HAL_SPI_RxCpltCallback+0x18>)
 8001eb2:	6802      	ldr	r2, [r0, #0]
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8001eb4:	b510      	push	{r4, lr}
	if (hspi->Instance == SPI2) // Check if the callback is for SPI2
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d104      	bne.n	8001ec4 <HAL_SPI_RxCpltCallback+0x14>
		HAL_SPI_Receive_DMA(&hspi2, &spi_rx_buffer, BUFFER_SIZE);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4803      	ldr	r0, [pc, #12]	@ (8001ecc <HAL_SPI_RxCpltCallback+0x1c>)
 8001ebe:	4904      	ldr	r1, [pc, #16]	@ (8001ed0 <HAL_SPI_RxCpltCallback+0x20>)
 8001ec0:	f003 fafa 	bl	80054b8 <HAL_SPI_Receive_DMA>
}
 8001ec4:	bd10      	pop	{r4, pc}
 8001ec6:	46c0      	nop			@ (mov r8, r8)
 8001ec8:	40003800 	.word	0x40003800
 8001ecc:	200002e0 	.word	0x200002e0
 8001ed0:	20000338 	.word	0x20000338

08001ed4 <Error_Handler>:
 8001ed4:	b672      	cpsid	i
	while (1) {}
 8001ed6:	e7fe      	b.n	8001ed6 <Error_Handler+0x2>

08001ed8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc; //adicionei como extern

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ed8:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8001eda:	2500      	movs	r5, #0
{
 8001edc:	b091      	sub	sp, #68	@ 0x44
  RTC_TimeTypeDef sTime = {0};
 8001ede:	2214      	movs	r2, #20
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	a801      	add	r0, sp, #4
 8001ee4:	f00c fbd0 	bl	800e688 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8001ee8:	2228      	movs	r2, #40	@ 0x28
 8001eea:	0029      	movs	r1, r5
 8001eec:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 8001eee:	9500      	str	r5, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001ef0:	f00c fbca 	bl	800e688 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ef4:	4c24      	ldr	r4, [pc, #144]	@ (8001f88 <MX_RTC_Init+0xb0>)
 8001ef6:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <MX_RTC_Init+0xb4>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ef8:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 8001efa:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001efc:	231f      	movs	r3, #31
 8001efe:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8001f00:	4b23      	ldr	r3, [pc, #140]	@ (8001f90 <MX_RTC_Init+0xb8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f02:	6065      	str	r5, [r4, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8001f04:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f06:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f08:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f0a:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f0c:	61e5      	str	r5, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f0e:	f002 fd1f 	bl	8004950 <HAL_RTC_Init>
 8001f12:	42a8      	cmp	r0, r5
 8001f14:	d001      	beq.n	8001f1a <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8001f16:	f7ff ffdd 	bl	8001ed4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001f1a:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	0020      	movs	r0, r4
 8001f20:	a901      	add	r1, sp, #4
  sTime.Hours = 0;
 8001f22:	809d      	strh	r5, [r3, #4]
  sTime.Seconds = 0;
 8001f24:	719d      	strb	r5, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f26:	9504      	str	r5, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f28:	9505      	str	r5, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f2a:	f002 fd79 	bl	8004a20 <HAL_RTC_SetTime>
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	d001      	beq.n	8001f36 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001f32:	f7ff ffcf 	bl	8001ed4 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f36:	4b17      	ldr	r3, [pc, #92]	@ (8001f94 <MX_RTC_Init+0xbc>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4669      	mov	r1, sp
 8001f3c:	0020      	movs	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f3e:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f40:	f002 fdf4 	bl	8004b2c <HAL_RTC_SetDate>
 8001f44:	2800      	cmp	r0, #0
 8001f46:	d001      	beq.n	8001f4c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8001f48:	f7ff ffc4 	bl	8001ed4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	466b      	mov	r3, sp
 8001f50:	831a      	strh	r2, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 8001f52:	769a      	strb	r2, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8001f54:	23a0      	movs	r3, #160	@ 0xa0
 8001f56:	051b      	lsls	r3, r3, #20
 8001f58:	930c      	str	r3, [sp, #48]	@ 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 8001f5a:	2319      	movs	r3, #25
 8001f5c:	211e      	movs	r1, #30
 8001f5e:	446b      	add	r3, sp
 8001f60:	77d9      	strb	r1, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f62:	2380      	movs	r3, #128	@ 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001f64:	0020      	movs	r0, r4
  sAlarm.Alarm = RTC_ALARM_A;
 8001f66:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001f68:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 8001f6a:	9207      	str	r2, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f6c:	9209      	str	r2, [sp, #36]	@ 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f6e:	920a      	str	r2, [sp, #40]	@ 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f70:	920b      	str	r2, [sp, #44]	@ 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001f72:	920d      	str	r2, [sp, #52]	@ 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 8001f74:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001f76:	f002 fe47 	bl	8004c08 <HAL_RTC_SetAlarm_IT>
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001f7e:	f7ff ffa9 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f82:	b011      	add	sp, #68	@ 0x44
 8001f84:	bd30      	pop	{r4, r5, pc}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	200003c0 	.word	0x200003c0
 8001f8c:	40002800 	.word	0x40002800
 8001f90:	000003ff 	.word	0x000003ff
 8001f94:	00010101 	.word	0x00010101

08001f98 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8001f98:	b510      	push	{r4, lr}
 8001f9a:	0004      	movs	r4, r0
 8001f9c:	b08e      	sub	sp, #56	@ 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f9e:	2238      	movs	r2, #56	@ 0x38
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4668      	mov	r0, sp
 8001fa4:	f00c fb70 	bl	800e688 <memset>
  if (rtcHandle->Instance == RTC)
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <HAL_RTC_MspInit+0x50>)
 8001faa:	6822      	ldr	r2, [r4, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d118      	bne.n	8001fe2 <HAL_RTC_MspInit+0x4a>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
      */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8001fb0:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb2:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8001fb4:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fb6:	33fc      	adds	r3, #252	@ 0xfc
 8001fb8:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fba:	f001 ffb1 	bl	8003f20 <HAL_RCC_OscConfig>
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 8001fc2:	f7ff ff87 	bl	8001ed4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fc6:	2380      	movs	r3, #128	@ 0x80
 8001fc8:	4a08      	ldr	r2, [pc, #32]	@ (8001fec <HAL_RTC_MspInit+0x54>)
 8001fca:	02db      	lsls	r3, r3, #11
 8001fcc:	6d11      	ldr	r1, [r2, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001fce:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	6513      	str	r3, [r2, #80]	@ 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	f001 fbca 	bl	8003770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f001 fbf1 	bl	80037c4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8001fe2:	b00e      	add	sp, #56	@ 0x38
 8001fe4:	bd10      	pop	{r4, pc}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	40002800 	.word	0x40002800
 8001fec:	40021000 	.word	0x40021000

08001ff0 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8001ff0:	4b01      	ldr	r3, [pc, #4]	@ (8001ff8 <RTC_IF_GetTimerContext+0x8>)
 8001ff2:	6818      	ldr	r0, [r3, #0]
}
 8001ff4:	4770      	bx	lr
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	200003e4 	.word	0x200003e4

08001ffc <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	4770      	bx	lr

08002000 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002000:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8002002:	0e41      	lsrs	r1, r0, #25
 8002004:	227d      	movs	r2, #125	@ 0x7d
 8002006:	2300      	movs	r3, #0
 8002008:	01c0      	lsls	r0, r0, #7
 800200a:	f7fe fa61 	bl	80004d0 <__aeabi_uldivmod>
}
 800200e:	bd10      	pop	{r4, pc}

08002010 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8002010:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8002012:	227d      	movs	r2, #125	@ 0x7d
 8002014:	2300      	movs	r3, #0
 8002016:	2100      	movs	r1, #0
 8002018:	f7fe fa7a 	bl	8000510 <__aeabi_lmul>
 800201c:	0649      	lsls	r1, r1, #25
 800201e:	09c0      	lsrs	r0, r0, #7
 8002020:	4308      	orrs	r0, r1
}
 8002022:	bd10      	pop	{r4, pc}

08002024 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002024:	4806      	ldr	r0, [pc, #24]	@ (8002040 <RTC_IF_StopTimer+0x1c>)
 8002026:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <RTC_IF_StopTimer+0x20>)
 8002028:	6801      	ldr	r1, [r0, #0]
{
 800202a:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800202c:	68ca      	ldr	r2, [r1, #12]
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	4313      	orrs	r3, r2
 8002032:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002034:	2180      	movs	r1, #128	@ 0x80
 8002036:	0049      	lsls	r1, r1, #1
 8002038:	f002 fbc6 	bl	80047c8 <HAL_RTC_DeactivateAlarm>
}
 800203c:	2000      	movs	r0, #0
 800203e:	bd10      	pop	{r4, pc}
 8002040:	200003c0 	.word	0x200003c0
 8002044:	fffffe7f 	.word	0xfffffe7f

08002048 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8002048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800204a:	4e25      	ldr	r6, [pc, #148]	@ (80020e0 <RTC_GetCalendarValue+0x98>)
{
 800204c:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800204e:	2200      	movs	r2, #0
 8002050:	0030      	movs	r0, r6
{
 8002052:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002054:	f002 feb2 	bl	8004dbc <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002058:	4f22      	ldr	r7, [pc, #136]	@ (80020e4 <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 800205a:	2200      	movs	r2, #0
 800205c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205e:	0029      	movs	r1, r5
 8002060:	0030      	movs	r0, r6
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	f002 fed4 	bl	8004e10 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002068:	2200      	movs	r2, #0
 800206a:	0021      	movs	r1, r4
 800206c:	0030      	movs	r0, r6
 800206e:	f002 fea5 	bl	8004dbc <HAL_RTC_GetTime>
 8002072:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8002074:	9a01      	ldr	r2, [sp, #4]
 8002076:	4053      	eors	r3, r2
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1ec      	bne.n	8002058 <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800207e:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002080:	78ea      	ldrb	r2, [r5, #3]
 8002082:	4819      	ldr	r0, [pc, #100]	@ (80020e8 <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002084:	786e      	ldrb	r6, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002086:	4350      	muls	r0, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002088:	400a      	ands	r2, r1
 800208a:	1e53      	subs	r3, r2, #1
 800208c:	419a      	sbcs	r2, r3
 800208e:	4253      	negs	r3, r2
 8002090:	4a16      	ldr	r2, [pc, #88]	@ (80020ec <RTC_GetCalendarValue+0xa4>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002092:	3e01      	subs	r6, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002094:	4013      	ands	r3, r2
 8002096:	4a16      	ldr	r2, [pc, #88]	@ (80020f0 <RTC_GetCalendarValue+0xa8>)
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));

  calendarValue += (RTC_DateStruct->Date - 1);
 8002098:	78ad      	ldrb	r5, [r5, #2]
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800209a:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800209c:	223d      	movs	r2, #61	@ 0x3d
 800209e:	4372      	muls	r2, r6
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80020a0:	0076      	lsls	r6, r6, #1
 80020a2:	40f3      	lsrs	r3, r6
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80020a4:	3201      	adds	r2, #1
 80020a6:	0fd7      	lsrs	r7, r2, #31
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80020a8:	3003      	adds	r0, #3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80020aa:	18ba      	adds	r2, r7, r2
 80020ac:	3d01      	subs	r5, #1
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80020ae:	0880      	lsrs	r0, r0, #2
  calendarValue += (RTC_DateStruct->Date - 1);
 80020b0:	1828      	adds	r0, r5, r0
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80020b2:	1052      	asrs	r2, r2, #1
 80020b4:	1812      	adds	r2, r2, r0
  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 80020b6:	20e1      	movs	r0, #225	@ 0xe1
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80020b8:	400b      	ands	r3, r1
  calendarValue += (RTC_DateStruct->Date - 1);
 80020ba:	1ad3      	subs	r3, r2, r3
  calendarValue *= SECONDS_IN_1DAY;
 80020bc:	4a0d      	ldr	r2, [pc, #52]	@ (80020f4 <RTC_GetCalendarValue+0xac>)
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 80020be:	0100      	lsls	r0, r0, #4
  calendarValue *= SECONDS_IN_1DAY;
 80020c0:	4353      	muls	r3, r2
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 80020c2:	7822      	ldrb	r2, [r4, #0]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 80020c4:	7861      	ldrb	r1, [r4, #1]
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 80020c6:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 80020c8:	223c      	movs	r2, #60	@ 0x3c
 80020ca:	434a      	muls	r2, r1
 80020cc:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80020ce:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 80020d0:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80020d2:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 80020d4:	6863      	ldr	r3, [r4, #4]
 80020d6:	0280      	lsls	r0, r0, #10
 80020d8:	1ac0      	subs	r0, r0, r3
 80020da:	4b07      	ldr	r3, [pc, #28]	@ (80020f8 <RTC_GetCalendarValue+0xb0>)
 80020dc:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 80020de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80020e0:	200003c0 	.word	0x200003c0
 80020e4:	40002800 	.word	0x40002800
 80020e8:	000005b5 	.word	0x000005b5
 80020ec:	00555550 	.word	0x00555550
 80020f0:	00445550 	.word	0x00445550
 80020f4:	00015180 	.word	0x00015180
 80020f8:	000003ff 	.word	0x000003ff

080020fc <RTC_IF_SetTimerContext>:
{
 80020fc:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 80020fe:	4c04      	ldr	r4, [pc, #16]	@ (8002110 <RTC_IF_SetTimerContext+0x14>)
 8002100:	4904      	ldr	r1, [pc, #16]	@ (8002114 <RTC_IF_SetTimerContext+0x18>)
 8002102:	0020      	movs	r0, r4
 8002104:	3018      	adds	r0, #24
 8002106:	f7ff ff9f 	bl	8002048 <RTC_GetCalendarValue>
 800210a:	6020      	str	r0, [r4, #0]
}
 800210c:	bd10      	pop	{r4, pc}
 800210e:	46c0      	nop			@ (mov r8, r8)
 8002110:	200003e4 	.word	0x200003e4
 8002114:	200003e8 	.word	0x200003e8

08002118 <RTC_IF_GetTimerElapsedTime>:
{
 8002118:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800211a:	4668      	mov	r0, sp
 800211c:	a901      	add	r1, sp, #4
 800211e:	f7ff ff93 	bl	8002048 <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8002122:	4b02      	ldr	r3, [pc, #8]	@ (800212c <RTC_IF_GetTimerElapsedTime+0x14>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	1ac0      	subs	r0, r0, r3
}
 8002128:	b007      	add	sp, #28
 800212a:	bd00      	pop	{pc}
 800212c:	200003e4 	.word	0x200003e4

08002130 <RTC_IF_StartTimer>:
{
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002132:	b087      	sub	sp, #28
 8002134:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8002136:	f7ff ffef 	bl	8002118 <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 800213a:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 800213c:	1a30      	subs	r0, r6, r0
 800213e:	2803      	cmp	r0, #3
 8002140:	d800      	bhi.n	8002144 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8002142:	2101      	movs	r1, #1
 8002144:	2002      	movs	r0, #2
 8002146:	f00b fe19 	bl	800dd7c <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 800214a:	f00b fe43 	bl	800ddd4 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800214e:	4c3f      	ldr	r4, [pc, #252]	@ (800224c <RTC_IF_StartTimer+0x11c>)
 8002150:	7923      	ldrb	r3, [r4, #4]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	79a3      	ldrb	r3, [r4, #6]
 8002156:	7967      	ldrb	r7, [r4, #5]
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	79e3      	ldrb	r3, [r4, #7]
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	68a3      	ldr	r3, [r4, #8]
 8002160:	9303      	str	r3, [sp, #12]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8002162:	7e63      	ldrb	r3, [r4, #25]
 8002164:	9304      	str	r3, [sp, #16]
 8002166:	7ea5      	ldrb	r5, [r4, #26]
 8002168:	7ee3      	ldrb	r3, [r4, #27]
 800216a:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 800216c:	f7ff ff5a 	bl	8002024 <RTC_IF_StopTimer>
  rtcAlarmDays =  RTC_DateStruct.Date;
 8002170:	0028      	movs	r0, r5
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8002172:	4b37      	ldr	r3, [pc, #220]	@ (8002250 <RTC_IF_StartTimer+0x120>)
 8002174:	9a03      	ldr	r2, [sp, #12]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8002176:	4937      	ldr	r1, [pc, #220]	@ (8002254 <RTC_IF_StartTimer+0x124>)
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8002178:	1a9a      	subs	r2, r3, r2
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 800217a:	05b3      	lsls	r3, r6, #22
 800217c:	0d9b      	lsrs	r3, r3, #22
 800217e:	18d2      	adds	r2, r2, r3
 8002180:	b292      	uxth	r2, r2
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8002182:	0ab3      	lsrs	r3, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 8002184:	428b      	cmp	r3, r1
 8002186:	d841      	bhi.n	800220c <RTC_IF_StartTimer+0xdc>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8002188:	21e1      	movs	r1, #225	@ 0xe1
  rtcAlarmHours = RTC_TimeStruct.Hours;
 800218a:	9e00      	ldr	r6, [sp, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800218c:	0109      	lsls	r1, r1, #4
 800218e:	428b      	cmp	r3, r1
 8002190:	d241      	bcs.n	8002216 <RTC_IF_StartTimer+0xe6>
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8002192:	2b3b      	cmp	r3, #59	@ 0x3b
 8002194:	d844      	bhi.n	8002220 <RTC_IF_StartTimer+0xf0>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8002196:	0a91      	lsrs	r1, r2, #10
 8002198:	028d      	lsls	r5, r1, #10
 800219a:	1b52      	subs	r2, r2, r5
 800219c:	b292      	uxth	r2, r2
 800219e:	9200      	str	r2, [sp, #0]
 80021a0:	9a01      	ldr	r2, [sp, #4]
 80021a2:	1855      	adds	r5, r2, r1
 80021a4:	18ed      	adds	r5, r5, r3
 80021a6:	b2ad      	uxth	r5, r5
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80021a8:	2d3b      	cmp	r5, #59	@ 0x3b
 80021aa:	d83d      	bhi.n	8002228 <RTC_IF_StartTimer+0xf8>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80021ac:	2f3b      	cmp	r7, #59	@ 0x3b
 80021ae:	d840      	bhi.n	8002232 <RTC_IF_StartTimer+0x102>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80021b0:	2e17      	cmp	r6, #23
 80021b2:	d843      	bhi.n	800223c <RTC_IF_StartTimer+0x10c>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80021b4:	9a04      	ldr	r2, [sp, #16]
  if (RTC_DateStruct.Year % 4 == 0)
 80021b6:	9905      	ldr	r1, [sp, #20]
 80021b8:	4b27      	ldr	r3, [pc, #156]	@ (8002258 <RTC_IF_StartTimer+0x128>)
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80021ba:	3a01      	subs	r2, #1
  if (RTC_DateStruct.Year % 4 == 0)
 80021bc:	0789      	lsls	r1, r1, #30
 80021be:	d142      	bne.n	8002246 <RTC_IF_StartTimer+0x116>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80021c0:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 80021c2:	4288      	cmp	r0, r1
 80021c4:	d902      	bls.n	80021cc <RTC_IF_StartTimer+0x9c>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 80021c6:	f7fe f93f 	bl	8000448 <__aeabi_idivmod>
 80021ca:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80021cc:	9a00      	ldr	r2, [sp, #0]
 80021ce:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <RTC_IF_StartTimer+0x120>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80021d0:	77a5      	strb	r5, [r4, #30]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 80021d6:	23a0      	movs	r3, #160	@ 0xa0
 80021d8:	051b      	lsls	r3, r3, #20
 80021da:	6363      	str	r3, [r4, #52]	@ 0x34
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80021dc:	0023      	movs	r3, r4
 80021de:	333c      	adds	r3, #60	@ 0x3c
 80021e0:	7018      	strb	r0, [r3, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80021e2:	9b02      	ldr	r3, [sp, #8]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80021e4:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80021e6:	77e3      	strb	r3, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80021e8:	0021      	movs	r1, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80021ea:	2380      	movs	r3, #128	@ 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80021ec:	002a      	movs	r2, r5
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80021ee:	005b      	lsls	r3, r3, #1
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80021f0:	311c      	adds	r1, #28
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80021f2:	481a      	ldr	r0, [pc, #104]	@ (800225c <RTC_IF_StartTimer+0x12c>)
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80021f4:	7767      	strb	r7, [r4, #29]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80021f6:	7726      	strb	r6, [r4, #28]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80021f8:	63a5      	str	r5, [r4, #56]	@ 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80021fa:	6325      	str	r5, [r4, #48]	@ 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80021fc:	6423      	str	r3, [r4, #64]	@ 0x40
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021fe:	62a5      	str	r5, [r4, #40]	@ 0x28
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002200:	62e5      	str	r5, [r4, #44]	@ 0x2c
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8002202:	f002 fd01 	bl	8004c08 <HAL_RTC_SetAlarm_IT>
}
 8002206:	0028      	movs	r0, r5
 8002208:	b007      	add	sp, #28
 800220a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 800220c:	4d14      	ldr	r5, [pc, #80]	@ (8002260 <RTC_IF_StartTimer+0x130>)
    rtcAlarmDays++;
 800220e:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 8002210:	195b      	adds	r3, r3, r5
    rtcAlarmDays++;
 8002212:	b280      	uxth	r0, r0
 8002214:	e7b6      	b.n	8002184 <RTC_IF_StartTimer+0x54>
    timeoutValue -= SECONDS_IN_1HOUR;
 8002216:	4d13      	ldr	r5, [pc, #76]	@ (8002264 <RTC_IF_StartTimer+0x134>)
    rtcAlarmHours++;
 8002218:	3601      	adds	r6, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 800221a:	195b      	adds	r3, r3, r5
    rtcAlarmHours++;
 800221c:	b2b6      	uxth	r6, r6
 800221e:	e7b6      	b.n	800218e <RTC_IF_StartTimer+0x5e>
    rtcAlarmMinutes++;
 8002220:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 8002222:	3b3c      	subs	r3, #60	@ 0x3c
    rtcAlarmMinutes++;
 8002224:	b2bf      	uxth	r7, r7
 8002226:	e7b4      	b.n	8002192 <RTC_IF_StartTimer+0x62>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8002228:	3d3c      	subs	r5, #60	@ 0x3c
    rtcAlarmMinutes++;
 800222a:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800222c:	b2ad      	uxth	r5, r5
    rtcAlarmMinutes++;
 800222e:	b2bf      	uxth	r7, r7
 8002230:	e7ba      	b.n	80021a8 <RTC_IF_StartTimer+0x78>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8002232:	3f3c      	subs	r7, #60	@ 0x3c
    rtcAlarmHours++;
 8002234:	3601      	adds	r6, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8002236:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 8002238:	b2b6      	uxth	r6, r6
 800223a:	e7b7      	b.n	80021ac <RTC_IF_StartTimer+0x7c>
    rtcAlarmHours -= HOURS_IN_1DAY;
 800223c:	3e18      	subs	r6, #24
    rtcAlarmDays++;
 800223e:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8002240:	b2b6      	uxth	r6, r6
    rtcAlarmDays++;
 8002242:	b280      	uxth	r0, r0
 8002244:	e7b4      	b.n	80021b0 <RTC_IF_StartTimer+0x80>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8002246:	189b      	adds	r3, r3, r2
 8002248:	7b19      	ldrb	r1, [r3, #12]
 800224a:	e7ba      	b.n	80021c2 <RTC_IF_StartTimer+0x92>
 800224c:	200003e4 	.word	0x200003e4
 8002250:	000003ff 	.word	0x000003ff
 8002254:	0001517f 	.word	0x0001517f
 8002258:	0800e81c 	.word	0x0800e81c
 800225c:	200003c0 	.word	0x200003c0
 8002260:	fffeae80 	.word	0xfffeae80
 8002264:	fffff1f0 	.word	0xfffff1f0

08002268 <RTC_IF_GetTime>:
{
 8002268:	b530      	push	{r4, r5, lr}
 800226a:	b087      	sub	sp, #28
 800226c:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800226e:	a901      	add	r1, sp, #4
 8002270:	4668      	mov	r0, sp
 8002272:	f7ff fee9 	bl	8002048 <RTC_GetCalendarValue>
 8002276:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8002278:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 800227a:	227d      	movs	r2, #125	@ 0x7d
 800227c:	2300      	movs	r3, #0
 800227e:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8002280:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8002282:	f7fe f945 	bl	8000510 <__aeabi_lmul>
 8002286:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8002288:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 800228a:	0aa0      	lsrs	r0, r4, #10
}
 800228c:	b007      	add	sp, #28
 800228e:	bd30      	pop	{r4, r5, pc}

08002290 <RTC_IF_BkUp_Write_Seconds>:
{
 8002290:	b510      	push	{r4, lr}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002292:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <RTC_IF_BkUp_Write_Seconds+0x10>)
{
 8002294:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002296:	2100      	movs	r1, #0
 8002298:	0018      	movs	r0, r3
 800229a:	f002 fddb 	bl	8004e54 <HAL_RTCEx_BKUPWrite>
}
 800229e:	bd10      	pop	{r4, pc}
 80022a0:	200003c0 	.word	0x200003c0

080022a4 <RTC_IF_BkUp_Write_SubSeconds>:
{
 80022a4:	b510      	push	{r4, lr}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80022a6:	4b03      	ldr	r3, [pc, #12]	@ (80022b4 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
{
 80022a8:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80022aa:	2101      	movs	r1, #1
 80022ac:	0018      	movs	r0, r3
 80022ae:	f002 fdd1 	bl	8004e54 <HAL_RTCEx_BKUPWrite>
}
 80022b2:	bd10      	pop	{r4, pc}
 80022b4:	200003c0 	.word	0x200003c0

080022b8 <RTC_IF_BkUp_Read_Seconds>:
{
 80022b8:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80022ba:	2100      	movs	r1, #0
 80022bc:	4801      	ldr	r0, [pc, #4]	@ (80022c4 <RTC_IF_BkUp_Read_Seconds+0xc>)
 80022be:	f002 fdcf 	bl	8004e60 <HAL_RTCEx_BKUPRead>
}
 80022c2:	bd10      	pop	{r4, pc}
 80022c4:	200003c0 	.word	0x200003c0

080022c8 <RTC_IF_BkUp_Read_SubSeconds>:
{
 80022c8:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80022ca:	2101      	movs	r1, #1
 80022cc:	4801      	ldr	r0, [pc, #4]	@ (80022d4 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 80022ce:	f002 fdc7 	bl	8004e60 <HAL_RTCEx_BKUPRead>
}
 80022d2:	bd10      	pop	{r4, pc}
 80022d4:	200003c0 	.word	0x200003c0

080022d8 <RTC_IF_Init>:
{
 80022d8:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 80022da:	4d11      	ldr	r5, [pc, #68]	@ (8002320 <RTC_IF_Init+0x48>)
{
 80022dc:	b08b      	sub	sp, #44	@ 0x2c
  if (RTC_Initalized == false)
 80022de:	782b      	ldrb	r3, [r5, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d119      	bne.n	8002318 <RTC_IF_Init+0x40>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022e4:	3320      	adds	r3, #32
 80022e6:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022e8:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ea:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022ec:	025b      	lsls	r3, r3, #9
 80022ee:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f0:	f002 f98e 	bl	8004610 <HAL_RCCEx_PeriphCLKConfig>
 80022f4:	2800      	cmp	r0, #0
 80022f6:	d000      	beq.n	80022fa <RTC_IF_Init+0x22>
      while (1);
 80022f8:	e7fe      	b.n	80022f8 <RTC_IF_Init+0x20>
    MX_RTC_Init();
 80022fa:	f7ff fded 	bl	8001ed8 <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80022fe:	2180      	movs	r1, #128	@ 0x80
 8002300:	4c08      	ldr	r4, [pc, #32]	@ (8002324 <RTC_IF_Init+0x4c>)
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0020      	movs	r0, r4
 8002306:	f002 fa5f 	bl	80047c8 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800230a:	0020      	movs	r0, r4
 800230c:	f002 fdae 	bl	8004e6c <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 8002310:	f7ff fef4 	bl	80020fc <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 8002314:	2301      	movs	r3, #1
 8002316:	702b      	strb	r3, [r5, #0]
}
 8002318:	2000      	movs	r0, #0
 800231a:	b00b      	add	sp, #44	@ 0x2c
 800231c:	bd30      	pop	{r4, r5, pc}
 800231e:	46c0      	nop			@ (mov r8, r8)
 8002320:	20000428 	.word	0x20000428
 8002324:	200003c0 	.word	0x200003c0

08002328 <RTC_IF_GetTimerValue>:
{
 8002328:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 800232a:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 800232c:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <RTC_IF_GetTimerValue+0x18>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4283      	cmp	r3, r0
 8002332:	d003      	beq.n	800233c <RTC_IF_GetTimerValue+0x14>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8002334:	4668      	mov	r0, sp
 8002336:	a901      	add	r1, sp, #4
 8002338:	f7ff fe86 	bl	8002048 <RTC_GetCalendarValue>
}
 800233c:	b007      	add	sp, #28
 800233e:	bd00      	pop	{pc}
 8002340:	20000428 	.word	0x20000428

08002344 <RTC_IF_DelayMs>:
{
 8002344:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8002346:	227d      	movs	r2, #125	@ 0x7d
 8002348:	2300      	movs	r3, #0
 800234a:	0e41      	lsrs	r1, r0, #25
 800234c:	01c0      	lsls	r0, r0, #7
 800234e:	f7fe f8bf 	bl	80004d0 <__aeabi_uldivmod>
 8002352:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8002354:	f7ff ffe8 	bl	8002328 <RTC_IF_GetTimerValue>
 8002358:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 800235a:	f7ff ffe5 	bl	8002328 <RTC_IF_GetTimerValue>
 800235e:	1b40      	subs	r0, r0, r5
 8002360:	42a0      	cmp	r0, r4
 8002362:	d300      	bcc.n	8002366 <RTC_IF_DelayMs+0x22>
}
 8002364:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 8002366:	46c0      	nop			@ (mov r8, r8)
 8002368:	e7f7      	b.n	800235a <RTC_IF_DelayMs+0x16>

0800236a <HAL_RTC_AlarmAEventCallback>:
{
 800236a:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 800236c:	f00c f816 	bl	800e39c <UTIL_TIMER_IRQ_Handler>
}
 8002370:	bd10      	pop	{r4, pc}

08002372 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002372:	4770      	bx	lr

08002374 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 8002374:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002376:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800237a:	b672      	cpsid	i
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 800237c:	f000 fd5c 	bl	8002e38 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc);
 8002380:	4807      	ldr	r0, [pc, #28]	@ (80023a0 <PWR_EnterStopMode+0x2c>)
 8002382:	f7ff fc3f 	bl	8001c04 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8002386:	2304      	movs	r3, #4
 8002388:	4a06      	ldr	r2, [pc, #24]	@ (80023a4 <PWR_EnterStopMode+0x30>)
 800238a:	6811      	ldr	r1, [r2, #0]
 800238c:	430b      	orrs	r3, r1
 800238e:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002390:	f384 8810 	msr	PRIMASK, r4
  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002394:	2101      	movs	r1, #1
 8002396:	0008      	movs	r0, r1
 8002398:	f001 fd28 	bl	8003dec <HAL_PWR_EnterSTOPMode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800239c:	bd10      	pop	{r4, pc}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	20000284 	.word	0x20000284
 80023a4:	40007000 	.word	0x40007000

080023a8 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80023a8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023aa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80023ae:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 80023b0:	2201      	movs	r2, #1
 80023b2:	4b10      	ldr	r3, [pc, #64]	@ (80023f4 <PWR_ExitStopMode+0x4c>)
 80023b4:	6819      	ldr	r1, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 80023ba:	2204      	movs	r2, #4
 80023bc:	6819      	ldr	r1, [r3, #0]
 80023be:	4211      	tst	r1, r2
 80023c0:	d0fc      	beq.n	80023bc <PWR_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 80023c2:	2280      	movs	r2, #128	@ 0x80
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	0452      	lsls	r2, r2, #17
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 80023cc:	2280      	movs	r2, #128	@ 0x80
 80023ce:	0492      	lsls	r2, r2, #18
 80023d0:	6819      	ldr	r1, [r3, #0]
 80023d2:	4211      	tst	r1, r2
 80023d4:	d0fc      	beq.n	80023d0 <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80023d6:	2203      	movs	r2, #3
 80023d8:	68d9      	ldr	r1, [r3, #12]
 80023da:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80023dc:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80023de:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	400a      	ands	r2, r1
 80023e4:	2a0c      	cmp	r2, #12
 80023e6:	d1fb      	bne.n	80023e0 <PWR_ExitStopMode+0x38>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 80023e8:	f000 fc4c 	bl	8002c84 <CMWX1ZZABZ0XX_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ec:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80023f0:	bd10      	pop	{r4, pc}
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	40021000 	.word	0x40021000

080023f8 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80023f8:	b510      	push	{r4, lr}

  /* USER CODE END EnterSleepMode_1 */
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80023fa:	2101      	movs	r1, #1
 80023fc:	2000      	movs	r0, #0
 80023fe:	f001 fcbd 	bl	8003d7c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002402:	bd10      	pop	{r4, pc}

08002404 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
 8002404:	4770      	bx	lr

08002406 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
 8002406:	4770      	bx	lr

08002408 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	4a09      	ldr	r2, [pc, #36]	@ (8002430 <HAL_MspInit+0x28>)
 800240c:	055b      	lsls	r3, r3, #21
 800240e:	6b91      	ldr	r1, [r2, #56]	@ 0x38
{
 8002410:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	430b      	orrs	r3, r1
 8002414:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8002416:	f001 fca9 	bl	8003d6c <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 800241a:	f001 fd2d 	bl	8003e78 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800241e:	2308      	movs	r3, #8
 8002420:	4a04      	ldr	r2, [pc, #16]	@ (8002434 <HAL_MspInit+0x2c>)
 8002422:	6811      	ldr	r1, [r2, #0]
 8002424:	430b      	orrs	r3, r1
 8002426:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8002428:	f001 fd1c 	bl	8003e64 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242c:	bd10      	pop	{r4, pc}
 800242e:	46c0      	nop			@ (mov r8, r8)
 8002430:	40021000 	.word	0x40021000
 8002434:	40022000 	.word	0x40022000

08002438 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243a:	0006      	movs	r6, r0
 800243c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243e:	2214      	movs	r2, #20
 8002440:	2100      	movs	r1, #0
 8002442:	a801      	add	r0, sp, #4
 8002444:	f00c f920 	bl	800e688 <memset>
  if(hspi->Instance==SPI2)
 8002448:	4b31      	ldr	r3, [pc, #196]	@ (8002510 <HAL_SPI_MspInit+0xd8>)
 800244a:	6832      	ldr	r2, [r6, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d15d      	bne.n	800250c <HAL_SPI_MspInit+0xd4>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002450:	2280      	movs	r2, #128	@ 0x80

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	2702      	movs	r7, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002454:	4b2f      	ldr	r3, [pc, #188]	@ (8002514 <HAL_SPI_MspInit+0xdc>)
 8002456:	01d2      	lsls	r2, r2, #7
 8002458:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    */

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245a:	2403      	movs	r4, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 800245c:	430a      	orrs	r2, r1
 800245e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002462:	482d      	ldr	r0, [pc, #180]	@ (8002518 <HAL_SPI_MspInit+0xe0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002464:	433a      	orrs	r2, r7
 8002466:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246a:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	403b      	ands	r3, r7
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002478:	3bfc      	subs	r3, #252	@ 0xfc
 800247a:	3bff      	subs	r3, #255	@ 0xff
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800247e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	9702      	str	r7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f001 fb1b 	bl	8003abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13;
 8002486:	23e0      	movs	r3, #224	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13;
 800248a:	021b      	lsls	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	4822      	ldr	r0, [pc, #136]	@ (8002518 <HAL_SPI_MspInit+0xe0>)
 800248e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13;
 8002490:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002492:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002498:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249a:	f001 fb0f 	bl	8003abc <HAL_GPIO_Init>

    /* USER CODE BEGIN SPI2_MspInit 1 */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800249e:	4c1f      	ldr	r4, [pc, #124]	@ (800251c <HAL_SPI_MspInit+0xe4>)
 80024a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002520 <HAL_SPI_MspInit+0xe8>)
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80024a2:	0020      	movs	r0, r4
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80024a4:	6023      	str	r3, [r4, #0]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024a6:	2380      	movs	r3, #128	@ 0x80
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 80024a8:	6067      	str	r7, [r4, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024aa:	60a5      	str	r5, [r4, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ac:	60e5      	str	r5, [r4, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ae:	6123      	str	r3, [r4, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b0:	6165      	str	r5, [r4, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b2:	61a5      	str	r5, [r4, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80024b4:	61e5      	str	r5, [r4, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024b6:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80024b8:	f001 f9a0 	bl	80037fc <HAL_DMA_Init>
 80024bc:	42a8      	cmp	r0, r5
 80024be:	d001      	beq.n	80024c4 <HAL_SPI_MspInit+0x8c>
    {
      Error_Handler();
 80024c0:	f7ff fd08 	bl	8001ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80024c4:	4b17      	ldr	r3, [pc, #92]	@ (8002524 <HAL_SPI_MspInit+0xec>)
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80024c6:	0020      	movs	r0, r4
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80024c8:	64a3      	str	r3, [r4, #72]	@ 0x48
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 80024ca:	2302      	movs	r3, #2
 80024cc:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024ce:	330e      	adds	r3, #14
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024d0:	2280      	movs	r2, #128	@ 0x80
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024d2:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d4:	2300      	movs	r3, #0
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80024d6:	64f4      	str	r4, [r6, #76]	@ 0x4c
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80024d8:	3048      	adds	r0, #72	@ 0x48
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80024da:	62a6      	str	r6, [r4, #40]	@ 0x28
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024dc:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024de:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024e0:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e2:	6623      	str	r3, [r4, #96]	@ 0x60
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80024e4:	6663      	str	r3, [r4, #100]	@ 0x64
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024e6:	66a3      	str	r3, [r4, #104]	@ 0x68
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80024e8:	f001 f988 	bl	80037fc <HAL_DMA_Init>
 80024ec:	2800      	cmp	r0, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 80024f0:	f7ff fcf0 	bl	8001ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80024f4:	0023      	movs	r3, r4

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80024f6:	2200      	movs	r2, #0
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80024f8:	3348      	adds	r3, #72	@ 0x48
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80024fa:	201a      	movs	r0, #26
 80024fc:	0011      	movs	r1, r2
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80024fe:	64b3      	str	r3, [r6, #72]	@ 0x48
 8002500:	6726      	str	r6, [r4, #112]	@ 0x70
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002502:	f001 f935 	bl	8003770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002506:	201a      	movs	r0, #26
 8002508:	f001 f95c 	bl	80037c4 <HAL_NVIC_EnableIRQ>
    /* USER CODE END SPI2_MspInit 1 */
  }
}
 800250c:	b007      	add	sp, #28
 800250e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002510:	40003800 	.word	0x40003800
 8002514:	40021000 	.word	0x40021000
 8002518:	50000400 	.word	0x50000400
 800251c:	2000042c 	.word	0x2000042c
 8002520:	40020044 	.word	0x40020044
 8002524:	40020058 	.word	0x40020058

08002528 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <NMI_Handler>

0800252a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <HardFault_Handler>

0800252c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252c:	4770      	bx	lr

0800252e <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800252e:	4770      	bx	lr

08002530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002530:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002532:	f000 fdc1 	bl	80030b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002536:	bd10      	pop	{r4, pc}

08002538 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 8002538:	b510      	push	{r4, lr}
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800253a:	4803      	ldr	r0, [pc, #12]	@ (8002548 <EXTI0_1_IRQHandler+0x10>)
 800253c:	f001 faac 	bl	8003a98 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 8002540:	4802      	ldr	r0, [pc, #8]	@ (800254c <EXTI0_1_IRQHandler+0x14>)
 8002542:	f001 faa9 	bl	8003a98 <HAL_EXTI_IRQHandler>
#endif
}
 8002546:	bd10      	pop	{r4, pc}
 8002548:	200005c8 	.word	0x200005c8
 800254c:	200005c0 	.word	0x200005c0

08002550 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8002550:	b510      	push	{r4, lr}
#if (defined(CMWX1ZZABZ0XX))
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002552:	2004      	movs	r0, #4
 8002554:	f001 fbfe 	bl	8003d54 <HAL_GPIO_EXTI_IRQHandler>
#endif
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}
 8002558:	bd10      	pop	{r4, pc}
	...

0800255c <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 800255c:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 800255e:	4803      	ldr	r0, [pc, #12]	@ (800256c <EXTI4_15_IRQHandler+0x10>)
 8002560:	f001 fa9a 	bl	8003a98 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002564:	4802      	ldr	r0, [pc, #8]	@ (8002570 <EXTI4_15_IRQHandler+0x14>)
 8002566:	f001 fa97 	bl	8003a98 <HAL_EXTI_IRQHandler>
#else
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
#endif
}
 800256a:	bd10      	pop	{r4, pc}
 800256c:	200005b8 	.word	0x200005b8
 8002570:	200005d0 	.word	0x200005d0

08002574 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002574:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002576:	4803      	ldr	r0, [pc, #12]	@ (8002584 <DMA1_Channel4_5_6_7_IRQHandler+0x10>)
 8002578:	f001 fa35 	bl	80039e6 <HAL_DMA_IRQHandler>
  //HAL_DMA_IRQHandler(&hdma_spi2_tx);
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800257c:	4802      	ldr	r0, [pc, #8]	@ (8002588 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800257e:	f001 fa32 	bl	80039e6 <HAL_DMA_IRQHandler>

  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002582:	bd10      	pop	{r4, pc}
 8002584:	2000042c 	.word	0x2000042c
 8002588:	200004bc 	.word	0x200004bc

0800258c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800258c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800258e:	4802      	ldr	r0, [pc, #8]	@ (8002598 <USART2_IRQHandler+0xc>)
 8002590:	f003 fa3e 	bl	8005a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002594:	bd10      	pop	{r4, pc}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	2000033c 	.word	0x2000033c

0800259c <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 800259c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800259e:	4802      	ldr	r0, [pc, #8]	@ (80025a8 <SPI2_IRQHandler+0xc>)
 80025a0:	f003 f8dc 	bl	800575c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	200002e0 	.word	0x200002e0

080025ac <RTC_IRQHandler>:


void RTC_IRQHandler(void)
{
 80025ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80025ae:	4802      	ldr	r0, [pc, #8]	@ (80025b8 <RTC_IRQHandler+0xc>)
 80025b0:	f002 f968 	bl	8004884 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80025b4:	bd10      	pop	{r4, pc}
 80025b6:	46c0      	nop			@ (mov r8, r8)
 80025b8:	200003c0 	.word	0x200003c0

080025bc <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 80025bc:	b40c      	push	{r2, r3}
 80025be:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80025c0:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 80025c2:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80025c4:	4a03      	ldr	r2, [pc, #12]	@ (80025d4 <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 80025c6:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80025c8:	f00b ff2a 	bl	800e420 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80025cc:	b003      	add	sp, #12
 80025ce:	bc08      	pop	{r3}
 80025d0:	b002      	add	sp, #8
 80025d2:	4718      	bx	r3
 80025d4:	0800f0d6 	.word	0x0800f0d6

080025d8 <TimestampNow>:
{
 80025d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80025da:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 80025dc:	ae02      	add	r6, sp, #8
 80025de:	0030      	movs	r0, r6
{
 80025e0:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 80025e2:	f00b fd3f 	bl	800e064 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80025e6:	2104      	movs	r1, #4
 80025e8:	5e73      	ldrsh	r3, [r6, r1]
 80025ea:	0020      	movs	r0, r4
 80025ec:	2110      	movs	r1, #16
 80025ee:	4a05      	ldr	r2, [pc, #20]	@ (8002604 <TimestampNow+0x2c>)
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	9b02      	ldr	r3, [sp, #8]
 80025f4:	f7ff ffe2 	bl	80025bc <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 80025f8:	0020      	movs	r0, r4
 80025fa:	f7fd fd85 	bl	8000108 <strlen>
 80025fe:	8028      	strh	r0, [r5, #0]
}
 8002600:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	0800f0d6 	.word	0x0800f0d6

08002608 <SystemApp_Init>:
{
 8002608:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800260c:	2502      	movs	r5, #2
{
 800260e:	b085      	sub	sp, #20
  UTIL_TIMER_Init();
 8002610:	f00b fdac 	bl	800e16c <UTIL_TIMER_Init>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002614:	2104      	movs	r1, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	4b1f      	ldr	r3, [pc, #124]	@ (8002694 <SystemApp_Init+0x8c>)
 8002618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800261a:	4322      	orrs	r2, r4
 800261c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800261e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002620:	4022      	ands	r2, r4
 8002622:	9200      	str	r2, [sp, #0]
 8002624:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002628:	432a      	orrs	r2, r5
 800262a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800262c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800262e:	402a      	ands	r2, r5
 8002630:	9201      	str	r2, [sp, #4]
 8002632:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002636:	430a      	orrs	r2, r1
 8002638:	62da      	str	r2, [r3, #44]	@ 0x2c
 800263a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800263c:	400a      	ands	r2, r1
 800263e:	9202      	str	r2, [sp, #8]
 8002640:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002644:	317c      	adds	r1, #124	@ 0x7c
 8002646:	430a      	orrs	r2, r1
 8002648:	62da      	str	r2, [r3, #44]	@ 0x2c
 800264a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264c:	400b      	ands	r3, r1
 800264e:	9303      	str	r3, [sp, #12]
 8002650:	9b03      	ldr	r3, [sp, #12]
  DBG_Disable();
 8002652:	f000 f8a1 	bl	8002798 <DBG_Disable>
  DBG_ProbesInit();
 8002656:	f000 f8a3 	bl	80027a0 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 800265a:	f00b fa71 	bl	800db40 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800265e:	480e      	ldr	r0, [pc, #56]	@ (8002698 <SystemApp_Init+0x90>)
 8002660:	f00b fa88 	bl	800db74 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002664:	0028      	movs	r0, r5
 8002666:	f00b fa8b 	bl	800db80 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 800266a:	f7ff fb39 	bl	8001ce0 <SYS_InitMeasurement>
  Sx_Board_Bus_Init();
 800266e:	f000 fcb9 	bl	8002fe4 <CMWX1ZZABZ0XX_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8002672:	f000 fb07 	bl	8002c84 <CMWX1ZZABZ0XX_RADIO_IoInit>
  EnvSensors_Init();
 8002676:	f000 f894 	bl	80027a2 <EnvSensors_Init>
  UTIL_LPM_Init();
 800267a:	f00b fb77 	bl	800dd6c <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800267e:	0021      	movs	r1, r4
 8002680:	0020      	movs	r0, r4
 8002682:	f00b fb91 	bl	800dda8 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002686:	0021      	movs	r1, r4
 8002688:	0020      	movs	r0, r4
 800268a:	f00b fb77 	bl	800dd7c <UTIL_LPM_SetStopMode>
}
 800268e:	b005      	add	sp, #20
 8002690:	bd30      	pop	{r4, r5, pc}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	40021000 	.word	0x40021000
 8002698:	080025d9 	.word	0x080025d9

0800269c <UTIL_SEQ_Idle>:
{
 800269c:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 800269e:	f00b fbab 	bl	800ddf8 <UTIL_LPM_EnterLowPower>
}
 80026a2:	bd10      	pop	{r4, pc}

080026a4 <GetBatteryLevel>:
{
 80026a4:	b513      	push	{r0, r1, r4, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80026a6:	f7ff fb23 	bl	8001cf0 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80026aa:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <GetBatteryLevel+0x3c>)
    batteryLevel = LORAWAN_MAX_BAT;
 80026ac:	24fe      	movs	r4, #254	@ 0xfe
  if (batteryLevelmV > VDD_BAT)
 80026ae:	4298      	cmp	r0, r3
 80026b0:	d80d      	bhi.n	80026ce <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80026b2:	23e1      	movs	r3, #225	@ 0xe1
    batteryLevel = 0;
 80026b4:	2400      	movs	r4, #0
  else if (batteryLevelmV < VDD_MIN)
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4298      	cmp	r0, r3
 80026ba:	d308      	bcc.n	80026ce <GetBatteryLevel+0x2a>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80026bc:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <GetBatteryLevel+0x40>)
 80026be:	2196      	movs	r1, #150	@ 0x96
 80026c0:	18c3      	adds	r3, r0, r3
 80026c2:	20fe      	movs	r0, #254	@ 0xfe
 80026c4:	00c9      	lsls	r1, r1, #3
 80026c6:	4358      	muls	r0, r3
 80026c8:	f7fd fd4e 	bl	8000168 <__udivsi3>
 80026cc:	b2c4      	uxtb	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 80026ce:	2201      	movs	r2, #1
 80026d0:	2100      	movs	r1, #0
 80026d2:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <GetBatteryLevel+0x44>)
 80026d4:	9400      	str	r4, [sp, #0]
 80026d6:	2002      	movs	r0, #2
 80026d8:	f00b fa9a 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
}
 80026dc:	0020      	movs	r0, r4
 80026de:	bd16      	pop	{r1, r2, r4, pc}
 80026e0:	00000bb8 	.word	0x00000bb8
 80026e4:	fffff8f8 	.word	0xfffff8f8
 80026e8:	0800f0df 	.word	0x0800f0df

080026ec <GetTemperatureLevel>:
{
 80026ec:	b510      	push	{r4, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 80026ee:	f7ff fb15 	bl	8001d1c <SYS_GetTemperatureLevel>
 80026f2:	17c3      	asrs	r3, r0, #31
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	1818      	adds	r0, r3, r0
 80026f8:	1200      	asrs	r0, r0, #8
  return temperatureLevel;
 80026fa:	b280      	uxth	r0, r0
}
 80026fc:	bd10      	pop	{r4, pc}

080026fe <GetUniqueId>:
{
 80026fe:	b570      	push	{r4, r5, r6, lr}
 8002700:	0004      	movs	r4, r0
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002702:	f000 fce5 	bl	80030d0 <HAL_GetUIDw0>
 8002706:	0005      	movs	r5, r0
 8002708:	f000 fcee 	bl	80030e8 <HAL_GetUIDw2>
 800270c:	182d      	adds	r5, r5, r0
  uint32_t ID_2_val = HAL_GetUIDw1();
 800270e:	f000 fce5 	bl	80030dc <HAL_GetUIDw1>
  id[7] = (ID_1_3_val) >> 24;
 8002712:	0e2b      	lsrs	r3, r5, #24
 8002714:	71e3      	strb	r3, [r4, #7]
  id[6] = (ID_1_3_val) >> 16;
 8002716:	0c2b      	lsrs	r3, r5, #16
 8002718:	71a3      	strb	r3, [r4, #6]
  id[5] = (ID_1_3_val) >> 8;
 800271a:	0a2b      	lsrs	r3, r5, #8
 800271c:	7163      	strb	r3, [r4, #5]
  id[3] = (ID_2_val) >> 24;
 800271e:	0e03      	lsrs	r3, r0, #24
 8002720:	70e3      	strb	r3, [r4, #3]
  id[2] = (ID_2_val) >> 16;
 8002722:	0c03      	lsrs	r3, r0, #16
 8002724:	70a3      	strb	r3, [r4, #2]
  id[1] = (ID_2_val) >> 8;
 8002726:	0a03      	lsrs	r3, r0, #8
  id[4] = (ID_1_3_val);
 8002728:	7125      	strb	r5, [r4, #4]
  id[1] = (ID_2_val) >> 8;
 800272a:	7063      	strb	r3, [r4, #1]
  id[0] = (ID_2_val);
 800272c:	7020      	strb	r0, [r4, #0]
}
 800272e:	bd70      	pop	{r4, r5, r6, pc}

08002730 <GetDevAddr>:
{
 8002730:	b510      	push	{r4, lr}
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002732:	f000 fccd 	bl	80030d0 <HAL_GetUIDw0>
 8002736:	0004      	movs	r4, r0
 8002738:	f000 fcd0 	bl	80030dc <HAL_GetUIDw1>
 800273c:	4044      	eors	r4, r0
 800273e:	f000 fcd3 	bl	80030e8 <HAL_GetUIDw2>
 8002742:	4060      	eors	r0, r4
}
 8002744:	bd10      	pop	{r4, pc}

08002746 <UTIL_ADV_TRACE_PreSendHook>:
{
 8002746:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002748:	2101      	movs	r1, #1
 800274a:	2004      	movs	r0, #4
 800274c:	f00b fb16 	bl	800dd7c <UTIL_LPM_SetStopMode>
}
 8002750:	bd10      	pop	{r4, pc}

08002752 <UTIL_ADV_TRACE_PostSendHook>:
{
 8002752:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002754:	2100      	movs	r1, #0
 8002756:	2004      	movs	r0, #4
 8002758:	f00b fb10 	bl	800dd7c <UTIL_LPM_SetStopMode>
}
 800275c:	bd10      	pop	{r4, pc}

0800275e <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800275e:	2000      	movs	r0, #0
 8002760:	4770      	bx	lr

08002762 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002762:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8002764:	f7ff fde0 	bl	8002328 <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8002768:	bd10      	pop	{r4, pc}

0800276a <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800276a:	b507      	push	{r0, r1, r2, lr}
 800276c:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 800276e:	9801      	ldr	r0, [sp, #4]
 8002770:	f7ff fde8 	bl	8002344 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002774:	bd07      	pop	{r0, r1, r2, pc}
	...

08002778 <DBG_ConfigForLpm.part.0>:
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
  {
    __HAL_RCC_DBGMCU_CLK_ENABLE();
 8002778:	2380      	movs	r3, #128	@ 0x80
 800277a:	4a06      	ldr	r2, [pc, #24]	@ (8002794 <DBG_ConfigForLpm.part.0+0x1c>)
void DBG_ConfigForLpm(uint8_t enableDbg)
 800277c:	b510      	push	{r4, lr}
    __HAL_RCC_DBGMCU_CLK_ENABLE();
 800277e:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8002780:	03db      	lsls	r3, r3, #15
 8002782:	430b      	orrs	r3, r1
 8002784:	6353      	str	r3, [r2, #52]	@ 0x34

    HAL_DBGMCU_EnableDBGSleepMode();
 8002786:	f000 fcb5 	bl	80030f4 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 800278a:	f000 fcbb 	bl	8003104 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 800278e:	f000 fcc1 	bl	8003114 <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8002792:	bd10      	pop	{r4, pc}
 8002794:	40021000 	.word	0x40021000

08002798 <DBG_Disable>:
{
 8002798:	b510      	push	{r4, lr}
 800279a:	f7ff ffed 	bl	8002778 <DBG_ConfigForLpm.part.0>
}
 800279e:	bd10      	pop	{r4, pc}

080027a0 <DBG_ProbesInit>:
#endif /* PROBE_PINS_ENABLED */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 80027a0:	4770      	bx	lr

080027a2 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
}
 80027a2:	2000      	movs	r0, #0
 80027a4:	4770      	bx	lr
	...

080027a8 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance        = USART2;
 80027a8:	480a      	ldr	r0, [pc, #40]	@ (80027d4 <MX_USART2_UART_Init+0x2c>)
 80027aa:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <MX_USART2_UART_Init+0x30>)
{
 80027ac:	b510      	push	{r4, lr}
  huart2.Instance        = USART2;
 80027ae:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate   = USART_BAUDRATE;
 80027b0:	23e1      	movs	r3, #225	@ 0xe1
 80027b2:	025b      	lsls	r3, r3, #9
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits   = UART_STOPBITS_1;
  huart2.Init.Parity     = UART_PARITY_NONE;
  huart2.Init.Mode       = UART_MODE_TX;
 80027b4:	2208      	movs	r2, #8
  huart2.Init.BaudRate   = USART_BAUDRATE;
 80027b6:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027b8:	2300      	movs	r3, #0
  huart2.Init.Mode       = UART_MODE_TX;
 80027ba:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027bc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits   = UART_STOPBITS_1;
 80027be:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity     = UART_PARITY_NONE;
 80027c0:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80027c2:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027c4:	f003 fca4 	bl	8006110 <HAL_UART_Init>
 80027c8:	2800      	cmp	r0, #0
 80027ca:	d001      	beq.n	80027d0 <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
 80027cc:	f7ff fb82 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027d0:	bd10      	pop	{r4, pc}
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	2000033c 	.word	0x2000033c
 80027d8:	40004400 	.word	0x40004400

080027dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 80027dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027de:	0005      	movs	r5, r0
 80027e0:	b093      	sub	sp, #76	@ 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e2:	2214      	movs	r2, #20
 80027e4:	2100      	movs	r1, #0
 80027e6:	a804      	add	r0, sp, #16
 80027e8:	f00b ff4e 	bl	800e688 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027ec:	2224      	movs	r2, #36	@ 0x24
 80027ee:	2100      	movs	r1, #0
 80027f0:	a809      	add	r0, sp, #36	@ 0x24
 80027f2:	f00b ff49 	bl	800e688 <memset>

  if (uartHandle->Instance == USART2)
 80027f6:	4b37      	ldr	r3, [pc, #220]	@ (80028d4 <HAL_UART_MspInit+0xf8>)
 80027f8:	682a      	ldr	r2, [r5, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d168      	bne.n	80028d0 <HAL_UART_MspInit+0xf4>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 80027fe:	2201      	movs	r2, #1
 8002800:	4b35      	ldr	r3, [pc, #212]	@ (80028d8 <HAL_UART_MspInit+0xfc>)
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002802:	2604      	movs	r6, #4
    USARTx_TX_GPIO_CLK_ENABLE();
 8002804:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002806:	4311      	orrs	r1, r2
 8002808:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800280a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800280c:	4011      	ands	r1, r2
 800280e:	9101      	str	r1, [sp, #4]
 8002810:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 8002812:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002814:	4311      	orrs	r1, r2
 8002816:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8002818:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800281a:	4011      	ands	r1, r2
 800281c:	9102      	str	r1, [sp, #8]
 800281e:	9902      	ldr	r1, [sp, #8]
    __USART2_CLK_ENABLE();
 8002820:	2180      	movs	r1, #128	@ 0x80
 8002822:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002824:	0289      	lsls	r1, r1, #10
 8002826:	4308      	orrs	r0, r1
 8002828:	6398      	str	r0, [r3, #56]	@ 0x38
    DMAx_CLK_ENABLE();
 800282a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800282c:	4310      	orrs	r0, r2
 800282e:	6318      	str	r0, [r3, #48]	@ 0x30
 8002830:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002832:	4002      	ands	r2, r0
 8002834:	9203      	str	r2, [sp, #12]
 8002836:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 8002838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800283a:	a809      	add	r0, sp, #36	@ 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 800283c:	4311      	orrs	r1, r2
 800283e:	6399      	str	r1, [r3, #56]	@ 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002840:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002842:	960c      	str	r6, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002844:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002846:	f001 fee3 	bl	8004610 <HAL_RCCEx_PeriphCLKConfig>
 800284a:	2800      	cmp	r0, #0
 800284c:	d001      	beq.n	8002852 <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 800284e:	f7ff fb41 	bl	8001ed4 <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002852:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002858:	2303      	movs	r3, #3
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 800285a:	a904      	add	r1, sp, #16
 800285c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002860:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8002862:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002866:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002868:	f001 f928 	bl	8003abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 800286c:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 800286e:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8002870:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002872:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002874:	3b05      	subs	r3, #5
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002876:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800287a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800287e:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002880:	f001 f91c 	bl	8003abc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8002884:	4f15      	ldr	r7, [pc, #84]	@ (80028dc <HAL_UART_MspInit+0x100>)
 8002886:	4b16      	ldr	r3, [pc, #88]	@ (80028e0 <HAL_UART_MspInit+0x104>)
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;

    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002888:	0038      	movs	r0, r7
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800288a:	603b      	str	r3, [r7, #0]
    hdma_usart2_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800288c:	2310      	movs	r3, #16
 800288e:	60bb      	str	r3, [r7, #8]
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002890:	3370      	adds	r3, #112	@ 0x70
    hdma_usart2_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8002892:	607e      	str	r6, [r7, #4]
    hdma_usart2_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002894:	60fc      	str	r4, [r7, #12]
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002896:	613b      	str	r3, [r7, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002898:	617c      	str	r4, [r7, #20]
    hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800289a:	61bc      	str	r4, [r7, #24]
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
 800289c:	61fc      	str	r4, [r7, #28]
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;
 800289e:	623c      	str	r4, [r7, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028a0:	f000 ffac 	bl	80037fc <HAL_DMA_Init>
 80028a4:	42a0      	cmp	r0, r4
 80028a6:	d001      	beq.n	80028ac <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80028a8:	f7ff fb14 	bl	8001ed4 <Error_Handler>
    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80028ac:	2201      	movs	r2, #1
 80028ae:	2100      	movs	r1, #0
 80028b0:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 80028b2:	66ef      	str	r7, [r5, #108]	@ 0x6c
 80028b4:	62bd      	str	r5, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80028b6:	f000 ff5b 	bl	8003770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 80028ba:	200b      	movs	r0, #11
 80028bc:	f000 ff82 	bl	80037c4 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 80028c0:	201c      	movs	r0, #28
 80028c2:	2201      	movs	r2, #1
 80028c4:	2100      	movs	r1, #0
 80028c6:	f000 ff53 	bl	8003770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 80028ca:	201c      	movs	r0, #28
 80028cc:	f000 ff7a 	bl	80037c4 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 80028d0:	b013      	add	sp, #76	@ 0x4c
 80028d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d4:	40004400 	.word	0x40004400
 80028d8:	40021000 	.word	0x40021000
 80028dc:	200004bc 	.word	0x200004bc
 80028e0:	40020080 	.word	0x40020080

080028e4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_UART_MspDeInit+0x30>)
 80028e6:	6802      	ldr	r2, [r0, #0]
{
 80028e8:	b510      	push	{r4, lr}
 80028ea:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART2)
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d10f      	bne.n	8002910 <HAL_UART_MspDeInit+0x2c>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80028f0:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 80028f2:	4a09      	ldr	r2, [pc, #36]	@ (8002918 <HAL_UART_MspDeInit+0x34>)
 80028f4:	4909      	ldr	r1, [pc, #36]	@ (800291c <HAL_UART_MspDeInit+0x38>)
 80028f6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80028f8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 80028fa:	400b      	ands	r3, r1
 80028fc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80028fe:	210c      	movs	r1, #12
 8002900:	f001 f998 	bl	8003c34 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002904:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8002906:	f000 ffbd 	bl	8003884 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800290a:	201c      	movs	r0, #28
 800290c:	f000 ff66 	bl	80037dc <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002910:	bd10      	pop	{r4, pc}
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	40004400 	.word	0x40004400
 8002918:	40021000 	.word	0x40021000
 800291c:	fffdffff 	.word	0xfffdffff

08002920 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002920:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002922:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <vcom_Init+0x14>)
 8002924:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002926:	f7ff fa27 	bl	8001d78 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800292a:	f7ff ff3d 	bl	80027a8 <MX_USART2_UART_Init>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800292e:	2000      	movs	r0, #0
 8002930:	bd10      	pop	{r4, pc}
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	20000504 	.word	0x20000504

08002938 <vcom_DeInit>:
{
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002938:	2280      	movs	r2, #128	@ 0x80
 800293a:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <vcom_DeInit+0x28>)
 800293c:	0292      	lsls	r2, r2, #10
 800293e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
{
 8002940:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 8002942:	430a      	orrs	r2, r1
 8002944:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8002946:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002948:	4906      	ldr	r1, [pc, #24]	@ (8002964 <vcom_DeInit+0x2c>)

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 800294a:	4807      	ldr	r0, [pc, #28]	@ (8002968 <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 800294c:	400a      	ands	r2, r1
 800294e:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_UART_MspDeInit(&huart2);
 8002950:	f7ff ffc8 	bl	80028e4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002954:	200b      	movs	r0, #11
 8002956:	f000 ff41 	bl	80037dc <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800295a:	2000      	movs	r0, #0
 800295c:	bd10      	pop	{r4, pc}
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	40021000 	.word	0x40021000
 8002964:	fffdffff 	.word	0xfffdffff
 8002968:	2000033c 	.word	0x2000033c

0800296c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800296c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 800296e:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <vcom_Trace_DMA+0x14>)
{
 8002970:	000a      	movs	r2, r1
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002972:	0001      	movs	r1, r0
 8002974:	0018      	movs	r0, r3
 8002976:	f002 ffa3 	bl	80058c0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800297a:	2000      	movs	r0, #0
 800297c:	bd10      	pop	{r4, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	2000033c 	.word	0x2000033c

08002984 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002984:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002986:	2180      	movs	r1, #128	@ 0x80

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002988:	4c10      	ldr	r4, [pc, #64]	@ (80029cc <vcom_ReceiveInit+0x48>)
  RxCpltCallback = RxCb;
 800298a:	4d11      	ldr	r5, [pc, #68]	@ (80029d0 <vcom_ReceiveInit+0x4c>)
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800298c:	9a01      	ldr	r2, [sp, #4]
  RxCpltCallback = RxCb;
 800298e:	6068      	str	r0, [r5, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002990:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002992:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002994:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002996:	f003 fc6b 	bl	8006270 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800299a:	2280      	movs	r2, #128	@ 0x80
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	0252      	lsls	r2, r2, #9
 80029a0:	69d9      	ldr	r1, [r3, #28]
 80029a2:	4211      	tst	r1, r2
 80029a4:	d1fc      	bne.n	80029a0 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80029a6:	2280      	movs	r2, #128	@ 0x80
 80029a8:	03d2      	lsls	r2, r2, #15
 80029aa:	69d9      	ldr	r1, [r3, #28]
 80029ac:	4211      	tst	r1, r2
 80029ae:	d0fc      	beq.n	80029aa <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80029b0:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80029b2:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80029b4:	430a      	orrs	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&huart2);
 80029b8:	f003 fca0 	bl	80062fc <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80029bc:	0029      	movs	r1, r5
 80029be:	2201      	movs	r2, #1
 80029c0:	0020      	movs	r0, r4
 80029c2:	3108      	adds	r1, #8
 80029c4:	f003 fc20 	bl	8006208 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80029c8:	2000      	movs	r0, #0
 80029ca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80029cc:	2000033c 	.word	0x2000033c
 80029d0:	20000504 	.word	0x20000504

080029d4 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 80029d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80029d6:	4b02      	ldr	r3, [pc, #8]	@ (80029e0 <HAL_UART_TxCpltCallback+0xc>)
 80029d8:	2000      	movs	r0, #0
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80029de:	bd10      	pop	{r4, pc}
 80029e0:	20000504 	.word	0x20000504

080029e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 80029e4:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 80029e6:	4c0a      	ldr	r4, [pc, #40]	@ (8002a10 <HAL_UART_RxCpltCallback+0x2c>)
{
 80029e8:	0005      	movs	r5, r0
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 80029ea:	6863      	ldr	r3, [r4, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <HAL_UART_RxCpltCallback+0x1c>
 80029f0:	1d02      	adds	r2, r0, #4
 80029f2:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	d103      	bne.n	8002a00 <HAL_UART_RxCpltCallback+0x1c>
  {
    RxCpltCallback(&charRx, 1, 0);
 80029f8:	0020      	movs	r0, r4
 80029fa:	2101      	movs	r1, #1
 80029fc:	3008      	adds	r0, #8
 80029fe:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8002a00:	0021      	movs	r1, r4
 8002a02:	0028      	movs	r0, r5
 8002a04:	2201      	movs	r2, #1
 8002a06:	3108      	adds	r1, #8
 8002a08:	f003 fbfe 	bl	8006208 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002a0c:	bd70      	pop	{r4, r5, r6, pc}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	20000504 	.word	0x20000504

08002a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	   ldr   r0, =_estack
 8002a14:	480d      	ldr	r0, [pc, #52]	@ (8002a4c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002a16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a18:	480d      	ldr	r0, [pc, #52]	@ (8002a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a1a:	490e      	ldr	r1, [pc, #56]	@ (8002a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a58 <LoopForever+0xe>)
  movs r3, #0
 8002a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a20:	e002      	b.n	8002a28 <LoopCopyDataInit>

08002a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a26:	3304      	adds	r3, #4

08002a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a2c:	d3f9      	bcc.n	8002a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a30:	4c0b      	ldr	r4, [pc, #44]	@ (8002a60 <LoopForever+0x16>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a34:	e001      	b.n	8002a3a <LoopFillZerobss>

08002a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a38:	3204      	adds	r2, #4

08002a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a3c:	d3fb      	bcc.n	8002a36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a3e:	f000 faf9 	bl	8003034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a42:	f00b fe29 	bl	800e698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a46:	f7ff f9f7 	bl	8001e38 <main>

08002a4a <LoopForever>:

LoopForever:
    b LoopForever
 8002a4a:	e7fe      	b.n	8002a4a <LoopForever>
	   ldr   r0, =_estack
 8002a4c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a54:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8002a58:	0800f420 	.word	0x0800f420
  ldr r2, =_sbss
 8002a5c:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8002a60:	20001bc4 	.word	0x20001bc4

08002a64 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a64:	e7fe      	b.n	8002a64 <ADC1_COMP_IRQHandler>
	...

08002a68 <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002a68:	23fa      	movs	r3, #250	@ 0xfa
{
 8002a6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a6c:	0005      	movs	r5, r0
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002a6e:	009b      	lsls	r3, r3, #2
{
 8002a70:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	4806      	ldr	r0, [pc, #24]	@ (8002a90 <BSP_SPI1_SendRecv+0x28>)
 8002a76:	0013      	movs	r3, r2
 8002a78:	000a      	movs	r2, r1
 8002a7a:	0029      	movs	r1, r5
 8002a7c:	f002 fb42 	bl	8005104 <HAL_SPI_TransmitReceive>
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d101      	bne.n	8002a88 <BSP_SPI1_SendRecv+0x20>
  {
    ret = len;
 8002a84:	0020      	movs	r0, r4
  }
  return ret;
}
 8002a86:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002a88:	2006      	movs	r0, #6
 8002a8a:	4240      	negs	r0, r0
  return ret;
 8002a8c:	e7fb      	b.n	8002a86 <BSP_SPI1_SendRecv+0x1e>
 8002a8e:	46c0      	nop			@ (mov r8, r8)
 8002a90:	20000510 	.word	0x20000510

08002a94 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8002a94:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <MX_SPI1_Init+0x54>)
{
 8002a96:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 8002a98:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002a9a:	2382      	movs	r3, #130	@ 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002a9c:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002aa2:	33fc      	adds	r3, #252	@ 0xfc
 8002aa4:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002aa6:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002aa8:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aaa:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aac:	6145      	str	r5, [r0, #20]
{
 8002aae:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002ab0:	f001 fd9e 	bl	80045f0 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8002ab4:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8002ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8002aec <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8002ab8:	490d      	ldr	r1, [pc, #52]	@ (8002af0 <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8002aba:	4290      	cmp	r0, r2
 8002abc:	d80d      	bhi.n	8002ada <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002ac2:	6263      	str	r3, [r4, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac4:	62a3      	str	r3, [r4, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8002ac6:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002ac8:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8002aca:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002acc:	0020      	movs	r0, r4
 8002ace:	f002 fab1 	bl	8005034 <HAL_SPI_Init>
 8002ad2:	1e43      	subs	r3, r0, #1
 8002ad4:	4198      	sbcs	r0, r3
  return ret;
 8002ad6:	b2c0      	uxtb	r0, r0
}
 8002ad8:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 8002ada:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8002adc:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 8002ade:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d0ec      	beq.n	8002abe <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8002ae4:	0840      	lsrs	r0, r0, #1
 8002ae6:	e7e8      	b.n	8002aba <MX_SPI1_Init+0x26>
 8002ae8:	40013000 	.word	0x40013000
 8002aec:	00989680 	.word	0x00989680
 8002af0:	0800e89c 	.word	0x0800e89c

08002af4 <BSP_SPI1_Init>:
{
 8002af4:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8002af6:	4d1b      	ldr	r5, [pc, #108]	@ (8002b64 <BSP_SPI1_Init+0x70>)
 8002af8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b68 <BSP_SPI1_Init+0x74>)
{
 8002afa:	b087      	sub	sp, #28
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002afc:	0028      	movs	r0, r5
  hspi1.Instance  = SPI1;
 8002afe:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002b00:	f002 fec0 	bl	8005884 <HAL_SPI_GetState>
 8002b04:	1e04      	subs	r4, r0, #0
 8002b06:	d002      	beq.n	8002b0e <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8002b08:	2000      	movs	r0, #0
}
 8002b0a:	b007      	add	sp, #28
 8002b0c:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 8002b0e:	2380      	movs	r3, #128	@ 0x80
 8002b10:	4a16      	ldr	r2, [pc, #88]	@ (8002b6c <BSP_SPI1_Init+0x78>)
 8002b12:	015b      	lsls	r3, r3, #5
 8002b14:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8002b16:	430b      	orrs	r3, r1
 8002b18:	6353      	str	r3, [r2, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002b1e:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002b20:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b24:	3301      	adds	r3, #1
 8002b26:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002b28:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002b2a:	337d      	adds	r3, #125	@ 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002b2c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002b2e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002b30:	f000 ffc4 	bl	8003abc <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002b34:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002b36:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002b38:	a901      	add	r1, sp, #4
 8002b3a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002b3c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002b3e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002b40:	f000 ffbc 	bl	8003abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002b44:	2308      	movs	r3, #8
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002b46:	480a      	ldr	r0, [pc, #40]	@ (8002b70 <BSP_SPI1_Init+0x7c>)
 8002b48:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002b4a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002b4c:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002b4e:	f000 ffb5 	bl	8003abc <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002b52:	0028      	movs	r0, r5
 8002b54:	f7ff ff9e 	bl	8002a94 <MX_SPI1_Init>
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	d0d5      	beq.n	8002b08 <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8002b5c:	2008      	movs	r0, #8
 8002b5e:	4240      	negs	r0, r0
  return ret;
 8002b60:	e7d3      	b.n	8002b0a <BSP_SPI1_Init+0x16>
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	20000510 	.word	0x20000510
 8002b68:	40013000 	.word	0x40013000
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	50000400 	.word	0x50000400

08002b74 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002b74:	b500      	push	{lr}
 8002b76:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002b78:	2803      	cmp	r0, #3
 8002b7a:	d80c      	bhi.n	8002b96 <BSP_LED_Init+0x22>
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <BSP_LED_Init+0x78>)
 8002b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b80:	f7fd fad4 	bl	800012c <__gnu_thumb1_case_uqi>
 8002b84:	2b231b02 	.word	0x2b231b02
 8002b88:	2102      	movs	r1, #2
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b90:	400b      	ands	r3, r1
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8002b96:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <BSP_LED_Init+0x7c>)
 8002b98:	0042      	lsls	r2, r0, #1
 8002b9a:	5ad3      	ldrh	r3, [r2, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002b9c:	0080      	lsls	r0, r0, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8002b9e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba8:	3303      	adds	r3, #3
 8002baa:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002bac:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <BSP_LED_Init+0x80>)
 8002bae:	a905      	add	r1, sp, #20
 8002bb0:	58c0      	ldr	r0, [r0, r3]
 8002bb2:	f000 ff83 	bl	8003abc <HAL_GPIO_Init>
}
 8002bb6:	b00b      	add	sp, #44	@ 0x2c
 8002bb8:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8002bba:	2101      	movs	r1, #1
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc2:	400b      	ands	r3, r1
 8002bc4:	9302      	str	r3, [sp, #8]
 8002bc6:	9b02      	ldr	r3, [sp, #8]
 8002bc8:	e7e5      	b.n	8002b96 <BSP_LED_Init+0x22>
 8002bca:	2102      	movs	r1, #2
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd2:	400b      	ands	r3, r1
 8002bd4:	9303      	str	r3, [sp, #12]
 8002bd6:	9b03      	ldr	r3, [sp, #12]
 8002bd8:	e7dd      	b.n	8002b96 <BSP_LED_Init+0x22>
 8002bda:	2102      	movs	r1, #2
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	400b      	ands	r3, r1
 8002be4:	9304      	str	r3, [sp, #16]
 8002be6:	9b04      	ldr	r3, [sp, #16]
 8002be8:	e7d5      	b.n	8002b96 <BSP_LED_Init+0x22>
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	0800e8bc 	.word	0x0800e8bc
 8002bf4:	2000004c 	.word	0x2000004c

08002bf8 <BSP_LED_On>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002bf8:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <BSP_LED_On+0x18>)
{
 8002bfa:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002bfc:	0042      	lsls	r2, r0, #1
 8002bfe:	5ad1      	ldrh	r1, [r2, r3]
 8002c00:	4b04      	ldr	r3, [pc, #16]	@ (8002c14 <BSP_LED_On+0x1c>)
 8002c02:	0080      	lsls	r0, r0, #2
 8002c04:	2201      	movs	r2, #1
 8002c06:	58c0      	ldr	r0, [r0, r3]
 8002c08:	f001 f896 	bl	8003d38 <HAL_GPIO_WritePin>
}
 8002c0c:	bd10      	pop	{r4, pc}
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	0800e8bc 	.word	0x0800e8bc
 8002c14:	2000004c 	.word	0x2000004c

08002c18 <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002c18:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <BSP_LED_Off+0x18>)
{
 8002c1a:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002c1c:	0042      	lsls	r2, r0, #1
 8002c1e:	5ad1      	ldrh	r1, [r2, r3]
 8002c20:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <BSP_LED_Off+0x1c>)
 8002c22:	0080      	lsls	r0, r0, #2
 8002c24:	2200      	movs	r2, #0
 8002c26:	58c0      	ldr	r0, [r0, r3]
 8002c28:	f001 f886 	bl	8003d38 <HAL_GPIO_WritePin>
}
 8002c2c:	bd10      	pop	{r4, pc}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	0800e8bc 	.word	0x0800e8bc
 8002c34:	2000004c 	.word	0x2000004c

08002c38 <BSP_LED_Toggle>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002c38:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <BSP_LED_Toggle+0x14>)
{
 8002c3a:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002c3c:	0042      	lsls	r2, r0, #1
 8002c3e:	5ad1      	ldrh	r1, [r2, r3]
 8002c40:	4b03      	ldr	r3, [pc, #12]	@ (8002c50 <BSP_LED_Toggle+0x18>)
 8002c42:	0080      	lsls	r0, r0, #2
 8002c44:	58c0      	ldr	r0, [r0, r3]
 8002c46:	f001 f87d 	bl	8003d44 <HAL_GPIO_TogglePin>
}
 8002c4a:	bd10      	pop	{r4, pc}
 8002c4c:	0800e8bc 	.word	0x0800e8bc
 8002c50:	2000004c 	.word	0x2000004c

08002c54 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 8002c54:	2005      	movs	r0, #5
 8002c56:	4770      	bx	lr

08002c58 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8002c58:	0002      	movs	r2, r0
 8002c5a:	b510      	push	{r4, lr}

  if (state == SET)
 8002c5c:	2801      	cmp	r0, #1
 8002c5e:	d109      	bne.n	8002c74 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8002c60:	2180      	movs	r1, #128	@ 0x80
 8002c62:	20a0      	movs	r0, #160	@ 0xa0
 8002c64:	0149      	lsls	r1, r1, #5
 8002c66:	05c0      	lsls	r0, r0, #23
 8002c68:	f001 f866 	bl	8003d38 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8002c6c:	2005      	movs	r0, #5
 8002c6e:	f7ff fd7c 	bl	800276a <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8002c72:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8002c74:	2180      	movs	r1, #128	@ 0x80
 8002c76:	20a0      	movs	r0, #160	@ 0xa0
 8002c78:	2200      	movs	r2, #0
 8002c7a:	0149      	lsls	r1, r1, #5
 8002c7c:	05c0      	lsls	r0, r0, #23
 8002c7e:	f001 f85b 	bl	8003d38 <HAL_GPIO_WritePin>
}
 8002c82:	e7f6      	b.n	8002c72 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1a>

08002c84 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 8002c84:	2300      	movs	r3, #0
{
 8002c86:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002c88:	2602      	movs	r6, #2
  RADIO_DIO_1_GPIO_CLK_ENABLE();
  RADIO_DIO_2_GPIO_CLK_ENABLE();
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002c8a:	2204      	movs	r2, #4
{
 8002c8c:	b097      	sub	sp, #92	@ 0x5c
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002c8e:	4c65      	ldr	r4, [pc, #404]	@ (8002e24 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a0>)
  GPIO_InitTypeDef initStruct = {0};
 8002c90:	9310      	str	r3, [sp, #64]	@ 0x40
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002c92:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002c94:	2103      	movs	r1, #3
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002c96:	4333      	orrs	r3, r6
 8002c98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c9a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002c9c:	2501      	movs	r5, #1
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002c9e:	4033      	ands	r3, r6
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002ca4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002ca6:	4f60      	ldr	r7, [pc, #384]	@ (8002e28 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a4>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002ca8:	4333      	orrs	r3, r6
 8002caa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002cac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002cae:	a80c      	add	r0, sp, #48	@ 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002cb0:	4033      	ands	r3, r6
 8002cb2:	9302      	str	r3, [sp, #8]
 8002cb4:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8002cb6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002cb8:	4333      	orrs	r3, r6
 8002cba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002cbc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002cbe:	4033      	ands	r3, r6
 8002cc0:	9303      	str	r3, [sp, #12]
 8002cc2:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002cc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002cca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002ccc:	910f      	str	r1, [sp, #60]	@ 0x3c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002cce:	4013      	ands	r3, r2
 8002cd0:	9304      	str	r3, [sp, #16]
 8002cd2:	9b04      	ldr	r3, [sp, #16]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002cd4:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002cd6:	0001      	movs	r1, r0
 8002cd8:	4854      	ldr	r0, [pc, #336]	@ (8002e2c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002cda:	970d      	str	r7, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002cdc:	930c      	str	r3, [sp, #48]	@ 0x30
  initStruct.Pull = GPIO_PULLDOWN;
 8002cde:	960e      	str	r6, [sp, #56]	@ 0x38
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002ce0:	f000 feec 	bl	8003abc <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002ce4:	4b52      	ldr	r3, [pc, #328]	@ (8002e30 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002ce6:	a80c      	add	r0, sp, #48	@ 0x30
 8002ce8:	0001      	movs	r1, r0
 8002cea:	4850      	ldr	r0, [pc, #320]	@ (8002e2c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002cec:	930d      	str	r3, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002cee:	960c      	str	r6, [sp, #48]	@ 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002cf0:	f000 fee4 	bl	8003abc <HAL_GPIO_Init>
 8002cf4:	a80c      	add	r0, sp, #48	@ 0x30
 8002cf6:	0001      	movs	r1, r0
 8002cf8:	484c      	ldr	r0, [pc, #304]	@ (8002e2c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002cfa:	970d      	str	r7, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002cfc:	950c      	str	r5, [sp, #48]	@ 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002cfe:	f000 fedd 	bl	8003abc <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002d02:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002d04:	a80c      	add	r0, sp, #48	@ 0x30
 8002d06:	0001      	movs	r1, r0
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002d08:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002d0a:	484a      	ldr	r0, [pc, #296]	@ (8002e34 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002d0c:	970d      	str	r7, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002d0e:	930c      	str	r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002d10:	f000 fed4 	bl	8003abc <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002d14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d16:	27a0      	movs	r7, #160	@ 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002d18:	4333      	orrs	r3, r6
 8002d1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d1c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1e:	2103      	movs	r1, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002d20:	4033      	ands	r3, r6
 8002d22:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002d26:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d28:	05ff      	lsls	r7, r7, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002d2a:	432b      	orrs	r3, r5
 8002d2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d2e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d30:	a811      	add	r0, sp, #68	@ 0x44
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002d32:	402b      	ands	r3, r5
 8002d34:	930a      	str	r3, [sp, #40]	@ 0x28
 8002d36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8002d38:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002d3a:	432b      	orrs	r3, r5
 8002d3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d3e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d40:	9114      	str	r1, [sp, #80]	@ 0x50
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8002d42:	402b      	ands	r3, r5
 8002d44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002d46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8002d48:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d4a:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8002d4c:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d4e:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002d50:	3380      	adds	r3, #128	@ 0x80
 8002d52:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	9612      	str	r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d56:	9613      	str	r6, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d58:	f000 feb0 	bl	8003abc <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8002d5c:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002d5e:	a811      	add	r0, sp, #68	@ 0x44
 8002d60:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8002d62:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002d64:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8002d66:	3340      	adds	r3, #64	@ 0x40
 8002d68:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002d6a:	f000 fea7 	bl	8003abc <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8002d6e:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002d70:	a811      	add	r0, sp, #68	@ 0x44
 8002d72:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8002d74:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002d76:	482d      	ldr	r0, [pc, #180]	@ (8002e2c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8002d78:	3308      	adds	r3, #8
 8002d7a:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002d7c:	f000 fe9e 	bl	8003abc <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 8002d80:	2080      	movs	r0, #128	@ 0x80
 8002d82:	0200      	lsls	r0, r0, #8
 8002d84:	900c      	str	r0, [sp, #48]	@ 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d86:	950d      	str	r5, [sp, #52]	@ 0x34
  initStruct.Pull = GPIO_PULLUP;
 8002d88:	950e      	str	r5, [sp, #56]	@ 0x38
  RADIO_NSS_CLK_ENABLE();
 8002d8a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002d8c:	a80c      	add	r0, sp, #48	@ 0x30
  RADIO_NSS_CLK_ENABLE();
 8002d8e:	432b      	orrs	r3, r5
 8002d90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d92:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002d94:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 8002d96:	402b      	ands	r3, r5
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002d98:	0038      	movs	r0, r7
  RADIO_NSS_CLK_ENABLE();
 8002d9a:	9305      	str	r3, [sp, #20]
 8002d9c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002d9e:	f000 fe8d 	bl	8003abc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8002da2:	2180      	movs	r1, #128	@ 0x80
 8002da4:	002a      	movs	r2, r5
 8002da6:	0038      	movs	r0, r7
 8002da8:	0209      	lsls	r1, r1, #8
 8002daa:	f000 ffc5 	bl	8003d38 <HAL_GPIO_WritePin>
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8002dae:	2204      	movs	r2, #4
  RADIO_TCXO_VCC_CLK_ENABLE();
 8002db0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002db2:	2103      	movs	r1, #3
  RADIO_TCXO_VCC_CLK_ENABLE();
 8002db4:	432b      	orrs	r3, r5
 8002db6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002db8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8002dba:	0038      	movs	r0, r7
  RADIO_TCXO_VCC_CLK_ENABLE();
 8002dbc:	402b      	ands	r3, r5
 8002dbe:	9306      	str	r3, [sp, #24]
 8002dc0:	9b06      	ldr	r3, [sp, #24]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8002dc2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002dc4:	432b      	orrs	r3, r5
 8002dc6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002dc8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002dca:	402b      	ands	r3, r5
 8002dcc:	9307      	str	r3, [sp, #28]
 8002dce:	9b07      	ldr	r3, [sp, #28]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8002dd0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002dd6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002dd8:	4013      	ands	r3, r2
 8002dda:	9308      	str	r3, [sp, #32]
 8002ddc:	9b08      	ldr	r3, [sp, #32]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8002dde:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002de0:	4313      	orrs	r3, r2
 8002de2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002de4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002de6:	0014      	movs	r4, r2
 8002de8:	4013      	ands	r3, r2
 8002dea:	9311      	str	r3, [sp, #68]	@ 0x44
 8002dec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  initStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	930e      	str	r3, [sp, #56]	@ 0x38
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8002df2:	2380      	movs	r3, #128	@ 0x80
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002df4:	910f      	str	r1, [sp, #60]	@ 0x3c
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8002df6:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8002df8:	a90c      	add	r1, sp, #48	@ 0x30
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8002dfa:	930c      	str	r3, [sp, #48]	@ 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dfc:	950d      	str	r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8002dfe:	f000 fe5d 	bl	8003abc <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8002e02:	0038      	movs	r0, r7
 8002e04:	a90c      	add	r1, sp, #48	@ 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8002e06:	960c      	str	r6, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8002e08:	f000 fe58 	bl	8003abc <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8002e0c:	a90c      	add	r1, sp, #48	@ 0x30
 8002e0e:	4809      	ldr	r0, [pc, #36]	@ (8002e34 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8002e10:	960c      	str	r6, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8002e12:	f000 fe53 	bl	8003abc <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8002e16:	4807      	ldr	r0, [pc, #28]	@ (8002e34 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
 8002e18:	a90c      	add	r1, sp, #48	@ 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8002e1a:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8002e1c:	f000 fe4e 	bl	8003abc <HAL_GPIO_Init>
}
 8002e20:	b017      	add	sp, #92	@ 0x5c
 8002e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	10110000 	.word	0x10110000
 8002e2c:	50000400 	.word	0x50000400
 8002e30:	10310000 	.word	0x10310000
 8002e34:	50000800 	.word	0x50000800

08002e38 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:
{
 8002e38:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 8002e3a:	2608      	movs	r6, #8
{
 8002e3c:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef initStruct = {0};
 8002e3e:	0032      	movs	r2, r6
 8002e40:	2100      	movs	r1, #0
 8002e42:	a803      	add	r0, sp, #12
 8002e44:	f00b fc20 	bl	800e688 <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 8002e48:	2502      	movs	r5, #2
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e4a:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e4c:	4c22      	ldr	r4, [pc, #136]	@ (8002ed8 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e4e:	4f23      	ldr	r7, [pc, #140]	@ (8002edc <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa4>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e50:	4669      	mov	r1, sp
 8002e52:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_PULLDOWN;
 8002e54:	9502      	str	r5, [sp, #8]
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e56:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e58:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e5a:	f000 fe2f 	bl	8003abc <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ee0 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa8>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e60:	4669      	mov	r1, sp
 8002e62:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e64:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e66:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e68:	f000 fe28 	bl	8003abc <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e6c:	2301      	movs	r3, #1
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e6e:	4669      	mov	r1, sp
 8002e70:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e72:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e74:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e76:	f000 fe21 	bl	8003abc <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e7a:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e7c:	4669      	mov	r1, sp
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e7e:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e80:	4818      	ldr	r0, [pc, #96]	@ (8002ee4 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xac>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e82:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e84:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e86:	f000 fe19 	bl	8003abc <HAL_GPIO_Init>
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e8a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002e8c:	25a0      	movs	r5, #160	@ 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8e:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002e90:	2780      	movs	r7, #128	@ 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002e92:	05ed      	lsls	r5, r5, #23
 8002e94:	0028      	movs	r0, r5
 8002e96:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e98:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002e9a:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002e9c:	f000 fe0e 	bl	8003abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8002ea0:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002ea2:	0028      	movs	r0, r5
 8002ea4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8002ea6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002ea8:	f000 fe08 	bl	8003abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002eac:	0020      	movs	r0, r4
 8002eae:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8002eb0:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002eb2:	f000 fe03 	bl	8003abc <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8002eb6:	0039      	movs	r1, r7
 8002eb8:	0028      	movs	r0, r5
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f000 ff3c 	bl	8003d38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8002ec0:	0028      	movs	r0, r5
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2140      	movs	r1, #64	@ 0x40
 8002ec6:	f000 ff37 	bl	8003d38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	0031      	movs	r1, r6
 8002ece:	0020      	movs	r0, r4
 8002ed0:	f000 ff32 	bl	8003d38 <HAL_GPIO_WritePin>
}
 8002ed4:	b00b      	add	sp, #44	@ 0x2c
 8002ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed8:	50000400 	.word	0x50000400
 8002edc:	10110000 	.word	0x10110000
 8002ee0:	10310000 	.word	0x10310000
 8002ee4:	50000800 	.word	0x50000800

08002ee8 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:
{
 8002ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eea:	9000      	str	r0, [sp, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eec:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ef2:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8002ef4:	2400      	movs	r4, #0
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 8002ef6:	4e11      	ldr	r6, [pc, #68]	@ (8002f3c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x54>)
 8002ef8:	4d11      	ldr	r5, [pc, #68]	@ (8002f40 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x58>)
 8002efa:	00e3      	lsls	r3, r4, #3
 8002efc:	18f6      	adds	r6, r6, r3
 8002efe:	00a7      	lsls	r7, r4, #2
 8002f00:	5979      	ldr	r1, [r7, r5]
 8002f02:	0030      	movs	r0, r6
 8002f04:	f000 fdc1 	bl	8003a8a <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8002f08:	9b00      	ldr	r3, [sp, #0]
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	59da      	ldr	r2, [r3, r7]
 8002f0e:	0030      	movs	r0, r6
 8002f10:	f000 fdb4 	bl	8003a7c <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8002f14:	002b      	movs	r3, r5
 8002f16:	3310      	adds	r3, #16
 8002f18:	56e6      	ldrsb	r6, [r4, r3]
 8002f1a:	3514      	adds	r5, #20
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	0030      	movs	r0, r6
 8002f20:	5979      	ldr	r1, [r7, r5]
 8002f22:	f000 fc25 	bl	8003770 <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8002f26:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8002f28:	0030      	movs	r0, r6
 8002f2a:	f000 fc4b 	bl	80037c4 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8002f2e:	2c04      	cmp	r4, #4
 8002f30:	d1e1      	bne.n	8002ef6 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f32:	9b01      	ldr	r3, [sp, #4]
 8002f34:	f383 8810 	msr	PRIMASK, r3
}
 8002f38:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002f3a:	46c0      	nop			@ (mov r8, r8)
 8002f3c:	200005b8 	.word	0x200005b8
 8002f40:	0800e8c8 	.word	0x0800e8c8

08002f44 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
}
 8002f44:	2000      	movs	r0, #0
 8002f46:	4770      	bx	lr

08002f48 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:
  switch (state)
 8002f48:	3801      	subs	r0, #1
{
 8002f4a:	b510      	push	{r4, lr}
  switch (state)
 8002f4c:	2803      	cmp	r0, #3
 8002f4e:	d811      	bhi.n	8002f74 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x2c>
 8002f50:	f7fd f8ec 	bl	800012c <__gnu_thumb1_case_uqi>
 8002f54:	080d0902 	.word	0x080d0902
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 8002f58:	20a0      	movs	r0, #160	@ 0xa0
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	05c0      	lsls	r0, r0, #23
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8002f60:	f000 feea 	bl	8003d38 <HAL_GPIO_WritePin>
}
 8002f64:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 8002f66:	2201      	movs	r2, #1
 8002f68:	2104      	movs	r1, #4
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8002f6a:	4809      	ldr	r0, [pc, #36]	@ (8002f90 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 8002f6c:	e7f8      	b.n	8002f60 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 8002f6e:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8002f70:	2102      	movs	r1, #2
 8002f72:	e7fa      	b.n	8002f6a <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x22>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8002f74:	20a0      	movs	r0, #160	@ 0xa0
 8002f76:	2200      	movs	r2, #0
 8002f78:	2102      	movs	r1, #2
 8002f7a:	05c0      	lsls	r0, r0, #23
 8002f7c:	f000 fedc 	bl	8003d38 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2104      	movs	r1, #4
 8002f84:	4802      	ldr	r0, [pc, #8]	@ (8002f90 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 8002f86:	f000 fed7 	bl	8003d38 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	e7f0      	b.n	8002f70 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x28>
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	50000800 	.word	0x50000800

08002f94 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:
}
 8002f94:	2001      	movs	r0, #1
 8002f96:	4770      	bx	lr

08002f98 <CMWX1ZZABZ0XX_RADIO_Reset>:
{
 8002f98:	b530      	push	{r4, r5, lr}
 8002f9a:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 8002f9c:	220c      	movs	r2, #12
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	a803      	add	r0, sp, #12
 8002fa2:	f00b fb71 	bl	800e688 <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa6:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002fa8:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8002faa:	4d0d      	ldr	r5, [pc, #52]	@ (8002fe0 <CMWX1ZZABZ0XX_RADIO_Reset+0x48>)
 8002fac:	a901      	add	r1, sp, #4
 8002fae:	0028      	movs	r0, r5
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002fb0:	9304      	str	r3, [sp, #16]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb2:	9402      	str	r4, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 8002fb4:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8002fb6:	f000 fd81 	bl	8003abc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	0021      	movs	r1, r4
 8002fbe:	0028      	movs	r0, r5
 8002fc0:	f000 feba 	bl	8003d38 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002fc4:	0020      	movs	r0, r4
 8002fc6:	f7ff fbd0 	bl	800276a <HAL_Delay>
  initStruct.Mode = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8002fcc:	0028      	movs	r0, r5
 8002fce:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_NOPULL;
 8002fd0:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8002fd2:	f000 fd73 	bl	8003abc <HAL_GPIO_Init>
  HAL_Delay(6);
 8002fd6:	2006      	movs	r0, #6
 8002fd8:	f7ff fbc7 	bl	800276a <HAL_Delay>
}
 8002fdc:	b007      	add	sp, #28
 8002fde:	bd30      	pop	{r4, r5, pc}
 8002fe0:	50000800 	.word	0x50000800

08002fe4 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:
{
 8002fe4:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 8002fe6:	f7ff fd85 	bl	8002af4 <BSP_SPI1_Init>
}
 8002fea:	bd10      	pop	{r4, pc}

08002fec <CMWX1ZZABZ0XX_RADIO_SendRecv>:
{
 8002fec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8002fee:	240e      	movs	r4, #14
{
 8002ff0:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8002ff2:	446c      	add	r4, sp
{
 8002ff4:	80d8      	strh	r0, [r3, #6]
 8002ff6:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	0021      	movs	r1, r4
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f7ff fd33 	bl	8002a68 <BSP_SPI1_SendRecv>
  return rxData;
 8003002:	8820      	ldrh	r0, [r4, #0]
}
 8003004:	b004      	add	sp, #16
 8003006:	bd10      	pop	{r4, pc}

08003008 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:
{
 8003008:	0002      	movs	r2, r0
 800300a:	b510      	push	{r4, lr}
  if (state == 0)
 800300c:	2800      	cmp	r0, #0
 800300e:	d106      	bne.n	800301e <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x16>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8003010:	2180      	movs	r1, #128	@ 0x80
 8003012:	20a0      	movs	r0, #160	@ 0xa0
 8003014:	0209      	lsls	r1, r1, #8
 8003016:	05c0      	lsls	r0, r0, #23
 8003018:	f000 fe8e 	bl	8003d38 <HAL_GPIO_WritePin>
}
 800301c:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800301e:	2201      	movs	r2, #1
 8003020:	e7f6      	b.n	8003010 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x8>
	...

08003024 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:
{
 8003024:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8003026:	2102      	movs	r1, #2
 8003028:	4801      	ldr	r0, [pc, #4]	@ (8003030 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0xc>)
 800302a:	f000 fe7f 	bl	8003d2c <HAL_GPIO_ReadPin>
}
 800302e:	bd10      	pop	{r4, pc}
 8003030:	50000400 	.word	0x50000400

08003034 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003034:	2280      	movs	r2, #128	@ 0x80
 8003036:	4b10      	ldr	r3, [pc, #64]	@ (8003078 <SystemInit+0x44>)
 8003038:	0052      	lsls	r2, r2, #1
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	490e      	ldr	r1, [pc, #56]	@ (800307c <SystemInit+0x48>)
 8003044:	400a      	ands	r2, r1
 8003046:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	490d      	ldr	r1, [pc, #52]	@ (8003080 <SystemInit+0x4c>)
 800304c:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800304e:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003050:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	438a      	bics	r2, r1
 8003056:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	490a      	ldr	r1, [pc, #40]	@ (8003084 <SystemInit+0x50>)
 800305c:	400a      	ands	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	4909      	ldr	r1, [pc, #36]	@ (8003088 <SystemInit+0x54>)
 8003064:	400a      	ands	r2, r1
 8003066:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003068:	2200      	movs	r2, #0
 800306a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800306c:	2280      	movs	r2, #128	@ 0x80
 800306e:	4b07      	ldr	r3, [pc, #28]	@ (800308c <SystemInit+0x58>)
 8003070:	0512      	lsls	r2, r2, #20
 8003072:	609a      	str	r2, [r3, #8]
#endif
}
 8003074:	4770      	bx	lr
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	40021000 	.word	0x40021000
 800307c:	88ff400c 	.word	0x88ff400c
 8003080:	fef6fff6 	.word	0xfef6fff6
 8003084:	fffbffff 	.word	0xfffbffff
 8003088:	ff02ffff 	.word	0xff02ffff
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003090:	2302      	movs	r3, #2
 8003092:	4a08      	ldr	r2, [pc, #32]	@ (80030b4 <HAL_Init+0x24>)
{
 8003094:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003096:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003098:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800309a:	430b      	orrs	r3, r1
 800309c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800309e:	f7ff fb5e 	bl	800275e <HAL_InitTick>
 80030a2:	1e04      	subs	r4, r0, #0
 80030a4:	d103      	bne.n	80030ae <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030a6:	f7ff f9af 	bl	8002408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80030aa:	0020      	movs	r0, r4
 80030ac:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80030ae:	2401      	movs	r4, #1
 80030b0:	e7fb      	b.n	80030aa <HAL_Init+0x1a>
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	40022000 	.word	0x40022000

080030b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80030b8:	4a03      	ldr	r2, [pc, #12]	@ (80030c8 <HAL_IncTick+0x10>)
 80030ba:	4b04      	ldr	r3, [pc, #16]	@ (80030cc <HAL_IncTick+0x14>)
 80030bc:	6811      	ldr	r1, [r2, #0]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	185b      	adds	r3, r3, r1
 80030c2:	6013      	str	r3, [r2, #0]
}
 80030c4:	4770      	bx	lr
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	200005d8 	.word	0x200005d8
 80030cc:	20000064 	.word	0x20000064

080030d0 <HAL_GetUIDw0>:
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80030d0:	4b01      	ldr	r3, [pc, #4]	@ (80030d8 <HAL_GetUIDw0+0x8>)
 80030d2:	6818      	ldr	r0, [r3, #0]
}
 80030d4:	4770      	bx	lr
 80030d6:	46c0      	nop			@ (mov r8, r8)
 80030d8:	1ff80050 	.word	0x1ff80050

080030dc <HAL_GetUIDw1>:
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 80030dc:	4b01      	ldr	r3, [pc, #4]	@ (80030e4 <HAL_GetUIDw1+0x8>)
 80030de:	6818      	ldr	r0, [r3, #0]
}
 80030e0:	4770      	bx	lr
 80030e2:	46c0      	nop			@ (mov r8, r8)
 80030e4:	1ff80054 	.word	0x1ff80054

080030e8 <HAL_GetUIDw2>:
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 80030e8:	4b01      	ldr	r3, [pc, #4]	@ (80030f0 <HAL_GetUIDw2+0x8>)
 80030ea:	6818      	ldr	r0, [r3, #0]
}
 80030ec:	4770      	bx	lr
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	1ff80064 	.word	0x1ff80064

080030f4 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80030f4:	2301      	movs	r3, #1
 80030f6:	4a02      	ldr	r2, [pc, #8]	@ (8003100 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80030f8:	6851      	ldr	r1, [r2, #4]
 80030fa:	430b      	orrs	r3, r1
 80030fc:	6053      	str	r3, [r2, #4]
}
 80030fe:	4770      	bx	lr
 8003100:	40015800 	.word	0x40015800

08003104 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003104:	2302      	movs	r3, #2
 8003106:	4a02      	ldr	r2, [pc, #8]	@ (8003110 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8003108:	6851      	ldr	r1, [r2, #4]
 800310a:	430b      	orrs	r3, r1
 800310c:	6053      	str	r3, [r2, #4]
}
 800310e:	4770      	bx	lr
 8003110:	40015800 	.word	0x40015800

08003114 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003114:	2304      	movs	r3, #4
 8003116:	4a02      	ldr	r2, [pc, #8]	@ (8003120 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8003118:	6851      	ldr	r1, [r2, #4]
 800311a:	430b      	orrs	r3, r1
 800311c:	6053      	str	r3, [r2, #4]
}
 800311e:	4770      	bx	lr
 8003120:	40015800 	.word	0x40015800

08003124 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003124:	4b08      	ldr	r3, [pc, #32]	@ (8003148 <ADC_DelayMicroSecond+0x24>)
{
 8003126:	b513      	push	{r0, r1, r4, lr}
 8003128:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800312a:	4908      	ldr	r1, [pc, #32]	@ (800314c <ADC_DelayMicroSecond+0x28>)
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	f7fd f81b 	bl	8000168 <__udivsi3>
 8003132:	4344      	muls	r4, r0
 8003134:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8003136:	9b01      	ldr	r3, [sp, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d100      	bne.n	800313e <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 800313c:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800313e:	9b01      	ldr	r3, [sp, #4]
 8003140:	3b01      	subs	r3, #1
 8003142:	9301      	str	r3, [sp, #4]
 8003144:	e7f7      	b.n	8003136 <ADC_DelayMicroSecond+0x12>
 8003146:	46c0      	nop			@ (mov r8, r8)
 8003148:	20000060 	.word	0x20000060
 800314c:	000f4240 	.word	0x000f4240

08003150 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003150:	2204      	movs	r2, #4
 8003152:	6803      	ldr	r3, [r0, #0]
{
 8003154:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003156:	6899      	ldr	r1, [r3, #8]
{
 8003158:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800315a:	4211      	tst	r1, r2
 800315c:	d101      	bne.n	8003162 <ADC_ConversionStop+0x12>
  return HAL_OK;
 800315e:	2000      	movs	r0, #0
}
 8003160:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003162:	6899      	ldr	r1, [r3, #8]
 8003164:	4211      	tst	r1, r2
 8003166:	d006      	beq.n	8003176 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003168:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800316a:	0792      	lsls	r2, r2, #30
 800316c:	d403      	bmi.n	8003176 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800316e:	2210      	movs	r2, #16
 8003170:	6899      	ldr	r1, [r3, #8]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003176:	f7ff faf4 	bl	8002762 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800317a:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 800317c:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4233      	tst	r3, r6
 8003184:	d0eb      	beq.n	800315e <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003186:	f7ff faec 	bl	8002762 <HAL_GetTick>
 800318a:	1b40      	subs	r0, r0, r5
 800318c:	280a      	cmp	r0, #10
 800318e:	d9f6      	bls.n	800317e <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003190:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003192:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003194:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003196:	4313      	orrs	r3, r2
 8003198:	6563      	str	r3, [r4, #84]	@ 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800319a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800319c:	4303      	orrs	r3, r0
 800319e:	65a3      	str	r3, [r4, #88]	@ 0x58
        return HAL_ERROR;
 80031a0:	e7de      	b.n	8003160 <ADC_ConversionStop+0x10>

080031a2 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031a2:	2103      	movs	r1, #3
 80031a4:	6802      	ldr	r2, [r0, #0]
{
 80031a6:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031a8:	6893      	ldr	r3, [r2, #8]
{
 80031aa:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031ac:	400b      	ands	r3, r1
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d001      	beq.n	80031b6 <ADC_Disable+0x14>
  return HAL_OK;
 80031b2:	2000      	movs	r0, #0
}
 80031b4:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031b6:	6810      	ldr	r0, [r2, #0]
 80031b8:	4218      	tst	r0, r3
 80031ba:	d0fa      	beq.n	80031b2 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80031bc:	2005      	movs	r0, #5
 80031be:	6895      	ldr	r5, [r2, #8]
 80031c0:	4005      	ands	r5, r0
 80031c2:	2d01      	cmp	r5, #1
 80031c4:	d117      	bne.n	80031f6 <ADC_Disable+0x54>
      __HAL_ADC_DISABLE(hadc);
 80031c6:	2302      	movs	r3, #2
 80031c8:	6890      	ldr	r0, [r2, #8]
 80031ca:	4303      	orrs	r3, r0
 80031cc:	6093      	str	r3, [r2, #8]
 80031ce:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 80031d0:	f7ff fac7 	bl	8002762 <HAL_GetTick>
 80031d4:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	422b      	tst	r3, r5
 80031dc:	d0e9      	beq.n	80031b2 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031de:	f7ff fac0 	bl	8002762 <HAL_GetTick>
 80031e2:	1b80      	subs	r0, r0, r6
 80031e4:	280a      	cmp	r0, #10
 80031e6:	d9f6      	bls.n	80031d6 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e8:	2310      	movs	r3, #16
 80031ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80031ec:	4313      	orrs	r3, r2
 80031ee:	6563      	str	r3, [r4, #84]	@ 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80031f2:	432b      	orrs	r3, r5
 80031f4:	e005      	b.n	8003202 <ADC_Disable+0x60>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f6:	2210      	movs	r2, #16
 80031f8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80031fa:	430a      	orrs	r2, r1
 80031fc:	6562      	str	r2, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031fe:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003200:	4313      	orrs	r3, r2
      return HAL_ERROR;
 8003202:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003204:	65a3      	str	r3, [r4, #88]	@ 0x58
        return HAL_ERROR;
 8003206:	e7d5      	b.n	80031b4 <ADC_Disable+0x12>

08003208 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003208:	2103      	movs	r1, #3
 800320a:	6803      	ldr	r3, [r0, #0]
{
 800320c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800320e:	689a      	ldr	r2, [r3, #8]
{
 8003210:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003212:	400a      	ands	r2, r1
 8003214:	2a01      	cmp	r2, #1
 8003216:	d104      	bne.n	8003222 <ADC_Enable+0x1a>
 8003218:	6819      	ldr	r1, [r3, #0]
 800321a:	4211      	tst	r1, r2
 800321c:	d001      	beq.n	8003222 <ADC_Enable+0x1a>
  return HAL_OK;
 800321e:	2000      	movs	r0, #0
}
 8003220:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003222:	6899      	ldr	r1, [r3, #8]
 8003224:	4a13      	ldr	r2, [pc, #76]	@ (8003274 <ADC_Enable+0x6c>)
 8003226:	4211      	tst	r1, r2
 8003228:	d009      	beq.n	800323e <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322a:	2310      	movs	r3, #16
 800322c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800322e:	4313      	orrs	r3, r2
 8003230:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003232:	2301      	movs	r3, #1
 8003234:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003236:	4313      	orrs	r3, r2
      return HAL_ERROR;
 8003238:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323a:	65a3      	str	r3, [r4, #88]	@ 0x58
        return HAL_ERROR;
 800323c:	e7f0      	b.n	8003220 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 800323e:	2501      	movs	r5, #1
 8003240:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003242:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8003244:	432a      	orrs	r2, r5
 8003246:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003248:	f7ff ff6c 	bl	8003124 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 800324c:	f7ff fa89 	bl	8002762 <HAL_GetTick>
 8003250:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	422b      	tst	r3, r5
 8003258:	d1e1      	bne.n	800321e <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800325a:	f7ff fa82 	bl	8002762 <HAL_GetTick>
 800325e:	1b80      	subs	r0, r0, r6
 8003260:	280a      	cmp	r0, #10
 8003262:	d9f6      	bls.n	8003252 <ADC_Enable+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003264:	2310      	movs	r3, #16
 8003266:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003268:	4313      	orrs	r3, r2
 800326a:	6563      	str	r3, [r4, #84]	@ 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800326e:	432b      	orrs	r3, r5
 8003270:	e7e2      	b.n	8003238 <ADC_Enable+0x30>
 8003272:	46c0      	nop			@ (mov r8, r8)
 8003274:	80000017 	.word	0x80000017

08003278 <HAL_ADC_Init>:
{
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800327c:	d016      	beq.n	80032ac <HAL_ADC_Init+0x34>
  if(hadc->State == HAL_ADC_STATE_RESET)
 800327e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <HAL_ADC_Init+0x18>
    hadc->Lock = HAL_UNLOCKED;
 8003284:	0002      	movs	r2, r0
 8003286:	3250      	adds	r2, #80	@ 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8003288:	6583      	str	r3, [r0, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 800328a:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800328c:	f7fe fcaa 	bl	8001be4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003290:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003292:	06db      	lsls	r3, r3, #27
 8003294:	d403      	bmi.n	800329e <HAL_ADC_Init+0x26>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800329a:	0752      	lsls	r2, r2, #29
 800329c:	d508      	bpl.n	80032b0 <HAL_ADC_Init+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329e:	2310      	movs	r3, #16
 80032a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 80032a2:	3450      	adds	r4, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a4:	4313      	orrs	r3, r2
 80032a6:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hadc);
 80032a8:	2300      	movs	r3, #0
 80032aa:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 80032ac:	2001      	movs	r0, #1
}
 80032ae:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 80032b0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80032b2:	4a56      	ldr	r2, [pc, #344]	@ (800340c <HAL_ADC_Init+0x194>)
 80032b4:	4011      	ands	r1, r2
 80032b6:	3206      	adds	r2, #6
 80032b8:	32ff      	adds	r2, #255	@ 0xff
 80032ba:	430a      	orrs	r2, r1
 80032bc:	6562      	str	r2, [r4, #84]	@ 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032be:	2203      	movs	r2, #3
 80032c0:	6899      	ldr	r1, [r3, #8]
 80032c2:	4011      	ands	r1, r2
 80032c4:	4a52      	ldr	r2, [pc, #328]	@ (8003410 <HAL_ADC_Init+0x198>)
 80032c6:	2901      	cmp	r1, #1
 80032c8:	d102      	bne.n	80032d0 <HAL_ADC_Init+0x58>
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	4208      	tst	r0, r1
 80032ce:	d119      	bne.n	8003304 <HAL_ADC_Init+0x8c>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80032d0:	2580      	movs	r5, #128	@ 0x80
 80032d2:	6861      	ldr	r1, [r4, #4]
 80032d4:	05ed      	lsls	r5, r5, #23
 80032d6:	0048      	lsls	r0, r1, #1
 80032d8:	0840      	lsrs	r0, r0, #1
 80032da:	42a8      	cmp	r0, r5
 80032dc:	d003      	beq.n	80032e6 <HAL_ADC_Init+0x6e>
 80032de:	2080      	movs	r0, #128	@ 0x80
 80032e0:	0600      	lsls	r0, r0, #24
 80032e2:	4281      	cmp	r1, r0
 80032e4:	d176      	bne.n	80033d4 <HAL_ADC_Init+0x15c>
 80032e6:	6918      	ldr	r0, [r3, #16]
 80032e8:	0080      	lsls	r0, r0, #2
 80032ea:	0880      	lsrs	r0, r0, #2
 80032ec:	6118      	str	r0, [r3, #16]
 80032ee:	6918      	ldr	r0, [r3, #16]
 80032f0:	4301      	orrs	r1, r0
 80032f2:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80032f4:	2018      	movs	r0, #24
 80032f6:	68d9      	ldr	r1, [r3, #12]
 80032f8:	4381      	bics	r1, r0
 80032fa:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80032fc:	68d9      	ldr	r1, [r3, #12]
 80032fe:	68a0      	ldr	r0, [r4, #8]
 8003300:	4301      	orrs	r1, r0
 8003302:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003304:	6811      	ldr	r1, [r2, #0]
 8003306:	4843      	ldr	r0, [pc, #268]	@ (8003414 <HAL_ADC_Init+0x19c>)
 8003308:	4001      	ands	r1, r0
 800330a:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800330c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800330e:	6810      	ldr	r0, [r2, #0]
 8003310:	0649      	lsls	r1, r1, #25
 8003312:	4301      	orrs	r1, r0
 8003314:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003316:	2280      	movs	r2, #128	@ 0x80
 8003318:	6899      	ldr	r1, [r3, #8]
 800331a:	0552      	lsls	r2, r2, #21
 800331c:	4211      	tst	r1, r2
 800331e:	d102      	bne.n	8003326 <HAL_ADC_Init+0xae>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	430a      	orrs	r2, r1
 8003324:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	493b      	ldr	r1, [pc, #236]	@ (8003418 <HAL_ADC_Init+0x1a0>)
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800332a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800332c:	400a      	ands	r2, r1
 800332e:	60da      	str	r2, [r3, #12]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003330:	1c62      	adds	r2, r4, #1
 8003332:	7fd1      	ldrb	r1, [r2, #31]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003334:	68e2      	ldr	r2, [r4, #12]
 8003336:	68d8      	ldr	r0, [r3, #12]
 8003338:	432a      	orrs	r2, r5
 800333a:	4302      	orrs	r2, r0
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800333c:	69a0      	ldr	r0, [r4, #24]
 800333e:	0380      	lsls	r0, r0, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003340:	4302      	orrs	r2, r0
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003342:	69e0      	ldr	r0, [r4, #28]
 8003344:	03c0      	lsls	r0, r0, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003346:	4302      	orrs	r2, r0
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003348:	0348      	lsls	r0, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800334a:	4302      	orrs	r2, r0
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800334c:	0020      	movs	r0, r4
 800334e:	302c      	adds	r0, #44	@ 0x2c
 8003350:	7800      	ldrb	r0, [r0, #0]
 8003352:	0040      	lsls	r0, r0, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003354:	4302      	orrs	r2, r0
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003356:	6920      	ldr	r0, [r4, #16]
 8003358:	3802      	subs	r0, #2
 800335a:	4245      	negs	r5, r0
 800335c:	4168      	adcs	r0, r5
 800335e:	0080      	lsls	r0, r0, #2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003360:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003362:	20c2      	movs	r0, #194	@ 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003364:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003366:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003368:	30ff      	adds	r0, #255	@ 0xff
 800336a:	4282      	cmp	r2, r0
 800336c:	d004      	beq.n	8003378 <HAL_ADC_Init+0x100>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800336e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8003370:	68d8      	ldr	r0, [r3, #12]
 8003372:	432a      	orrs	r2, r5
 8003374:	4302      	orrs	r2, r0
 8003376:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003378:	1ca2      	adds	r2, r4, #2
 800337a:	7fd2      	ldrb	r2, [r2, #31]
 800337c:	2a01      	cmp	r2, #1
 800337e:	d106      	bne.n	800338e <HAL_ADC_Init+0x116>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003380:	2900      	cmp	r1, #0
 8003382:	d133      	bne.n	80033ec <HAL_ADC_Init+0x174>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003384:	2280      	movs	r2, #128	@ 0x80
 8003386:	68d9      	ldr	r1, [r3, #12]
 8003388:	0252      	lsls	r2, r2, #9
 800338a:	430a      	orrs	r2, r1
 800338c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 800338e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003390:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8003392:	2901      	cmp	r1, #1
 8003394:	d132      	bne.n	80033fc <HAL_ADC_Init+0x184>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003396:	4821      	ldr	r0, [pc, #132]	@ (800341c <HAL_ADC_Init+0x1a4>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003398:	6c65      	ldr	r5, [r4, #68]	@ 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800339a:	4002      	ands	r2, r0
 800339c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800339e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80033a0:	6918      	ldr	r0, [r3, #16]
 80033a2:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 80033a4:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80033a6:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80033a8:	4302      	orrs	r2, r0
 80033aa:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	4311      	orrs	r1, r2
 80033b0:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80033b2:	2107      	movs	r1, #7
 80033b4:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 80033b6:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80033b8:	438a      	bics	r2, r1
 80033ba:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80033c0:	430a      	orrs	r2, r1
 80033c2:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 80033c4:	2303      	movs	r3, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80033c6:	65a0      	str	r0, [r4, #88]	@ 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80033c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80033ca:	439a      	bics	r2, r3
 80033cc:	3b02      	subs	r3, #2
 80033ce:	4313      	orrs	r3, r2
 80033d0:	6563      	str	r3, [r4, #84]	@ 0x54
  return HAL_OK;
 80033d2:	e76c      	b.n	80032ae <HAL_ADC_Init+0x36>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80033d4:	6918      	ldr	r0, [r3, #16]
 80033d6:	4d12      	ldr	r5, [pc, #72]	@ (8003420 <HAL_ADC_Init+0x1a8>)
 80033d8:	0080      	lsls	r0, r0, #2
 80033da:	0880      	lsrs	r0, r0, #2
 80033dc:	6118      	str	r0, [r3, #16]
 80033de:	6810      	ldr	r0, [r2, #0]
 80033e0:	4028      	ands	r0, r5
 80033e2:	6010      	str	r0, [r2, #0]
 80033e4:	6810      	ldr	r0, [r2, #0]
 80033e6:	4301      	orrs	r1, r0
 80033e8:	6011      	str	r1, [r2, #0]
 80033ea:	e783      	b.n	80032f4 <HAL_ADC_Init+0x7c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ec:	2120      	movs	r1, #32
 80033ee:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80033f0:	4301      	orrs	r1, r0
 80033f2:	6561      	str	r1, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80033f6:	430a      	orrs	r2, r1
 80033f8:	65a2      	str	r2, [r4, #88]	@ 0x58
 80033fa:	e7c8      	b.n	800338e <HAL_ADC_Init+0x116>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80033fc:	2101      	movs	r1, #1
 80033fe:	420a      	tst	r2, r1
 8003400:	d0d7      	beq.n	80033b2 <HAL_ADC_Init+0x13a>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	438a      	bics	r2, r1
 8003406:	611a      	str	r2, [r3, #16]
 8003408:	e7d3      	b.n	80033b2 <HAL_ADC_Init+0x13a>
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	fffffefd 	.word	0xfffffefd
 8003410:	40012708 	.word	0x40012708
 8003414:	fdffffff 	.word	0xfdffffff
 8003418:	fffe0219 	.word	0xfffe0219
 800341c:	fffffc03 	.word	0xfffffc03
 8003420:	ffc3ffff 	.word	0xffc3ffff

08003424 <HAL_ADC_DeInit>:
{
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003428:	2501      	movs	r5, #1
  if(hadc == NULL)
 800342a:	2800      	cmp	r0, #0
 800342c:	d011      	beq.n	8003452 <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800342e:	2302      	movs	r3, #2
 8003430:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8003432:	4313      	orrs	r3, r2
 8003434:	6543      	str	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003436:	f7ff fe8b 	bl	8003150 <ADC_ConversionStop>
 800343a:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 800343c:	d137      	bne.n	80034ae <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 800343e:	0020      	movs	r0, r4
 8003440:	f7ff feaf 	bl	80031a2 <ADC_Disable>
 8003444:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 8003446:	2801      	cmp	r0, #1
 8003448:	d105      	bne.n	8003456 <HAL_ADC_DeInit+0x32>
{
 800344a:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 800344c:	2300      	movs	r3, #0
 800344e:	3450      	adds	r4, #80	@ 0x50
 8003450:	7023      	strb	r3, [r4, #0]
}
 8003452:	0028      	movs	r0, r5
 8003454:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 8003456:	2301      	movs	r3, #1
 8003458:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	4915      	ldr	r1, [pc, #84]	@ (80034b4 <HAL_ADC_DeInit+0x90>)
 800345e:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 8003460:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8003462:	400a      	ands	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8003466:	4a14      	ldr	r2, [pc, #80]	@ (80034b8 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8003468:	4914      	ldr	r1, [pc, #80]	@ (80034bc <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 800346a:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	400a      	ands	r2, r1
 8003470:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	4912      	ldr	r1, [pc, #72]	@ (80034c0 <HAL_ADC_DeInit+0x9c>)
 8003476:	400a      	ands	r2, r1
 8003478:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	4911      	ldr	r1, [pc, #68]	@ (80034c4 <HAL_ADC_DeInit+0xa0>)
 800347e:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8003480:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8003482:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	438a      	bics	r2, r1
 8003488:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 800348a:	6a1a      	ldr	r2, [r3, #32]
 800348c:	490e      	ldr	r1, [pc, #56]	@ (80034c8 <HAL_ADC_DeInit+0xa4>)
 800348e:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003490:	217f      	movs	r1, #127	@ 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8003492:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003494:	33b4      	adds	r3, #180	@ 0xb4
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	438a      	bics	r2, r1
 800349a:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	438a      	bics	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 80034a2:	f7fe fbaf 	bl	8001c04 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80034a6:	2300      	movs	r3, #0
 80034a8:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 80034aa:	6563      	str	r3, [r4, #84]	@ 0x54
 80034ac:	e7ce      	b.n	800344c <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 80034ae:	2801      	cmp	r0, #1
 80034b0:	d1d3      	bne.n	800345a <HAL_ADC_DeInit+0x36>
 80034b2:	e7ca      	b.n	800344a <HAL_ADC_DeInit+0x26>
 80034b4:	fffff760 	.word	0xfffff760
 80034b8:	0000089f 	.word	0x0000089f
 80034bc:	efffffff 	.word	0xefffffff
 80034c0:	833e0200 	.word	0x833e0200
 80034c4:	3ffffc02 	.word	0x3ffffc02
 80034c8:	f000f000 	.word	0xf000f000

080034cc <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034cc:	6803      	ldr	r3, [r0, #0]
{
 80034ce:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034d0:	689b      	ldr	r3, [r3, #8]
{
 80034d2:	0004      	movs	r4, r0
    __HAL_LOCK(hadc);
 80034d4:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034d6:	075b      	lsls	r3, r3, #29
 80034d8:	d41a      	bmi.n	8003510 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80034da:	0025      	movs	r5, r4
 80034dc:	3550      	adds	r5, #80	@ 0x50
 80034de:	782b      	ldrb	r3, [r5, #0]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d015      	beq.n	8003510 <HAL_ADC_Start+0x44>
 80034e4:	2301      	movs	r3, #1
 80034e6:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80034e8:	69e3      	ldr	r3, [r4, #28]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d111      	bne.n	8003512 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80034ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80034f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003520 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80034f2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80034f4:	401a      	ands	r2, r3
 80034f6:	2380      	movs	r3, #128	@ 0x80
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034fc:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80034fe:	6563      	str	r3, [r4, #84]	@ 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8003500:	65a0      	str	r0, [r4, #88]	@ 0x58
      __HAL_UNLOCK(hadc);
 8003502:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003508:	6899      	ldr	r1, [r3, #8]
 800350a:	3a18      	subs	r2, #24
 800350c:	430a      	orrs	r2, r1
 800350e:	609a      	str	r2, [r3, #8]
}
 8003510:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8003512:	0020      	movs	r0, r4
 8003514:	f7ff fe78 	bl	8003208 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003518:	2800      	cmp	r0, #0
 800351a:	d0e8      	beq.n	80034ee <HAL_ADC_Start+0x22>
 800351c:	e7f8      	b.n	8003510 <HAL_ADC_Start+0x44>
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	fffff0fe 	.word	0xfffff0fe

08003524 <HAL_ADC_Stop>:
{
 8003524:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8003526:	0006      	movs	r6, r0
 8003528:	3650      	adds	r6, #80	@ 0x50
 800352a:	7833      	ldrb	r3, [r6, #0]
{
 800352c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800352e:	2002      	movs	r0, #2
 8003530:	2b01      	cmp	r3, #1
 8003532:	d012      	beq.n	800355a <HAL_ADC_Stop+0x36>
 8003534:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003536:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8003538:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800353a:	f7ff fe09 	bl	8003150 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800353e:	2800      	cmp	r0, #0
 8003540:	d109      	bne.n	8003556 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8003542:	0020      	movs	r0, r4
 8003544:	f7ff fe2d 	bl	80031a2 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003548:	2800      	cmp	r0, #0
 800354a:	d104      	bne.n	8003556 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 800354c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800354e:	4a03      	ldr	r2, [pc, #12]	@ (800355c <HAL_ADC_Stop+0x38>)
 8003550:	4013      	ands	r3, r2
 8003552:	431d      	orrs	r5, r3
 8003554:	6565      	str	r5, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8003556:	2300      	movs	r3, #0
 8003558:	7033      	strb	r3, [r6, #0]
}
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	fffffefe 	.word	0xfffffefe

08003560 <HAL_ADC_PollForConversion>:
{
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003562:	6946      	ldr	r6, [r0, #20]
{
 8003564:	0004      	movs	r4, r0
 8003566:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003568:	2e08      	cmp	r6, #8
 800356a:	d00d      	beq.n	8003588 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800356c:	6803      	ldr	r3, [r0, #0]
 800356e:	2001      	movs	r0, #1
 8003570:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003572:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003574:	4203      	tst	r3, r0
 8003576:	d007      	beq.n	8003588 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003578:	2320      	movs	r3, #32
 800357a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      __HAL_UNLOCK(hadc);
 800357c:	3450      	adds	r4, #80	@ 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800357e:	4313      	orrs	r3, r2
 8003580:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8003582:	2300      	movs	r3, #0
 8003584:	7023      	strb	r3, [r4, #0]
}
 8003586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8003588:	f7ff f8eb 	bl	8002762 <HAL_GetTick>
 800358c:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4216      	tst	r6, r2
 8003594:	d023      	beq.n	80035de <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003596:	2280      	movs	r2, #128	@ 0x80
 8003598:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800359a:	0092      	lsls	r2, r2, #2
 800359c:	430a      	orrs	r2, r1
 800359e:	6562      	str	r2, [r4, #84]	@ 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035a0:	22c0      	movs	r2, #192	@ 0xc0
 80035a2:	68d9      	ldr	r1, [r3, #12]
 80035a4:	0112      	lsls	r2, r2, #4
 80035a6:	4211      	tst	r1, r2
 80035a8:	d114      	bne.n	80035d4 <HAL_ADC_PollForConversion+0x74>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80035aa:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035ac:	7fd2      	ldrb	r2, [r2, #31]
 80035ae:	2a00      	cmp	r2, #0
 80035b0:	d110      	bne.n	80035d4 <HAL_ADC_PollForConversion+0x74>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	0712      	lsls	r2, r2, #28
 80035b6:	d50d      	bpl.n	80035d4 <HAL_ADC_PollForConversion+0x74>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	0752      	lsls	r2, r2, #29
 80035bc:	d422      	bmi.n	8003604 <HAL_ADC_PollForConversion+0xa4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035be:	210c      	movs	r1, #12
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	438a      	bics	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80035c6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80035c8:	4a14      	ldr	r2, [pc, #80]	@ (800361c <HAL_ADC_PollForConversion+0xbc>)
 80035ca:	4011      	ands	r1, r2
 80035cc:	3204      	adds	r2, #4
 80035ce:	32ff      	adds	r2, #255	@ 0xff
 80035d0:	430a      	orrs	r2, r1
 80035d2:	6562      	str	r2, [r4, #84]	@ 0x54
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80035d4:	69a2      	ldr	r2, [r4, #24]
 80035d6:	2a00      	cmp	r2, #0
 80035d8:	d01d      	beq.n	8003616 <HAL_ADC_PollForConversion+0xb6>
  return HAL_OK;
 80035da:	2000      	movs	r0, #0
 80035dc:	e7d3      	b.n	8003586 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80035de:	1c6a      	adds	r2, r5, #1
 80035e0:	d0d6      	beq.n	8003590 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80035e2:	2d00      	cmp	r5, #0
 80035e4:	d108      	bne.n	80035f8 <HAL_ADC_PollForConversion+0x98>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035e6:	2304      	movs	r3, #4
 80035e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 80035ea:	3450      	adds	r4, #80	@ 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035ec:	4313      	orrs	r3, r2
 80035ee:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 80035f0:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80035f2:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 80035f4:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80035f6:	e7c6      	b.n	8003586 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80035f8:	f7ff f8b3 	bl	8002762 <HAL_GetTick>
 80035fc:	1bc0      	subs	r0, r0, r7
 80035fe:	42a8      	cmp	r0, r5
 8003600:	d9c5      	bls.n	800358e <HAL_ADC_PollForConversion+0x2e>
 8003602:	e7f0      	b.n	80035e6 <HAL_ADC_PollForConversion+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003604:	2220      	movs	r2, #32
 8003606:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8003608:	430a      	orrs	r2, r1
 800360a:	6562      	str	r2, [r4, #84]	@ 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360c:	2201      	movs	r2, #1
 800360e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003610:	430a      	orrs	r2, r1
 8003612:	65a2      	str	r2, [r4, #88]	@ 0x58
 8003614:	e7de      	b.n	80035d4 <HAL_ADC_PollForConversion+0x74>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003616:	220c      	movs	r2, #12
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	e7de      	b.n	80035da <HAL_ADC_PollForConversion+0x7a>
 800361c:	fffffefe 	.word	0xfffffefe

08003620 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8003620:	6803      	ldr	r3, [r0, #0]
 8003622:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8003624:	4770      	bx	lr
	...

08003628 <HAL_ADC_ConfigChannel>:
{
 8003628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800362a:	0004      	movs	r4, r0
 800362c:	3450      	adds	r4, #80	@ 0x50
 800362e:	7822      	ldrb	r2, [r4, #0]
{
 8003630:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 8003632:	2002      	movs	r0, #2
 8003634:	2a01      	cmp	r2, #1
 8003636:	d00b      	beq.n	8003650 <HAL_ADC_ConfigChannel+0x28>
 8003638:	3801      	subs	r0, #1
 800363a:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	6895      	ldr	r5, [r2, #8]
 8003640:	076d      	lsls	r5, r5, #29
 8003642:	d506      	bpl.n	8003652 <HAL_ADC_ConfigChannel+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003644:	2220      	movs	r2, #32
 8003646:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003648:	430a      	orrs	r2, r1
 800364a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 800364c:	2300      	movs	r3, #0
 800364e:	7023      	strb	r3, [r4, #0]
}
 8003650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003652:	2380      	movs	r3, #128	@ 0x80
 8003654:	2680      	movs	r6, #128	@ 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003656:	680d      	ldr	r5, [r1, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8003658:	4f19      	ldr	r7, [pc, #100]	@ (80036c0 <HAL_ADC_ConfigChannel+0x98>)
 800365a:	6849      	ldr	r1, [r1, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800365c:	0368      	lsls	r0, r5, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800365e:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003660:	0b40      	lsrs	r0, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003662:	402b      	ands	r3, r5
 8003664:	02b6      	lsls	r6, r6, #10
  if (sConfig->Rank != ADC_RANK_NONE)
 8003666:	42b9      	cmp	r1, r7
 8003668:	d018      	beq.n	800369c <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800366a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800366c:	4301      	orrs	r1, r0
 800366e:	6291      	str	r1, [r2, #40]	@ 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_ADC_ConfigChannel+0x5e>
      ADC->CCR |= ADC_CCR_TSEN;   
 8003674:	2380      	movs	r3, #128	@ 0x80
 8003676:	4a13      	ldr	r2, [pc, #76]	@ (80036c4 <HAL_ADC_ConfigChannel+0x9c>)
 8003678:	041b      	lsls	r3, r3, #16
 800367a:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800367c:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 800367e:	430b      	orrs	r3, r1
 8003680:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003682:	f7ff fd4f 	bl	8003124 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003686:	4235      	tst	r5, r6
 8003688:	d005      	beq.n	8003696 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	4a0d      	ldr	r2, [pc, #52]	@ (80036c4 <HAL_ADC_ConfigChannel+0x9c>)
 800368e:	03db      	lsls	r3, r3, #15
 8003690:	6811      	ldr	r1, [r2, #0]
 8003692:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003694:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8003696:	2000      	movs	r0, #0
 8003698:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800369a:	e7d9      	b.n	8003650 <HAL_ADC_ConfigChannel+0x28>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800369c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800369e:	4381      	bics	r1, r0
 80036a0:	6291      	str	r1, [r2, #40]	@ 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80036a6:	4a07      	ldr	r2, [pc, #28]	@ (80036c4 <HAL_ADC_ConfigChannel+0x9c>)
 80036a8:	4907      	ldr	r1, [pc, #28]	@ (80036c8 <HAL_ADC_ConfigChannel+0xa0>)
 80036aa:	6813      	ldr	r3, [r2, #0]
 80036ac:	400b      	ands	r3, r1
 80036ae:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80036b0:	4235      	tst	r5, r6
 80036b2:	d0f0      	beq.n	8003696 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80036b4:	4a03      	ldr	r2, [pc, #12]	@ (80036c4 <HAL_ADC_ConfigChannel+0x9c>)
 80036b6:	4905      	ldr	r1, [pc, #20]	@ (80036cc <HAL_ADC_ConfigChannel+0xa4>)
 80036b8:	6813      	ldr	r3, [r2, #0]
 80036ba:	400b      	ands	r3, r1
 80036bc:	e7ea      	b.n	8003694 <HAL_ADC_ConfigChannel+0x6c>
 80036be:	46c0      	nop			@ (mov r8, r8)
 80036c0:	00001001 	.word	0x00001001
 80036c4:	40012708 	.word	0x40012708
 80036c8:	ff7fffff 	.word	0xff7fffff
 80036cc:	ffbfffff 	.word	0xffbfffff

080036d0 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036d2:	0005      	movs	r5, r0
 80036d4:	3550      	adds	r5, #80	@ 0x50
 80036d6:	782b      	ldrb	r3, [r5, #0]
{
 80036d8:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80036da:	2002      	movs	r0, #2
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d043      	beq.n	8003768 <HAL_ADCEx_Calibration_Start+0x98>
 80036e0:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036e2:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 80036e4:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	6898      	ldr	r0, [r3, #8]
 80036ea:	4010      	ands	r0, r2
 80036ec:	2801      	cmp	r0, #1
 80036ee:	d109      	bne.n	8003704 <HAL_ADCEx_Calibration_Start+0x34>
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4202      	tst	r2, r0
 80036f4:	d006      	beq.n	8003704 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036f6:	2320      	movs	r3, #32
 80036f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80036fa:	4313      	orrs	r3, r2
 80036fc:	6563      	str	r3, [r4, #84]	@ 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036fe:	2300      	movs	r3, #0
 8003700:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8003702:	e031      	b.n	8003768 <HAL_ADCEx_Calibration_Start+0x98>
    ADC_STATE_CLR_SET(hadc->State, 
 8003704:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8003706:	4a19      	ldr	r2, [pc, #100]	@ (800376c <HAL_ADCEx_Calibration_Start+0x9c>)
 8003708:	4011      	ands	r1, r2
 800370a:	3206      	adds	r2, #6
 800370c:	32ff      	adds	r2, #255	@ 0xff
 800370e:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003710:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8003712:	6562      	str	r2, [r4, #84]	@ 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003714:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	438a      	bics	r2, r1
 800371a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800371c:	2280      	movs	r2, #128	@ 0x80
 800371e:	6899      	ldr	r1, [r3, #8]
 8003720:	0612      	lsls	r2, r2, #24
 8003722:	430a      	orrs	r2, r1
 8003724:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8003726:	f7ff f81c 	bl	8002762 <HAL_GetTick>
 800372a:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	2a00      	cmp	r2, #0
 8003732:	db0b      	blt.n	800374c <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003734:	2103      	movs	r1, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003736:	68da      	ldr	r2, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003738:	400e      	ands	r6, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800373a:	4316      	orrs	r6, r2
 800373c:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800373e:	2301      	movs	r3, #1
 8003740:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003742:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8003744:	438a      	bics	r2, r1
 8003746:	4313      	orrs	r3, r2
 8003748:	6563      	str	r3, [r4, #84]	@ 0x54
 800374a:	e7d8      	b.n	80036fe <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800374c:	f7ff f809 	bl	8002762 <HAL_GetTick>
 8003750:	1bc0      	subs	r0, r0, r7
 8003752:	280a      	cmp	r0, #10
 8003754:	d9ea      	bls.n	800372c <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8003756:	2312      	movs	r3, #18
 8003758:	6d62      	ldr	r2, [r4, #84]	@ 0x54
        return HAL_ERROR;
 800375a:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800375c:	439a      	bics	r2, r3
 800375e:	3b02      	subs	r3, #2
 8003760:	4313      	orrs	r3, r2
 8003762:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 8003764:	2300      	movs	r3, #0
 8003766:	702b      	strb	r3, [r5, #0]
}
 8003768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	fffffefd 	.word	0xfffffefd

08003770 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003770:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003772:	24ff      	movs	r4, #255	@ 0xff
 8003774:	2203      	movs	r2, #3
 8003776:	000b      	movs	r3, r1
 8003778:	0021      	movs	r1, r4
 800377a:	4002      	ands	r2, r0
 800377c:	00d2      	lsls	r2, r2, #3
 800377e:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003780:	019b      	lsls	r3, r3, #6
 8003782:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003784:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003786:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8003788:	2800      	cmp	r0, #0
 800378a:	db0a      	blt.n	80037a2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800378c:	24c0      	movs	r4, #192	@ 0xc0
 800378e:	4a0b      	ldr	r2, [pc, #44]	@ (80037bc <HAL_NVIC_SetPriority+0x4c>)
 8003790:	0880      	lsrs	r0, r0, #2
 8003792:	0080      	lsls	r0, r0, #2
 8003794:	1880      	adds	r0, r0, r2
 8003796:	00a4      	lsls	r4, r4, #2
 8003798:	5902      	ldr	r2, [r0, r4]
 800379a:	400a      	ands	r2, r1
 800379c:	4313      	orrs	r3, r2
 800379e:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80037a0:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a2:	220f      	movs	r2, #15
 80037a4:	4010      	ands	r0, r2
 80037a6:	3808      	subs	r0, #8
 80037a8:	4a05      	ldr	r2, [pc, #20]	@ (80037c0 <HAL_NVIC_SetPriority+0x50>)
 80037aa:	0880      	lsrs	r0, r0, #2
 80037ac:	0080      	lsls	r0, r0, #2
 80037ae:	1880      	adds	r0, r0, r2
 80037b0:	69c2      	ldr	r2, [r0, #28]
 80037b2:	4011      	ands	r1, r2
 80037b4:	4319      	orrs	r1, r3
 80037b6:	61c1      	str	r1, [r0, #28]
 80037b8:	e7f2      	b.n	80037a0 <HAL_NVIC_SetPriority+0x30>
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	e000e100 	.word	0xe000e100
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80037c4:	2800      	cmp	r0, #0
 80037c6:	db05      	blt.n	80037d4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c8:	231f      	movs	r3, #31
 80037ca:	4018      	ands	r0, r3
 80037cc:	3b1e      	subs	r3, #30
 80037ce:	4083      	lsls	r3, r0
 80037d0:	4a01      	ldr	r2, [pc, #4]	@ (80037d8 <HAL_NVIC_EnableIRQ+0x14>)
 80037d2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80037d4:	4770      	bx	lr
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	e000e100 	.word	0xe000e100

080037dc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80037dc:	2800      	cmp	r0, #0
 80037de:	db09      	blt.n	80037f4 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e0:	231f      	movs	r3, #31
 80037e2:	4018      	ands	r0, r3
 80037e4:	3b1e      	subs	r3, #30
 80037e6:	4083      	lsls	r3, r0
 80037e8:	4a03      	ldr	r2, [pc, #12]	@ (80037f8 <HAL_NVIC_DisableIRQ+0x1c>)
 80037ea:	67d3      	str	r3, [r2, #124]	@ 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80037f0:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80037f4:	4770      	bx	lr
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	e000e104 	.word	0xe000e104

080037fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003800:	2001      	movs	r0, #1
  if(hdma == NULL)
 8003802:	2c00      	cmp	r4, #0
 8003804:	d035      	beq.n	8003872 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003806:	6825      	ldr	r5, [r4, #0]
 8003808:	4b1a      	ldr	r3, [pc, #104]	@ (8003874 <HAL_DMA_Init+0x78>)
 800380a:	2114      	movs	r1, #20
 800380c:	18e8      	adds	r0, r5, r3
 800380e:	f7fc fcab 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003812:	4b19      	ldr	r3, [pc, #100]	@ (8003878 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003814:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8003816:	6423      	str	r3, [r4, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003818:	2302      	movs	r3, #2
 800381a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800381c:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800381e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003820:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003822:	4b16      	ldr	r3, [pc, #88]	@ (800387c <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003824:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003826:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8003828:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 800382c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382e:	433b      	orrs	r3, r7
 8003830:	6967      	ldr	r7, [r4, #20]
 8003832:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003834:	69a7      	ldr	r7, [r4, #24]
 8003836:	433b      	orrs	r3, r7
 8003838:	69e7      	ldr	r7, [r4, #28]
 800383a:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800383c:	6a27      	ldr	r7, [r4, #32]
 800383e:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8003840:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003842:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	01db      	lsls	r3, r3, #7
 8003848:	4299      	cmp	r1, r3
 800384a:	d00c      	beq.n	8003866 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800384c:	251c      	movs	r5, #28
 800384e:	4028      	ands	r0, r5
 8003850:	3d0d      	subs	r5, #13
 8003852:	4085      	lsls	r5, r0
 8003854:	490a      	ldr	r1, [pc, #40]	@ (8003880 <HAL_DMA_Init+0x84>)
 8003856:	680b      	ldr	r3, [r1, #0]
 8003858:	43ab      	bics	r3, r5
 800385a:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800385c:	6863      	ldr	r3, [r4, #4]
 800385e:	680d      	ldr	r5, [r1, #0]
 8003860:	4083      	lsls	r3, r0
 8003862:	432b      	orrs	r3, r5
 8003864:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003866:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003868:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386a:	63e0      	str	r0, [r4, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800386c:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800386e:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003870:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003874:	bffdfff8 	.word	0xbffdfff8
 8003878:	40020000 	.word	0x40020000
 800387c:	ffff800f 	.word	0xffff800f
 8003880:	400200a8 	.word	0x400200a8

08003884 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	2501      	movs	r5, #1
 8003888:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 800388a:	0028      	movs	r0, r5
  if (NULL == hdma )
 800388c:	2c00      	cmp	r4, #0
 800388e:	d021      	beq.n	80038d4 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003890:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003892:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8003894:	6833      	ldr	r3, [r6, #0]
 8003896:	43ab      	bics	r3, r5
 8003898:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800389a:	4b0f      	ldr	r3, [pc, #60]	@ (80038d8 <HAL_DMA_DeInit+0x54>)
 800389c:	18f0      	adds	r0, r6, r3
 800389e:	f7fc fc63 	bl	8000168 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038a2:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80038a4:	0083      	lsls	r3, r0, #2
 80038a6:	6463      	str	r3, [r4, #68]	@ 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038a8:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 80038aa:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038ac:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038ae:	390d      	subs	r1, #13
 80038b0:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 80038b2:	4a0a      	ldr	r2, [pc, #40]	@ (80038dc <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80038b4:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 80038b6:	6422      	str	r2, [r4, #64]	@ 0x40
  hdma->Instance->CCR  = 0U;
 80038b8:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038ba:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038bc:	4d08      	ldr	r5, [pc, #32]	@ (80038e0 <HAL_DMA_DeInit+0x5c>)
 80038be:	682a      	ldr	r2, [r5, #0]
 80038c0:	438a      	bics	r2, r1
 80038c2:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 80038c4:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80038c6:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80038c8:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80038ca:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038cc:	63e0      	str	r0, [r4, #60]	@ 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80038ce:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 80038d0:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 80038d2:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80038d4:	bd70      	pop	{r4, r5, r6, pc}
 80038d6:	46c0      	nop			@ (mov r8, r8)
 80038d8:	bffdfff8 	.word	0xbffdfff8
 80038dc:	40020000 	.word	0x40020000
 80038e0:	400200a8 	.word	0x400200a8

080038e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038e6:	1d44      	adds	r4, r0, #5
{
 80038e8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80038ea:	7fe5      	ldrb	r5, [r4, #31]
 80038ec:	2d01      	cmp	r5, #1
 80038ee:	d035      	beq.n	800395c <HAL_DMA_Start_IT+0x78>
 80038f0:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 80038f2:	1d87      	adds	r7, r0, #6
  __HAL_LOCK(hdma);
 80038f4:	77e5      	strb	r5, [r4, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 80038f6:	7ffd      	ldrb	r5, [r7, #31]
 80038f8:	2600      	movs	r6, #0
 80038fa:	46ac      	mov	ip, r5
 80038fc:	4663      	mov	r3, ip
 80038fe:	b2ed      	uxtb	r5, r5
 8003900:	2b01      	cmp	r3, #1
 8003902:	d12a      	bne.n	800395a <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003904:	2402      	movs	r4, #2
 8003906:	77fc      	strb	r4, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003908:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800390a:	63c6      	str	r6, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 800390c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800390e:	331b      	adds	r3, #27
    __HAL_DMA_DISABLE(hdma);
 8003910:	43ae      	bics	r6, r5
 8003912:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003914:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 8003916:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8003918:	401e      	ands	r6, r3
 800391a:	40b5      	lsls	r5, r6

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800391c:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800391e:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8003920:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003922:	6883      	ldr	r3, [r0, #8]
 8003924:	2b10      	cmp	r3, #16
 8003926:	d10e      	bne.n	8003946 <HAL_DMA_Start_IT+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003928:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800392a:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800392c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003932:	230e      	movs	r3, #14
 8003934:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003936:	4313      	orrs	r3, r2
 8003938:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800393a:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800393c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800393e:	6822      	ldr	r2, [r4, #0]
 8003940:	4313      	orrs	r3, r2
 8003942:	6023      	str	r3, [r4, #0]
}
 8003944:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003946:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003948:	60e2      	str	r2, [r4, #12]
 800394a:	e7ef      	b.n	800392c <HAL_DMA_Start_IT+0x48>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800394c:	2204      	movs	r2, #4
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	4393      	bics	r3, r2
 8003952:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003954:	6822      	ldr	r2, [r4, #0]
 8003956:	230a      	movs	r3, #10
 8003958:	e7ed      	b.n	8003936 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma);
 800395a:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 800395c:	2002      	movs	r0, #2
 800395e:	e7f1      	b.n	8003944 <HAL_DMA_Start_IT+0x60>

08003960 <HAL_DMA_Abort>:
{
 8003960:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003962:	1d84      	adds	r4, r0, #6
 8003964:	7fe2      	ldrb	r2, [r4, #31]
{
 8003966:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003968:	2a02      	cmp	r2, #2
 800396a:	d006      	beq.n	800397a <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800396c:	2204      	movs	r2, #4
 800396e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8003970:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8003972:	2200      	movs	r2, #0
 8003974:	3305      	adds	r3, #5
 8003976:	77da      	strb	r2, [r3, #31]
}
 8003978:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800397a:	6802      	ldr	r2, [r0, #0]
 800397c:	200e      	movs	r0, #14
 800397e:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003980:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003982:	4381      	bics	r1, r0
 8003984:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003986:	2101      	movs	r1, #1
 8003988:	6810      	ldr	r0, [r2, #0]
 800398a:	4388      	bics	r0, r1
 800398c:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800398e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003990:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003992:	402a      	ands	r2, r5
 8003994:	000d      	movs	r5, r1
 8003996:	4095      	lsls	r5, r2
 8003998:	6045      	str	r5, [r0, #4]
    return status;
 800399a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800399c:	77e1      	strb	r1, [r4, #31]
    return status;
 800399e:	e7e8      	b.n	8003972 <HAL_DMA_Abort+0x12>

080039a0 <HAL_DMA_Abort_IT>:
{
 80039a0:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039a2:	1d84      	adds	r4, r0, #6
 80039a4:	7fe3      	ldrb	r3, [r4, #31]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d003      	beq.n	80039b2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039aa:	2304      	movs	r3, #4
 80039ac:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80039ae:	2001      	movs	r0, #1
}
 80039b0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b2:	210e      	movs	r1, #14
 80039b4:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039b6:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	438a      	bics	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80039be:	2201      	movs	r2, #1
 80039c0:	6819      	ldr	r1, [r3, #0]
 80039c2:	4391      	bics	r1, r2
 80039c4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039c6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80039c8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80039ca:	402b      	ands	r3, r5
 80039cc:	0015      	movs	r5, r2
 80039ce:	409d      	lsls	r5, r3
 80039d0:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80039d2:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80039d4:	2200      	movs	r2, #0
 80039d6:	1d43      	adds	r3, r0, #5
 80039d8:	77da      	strb	r2, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 80039da:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80039dc:	4293      	cmp	r3, r2
 80039de:	d000      	beq.n	80039e2 <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 80039e0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80039e2:	2000      	movs	r0, #0
 80039e4:	e7e4      	b.n	80039b0 <HAL_DMA_Abort_IT+0x10>

080039e6 <HAL_DMA_IRQHandler>:
{
 80039e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80039e8:	261c      	movs	r6, #28
 80039ea:	2704      	movs	r7, #4
 80039ec:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039ee:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80039f0:	4032      	ands	r2, r6
 80039f2:	003e      	movs	r6, r7
 80039f4:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039f6:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80039f8:	6803      	ldr	r3, [r0, #0]
 80039fa:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80039fc:	4235      	tst	r5, r6
 80039fe:	d00d      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x36>
 8003a00:	423c      	tst	r4, r7
 8003a02:	d00b      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	0692      	lsls	r2, r2, #26
 8003a08:	d402      	bmi.n	8003a10 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	43ba      	bics	r2, r7
 8003a0e:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8003a10:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003a12:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d019      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8003a18:	4798      	blx	r3
  return;
 8003a1a:	e017      	b.n	8003a4c <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003a1c:	2702      	movs	r7, #2
 8003a1e:	003e      	movs	r6, r7
 8003a20:	4096      	lsls	r6, r2
 8003a22:	4235      	tst	r5, r6
 8003a24:	d013      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x68>
 8003a26:	423c      	tst	r4, r7
 8003a28:	d011      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	0692      	lsls	r2, r2, #26
 8003a2e:	d406      	bmi.n	8003a3e <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a30:	240a      	movs	r4, #10
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	43a2      	bics	r2, r4
 8003a36:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003a38:	2201      	movs	r2, #1
 8003a3a:	1d83      	adds	r3, r0, #6
 8003a3c:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a42:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003a44:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8003a46:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d1e5      	bne.n	8003a18 <HAL_DMA_IRQHandler+0x32>
}
 8003a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003a4e:	2608      	movs	r6, #8
 8003a50:	0037      	movs	r7, r6
 8003a52:	4097      	lsls	r7, r2
 8003a54:	423d      	tst	r5, r7
 8003a56:	d0f9      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x66>
 8003a58:	4234      	tst	r4, r6
 8003a5a:	d0f7      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a5c:	250e      	movs	r5, #14
 8003a5e:	681c      	ldr	r4, [r3, #0]
 8003a60:	43ac      	bics	r4, r5
 8003a62:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a64:	2301      	movs	r3, #1
 8003a66:	001c      	movs	r4, r3
 8003a68:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8003a6a:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a6c:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a6e:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003a70:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8003a72:	2200      	movs	r2, #0
 8003a74:	1d43      	adds	r3, r0, #5
 8003a76:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8003a78:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003a7a:	e7e5      	b.n	8003a48 <HAL_DMA_IRQHandler+0x62>

08003a7c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8003a80:	d101      	bne.n	8003a86 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003a82:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8003a84:	4770      	bx	lr
      status = HAL_ERROR;
 8003a86:	2001      	movs	r0, #1
 8003a88:	e7fc      	b.n	8003a84 <HAL_EXTI_RegisterCallback+0x8>

08003a8a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003a8a:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8003a8c:	2001      	movs	r0, #1
  if (hexti == NULL)
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8003a92:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8003a94:	6019      	str	r1, [r3, #0]
  }
}
 8003a96:	4770      	bx	lr

08003a98 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003a98:	231f      	movs	r3, #31
 8003a9a:	6802      	ldr	r2, [r0, #0]
{
 8003a9c:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	3b1e      	subs	r3, #30
 8003aa2:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8003aa4:	4a04      	ldr	r2, [pc, #16]	@ (8003ab8 <HAL_EXTI_IRQHandler+0x20>)
 8003aa6:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8003aa8:	420b      	tst	r3, r1
 8003aaa:	d004      	beq.n	8003ab6 <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8003aac:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003aae:	6843      	ldr	r3, [r0, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d000      	beq.n	8003ab6 <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8003ab4:	4798      	blx	r3
    }
  }
}
 8003ab6:	bd10      	pop	{r4, pc}
 8003ab8:	40010400 	.word	0x40010400

08003abc <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8003abc:	2300      	movs	r3, #0
{
 8003abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003ac2:	680a      	ldr	r2, [r1, #0]
 8003ac4:	0014      	movs	r4, r2
 8003ac6:	40dc      	lsrs	r4, r3
 8003ac8:	d101      	bne.n	8003ace <HAL_GPIO_Init+0x12>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003aca:	b005      	add	sp, #20
 8003acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003ace:	2401      	movs	r4, #1
 8003ad0:	0015      	movs	r5, r2
 8003ad2:	409c      	lsls	r4, r3
 8003ad4:	4025      	ands	r5, r4
 8003ad6:	9502      	str	r5, [sp, #8]
    if (iocurrent)
 8003ad8:	4222      	tst	r2, r4
 8003ada:	d100      	bne.n	8003ade <HAL_GPIO_Init+0x22>
 8003adc:	e098      	b.n	8003c10 <HAL_GPIO_Init+0x154>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ade:	2510      	movs	r5, #16
 8003ae0:	684a      	ldr	r2, [r1, #4]
 8003ae2:	005f      	lsls	r7, r3, #1
 8003ae4:	9201      	str	r2, [sp, #4]
 8003ae6:	43aa      	bics	r2, r5
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003ae8:	3d0d      	subs	r5, #13
 8003aea:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003aec:	4694      	mov	ip, r2
 8003aee:	3a01      	subs	r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003af0:	43ed      	mvns	r5, r5
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003af2:	2a01      	cmp	r2, #1
 8003af4:	d80d      	bhi.n	8003b12 <HAL_GPIO_Init+0x56>
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003af6:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8003af8:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003afa:	40ba      	lsls	r2, r7
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003afc:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003afe:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8003b00:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8003b02:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b04:	43a2      	bics	r2, r4
 8003b06:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b08:	9a01      	ldr	r2, [sp, #4]
 8003b0a:	0912      	lsrs	r2, r2, #4
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8003b10:	6042      	str	r2, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b12:	688a      	ldr	r2, [r1, #8]
      temp = GPIOx->PUPDR;
 8003b14:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b16:	40ba      	lsls	r2, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b18:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b1a:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 8003b1c:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b1e:	4662      	mov	r2, ip
 8003b20:	2a02      	cmp	r2, #2
 8003b22:	d114      	bne.n	8003b4e <HAL_GPIO_Init+0x92>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003b24:	2407      	movs	r4, #7
 8003b26:	260f      	movs	r6, #15
 8003b28:	401c      	ands	r4, r3
 8003b2a:	00a4      	lsls	r4, r4, #2
 8003b2c:	40a6      	lsls	r6, r4
 8003b2e:	46b4      	mov	ip, r6
        temp = GPIOx->AFR[position >> 3U];
 8003b30:	08da      	lsrs	r2, r3, #3
 8003b32:	0092      	lsls	r2, r2, #2
 8003b34:	1882      	adds	r2, r0, r2
 8003b36:	9203      	str	r2, [sp, #12]
 8003b38:	6a12      	ldr	r2, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003b3a:	0016      	movs	r6, r2
 8003b3c:	4662      	mov	r2, ip
 8003b3e:	4396      	bics	r6, r2
 8003b40:	46b4      	mov	ip, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003b42:	690e      	ldr	r6, [r1, #16]
 8003b44:	4662      	mov	r2, ip
 8003b46:	40a6      	lsls	r6, r4
 8003b48:	4316      	orrs	r6, r2
        GPIOx->AFR[position >> 3U] = temp;
 8003b4a:	9a03      	ldr	r2, [sp, #12]
 8003b4c:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8003b4e:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b50:	9a01      	ldr	r2, [sp, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b52:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b54:	2503      	movs	r5, #3
 8003b56:	402a      	ands	r2, r5
 8003b58:	40ba      	lsls	r2, r7
 8003b5a:	4322      	orrs	r2, r4
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b5c:	2480      	movs	r4, #128	@ 0x80
      GPIOx->MODER = temp;
 8003b5e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b60:	9a01      	ldr	r2, [sp, #4]
 8003b62:	0564      	lsls	r4, r4, #21
 8003b64:	4222      	tst	r2, r4
 8003b66:	d053      	beq.n	8003c10 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b68:	4c2a      	ldr	r4, [pc, #168]	@ (8003c14 <HAL_GPIO_Init+0x158>)
 8003b6a:	3d02      	subs	r5, #2
 8003b6c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003b6e:	27a0      	movs	r7, #160	@ 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b70:	432a      	orrs	r2, r5
 8003b72:	6362      	str	r2, [r4, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003b74:	4a28      	ldr	r2, [pc, #160]	@ (8003c18 <HAL_GPIO_Init+0x15c>)
 8003b76:	089c      	lsrs	r4, r3, #2
 8003b78:	00a4      	lsls	r4, r4, #2
 8003b7a:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	3502      	adds	r5, #2
 8003b80:	401d      	ands	r5, r3
 8003b82:	00ad      	lsls	r5, r5, #2
 8003b84:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8003b86:	68a6      	ldr	r6, [r4, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003b88:	05ff      	lsls	r7, r7, #23
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003b8a:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	42b8      	cmp	r0, r7
 8003b90:	d014      	beq.n	8003bbc <HAL_GPIO_Init+0x100>
 8003b92:	4f22      	ldr	r7, [pc, #136]	@ (8003c1c <HAL_GPIO_Init+0x160>)
 8003b94:	3201      	adds	r2, #1
 8003b96:	42b8      	cmp	r0, r7
 8003b98:	d010      	beq.n	8003bbc <HAL_GPIO_Init+0x100>
 8003b9a:	4f21      	ldr	r7, [pc, #132]	@ (8003c20 <HAL_GPIO_Init+0x164>)
 8003b9c:	3201      	adds	r2, #1
 8003b9e:	42b8      	cmp	r0, r7
 8003ba0:	d00c      	beq.n	8003bbc <HAL_GPIO_Init+0x100>
 8003ba2:	4f20      	ldr	r7, [pc, #128]	@ (8003c24 <HAL_GPIO_Init+0x168>)
 8003ba4:	3201      	adds	r2, #1
 8003ba6:	42b8      	cmp	r0, r7
 8003ba8:	d008      	beq.n	8003bbc <HAL_GPIO_Init+0x100>
 8003baa:	4f1f      	ldr	r7, [pc, #124]	@ (8003c28 <HAL_GPIO_Init+0x16c>)
 8003bac:	3201      	adds	r2, #1
 8003bae:	42b8      	cmp	r0, r7
 8003bb0:	d004      	beq.n	8003bbc <HAL_GPIO_Init+0x100>
 8003bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003c2c <HAL_GPIO_Init+0x170>)
 8003bb4:	1882      	adds	r2, r0, r2
 8003bb6:	1e57      	subs	r7, r2, #1
 8003bb8:	41ba      	sbcs	r2, r7
 8003bba:	3205      	adds	r2, #5
 8003bbc:	40aa      	lsls	r2, r5
 8003bbe:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bc0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8003bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c30 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 8003bc4:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8003bc6:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8003bc8:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bca:	9f01      	ldr	r7, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8003bcc:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8003bce:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bd0:	03ff      	lsls	r7, r7, #15
 8003bd2:	d401      	bmi.n	8003bd8 <HAL_GPIO_Init+0x11c>
        temp &= ~((uint32_t)iocurrent);
 8003bd4:	0035      	movs	r5, r6
 8003bd6:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8003bd8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8003bda:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003bdc:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bde:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8003be0:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003be2:	03bf      	lsls	r7, r7, #14
 8003be4:	d401      	bmi.n	8003bea <HAL_GPIO_Init+0x12e>
        temp &= ~((uint32_t)iocurrent);
 8003be6:	0035      	movs	r5, r6
 8003be8:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8003bea:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8003bec:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8003bee:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bf0:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8003bf2:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bf4:	02ff      	lsls	r7, r7, #11
 8003bf6:	d401      	bmi.n	8003bfc <HAL_GPIO_Init+0x140>
        temp &= ~((uint32_t)iocurrent);
 8003bf8:	0035      	movs	r5, r6
 8003bfa:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8003bfc:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003bfe:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8003c00:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c02:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8003c04:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c06:	02bf      	lsls	r7, r7, #10
 8003c08:	d401      	bmi.n	8003c0e <HAL_GPIO_Init+0x152>
        temp &= ~((uint32_t)iocurrent);
 8003c0a:	4025      	ands	r5, r4
 8003c0c:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8003c0e:	60d6      	str	r6, [r2, #12]
    position++;
 8003c10:	3301      	adds	r3, #1
 8003c12:	e756      	b.n	8003ac2 <HAL_GPIO_Init+0x6>
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	50000400 	.word	0x50000400
 8003c20:	50000800 	.word	0x50000800
 8003c24:	50000c00 	.word	0x50000c00
 8003c28:	50001000 	.word	0x50001000
 8003c2c:	afffe400 	.word	0xafffe400
 8003c30:	40010400 	.word	0x40010400

08003c34 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c34:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00U;
 8003c36:	2200      	movs	r2, #0
{
 8003c38:	000f      	movs	r7, r1
 8003c3a:	b085      	sub	sp, #20

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8003c3c:	003b      	movs	r3, r7
 8003c3e:	40d3      	lsrs	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_GPIO_DeInit+0x12>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8003c42:	b005      	add	sp, #20
 8003c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8003c46:	2301      	movs	r3, #1
 8003c48:	4093      	lsls	r3, r2
 8003c4a:	001c      	movs	r4, r3
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	403c      	ands	r4, r7
    if (iocurrent)
 8003c50:	421f      	tst	r7, r3
 8003c52:	d05a      	beq.n	8003d0a <HAL_GPIO_DeInit+0xd6>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003c54:	4b2e      	ldr	r3, [pc, #184]	@ (8003d10 <HAL_GPIO_DeInit+0xdc>)
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003c56:	2503      	movs	r5, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003c58:	0891      	lsrs	r1, r2, #2
 8003c5a:	0089      	lsls	r1, r1, #2
 8003c5c:	18c9      	adds	r1, r1, r3
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003c5e:	230f      	movs	r3, #15
 8003c60:	4015      	ands	r5, r2
 8003c62:	00ad      	lsls	r5, r5, #2
 8003c64:	40ab      	lsls	r3, r5
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003c66:	688e      	ldr	r6, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003c68:	9302      	str	r3, [sp, #8]
 8003c6a:	401e      	ands	r6, r3
 8003c6c:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003c6e:	26a0      	movs	r6, #160	@ 0xa0
 8003c70:	2300      	movs	r3, #0
 8003c72:	05f6      	lsls	r6, r6, #23
 8003c74:	42b0      	cmp	r0, r6
 8003c76:	d018      	beq.n	8003caa <HAL_GPIO_DeInit+0x76>
 8003c78:	4b26      	ldr	r3, [pc, #152]	@ (8003d14 <HAL_GPIO_DeInit+0xe0>)
 8003c7a:	469c      	mov	ip, r3
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	4560      	cmp	r0, ip
 8003c80:	d013      	beq.n	8003caa <HAL_GPIO_DeInit+0x76>
 8003c82:	4b25      	ldr	r3, [pc, #148]	@ (8003d18 <HAL_GPIO_DeInit+0xe4>)
 8003c84:	469c      	mov	ip, r3
 8003c86:	2302      	movs	r3, #2
 8003c88:	4560      	cmp	r0, ip
 8003c8a:	d00e      	beq.n	8003caa <HAL_GPIO_DeInit+0x76>
 8003c8c:	4b23      	ldr	r3, [pc, #140]	@ (8003d1c <HAL_GPIO_DeInit+0xe8>)
 8003c8e:	469c      	mov	ip, r3
 8003c90:	2303      	movs	r3, #3
 8003c92:	4560      	cmp	r0, ip
 8003c94:	d009      	beq.n	8003caa <HAL_GPIO_DeInit+0x76>
 8003c96:	4b22      	ldr	r3, [pc, #136]	@ (8003d20 <HAL_GPIO_DeInit+0xec>)
 8003c98:	469c      	mov	ip, r3
 8003c9a:	2304      	movs	r3, #4
 8003c9c:	4560      	cmp	r0, ip
 8003c9e:	d004      	beq.n	8003caa <HAL_GPIO_DeInit+0x76>
 8003ca0:	4b20      	ldr	r3, [pc, #128]	@ (8003d24 <HAL_GPIO_DeInit+0xf0>)
 8003ca2:	18c3      	adds	r3, r0, r3
 8003ca4:	1e5e      	subs	r6, r3, #1
 8003ca6:	41b3      	sbcs	r3, r6
 8003ca8:	3305      	adds	r3, #5
 8003caa:	40ab      	lsls	r3, r5
 8003cac:	9d03      	ldr	r5, [sp, #12]
 8003cae:	42ab      	cmp	r3, r5
 8003cb0:	d110      	bne.n	8003cd4 <HAL_GPIO_DeInit+0xa0>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d28 <HAL_GPIO_DeInit+0xf4>)
 8003cb4:	681d      	ldr	r5, [r3, #0]
 8003cb6:	43a5      	bics	r5, r4
 8003cb8:	601d      	str	r5, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003cba:	685d      	ldr	r5, [r3, #4]
 8003cbc:	43a5      	bics	r5, r4
 8003cbe:	605d      	str	r5, [r3, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003cc0:	689d      	ldr	r5, [r3, #8]
 8003cc2:	43a5      	bics	r5, r4
 8003cc4:	609d      	str	r5, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003cc6:	68dd      	ldr	r5, [r3, #12]
 8003cc8:	43a5      	bics	r5, r4
 8003cca:	60dd      	str	r5, [r3, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003ccc:	688b      	ldr	r3, [r1, #8]
 8003cce:	9c02      	ldr	r4, [sp, #8]
 8003cd0:	43a3      	bics	r3, r4
 8003cd2:	608b      	str	r3, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003cd4:	2403      	movs	r4, #3
 8003cd6:	0051      	lsls	r1, r2, #1
 8003cd8:	408c      	lsls	r4, r1
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003cda:	2107      	movs	r1, #7
 8003cdc:	260f      	movs	r6, #15
 8003cde:	4011      	ands	r1, r2
 8003ce0:	0089      	lsls	r1, r1, #2
 8003ce2:	408e      	lsls	r6, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003ce4:	6803      	ldr	r3, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003ce6:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003ce8:	4323      	orrs	r3, r4
 8003cea:	6003      	str	r3, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003cec:	08d3      	lsrs	r3, r2, #3
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	18c3      	adds	r3, r0, r3
 8003cf2:	6a1d      	ldr	r5, [r3, #32]
 8003cf4:	43b5      	bics	r5, r6
 8003cf6:	621d      	str	r5, [r3, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cf8:	68c3      	ldr	r3, [r0, #12]
 8003cfa:	43a3      	bics	r3, r4
 8003cfc:	60c3      	str	r3, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003cfe:	6843      	ldr	r3, [r0, #4]
 8003d00:	438b      	bics	r3, r1
 8003d02:	6043      	str	r3, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003d04:	6883      	ldr	r3, [r0, #8]
 8003d06:	43a3      	bics	r3, r4
 8003d08:	6083      	str	r3, [r0, #8]
    position++;
 8003d0a:	3201      	adds	r2, #1
 8003d0c:	e796      	b.n	8003c3c <HAL_GPIO_DeInit+0x8>
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	40010000 	.word	0x40010000
 8003d14:	50000400 	.word	0x50000400
 8003d18:	50000800 	.word	0x50000800
 8003d1c:	50000c00 	.word	0x50000c00
 8003d20:	50001000 	.word	0x50001000
 8003d24:	afffe400 	.word	0xafffe400
 8003d28:	40010400 	.word	0x40010400

08003d2c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d2c:	6900      	ldr	r0, [r0, #16]
 8003d2e:	4008      	ands	r0, r1
 8003d30:	1e43      	subs	r3, r0, #1
 8003d32:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8003d34:	b2c0      	uxtb	r0, r0
}
 8003d36:	4770      	bx	lr

08003d38 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d38:	2a00      	cmp	r2, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d3c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003d3e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003d40:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8003d42:	e7fc      	b.n	8003d3e <HAL_GPIO_WritePin+0x6>

08003d44 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d44:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d46:	0013      	movs	r3, r2
 8003d48:	400b      	ands	r3, r1
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	4391      	bics	r1, r2
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	6183      	str	r3, [r0, #24]
}
 8003d52:	4770      	bx	lr

08003d54 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d54:	4b04      	ldr	r3, [pc, #16]	@ (8003d68 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8003d56:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	4210      	tst	r0, r2
 8003d5c:	d002      	beq.n	8003d64 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d5e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d60:	f7fd fefa 	bl	8001b58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d64:	bd10      	pop	{r4, pc}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	40010400 	.word	0x40010400

08003d6c <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8003d6c:	2110      	movs	r1, #16
 8003d6e:	4a02      	ldr	r2, [pc, #8]	@ (8003d78 <HAL_PWR_DisablePVD+0xc>)
 8003d70:	6813      	ldr	r3, [r2, #0]
 8003d72:	438b      	bics	r3, r1
 8003d74:	6013      	str	r3, [r2, #0]
}
 8003d76:	4770      	bx	lr
 8003d78:	40007000 	.word	0x40007000

08003d7c <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003d7c:	4b17      	ldr	r3, [pc, #92]	@ (8003ddc <HAL_PWR_EnterSLEEPMode+0x60>)
{
 8003d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003d80:	681e      	ldr	r6, [r3, #0]
{
 8003d82:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003d84:	2080      	movs	r0, #128	@ 0x80
 8003d86:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003d88:	2701      	movs	r7, #1
 8003d8a:	4a15      	ldr	r2, [pc, #84]	@ (8003de0 <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003d8c:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003d8e:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003d90:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003d92:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8003d94:	4206      	tst	r6, r0
 8003d96:	d005      	beq.n	8003da4 <HAL_PWR_EnterSLEEPMode+0x28>
 8003d98:	2a00      	cmp	r2, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	4e11      	ldr	r6, [pc, #68]	@ (8003de4 <HAL_PWR_EnterSLEEPMode+0x68>)
 8003da0:	4030      	ands	r0, r6
 8003da2:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003da4:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8003da6:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003da8:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003daa:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003dac:	4d0e      	ldr	r5, [pc, #56]	@ (8003de8 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 8003dae:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003db0:	6928      	ldr	r0, [r5, #16]
 8003db2:	3601      	adds	r6, #1
 8003db4:	43b0      	bics	r0, r6
 8003db6:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003db8:	2901      	cmp	r1, #1
 8003dba:	d10b      	bne.n	8003dd4 <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003dbc:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8003dbe:	2c00      	cmp	r4, #0
 8003dc0:	d006      	beq.n	8003dd0 <HAL_PWR_EnterSLEEPMode+0x54>
 8003dc2:	2a00      	cmp	r2, #0
 8003dc4:	d004      	beq.n	8003dd0 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003dc6:	2280      	movs	r2, #128	@ 0x80
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	0092      	lsls	r2, r2, #2
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8003dd0:	46c0      	nop			@ (mov r8, r8)

}
 8003dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8003dd4:	bf40      	sev
    __WFE();
 8003dd6:	bf20      	wfe
    __WFE();
 8003dd8:	bf20      	wfe
 8003dda:	e7f0      	b.n	8003dbe <HAL_PWR_EnterSLEEPMode+0x42>
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	40010000 	.word	0x40010000
 8003de4:	fffffdff 	.word	0xfffffdff
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003dec:	4b19      	ldr	r3, [pc, #100]	@ (8003e54 <HAL_PWR_EnterSTOPMode+0x68>)
{
 8003dee:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003df0:	681e      	ldr	r6, [r3, #0]
{
 8003df2:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003df4:	2080      	movs	r0, #128	@ 0x80
 8003df6:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003df8:	2701      	movs	r7, #1
 8003dfa:	4a17      	ldr	r2, [pc, #92]	@ (8003e58 <HAL_PWR_EnterSTOPMode+0x6c>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003dfc:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003dfe:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003e00:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003e02:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8003e04:	4206      	tst	r6, r0
 8003e06:	d005      	beq.n	8003e14 <HAL_PWR_EnterSTOPMode+0x28>
 8003e08:	2a00      	cmp	r2, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	4e13      	ldr	r6, [pc, #76]	@ (8003e5c <HAL_PWR_EnterSTOPMode+0x70>)
 8003e10:	4030      	ands	r0, r6
 8003e12:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003e14:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8003e16:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003e18:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003e1a:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003e1c:	2504      	movs	r5, #4
  PWR->CR = tmpreg;
 8003e1e:	6018      	str	r0, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003e20:	480f      	ldr	r0, [pc, #60]	@ (8003e60 <HAL_PWR_EnterSTOPMode+0x74>)
 8003e22:	6906      	ldr	r6, [r0, #16]
 8003e24:	4335      	orrs	r5, r6
 8003e26:	6105      	str	r5, [r0, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003e28:	2901      	cmp	r1, #1
 8003e2a:	d10e      	bne.n	8003e4a <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003e2c:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003e2e:	2504      	movs	r5, #4
 8003e30:	6901      	ldr	r1, [r0, #16]
 8003e32:	43a9      	bics	r1, r5
 8003e34:	6101      	str	r1, [r0, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8003e36:	2c00      	cmp	r4, #0
 8003e38:	d006      	beq.n	8003e48 <HAL_PWR_EnterSTOPMode+0x5c>
 8003e3a:	2a00      	cmp	r2, #0
 8003e3c:	d004      	beq.n	8003e48 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003e3e:	2280      	movs	r2, #128	@ 0x80
 8003e40:	6819      	ldr	r1, [r3, #0]
 8003e42:	0092      	lsls	r2, r2, #2
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]
  }
}
 8003e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8003e4a:	bf40      	sev
    __WFE();
 8003e4c:	bf20      	wfe
    __WFE();
 8003e4e:	bf20      	wfe
 8003e50:	e7ed      	b.n	8003e2e <HAL_PWR_EnterSTOPMode+0x42>
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	40007000 	.word	0x40007000
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	fffffdff 	.word	0xfffffdff
 8003e60:	e000ed00 	.word	0xe000ed00

08003e64 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8003e64:	2380      	movs	r3, #128	@ 0x80
 8003e66:	4a03      	ldr	r2, [pc, #12]	@ (8003e74 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	6811      	ldr	r1, [r2, #0]
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	4770      	bx	lr
 8003e72:	46c0      	nop			@ (mov r8, r8)
 8003e74:	40007000 	.word	0x40007000

08003e78 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8003e78:	2380      	movs	r3, #128	@ 0x80
 8003e7a:	4a03      	ldr	r2, [pc, #12]	@ (8003e88 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	6811      	ldr	r1, [r2, #0]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6013      	str	r3, [r2, #0]
}
 8003e84:	4770      	bx	lr
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	40007000 	.word	0x40007000

08003e8c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e8c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8003e90:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003e92:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003e94:	4022      	ands	r2, r4
 8003e96:	2a08      	cmp	r2, #8
 8003e98:	d034      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x78>
 8003e9a:	2a0c      	cmp	r2, #12
 8003e9c:	d00c      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x2c>
 8003e9e:	2a04      	cmp	r2, #4
 8003ea0:	d128      	bne.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x68>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003ea8:	4243      	negs	r3, r0
 8003eaa:	4158      	adcs	r0, r3
 8003eac:	4b17      	ldr	r3, [pc, #92]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x80>)
 8003eae:	4240      	negs	r0, r0
 8003eb0:	4018      	ands	r0, r3
 8003eb2:	4b17      	ldr	r3, [pc, #92]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x84>)
 8003eb4:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003eb8:	02a2      	lsls	r2, r4, #10
 8003eba:	4816      	ldr	r0, [pc, #88]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x88>)
 8003ebc:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ebe:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ec0:	2280      	movs	r2, #128	@ 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003ec2:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ec4:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003ec6:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ec8:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003eca:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ecc:	4211      	tst	r1, r2
 8003ece:	d009      	beq.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ed0:	4a11      	ldr	r2, [pc, #68]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	f7fc fb1b 	bl	8000510 <__aeabi_lmul>
 8003eda:	0022      	movs	r2, r4
 8003edc:	2300      	movs	r3, #0
 8003ede:	f7fc faf7 	bl	80004d0 <__aeabi_uldivmod>
 8003ee2:	e7e8      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	2310      	movs	r3, #16
 8003ee8:	421a      	tst	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x64>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003eec:	4a08      	ldr	r2, [pc, #32]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x84>)
 8003eee:	e7f0      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x46>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0x90>)
 8003ef2:	e7ee      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ef4:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ef6:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ef8:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003efe:	3301      	adds	r3, #1
 8003f00:	4098      	lsls	r0, r3
      break;
 8003f02:	e7d8      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x2a>
  switch (tmpreg & RCC_CFGR_SWS)
 8003f04:	4804      	ldr	r0, [pc, #16]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003f06:	e7d6      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x2a>
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	00b71b00 	.word	0x00b71b00
 8003f10:	003d0900 	.word	0x003d0900
 8003f14:	0800e8ec 	.word	0x0800e8ec
 8003f18:	007a1200 	.word	0x007a1200
 8003f1c:	00f42400 	.word	0x00f42400

08003f20 <HAL_RCC_OscConfig>:
{
 8003f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f22:	0005      	movs	r5, r0
 8003f24:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8003f26:	2800      	cmp	r0, #0
 8003f28:	d059      	beq.n	8003fde <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f2a:	230c      	movs	r3, #12
 8003f2c:	4cb8      	ldr	r4, [pc, #736]	@ (8004210 <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2e:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f30:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f32:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f34:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f36:	2380      	movs	r3, #128	@ 0x80
 8003f38:	025b      	lsls	r3, r3, #9
 8003f3a:	0019      	movs	r1, r3
 8003f3c:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3e:	07d2      	lsls	r2, r2, #31
 8003f40:	d441      	bmi.n	8003fc6 <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f42:	682b      	ldr	r3, [r5, #0]
 8003f44:	079b      	lsls	r3, r3, #30
 8003f46:	d500      	bpl.n	8003f4a <HAL_RCC_OscConfig+0x2a>
 8003f48:	e08a      	b.n	8004060 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f4a:	682b      	ldr	r3, [r5, #0]
 8003f4c:	06db      	lsls	r3, r3, #27
 8003f4e:	d528      	bpl.n	8003fa2 <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f50:	2e00      	cmp	r6, #0
 8003f52:	d000      	beq.n	8003f56 <HAL_RCC_OscConfig+0x36>
 8003f54:	e0e3      	b.n	800411e <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	059b      	lsls	r3, r3, #22
 8003f5a:	d502      	bpl.n	8003f62 <HAL_RCC_OscConfig+0x42>
 8003f5c:	69eb      	ldr	r3, [r5, #28]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d03d      	beq.n	8003fde <HAL_RCC_OscConfig+0xbe>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f62:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f64:	6862      	ldr	r2, [r4, #4]
 8003f66:	49ab      	ldr	r1, [pc, #684]	@ (8004214 <HAL_RCC_OscConfig+0x2f4>)
 8003f68:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f6e:	0b5b      	lsrs	r3, r3, #13
 8003f70:	3301      	adds	r3, #1
 8003f72:	023f      	lsls	r7, r7, #8
 8003f74:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f76:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f78:	6861      	ldr	r1, [r4, #4]
 8003f7a:	6a2a      	ldr	r2, [r5, #32]
 8003f7c:	0209      	lsls	r1, r1, #8
 8003f7e:	0a09      	lsrs	r1, r1, #8
 8003f80:	0612      	lsls	r2, r2, #24
 8003f82:	430a      	orrs	r2, r1
 8003f84:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003f86:	68e1      	ldr	r1, [r4, #12]
 8003f88:	48a3      	ldr	r0, [pc, #652]	@ (8004218 <HAL_RCC_OscConfig+0x2f8>)
 8003f8a:	060b      	lsls	r3, r1, #24
 8003f8c:	0f1b      	lsrs	r3, r3, #28
 8003f8e:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f90:	4aa2      	ldr	r2, [pc, #648]	@ (800421c <HAL_RCC_OscConfig+0x2fc>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003f92:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 8003f94:	4ba2      	ldr	r3, [pc, #648]	@ (8004220 <HAL_RCC_OscConfig+0x300>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f96:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	f7fe fbe0 	bl	800275e <HAL_InitTick>
        if(status != HAL_OK)
 8003f9e:	2800      	cmp	r0, #0
 8003fa0:	d134      	bne.n	800400c <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa2:	682b      	ldr	r3, [r5, #0]
 8003fa4:	071b      	lsls	r3, r3, #28
 8003fa6:	d500      	bpl.n	8003faa <HAL_RCC_OscConfig+0x8a>
 8003fa8:	e0f0      	b.n	800418c <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003faa:	682b      	ldr	r3, [r5, #0]
 8003fac:	075b      	lsls	r3, r3, #29
 8003fae:	d500      	bpl.n	8003fb2 <HAL_RCC_OscConfig+0x92>
 8003fb0:	e112      	b.n	80041d8 <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fb2:	682b      	ldr	r3, [r5, #0]
 8003fb4:	069b      	lsls	r3, r3, #26
 8003fb6:	d500      	bpl.n	8003fba <HAL_RCC_OscConfig+0x9a>
 8003fb8:	e197      	b.n	80042ea <HAL_RCC_OscConfig+0x3ca>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fba:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d000      	beq.n	8003fc2 <HAL_RCC_OscConfig+0xa2>
 8003fc0:	e1c6      	b.n	8004350 <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	e022      	b.n	800400c <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fc6:	2e08      	cmp	r6, #8
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fca:	2e0c      	cmp	r6, #12
 8003fcc:	d109      	bne.n	8003fe2 <HAL_RCC_OscConfig+0xc2>
 8003fce:	2f00      	cmp	r7, #0
 8003fd0:	d007      	beq.n	8003fe2 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	039b      	lsls	r3, r3, #14
 8003fd6:	d5b4      	bpl.n	8003f42 <HAL_RCC_OscConfig+0x22>
 8003fd8:	686b      	ldr	r3, [r5, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1b1      	bne.n	8003f42 <HAL_RCC_OscConfig+0x22>
    return HAL_ERROR;
 8003fde:	2001      	movs	r0, #1
 8003fe0:	e014      	b.n	800400c <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe2:	686a      	ldr	r2, [r5, #4]
 8003fe4:	428a      	cmp	r2, r1
 8003fe6:	d113      	bne.n	8004010 <HAL_RCC_OscConfig+0xf0>
 8003fe8:	6822      	ldr	r2, [r4, #0]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003fee:	f7fe fbb8 	bl	8002762 <HAL_GetTick>
 8003ff2:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ff4:	2280      	movs	r2, #128	@ 0x80
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	0292      	lsls	r2, r2, #10
 8003ffa:	4213      	tst	r3, r2
 8003ffc:	d1a1      	bne.n	8003f42 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ffe:	f7fe fbb0 	bl	8002762 <HAL_GetTick>
 8004002:	9b00      	ldr	r3, [sp, #0]
 8004004:	1ac0      	subs	r0, r0, r3
 8004006:	2864      	cmp	r0, #100	@ 0x64
 8004008:	d9f4      	bls.n	8003ff4 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 800400a:	2003      	movs	r0, #3
}
 800400c:	b005      	add	sp, #20
 800400e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004010:	21a0      	movs	r1, #160	@ 0xa0
 8004012:	02c9      	lsls	r1, r1, #11
 8004014:	428a      	cmp	r2, r1
 8004016:	d105      	bne.n	8004024 <HAL_RCC_OscConfig+0x104>
 8004018:	2280      	movs	r2, #128	@ 0x80
 800401a:	6821      	ldr	r1, [r4, #0]
 800401c:	02d2      	lsls	r2, r2, #11
 800401e:	430a      	orrs	r2, r1
 8004020:	6022      	str	r2, [r4, #0]
 8004022:	e7e1      	b.n	8003fe8 <HAL_RCC_OscConfig+0xc8>
 8004024:	6821      	ldr	r1, [r4, #0]
 8004026:	487f      	ldr	r0, [pc, #508]	@ (8004224 <HAL_RCC_OscConfig+0x304>)
 8004028:	4001      	ands	r1, r0
 800402a:	6021      	str	r1, [r4, #0]
 800402c:	6821      	ldr	r1, [r4, #0]
 800402e:	400b      	ands	r3, r1
 8004030:	9303      	str	r3, [sp, #12]
 8004032:	9b03      	ldr	r3, [sp, #12]
 8004034:	497c      	ldr	r1, [pc, #496]	@ (8004228 <HAL_RCC_OscConfig+0x308>)
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	400b      	ands	r3, r1
 800403a:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800403c:	2a00      	cmp	r2, #0
 800403e:	d1d6      	bne.n	8003fee <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8004040:	f7fe fb8f 	bl	8002762 <HAL_GetTick>
 8004044:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004046:	2280      	movs	r2, #128	@ 0x80
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	0292      	lsls	r2, r2, #10
 800404c:	4213      	tst	r3, r2
 800404e:	d100      	bne.n	8004052 <HAL_RCC_OscConfig+0x132>
 8004050:	e777      	b.n	8003f42 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004052:	f7fe fb86 	bl	8002762 <HAL_GetTick>
 8004056:	9b00      	ldr	r3, [sp, #0]
 8004058:	1ac0      	subs	r0, r0, r3
 800405a:	2864      	cmp	r0, #100	@ 0x64
 800405c:	d9f3      	bls.n	8004046 <HAL_RCC_OscConfig+0x126>
 800405e:	e7d4      	b.n	800400a <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004060:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8004062:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004064:	4213      	tst	r3, r2
 8004066:	d003      	beq.n	8004070 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004068:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800406a:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800406c:	4311      	orrs	r1, r2
 800406e:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004070:	2e04      	cmp	r6, #4
 8004072:	d003      	beq.n	800407c <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004074:	2e0c      	cmp	r6, #12
 8004076:	d124      	bne.n	80040c2 <HAL_RCC_OscConfig+0x1a2>
 8004078:	2f00      	cmp	r7, #0
 800407a:	d122      	bne.n	80040c2 <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800407c:	6822      	ldr	r2, [r4, #0]
 800407e:	0752      	lsls	r2, r2, #29
 8004080:	d501      	bpl.n	8004086 <HAL_RCC_OscConfig+0x166>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0ab      	beq.n	8003fde <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004086:	6861      	ldr	r1, [r4, #4]
 8004088:	692a      	ldr	r2, [r5, #16]
 800408a:	4868      	ldr	r0, [pc, #416]	@ (800422c <HAL_RCC_OscConfig+0x30c>)
 800408c:	0212      	lsls	r2, r2, #8
 800408e:	4001      	ands	r1, r0
 8004090:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004092:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004094:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004096:	6822      	ldr	r2, [r4, #0]
 8004098:	438a      	bics	r2, r1
 800409a:	4313      	orrs	r3, r2
 800409c:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800409e:	f7ff fef5 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 80040a2:	68e3      	ldr	r3, [r4, #12]
 80040a4:	4a5c      	ldr	r2, [pc, #368]	@ (8004218 <HAL_RCC_OscConfig+0x2f8>)
 80040a6:	061b      	lsls	r3, r3, #24
 80040a8:	0f1b      	lsrs	r3, r3, #28
 80040aa:	5cd3      	ldrb	r3, [r2, r3]
 80040ac:	495b      	ldr	r1, [pc, #364]	@ (800421c <HAL_RCC_OscConfig+0x2fc>)
 80040ae:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 80040b0:	4b5b      	ldr	r3, [pc, #364]	@ (8004220 <HAL_RCC_OscConfig+0x300>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040b2:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 80040b4:	6818      	ldr	r0, [r3, #0]
 80040b6:	f7fe fb52 	bl	800275e <HAL_InitTick>
      if(status != HAL_OK)
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d100      	bne.n	80040c0 <HAL_RCC_OscConfig+0x1a0>
 80040be:	e744      	b.n	8003f4a <HAL_RCC_OscConfig+0x2a>
 80040c0:	e7a4      	b.n	800400c <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d019      	beq.n	80040fa <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80040c6:	2109      	movs	r1, #9
 80040c8:	6822      	ldr	r2, [r4, #0]
 80040ca:	438a      	bics	r2, r1
 80040cc:	4313      	orrs	r3, r2
 80040ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80040d0:	f7fe fb47 	bl	8002762 <HAL_GetTick>
 80040d4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040d6:	2204      	movs	r2, #4
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	4213      	tst	r3, r2
 80040dc:	d007      	beq.n	80040ee <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040de:	6862      	ldr	r2, [r4, #4]
 80040e0:	692b      	ldr	r3, [r5, #16]
 80040e2:	4952      	ldr	r1, [pc, #328]	@ (800422c <HAL_RCC_OscConfig+0x30c>)
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	400a      	ands	r2, r1
 80040e8:	4313      	orrs	r3, r2
 80040ea:	6063      	str	r3, [r4, #4]
 80040ec:	e72d      	b.n	8003f4a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ee:	f7fe fb38 	bl	8002762 <HAL_GetTick>
 80040f2:	1bc0      	subs	r0, r0, r7
 80040f4:	2802      	cmp	r0, #2
 80040f6:	d9ee      	bls.n	80040d6 <HAL_RCC_OscConfig+0x1b6>
 80040f8:	e787      	b.n	800400a <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 80040fa:	2201      	movs	r2, #1
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	4393      	bics	r3, r2
 8004100:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004102:	f7fe fb2e 	bl	8002762 <HAL_GetTick>
 8004106:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004108:	2204      	movs	r2, #4
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	4213      	tst	r3, r2
 800410e:	d100      	bne.n	8004112 <HAL_RCC_OscConfig+0x1f2>
 8004110:	e71b      	b.n	8003f4a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004112:	f7fe fb26 	bl	8002762 <HAL_GetTick>
 8004116:	1bc0      	subs	r0, r0, r7
 8004118:	2802      	cmp	r0, #2
 800411a:	d9f5      	bls.n	8004108 <HAL_RCC_OscConfig+0x1e8>
 800411c:	e775      	b.n	800400a <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800411e:	69eb      	ldr	r3, [r5, #28]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d020      	beq.n	8004166 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 8004124:	2380      	movs	r3, #128	@ 0x80
 8004126:	6822      	ldr	r2, [r4, #0]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	4313      	orrs	r3, r2
 800412c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800412e:	f7fe fb18 	bl	8002762 <HAL_GetTick>
 8004132:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004134:	2280      	movs	r2, #128	@ 0x80
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	0092      	lsls	r2, r2, #2
 800413a:	4213      	tst	r3, r2
 800413c:	d00d      	beq.n	800415a <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800413e:	6863      	ldr	r3, [r4, #4]
 8004140:	4a34      	ldr	r2, [pc, #208]	@ (8004214 <HAL_RCC_OscConfig+0x2f4>)
 8004142:	4013      	ands	r3, r2
 8004144:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8004146:	4313      	orrs	r3, r2
 8004148:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800414a:	6862      	ldr	r2, [r4, #4]
 800414c:	6a2b      	ldr	r3, [r5, #32]
 800414e:	0212      	lsls	r2, r2, #8
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	0a12      	lsrs	r2, r2, #8
 8004154:	4313      	orrs	r3, r2
 8004156:	6063      	str	r3, [r4, #4]
 8004158:	e723      	b.n	8003fa2 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800415a:	f7fe fb02 	bl	8002762 <HAL_GetTick>
 800415e:	1bc0      	subs	r0, r0, r7
 8004160:	2802      	cmp	r0, #2
 8004162:	d9e7      	bls.n	8004134 <HAL_RCC_OscConfig+0x214>
 8004164:	e751      	b.n	800400a <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	4a31      	ldr	r2, [pc, #196]	@ (8004230 <HAL_RCC_OscConfig+0x310>)
 800416a:	4013      	ands	r3, r2
 800416c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800416e:	f7fe faf8 	bl	8002762 <HAL_GetTick>
 8004172:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004174:	2280      	movs	r2, #128	@ 0x80
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	0092      	lsls	r2, r2, #2
 800417a:	4213      	tst	r3, r2
 800417c:	d100      	bne.n	8004180 <HAL_RCC_OscConfig+0x260>
 800417e:	e710      	b.n	8003fa2 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004180:	f7fe faef 	bl	8002762 <HAL_GetTick>
 8004184:	1bc0      	subs	r0, r0, r7
 8004186:	2802      	cmp	r0, #2
 8004188:	d9f4      	bls.n	8004174 <HAL_RCC_OscConfig+0x254>
 800418a:	e73e      	b.n	800400a <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800418c:	696a      	ldr	r2, [r5, #20]
 800418e:	2301      	movs	r3, #1
 8004190:	2a00      	cmp	r2, #0
 8004192:	d010      	beq.n	80041b6 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8004194:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004196:	4313      	orrs	r3, r2
 8004198:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 800419a:	f7fe fae2 	bl	8002762 <HAL_GetTick>
 800419e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041a0:	2202      	movs	r2, #2
 80041a2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80041a4:	4213      	tst	r3, r2
 80041a6:	d000      	beq.n	80041aa <HAL_RCC_OscConfig+0x28a>
 80041a8:	e6ff      	b.n	8003faa <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041aa:	f7fe fada 	bl	8002762 <HAL_GetTick>
 80041ae:	1bc0      	subs	r0, r0, r7
 80041b0:	2802      	cmp	r0, #2
 80041b2:	d9f5      	bls.n	80041a0 <HAL_RCC_OscConfig+0x280>
 80041b4:	e729      	b.n	800400a <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 80041b6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80041b8:	439a      	bics	r2, r3
 80041ba:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80041bc:	f7fe fad1 	bl	8002762 <HAL_GetTick>
 80041c0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041c2:	2202      	movs	r2, #2
 80041c4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80041c6:	4213      	tst	r3, r2
 80041c8:	d100      	bne.n	80041cc <HAL_RCC_OscConfig+0x2ac>
 80041ca:	e6ee      	b.n	8003faa <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041cc:	f7fe fac9 	bl	8002762 <HAL_GetTick>
 80041d0:	1bc0      	subs	r0, r0, r7
 80041d2:	2802      	cmp	r0, #2
 80041d4:	d9f5      	bls.n	80041c2 <HAL_RCC_OscConfig+0x2a2>
 80041d6:	e718      	b.n	800400a <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d8:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80041da:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80041de:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80041e0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e2:	421a      	tst	r2, r3
 80041e4:	d104      	bne.n	80041f0 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80041e8:	4313      	orrs	r3, r2
 80041ea:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 80041ec:	2301      	movs	r3, #1
 80041ee:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f0:	2280      	movs	r2, #128	@ 0x80
 80041f2:	4f10      	ldr	r7, [pc, #64]	@ (8004234 <HAL_RCC_OscConfig+0x314>)
 80041f4:	0052      	lsls	r2, r2, #1
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	4213      	tst	r3, r2
 80041fa:	d01d      	beq.n	8004238 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fc:	2280      	movs	r2, #128	@ 0x80
 80041fe:	68ab      	ldr	r3, [r5, #8]
 8004200:	0052      	lsls	r2, r2, #1
 8004202:	4293      	cmp	r3, r2
 8004204:	d12c      	bne.n	8004260 <HAL_RCC_OscConfig+0x340>
 8004206:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004208:	4313      	orrs	r3, r2
 800420a:	6523      	str	r3, [r4, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800420c:	e04d      	b.n	80042aa <HAL_RCC_OscConfig+0x38a>
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	40021000 	.word	0x40021000
 8004214:	ffff1fff 	.word	0xffff1fff
 8004218:	0800e8f5 	.word	0x0800e8f5
 800421c:	20000060 	.word	0x20000060
 8004220:	20000068 	.word	0x20000068
 8004224:	fffeffff 	.word	0xfffeffff
 8004228:	fffbffff 	.word	0xfffbffff
 800422c:	ffffe0ff 	.word	0xffffe0ff
 8004230:	fffffeff 	.word	0xfffffeff
 8004234:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004238:	2280      	movs	r2, #128	@ 0x80
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	0052      	lsls	r2, r2, #1
 800423e:	4313      	orrs	r3, r2
 8004240:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004242:	f7fe fa8e 	bl	8002762 <HAL_GetTick>
 8004246:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	2280      	movs	r2, #128	@ 0x80
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	0052      	lsls	r2, r2, #1
 800424e:	4213      	tst	r3, r2
 8004250:	d1d4      	bne.n	80041fc <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004252:	f7fe fa86 	bl	8002762 <HAL_GetTick>
 8004256:	9b01      	ldr	r3, [sp, #4]
 8004258:	1ac0      	subs	r0, r0, r3
 800425a:	2864      	cmp	r0, #100	@ 0x64
 800425c:	d9f4      	bls.n	8004248 <HAL_RCC_OscConfig+0x328>
 800425e:	e6d4      	b.n	800400a <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004260:	2b00      	cmp	r3, #0
 8004262:	d116      	bne.n	8004292 <HAL_RCC_OscConfig+0x372>
 8004264:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004266:	4a6b      	ldr	r2, [pc, #428]	@ (8004414 <HAL_RCC_OscConfig+0x4f4>)
 8004268:	4013      	ands	r3, r2
 800426a:	6523      	str	r3, [r4, #80]	@ 0x50
 800426c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800426e:	4a6a      	ldr	r2, [pc, #424]	@ (8004418 <HAL_RCC_OscConfig+0x4f8>)
 8004270:	4013      	ands	r3, r2
 8004272:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8004274:	f7fe fa75 	bl	8002762 <HAL_GetTick>
 8004278:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800427a:	2280      	movs	r2, #128	@ 0x80
 800427c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800427e:	0092      	lsls	r2, r2, #2
 8004280:	4213      	tst	r3, r2
 8004282:	d01a      	beq.n	80042ba <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004284:	f7fe fa6d 	bl	8002762 <HAL_GetTick>
 8004288:	4b64      	ldr	r3, [pc, #400]	@ (800441c <HAL_RCC_OscConfig+0x4fc>)
 800428a:	1bc0      	subs	r0, r0, r7
 800428c:	4298      	cmp	r0, r3
 800428e:	d9f4      	bls.n	800427a <HAL_RCC_OscConfig+0x35a>
 8004290:	e6bb      	b.n	800400a <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004292:	21a0      	movs	r1, #160	@ 0xa0
 8004294:	00c9      	lsls	r1, r1, #3
 8004296:	428b      	cmp	r3, r1
 8004298:	d118      	bne.n	80042cc <HAL_RCC_OscConfig+0x3ac>
 800429a:	2380      	movs	r3, #128	@ 0x80
 800429c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	430b      	orrs	r3, r1
 80042a2:	6523      	str	r3, [r4, #80]	@ 0x50
 80042a4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80042a6:	431a      	orrs	r2, r3
 80042a8:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80042aa:	f7fe fa5a 	bl	8002762 <HAL_GetTick>
 80042ae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042b0:	2280      	movs	r2, #128	@ 0x80
 80042b2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80042b4:	0092      	lsls	r2, r2, #2
 80042b6:	4213      	tst	r3, r2
 80042b8:	d010      	beq.n	80042dc <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 80042ba:	9b00      	ldr	r3, [sp, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d000      	beq.n	80042c2 <HAL_RCC_OscConfig+0x3a2>
 80042c0:	e677      	b.n	8003fb2 <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80042c4:	4a56      	ldr	r2, [pc, #344]	@ (8004420 <HAL_RCC_OscConfig+0x500>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80042ca:	e672      	b.n	8003fb2 <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042cc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80042ce:	4a51      	ldr	r2, [pc, #324]	@ (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	6523      	str	r3, [r4, #80]	@ 0x50
 80042d4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80042d6:	4a50      	ldr	r2, [pc, #320]	@ (8004418 <HAL_RCC_OscConfig+0x4f8>)
 80042d8:	4013      	ands	r3, r2
 80042da:	e796      	b.n	800420a <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042dc:	f7fe fa41 	bl	8002762 <HAL_GetTick>
 80042e0:	4b4e      	ldr	r3, [pc, #312]	@ (800441c <HAL_RCC_OscConfig+0x4fc>)
 80042e2:	1bc0      	subs	r0, r0, r7
 80042e4:	4298      	cmp	r0, r3
 80042e6:	d9e3      	bls.n	80042b0 <HAL_RCC_OscConfig+0x390>
 80042e8:	e68f      	b.n	800400a <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042ea:	69aa      	ldr	r2, [r5, #24]
 80042ec:	2101      	movs	r1, #1
 80042ee:	4b4d      	ldr	r3, [pc, #308]	@ (8004424 <HAL_RCC_OscConfig+0x504>)
 80042f0:	2a00      	cmp	r2, #0
 80042f2:	d018      	beq.n	8004326 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 80042f4:	68a2      	ldr	r2, [r4, #8]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	60a2      	str	r2, [r4, #8]
 80042fa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80042fc:	430a      	orrs	r2, r1
 80042fe:	6362      	str	r2, [r4, #52]	@ 0x34
 8004300:	2280      	movs	r2, #128	@ 0x80
 8004302:	6a19      	ldr	r1, [r3, #32]
 8004304:	0192      	lsls	r2, r2, #6
 8004306:	430a      	orrs	r2, r1
 8004308:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 800430a:	f7fe fa2a 	bl	8002762 <HAL_GetTick>
 800430e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004310:	2202      	movs	r2, #2
 8004312:	68a3      	ldr	r3, [r4, #8]
 8004314:	4213      	tst	r3, r2
 8004316:	d000      	beq.n	800431a <HAL_RCC_OscConfig+0x3fa>
 8004318:	e64f      	b.n	8003fba <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800431a:	f7fe fa22 	bl	8002762 <HAL_GetTick>
 800431e:	1bc0      	subs	r0, r0, r7
 8004320:	2802      	cmp	r0, #2
 8004322:	d9f5      	bls.n	8004310 <HAL_RCC_OscConfig+0x3f0>
 8004324:	e671      	b.n	800400a <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 8004326:	68a2      	ldr	r2, [r4, #8]
 8004328:	438a      	bics	r2, r1
 800432a:	60a2      	str	r2, [r4, #8]
 800432c:	6a1a      	ldr	r2, [r3, #32]
 800432e:	493e      	ldr	r1, [pc, #248]	@ (8004428 <HAL_RCC_OscConfig+0x508>)
 8004330:	400a      	ands	r2, r1
 8004332:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8004334:	f7fe fa15 	bl	8002762 <HAL_GetTick>
 8004338:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800433a:	2202      	movs	r2, #2
 800433c:	68a3      	ldr	r3, [r4, #8]
 800433e:	4213      	tst	r3, r2
 8004340:	d100      	bne.n	8004344 <HAL_RCC_OscConfig+0x424>
 8004342:	e63a      	b.n	8003fba <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004344:	f7fe fa0d 	bl	8002762 <HAL_GetTick>
 8004348:	1bc0      	subs	r0, r0, r7
 800434a:	2802      	cmp	r0, #2
 800434c:	d9f5      	bls.n	800433a <HAL_RCC_OscConfig+0x41a>
 800434e:	e65c      	b.n	800400a <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004350:	2e0c      	cmp	r6, #12
 8004352:	d043      	beq.n	80043dc <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004354:	4a35      	ldr	r2, [pc, #212]	@ (800442c <HAL_RCC_OscConfig+0x50c>)
 8004356:	2b02      	cmp	r3, #2
 8004358:	d12e      	bne.n	80043b8 <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_DISABLE();
 800435a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800435c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800435e:	4013      	ands	r3, r2
 8004360:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004362:	f7fe f9fe 	bl	8002762 <HAL_GetTick>
 8004366:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004368:	04bf      	lsls	r7, r7, #18
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	423b      	tst	r3, r7
 800436e:	d11d      	bne.n	80043ac <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004370:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8004372:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004374:	68e2      	ldr	r2, [r4, #12]
 8004376:	430b      	orrs	r3, r1
 8004378:	492d      	ldr	r1, [pc, #180]	@ (8004430 <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800437a:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800437c:	400a      	ands	r2, r1
 800437e:	4313      	orrs	r3, r2
 8004380:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004382:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004384:	4313      	orrs	r3, r2
 8004386:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004388:	2380      	movs	r3, #128	@ 0x80
 800438a:	6822      	ldr	r2, [r4, #0]
 800438c:	045b      	lsls	r3, r3, #17
 800438e:	4313      	orrs	r3, r2
 8004390:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004392:	f7fe f9e6 	bl	8002762 <HAL_GetTick>
 8004396:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	4233      	tst	r3, r6
 800439c:	d000      	beq.n	80043a0 <HAL_RCC_OscConfig+0x480>
 800439e:	e610      	b.n	8003fc2 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe f9df 	bl	8002762 <HAL_GetTick>
 80043a4:	1b40      	subs	r0, r0, r5
 80043a6:	2802      	cmp	r0, #2
 80043a8:	d9f6      	bls.n	8004398 <HAL_RCC_OscConfig+0x478>
 80043aa:	e62e      	b.n	800400a <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fe f9d9 	bl	8002762 <HAL_GetTick>
 80043b0:	1b80      	subs	r0, r0, r6
 80043b2:	2802      	cmp	r0, #2
 80043b4:	d9d9      	bls.n	800436a <HAL_RCC_OscConfig+0x44a>
 80043b6:	e628      	b.n	800400a <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 80043b8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043ba:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80043bc:	4013      	ands	r3, r2
 80043be:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043c0:	f7fe f9cf 	bl	8002762 <HAL_GetTick>
 80043c4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043c6:	04b6      	lsls	r6, r6, #18
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	4233      	tst	r3, r6
 80043cc:	d100      	bne.n	80043d0 <HAL_RCC_OscConfig+0x4b0>
 80043ce:	e5f8      	b.n	8003fc2 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fe f9c7 	bl	8002762 <HAL_GetTick>
 80043d4:	1b40      	subs	r0, r0, r5
 80043d6:	2802      	cmp	r0, #2
 80043d8:	d9f6      	bls.n	80043c8 <HAL_RCC_OscConfig+0x4a8>
 80043da:	e616      	b.n	800400a <HAL_RCC_OscConfig+0xea>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d100      	bne.n	80043e2 <HAL_RCC_OscConfig+0x4c2>
 80043e0:	e5fd      	b.n	8003fde <HAL_RCC_OscConfig+0xbe>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e2:	2380      	movs	r3, #128	@ 0x80
        pll_config = RCC->CFGR;
 80043e4:	68e0      	ldr	r0, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e6:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 80043e8:	025b      	lsls	r3, r3, #9
 80043ea:	4003      	ands	r3, r0
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d000      	beq.n	80043f2 <HAL_RCC_OscConfig+0x4d2>
 80043f0:	e5f5      	b.n	8003fde <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043f2:	23f0      	movs	r3, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043f6:	039b      	lsls	r3, r3, #14
 80043f8:	4003      	ands	r3, r0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d000      	beq.n	8004400 <HAL_RCC_OscConfig+0x4e0>
 80043fe:	e5ee      	b.n	8003fde <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004400:	23c0      	movs	r3, #192	@ 0xc0
 8004402:	041b      	lsls	r3, r3, #16
 8004404:	4018      	ands	r0, r3
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004406:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004408:	1ac0      	subs	r0, r0, r3
 800440a:	1e43      	subs	r3, r0, #1
 800440c:	4198      	sbcs	r0, r3
 800440e:	b2c0      	uxtb	r0, r0
 8004410:	e5fc      	b.n	800400c <HAL_RCC_OscConfig+0xec>
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	fffffeff 	.word	0xfffffeff
 8004418:	fffffbff 	.word	0xfffffbff
 800441c:	00001388 	.word	0x00001388
 8004420:	efffffff 	.word	0xefffffff
 8004424:	40010000 	.word	0x40010000
 8004428:	ffffdfff 	.word	0xffffdfff
 800442c:	feffffff 	.word	0xfeffffff
 8004430:	ff02ffff 	.word	0xff02ffff

08004434 <HAL_RCC_ClockConfig>:
{
 8004434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004436:	1e04      	subs	r4, r0, #0
 8004438:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800443c:	2001      	movs	r0, #1
}
 800443e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004440:	2501      	movs	r5, #1
 8004442:	4e5b      	ldr	r6, [pc, #364]	@ (80045b0 <HAL_RCC_ClockConfig+0x17c>)
 8004444:	9a01      	ldr	r2, [sp, #4]
 8004446:	6833      	ldr	r3, [r6, #0]
 8004448:	402b      	ands	r3, r5
 800444a:	4293      	cmp	r3, r2
 800444c:	d331      	bcc.n	80044b2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800444e:	6822      	ldr	r2, [r4, #0]
 8004450:	0793      	lsls	r3, r2, #30
 8004452:	d443      	bmi.n	80044dc <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004454:	07d2      	lsls	r2, r2, #31
 8004456:	d449      	bmi.n	80044ec <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004458:	2501      	movs	r5, #1
 800445a:	6833      	ldr	r3, [r6, #0]
 800445c:	9a01      	ldr	r2, [sp, #4]
 800445e:	402b      	ands	r3, r5
 8004460:	4293      	cmp	r3, r2
 8004462:	d909      	bls.n	8004478 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004464:	6833      	ldr	r3, [r6, #0]
 8004466:	43ab      	bics	r3, r5
 8004468:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800446a:	f7fe f97a 	bl	8002762 <HAL_GetTick>
 800446e:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004470:	6833      	ldr	r3, [r6, #0]
 8004472:	422b      	tst	r3, r5
 8004474:	d000      	beq.n	8004478 <HAL_RCC_ClockConfig+0x44>
 8004476:	e08c      	b.n	8004592 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004478:	6822      	ldr	r2, [r4, #0]
 800447a:	4d4e      	ldr	r5, [pc, #312]	@ (80045b4 <HAL_RCC_ClockConfig+0x180>)
 800447c:	0753      	lsls	r3, r2, #29
 800447e:	d500      	bpl.n	8004482 <HAL_RCC_ClockConfig+0x4e>
 8004480:	e08f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004482:	0712      	lsls	r2, r2, #28
 8004484:	d506      	bpl.n	8004494 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004486:	68ea      	ldr	r2, [r5, #12]
 8004488:	6923      	ldr	r3, [r4, #16]
 800448a:	494b      	ldr	r1, [pc, #300]	@ (80045b8 <HAL_RCC_ClockConfig+0x184>)
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	400a      	ands	r2, r1
 8004490:	4313      	orrs	r3, r2
 8004492:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004494:	f7ff fcfa 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8004498:	68eb      	ldr	r3, [r5, #12]
 800449a:	4a48      	ldr	r2, [pc, #288]	@ (80045bc <HAL_RCC_ClockConfig+0x188>)
 800449c:	061b      	lsls	r3, r3, #24
 800449e:	0f1b      	lsrs	r3, r3, #28
 80044a0:	5cd3      	ldrb	r3, [r2, r3]
 80044a2:	4947      	ldr	r1, [pc, #284]	@ (80045c0 <HAL_RCC_ClockConfig+0x18c>)
 80044a4:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 80044a6:	4b47      	ldr	r3, [pc, #284]	@ (80045c4 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044a8:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	f7fe f957 	bl	800275e <HAL_InitTick>
  if(status != HAL_OK)
 80044b0:	e7c5      	b.n	800443e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b2:	6833      	ldr	r3, [r6, #0]
 80044b4:	9a01      	ldr	r2, [sp, #4]
 80044b6:	43ab      	bics	r3, r5
 80044b8:	4313      	orrs	r3, r2
 80044ba:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80044bc:	f7fe f951 	bl	8002762 <HAL_GetTick>
 80044c0:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c2:	6833      	ldr	r3, [r6, #0]
 80044c4:	9a01      	ldr	r2, [sp, #4]
 80044c6:	402b      	ands	r3, r5
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d0c0      	beq.n	800444e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044cc:	f7fe f949 	bl	8002762 <HAL_GetTick>
 80044d0:	4b3d      	ldr	r3, [pc, #244]	@ (80045c8 <HAL_RCC_ClockConfig+0x194>)
 80044d2:	1bc0      	subs	r0, r0, r7
 80044d4:	4298      	cmp	r0, r3
 80044d6:	d9f4      	bls.n	80044c2 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80044d8:	2003      	movs	r0, #3
 80044da:	e7b0      	b.n	800443e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044dc:	20f0      	movs	r0, #240	@ 0xf0
 80044de:	4935      	ldr	r1, [pc, #212]	@ (80045b4 <HAL_RCC_ClockConfig+0x180>)
 80044e0:	68cb      	ldr	r3, [r1, #12]
 80044e2:	4383      	bics	r3, r0
 80044e4:	68a0      	ldr	r0, [r4, #8]
 80044e6:	4303      	orrs	r3, r0
 80044e8:	60cb      	str	r3, [r1, #12]
 80044ea:	e7b3      	b.n	8004454 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ec:	4d31      	ldr	r5, [pc, #196]	@ (80045b4 <HAL_RCC_ClockConfig+0x180>)
 80044ee:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044f0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f2:	2a02      	cmp	r2, #2
 80044f4:	d118      	bne.n	8004528 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044f6:	039b      	lsls	r3, r3, #14
 80044f8:	d5a0      	bpl.n	800443c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044fa:	2103      	movs	r1, #3
 80044fc:	68eb      	ldr	r3, [r5, #12]
 80044fe:	438b      	bics	r3, r1
 8004500:	4313      	orrs	r3, r2
 8004502:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8004504:	f7fe f92d 	bl	8002762 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004508:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800450a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450c:	2b02      	cmp	r3, #2
 800450e:	d118      	bne.n	8004542 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004510:	220c      	movs	r2, #12
 8004512:	68eb      	ldr	r3, [r5, #12]
 8004514:	4013      	ands	r3, r2
 8004516:	2b08      	cmp	r3, #8
 8004518:	d09e      	beq.n	8004458 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451a:	f7fe f922 	bl	8002762 <HAL_GetTick>
 800451e:	4b2a      	ldr	r3, [pc, #168]	@ (80045c8 <HAL_RCC_ClockConfig+0x194>)
 8004520:	1bc0      	subs	r0, r0, r7
 8004522:	4298      	cmp	r0, r3
 8004524:	d9f4      	bls.n	8004510 <HAL_RCC_ClockConfig+0xdc>
 8004526:	e7d7      	b.n	80044d8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004528:	2a03      	cmp	r2, #3
 800452a:	d102      	bne.n	8004532 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800452c:	019b      	lsls	r3, r3, #6
 800452e:	d4e4      	bmi.n	80044fa <HAL_RCC_ClockConfig+0xc6>
 8004530:	e784      	b.n	800443c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004532:	2a01      	cmp	r2, #1
 8004534:	d102      	bne.n	800453c <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004536:	075b      	lsls	r3, r3, #29
 8004538:	d4df      	bmi.n	80044fa <HAL_RCC_ClockConfig+0xc6>
 800453a:	e77f      	b.n	800443c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800453c:	059b      	lsls	r3, r3, #22
 800453e:	d4dc      	bmi.n	80044fa <HAL_RCC_ClockConfig+0xc6>
 8004540:	e77c      	b.n	800443c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004542:	2b03      	cmp	r3, #3
 8004544:	d10b      	bne.n	800455e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004546:	220c      	movs	r2, #12
 8004548:	68eb      	ldr	r3, [r5, #12]
 800454a:	4013      	ands	r3, r2
 800454c:	4293      	cmp	r3, r2
 800454e:	d083      	beq.n	8004458 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004550:	f7fe f907 	bl	8002762 <HAL_GetTick>
 8004554:	4b1c      	ldr	r3, [pc, #112]	@ (80045c8 <HAL_RCC_ClockConfig+0x194>)
 8004556:	1bc0      	subs	r0, r0, r7
 8004558:	4298      	cmp	r0, r3
 800455a:	d9f4      	bls.n	8004546 <HAL_RCC_ClockConfig+0x112>
 800455c:	e7bc      	b.n	80044d8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800455e:	2b01      	cmp	r3, #1
 8004560:	d011      	beq.n	8004586 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004562:	220c      	movs	r2, #12
 8004564:	68eb      	ldr	r3, [r5, #12]
 8004566:	4213      	tst	r3, r2
 8004568:	d100      	bne.n	800456c <HAL_RCC_ClockConfig+0x138>
 800456a:	e775      	b.n	8004458 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456c:	f7fe f8f9 	bl	8002762 <HAL_GetTick>
 8004570:	4b15      	ldr	r3, [pc, #84]	@ (80045c8 <HAL_RCC_ClockConfig+0x194>)
 8004572:	1bc0      	subs	r0, r0, r7
 8004574:	4298      	cmp	r0, r3
 8004576:	d9f4      	bls.n	8004562 <HAL_RCC_ClockConfig+0x12e>
 8004578:	e7ae      	b.n	80044d8 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457a:	f7fe f8f2 	bl	8002762 <HAL_GetTick>
 800457e:	4b12      	ldr	r3, [pc, #72]	@ (80045c8 <HAL_RCC_ClockConfig+0x194>)
 8004580:	1bc0      	subs	r0, r0, r7
 8004582:	4298      	cmp	r0, r3
 8004584:	d8a8      	bhi.n	80044d8 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004586:	220c      	movs	r2, #12
 8004588:	68eb      	ldr	r3, [r5, #12]
 800458a:	4013      	ands	r3, r2
 800458c:	2b04      	cmp	r3, #4
 800458e:	d1f4      	bne.n	800457a <HAL_RCC_ClockConfig+0x146>
 8004590:	e762      	b.n	8004458 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004592:	f7fe f8e6 	bl	8002762 <HAL_GetTick>
 8004596:	4b0c      	ldr	r3, [pc, #48]	@ (80045c8 <HAL_RCC_ClockConfig+0x194>)
 8004598:	1bc0      	subs	r0, r0, r7
 800459a:	4298      	cmp	r0, r3
 800459c:	d800      	bhi.n	80045a0 <HAL_RCC_ClockConfig+0x16c>
 800459e:	e767      	b.n	8004470 <HAL_RCC_ClockConfig+0x3c>
 80045a0:	e79a      	b.n	80044d8 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a2:	68eb      	ldr	r3, [r5, #12]
 80045a4:	4909      	ldr	r1, [pc, #36]	@ (80045cc <HAL_RCC_ClockConfig+0x198>)
 80045a6:	400b      	ands	r3, r1
 80045a8:	68e1      	ldr	r1, [r4, #12]
 80045aa:	430b      	orrs	r3, r1
 80045ac:	60eb      	str	r3, [r5, #12]
 80045ae:	e768      	b.n	8004482 <HAL_RCC_ClockConfig+0x4e>
 80045b0:	40022000 	.word	0x40022000
 80045b4:	40021000 	.word	0x40021000
 80045b8:	ffffc7ff 	.word	0xffffc7ff
 80045bc:	0800e8f5 	.word	0x0800e8f5
 80045c0:	20000060 	.word	0x20000060
 80045c4:	20000068 	.word	0x20000068
 80045c8:	00001388 	.word	0x00001388
 80045cc:	fffff8ff 	.word	0xfffff8ff

080045d0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045d0:	4b04      	ldr	r3, [pc, #16]	@ (80045e4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80045d2:	4a05      	ldr	r2, [pc, #20]	@ (80045e8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	4905      	ldr	r1, [pc, #20]	@ (80045ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80045d8:	055b      	lsls	r3, r3, #21
 80045da:	0f5b      	lsrs	r3, r3, #29
 80045dc:	5ccb      	ldrb	r3, [r1, r3]
 80045de:	6810      	ldr	r0, [r2, #0]
 80045e0:	40d8      	lsrs	r0, r3
}
 80045e2:	4770      	bx	lr
 80045e4:	40021000 	.word	0x40021000
 80045e8:	20000060 	.word	0x20000060
 80045ec:	0800e905 	.word	0x0800e905

080045f0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045f0:	4b04      	ldr	r3, [pc, #16]	@ (8004604 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80045f2:	4a05      	ldr	r2, [pc, #20]	@ (8004608 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	4905      	ldr	r1, [pc, #20]	@ (800460c <HAL_RCC_GetPCLK2Freq+0x1c>)
 80045f8:	049b      	lsls	r3, r3, #18
 80045fa:	0f5b      	lsrs	r3, r3, #29
 80045fc:	5ccb      	ldrb	r3, [r1, r3]
 80045fe:	6810      	ldr	r0, [r2, #0]
 8004600:	40d8      	lsrs	r0, r3
}
 8004602:	4770      	bx	lr
 8004604:	40021000 	.word	0x40021000
 8004608:	20000060 	.word	0x20000060
 800460c:	0800e905 	.word	0x0800e905

08004610 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004610:	6803      	ldr	r3, [r0, #0]
{
 8004612:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004614:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004616:	069b      	lsls	r3, r3, #26
 8004618:	d53c      	bpl.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x84>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800461a:	2380      	movs	r3, #128	@ 0x80
  FlagStatus       pwrclkchanged = RESET;
 800461c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800461e:	4c5f      	ldr	r4, [pc, #380]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004620:	055b      	lsls	r3, r3, #21
 8004622:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
  FlagStatus       pwrclkchanged = RESET;
 8004624:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004626:	421a      	tst	r2, r3
 8004628:	d104      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800462a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800462c:	4313      	orrs	r3, r2
 800462e:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 8004630:	2301      	movs	r3, #1
 8004632:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004634:	2780      	movs	r7, #128	@ 0x80
 8004636:	4e5a      	ldr	r6, [pc, #360]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004638:	007f      	lsls	r7, r7, #1
 800463a:	6833      	ldr	r3, [r6, #0]
 800463c:	423b      	tst	r3, r7
 800463e:	d064      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xfa>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004640:	6868      	ldr	r0, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004642:	6822      	ldr	r2, [r4, #0]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004644:	0001      	movs	r1, r0
 8004646:	23c0      	movs	r3, #192	@ 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004648:	4042      	eors	r2, r0
 800464a:	20c0      	movs	r0, #192	@ 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800464c:	029b      	lsls	r3, r3, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800464e:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004650:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004652:	4202      	tst	r2, r0
 8004654:	d16a      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x11c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004656:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004658:	0010      	movs	r0, r2
 800465a:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800465c:	421a      	tst	r2, r3
 800465e:	d000      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004660:	e06d      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x12e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004662:	6869      	ldr	r1, [r5, #4]
 8004664:	23c0      	movs	r3, #192	@ 0xc0
 8004666:	000a      	movs	r2, r1
 8004668:	029b      	lsls	r3, r3, #10
 800466a:	401a      	ands	r2, r3
 800466c:	429a      	cmp	r2, r3
 800466e:	d107      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	484c      	ldr	r0, [pc, #304]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004674:	4003      	ands	r3, r0
 8004676:	20c0      	movs	r0, #192	@ 0xc0
 8004678:	0380      	lsls	r0, r0, #14
 800467a:	4001      	ands	r1, r0
 800467c:	430b      	orrs	r3, r1
 800467e:	6023      	str	r3, [r4, #0]
 8004680:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004682:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004684:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004686:	6522      	str	r2, [r4, #80]	@ 0x50
    if(pwrclkchanged == SET)
 8004688:	2b01      	cmp	r3, #1
 800468a:	d103      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800468e:	4a46      	ldr	r2, [pc, #280]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004690:	4013      	ands	r3, r2
 8004692:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	07da      	lsls	r2, r3, #31
 8004698:	d506      	bpl.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800469a:	2003      	movs	r0, #3
 800469c:	493f      	ldr	r1, [pc, #252]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800469e:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80046a0:	4382      	bics	r2, r0
 80046a2:	68a8      	ldr	r0, [r5, #8]
 80046a4:	4302      	orrs	r2, r0
 80046a6:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046a8:	079a      	lsls	r2, r3, #30
 80046aa:	d506      	bpl.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046ac:	200c      	movs	r0, #12
 80046ae:	493b      	ldr	r1, [pc, #236]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80046b0:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80046b2:	4382      	bics	r2, r0
 80046b4:	68e8      	ldr	r0, [r5, #12]
 80046b6:	4302      	orrs	r2, r0
 80046b8:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046ba:	075a      	lsls	r2, r3, #29
 80046bc:	d506      	bpl.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046be:	4937      	ldr	r1, [pc, #220]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80046c0:	483a      	ldr	r0, [pc, #232]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80046c2:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80046c4:	4002      	ands	r2, r0
 80046c6:	6928      	ldr	r0, [r5, #16]
 80046c8:	4302      	orrs	r2, r0
 80046ca:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046cc:	071a      	lsls	r2, r3, #28
 80046ce:	d506      	bpl.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046d0:	4932      	ldr	r1, [pc, #200]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80046d2:	4837      	ldr	r0, [pc, #220]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80046d4:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80046d6:	4002      	ands	r2, r0
 80046d8:	6968      	ldr	r0, [r5, #20]
 80046da:	4302      	orrs	r2, r0
 80046dc:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046de:	05da      	lsls	r2, r3, #23
 80046e0:	d506      	bpl.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046e2:	492e      	ldr	r1, [pc, #184]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80046e4:	4833      	ldr	r0, [pc, #204]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046e6:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80046e8:	4002      	ands	r2, r0
 80046ea:	69a8      	ldr	r0, [r5, #24]
 80046ec:	4302      	orrs	r2, r0
 80046ee:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046f0:	065a      	lsls	r2, r3, #25
 80046f2:	d506      	bpl.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046f4:	4929      	ldr	r1, [pc, #164]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80046f6:	4830      	ldr	r0, [pc, #192]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80046f8:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80046fa:	4002      	ands	r2, r0
 80046fc:	6a28      	ldr	r0, [r5, #32]
 80046fe:	4302      	orrs	r2, r0
 8004700:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004702:	061b      	lsls	r3, r3, #24
 8004704:	d442      	bmi.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8004706:	2000      	movs	r0, #0
 8004708:	e00f      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800470a:	6833      	ldr	r3, [r6, #0]
 800470c:	433b      	orrs	r3, r7
 800470e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004710:	f7fe f827 	bl	8002762 <HAL_GetTick>
 8004714:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004716:	6833      	ldr	r3, [r6, #0]
 8004718:	423b      	tst	r3, r7
 800471a:	d191      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471c:	f7fe f821 	bl	8002762 <HAL_GetTick>
 8004720:	9b01      	ldr	r3, [sp, #4]
 8004722:	1ac0      	subs	r0, r0, r3
 8004724:	2864      	cmp	r0, #100	@ 0x64
 8004726:	d9f6      	bls.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x106>
          return HAL_TIMEOUT;
 8004728:	2003      	movs	r0, #3
}
 800472a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800472c:	4299      	cmp	r1, r3
 800472e:	d000      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8004730:	e791      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x46>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004732:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8004734:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004736:	0392      	lsls	r2, r2, #14
 8004738:	d400      	bmi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x12c>
 800473a:	e78c      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x46>
 800473c:	e7f5      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800473e:	4288      	cmp	r0, r1
 8004740:	d100      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004742:	e78e      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x52>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	069b      	lsls	r3, r3, #26
 8004748:	d400      	bmi.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800474a:	e78a      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_BACKUPRESET_FORCE();
 800474c:	2180      	movs	r1, #128	@ 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800474e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004750:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004752:	0309      	lsls	r1, r1, #12
 8004754:	4301      	orrs	r1, r0
 8004756:	6521      	str	r1, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004758:	6d21      	ldr	r1, [r4, #80]	@ 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800475a:	4a16      	ldr	r2, [pc, #88]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800475c:	4817      	ldr	r0, [pc, #92]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800475e:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004760:	4001      	ands	r1, r0
 8004762:	6521      	str	r1, [r4, #80]	@ 0x50
      RCC->CSR = temp_reg;
 8004764:	6522      	str	r2, [r4, #80]	@ 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004766:	05db      	lsls	r3, r3, #23
 8004768:	d400      	bmi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800476a:	e77a      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 800476c:	f7fd fff9 	bl	8002762 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004770:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8004772:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004774:	00bf      	lsls	r7, r7, #2
 8004776:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004778:	423b      	tst	r3, r7
 800477a:	d000      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800477c:	e771      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800477e:	f7fd fff0 	bl	8002762 <HAL_GetTick>
 8004782:	4b0f      	ldr	r3, [pc, #60]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004784:	1b80      	subs	r0, r0, r6
 8004786:	4298      	cmp	r0, r3
 8004788:	d9f5      	bls.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800478a:	e7cd      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x118>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800478c:	4a03      	ldr	r2, [pc, #12]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800478e:	490d      	ldr	r1, [pc, #52]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004790:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004792:	400b      	ands	r3, r1
 8004794:	69e9      	ldr	r1, [r5, #28]
 8004796:	430b      	orrs	r3, r1
 8004798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800479a:	e7b4      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800479c:	40021000 	.word	0x40021000
 80047a0:	40007000 	.word	0x40007000
 80047a4:	ffcfffff 	.word	0xffcfffff
 80047a8:	efffffff 	.word	0xefffffff
 80047ac:	fffff3ff 	.word	0xfffff3ff
 80047b0:	ffffcfff 	.word	0xffffcfff
 80047b4:	fffcffff 	.word	0xfffcffff
 80047b8:	fbffffff 	.word	0xfbffffff
 80047bc:	fff7ffff 	.word	0xfff7ffff
 80047c0:	00001388 	.word	0x00001388
 80047c4:	fff3ffff 	.word	0xfff3ffff

080047c8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80047c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047ca:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047cc:	1c45      	adds	r5, r0, #1
 80047ce:	7feb      	ldrb	r3, [r5, #31]
{
 80047d0:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80047d2:	0038      	movs	r0, r7
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d024      	beq.n	8004822 <HAL_RTC_DeactivateAlarm+0x5a>
 80047d8:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047da:	22ca      	movs	r2, #202	@ 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047dc:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 80047de:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047e0:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80047e6:	3a77      	subs	r2, #119	@ 0x77
 80047e8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80047ea:	32ad      	adds	r2, #173	@ 0xad
 80047ec:	4291      	cmp	r1, r2
 80047ee:	d128      	bne.n	8004842 <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	4920      	ldr	r1, [pc, #128]	@ (8004874 <HAL_RTC_DeactivateAlarm+0xac>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80047f4:	27fa      	movs	r7, #250	@ 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80047f6:	400a      	ands	r2, r1
 80047f8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	491e      	ldr	r1, [pc, #120]	@ (8004878 <HAL_RTC_DeactivateAlarm+0xb0>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80047fe:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004800:	400a      	ands	r2, r1
 8004802:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004804:	f7fd ffad 	bl	8002762 <HAL_GetTick>
 8004808:	9001      	str	r0, [sp, #4]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800480a:	2201      	movs	r2, #1
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4213      	tst	r3, r2
 8004812:	d007      	beq.n	8004824 <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004814:	22ff      	movs	r2, #255	@ 0xff
 8004816:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004818:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800481a:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800481c:	2301      	movs	r3, #1
 800481e:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8004820:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 8004822:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004824:	f7fd ff9d 	bl	8002762 <HAL_GetTick>
 8004828:	9b01      	ldr	r3, [sp, #4]
 800482a:	1ac0      	subs	r0, r0, r3
 800482c:	42b8      	cmp	r0, r7
 800482e:	d9ec      	bls.n	800480a <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004830:	22ff      	movs	r2, #255	@ 0xff
 8004832:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8004834:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004836:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800483c:	2300      	movs	r3, #0
 800483e:	77eb      	strb	r3, [r5, #31]
 8004840:	e7ef      	b.n	8004822 <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	490d      	ldr	r1, [pc, #52]	@ (800487c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004846:	400a      	ands	r2, r1
 8004848:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	490c      	ldr	r1, [pc, #48]	@ (8004880 <HAL_RTC_DeactivateAlarm+0xb8>)
 800484e:	400a      	ands	r2, r1
 8004850:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004852:	f7fd ff86 	bl	8002762 <HAL_GetTick>
 8004856:	9001      	str	r0, [sp, #4]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	423b      	tst	r3, r7
 800485e:	d1d9      	bne.n	8004814 <HAL_RTC_DeactivateAlarm+0x4c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004860:	f7fd ff7f 	bl	8002762 <HAL_GetTick>
 8004864:	9b01      	ldr	r3, [sp, #4]
 8004866:	1ac0      	subs	r0, r0, r3
 8004868:	23fa      	movs	r3, #250	@ 0xfa
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4298      	cmp	r0, r3
 800486e:	d9f3      	bls.n	8004858 <HAL_RTC_DeactivateAlarm+0x90>
 8004870:	e7de      	b.n	8004830 <HAL_RTC_DeactivateAlarm+0x68>
 8004872:	46c0      	nop			@ (mov r8, r8)
 8004874:	fffffeff 	.word	0xfffffeff
 8004878:	ffffefff 	.word	0xffffefff
 800487c:	fffffdff 	.word	0xfffffdff
 8004880:	ffffdfff 	.word	0xffffdfff

08004884 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004884:	6803      	ldr	r3, [r0, #0]
{
 8004886:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004888:	689a      	ldr	r2, [r3, #8]
{
 800488a:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800488c:	04d2      	lsls	r2, r2, #19
 800488e:	d50a      	bpl.n	80048a6 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	05db      	lsls	r3, r3, #23
 8004894:	d507      	bpl.n	80048a6 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004896:	f7fd fd68 	bl	800236a <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800489a:	6821      	ldr	r1, [r4, #0]
 800489c:	4b0e      	ldr	r3, [pc, #56]	@ (80048d8 <HAL_RTC_AlarmIRQHandler+0x54>)
 800489e:	68ca      	ldr	r2, [r1, #12]
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	0492      	lsls	r2, r2, #18
 80048ac:	d50b      	bpl.n	80048c6 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	059b      	lsls	r3, r3, #22
 80048b2:	d508      	bpl.n	80048c6 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80048b4:	0020      	movs	r0, r4
 80048b6:	f000 faf3 	bl	8004ea0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80048ba:	6821      	ldr	r1, [r4, #0]
 80048bc:	4b07      	ldr	r3, [pc, #28]	@ (80048dc <HAL_RTC_AlarmIRQHandler+0x58>)
 80048be:	68ca      	ldr	r2, [r1, #12]
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80048c6:	2280      	movs	r2, #128	@ 0x80
 80048c8:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <HAL_RTC_AlarmIRQHandler+0x5c>)
 80048ca:	0292      	lsls	r2, r2, #10
 80048cc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80048ce:	2301      	movs	r3, #1
 80048d0:	3402      	adds	r4, #2
 80048d2:	77e3      	strb	r3, [r4, #31]
}
 80048d4:	bd10      	pop	{r4, pc}
 80048d6:	46c0      	nop			@ (mov r8, r8)
 80048d8:	fffffe7f 	.word	0xfffffe7f
 80048dc:	fffffd7f 	.word	0xfffffd7f
 80048e0:	40010400 	.word	0x40010400

080048e4 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80048e4:	21a0      	movs	r1, #160	@ 0xa0
 80048e6:	6802      	ldr	r2, [r0, #0]
{
 80048e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80048ea:	68d3      	ldr	r3, [r2, #12]
{
 80048ec:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80048ee:	438b      	bics	r3, r1
 80048f0:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80048f2:	f7fd ff36 	bl	8002762 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048f6:	27fa      	movs	r7, #250	@ 0xfa
  tickstart = HAL_GetTick();
 80048f8:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048fa:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048fc:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	4233      	tst	r3, r6
 8004904:	d001      	beq.n	800490a <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004906:	2000      	movs	r0, #0
}
 8004908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800490a:	f7fd ff2a 	bl	8002762 <HAL_GetTick>
 800490e:	1b40      	subs	r0, r0, r5
 8004910:	42b8      	cmp	r0, r7
 8004912:	d9f4      	bls.n	80048fe <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8004914:	2003      	movs	r0, #3
 8004916:	e7f7      	b.n	8004908 <HAL_RTC_WaitForSynchro+0x24>

08004918 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800491a:	2640      	movs	r6, #64	@ 0x40
 800491c:	6803      	ldr	r3, [r0, #0]
{
 800491e:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	4232      	tst	r2, r6
 8004924:	d001      	beq.n	800492a <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004926:	2000      	movs	r0, #0
}
 8004928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800492a:	2201      	movs	r2, #1
 800492c:	4252      	negs	r2, r2
 800492e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004930:	f7fd ff17 	bl	8002762 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004934:	27fa      	movs	r7, #250	@ 0xfa
    tickstart = HAL_GetTick();
 8004936:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004938:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	4233      	tst	r3, r6
 8004940:	d1f1      	bne.n	8004926 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004942:	f7fd ff0e 	bl	8002762 <HAL_GetTick>
 8004946:	1b40      	subs	r0, r0, r5
 8004948:	42b8      	cmp	r0, r7
 800494a:	d9f6      	bls.n	800493a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 800494c:	2003      	movs	r0, #3
 800494e:	e7eb      	b.n	8004928 <RTC_EnterInitMode+0x10>

08004950 <HAL_RTC_Init>:
{
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	1e04      	subs	r4, r0, #0
  if (hrtc == NULL)
 8004954:	d019      	beq.n	800498a <HAL_RTC_Init+0x3a>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004956:	1c86      	adds	r6, r0, #2
 8004958:	7ff3      	ldrb	r3, [r6, #31]
 800495a:	b2da      	uxtb	r2, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d103      	bne.n	8004968 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8004960:	1c43      	adds	r3, r0, #1
 8004962:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8004964:	f7fd fb18 	bl	8001f98 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004968:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800496a:	22ca      	movs	r2, #202	@ 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800496c:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800496e:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004970:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004972:	625a      	str	r2, [r3, #36]	@ 0x24
 8004974:	3a77      	subs	r2, #119	@ 0x77
 8004976:	625a      	str	r2, [r3, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004978:	f7ff ffce 	bl	8004918 <RTC_EnterInitMode>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	1e05      	subs	r5, r0, #0
 8004980:	d006      	beq.n	8004990 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004982:	22ff      	movs	r2, #255	@ 0xff
 8004984:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004986:	2304      	movs	r3, #4
 8004988:	77f3      	strb	r3, [r6, #31]
    return HAL_ERROR;
 800498a:	2501      	movs	r5, #1
}
 800498c:	0028      	movs	r0, r5
 800498e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004990:	689a      	ldr	r2, [r3, #8]
 8004992:	491c      	ldr	r1, [pc, #112]	@ (8004a04 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004994:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004996:	400a      	ands	r2, r1
 8004998:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800499a:	6862      	ldr	r2, [r4, #4]
 800499c:	6899      	ldr	r1, [r3, #8]
 800499e:	4302      	orrs	r2, r0
 80049a0:	69a0      	ldr	r0, [r4, #24]
 80049a2:	4302      	orrs	r2, r0
 80049a4:	430a      	orrs	r2, r1
 80049a6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80049a8:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80049aa:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80049ac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80049ae:	68a2      	ldr	r2, [r4, #8]
 80049b0:	6919      	ldr	r1, [r3, #16]
 80049b2:	0412      	lsls	r2, r2, #16
 80049b4:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80049b6:	2180      	movs	r1, #128	@ 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80049b8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	438a      	bics	r2, r1
 80049be:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80049c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049c2:	397d      	subs	r1, #125	@ 0x7d
 80049c4:	438a      	bics	r2, r1
 80049c6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80049c8:	69e2      	ldr	r2, [r4, #28]
 80049ca:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80049cc:	4302      	orrs	r2, r0
 80049ce:	430a      	orrs	r2, r1
 80049d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	2320      	movs	r3, #32
 80049d6:	0017      	movs	r7, r2
 80049d8:	401f      	ands	r7, r3
 80049da:	421a      	tst	r2, r3
 80049dc:	d10c      	bne.n	80049f8 <HAL_RTC_Init+0xa8>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049de:	0020      	movs	r0, r4
 80049e0:	f7ff ff80 	bl	80048e4 <HAL_RTC_WaitForSynchro>
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d007      	beq.n	80049f8 <HAL_RTC_Init+0xa8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049e8:	22ff      	movs	r2, #255	@ 0xff
 80049ea:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 80049ec:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ee:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80049f0:	2304      	movs	r3, #4
 80049f2:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80049f4:	77e7      	strb	r7, [r4, #31]
        return HAL_ERROR;
 80049f6:	e7c8      	b.n	800498a <HAL_RTC_Init+0x3a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049f8:	22ff      	movs	r2, #255	@ 0xff
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80049fe:	2301      	movs	r3, #1
 8004a00:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8004a02:	e7c3      	b.n	800498c <HAL_RTC_Init+0x3c>
 8004a04:	ff8fffbf 	.word	0xff8fffbf

08004a08 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004a08:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8004a0a:	2809      	cmp	r0, #9
 8004a0c:	d803      	bhi.n	8004a16 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	4318      	orrs	r0, r3
 8004a12:	b2c0      	uxtb	r0, r0
}
 8004a14:	4770      	bx	lr
    Param -= 10U;
 8004a16:	380a      	subs	r0, #10
    bcdhigh++;
 8004a18:	3301      	adds	r3, #1
    Param -= 10U;
 8004a1a:	b2c0      	uxtb	r0, r0
 8004a1c:	e7f5      	b.n	8004a0a <RTC_ByteToBcd2+0x2>
	...

08004a20 <HAL_RTC_SetTime>:
{
 8004a20:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004a22:	1c43      	adds	r3, r0, #1
{
 8004a24:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8004a26:	9301      	str	r3, [sp, #4]
{
 8004a28:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8004a2a:	7fd9      	ldrb	r1, [r3, #31]
 8004a2c:	2302      	movs	r3, #2
{
 8004a2e:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8004a30:	001f      	movs	r7, r3
 8004a32:	2901      	cmp	r1, #1
 8004a34:	d036      	beq.n	8004aa4 <HAL_RTC_SetTime+0x84>
 8004a36:	2101      	movs	r1, #1
 8004a38:	1840      	adds	r0, r0, r1
 8004a3a:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a3c:	18e9      	adds	r1, r5, r3
 8004a3e:	77cb      	strb	r3, [r1, #31]
 8004a40:	9102      	str	r1, [sp, #8]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a42:	682f      	ldr	r7, [r5, #0]
 8004a44:	7820      	ldrb	r0, [r4, #0]
 8004a46:	7866      	ldrb	r6, [r4, #1]
 8004a48:	333e      	adds	r3, #62	@ 0x3e
  if (Format == RTC_FORMAT_BIN)
 8004a4a:	2a00      	cmp	r2, #0
 8004a4c:	d12d      	bne.n	8004aaa <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	0011      	movs	r1, r2
 8004a52:	4019      	ands	r1, r3
 8004a54:	421a      	tst	r2, r3
 8004a56:	d100      	bne.n	8004a5a <HAL_RTC_SetTime+0x3a>
      sTime->TimeFormat = 0x00U;
 8004a58:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a5a:	f7ff ffd5 	bl	8004a08 <RTC_ByteToBcd2>
 8004a5e:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004a60:	0030      	movs	r0, r6
 8004a62:	f7ff ffd1 	bl	8004a08 <RTC_ByteToBcd2>
 8004a66:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004a68:	78a0      	ldrb	r0, [r4, #2]
 8004a6a:	f7ff ffcd 	bl	8004a08 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004a6e:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a70:	9a03      	ldr	r2, [sp, #12]
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004a72:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a74:	4303      	orrs	r3, r0
 8004a76:	0412      	lsls	r2, r2, #16
 8004a78:	4313      	orrs	r3, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004a7a:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a7c:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a7e:	23ca      	movs	r3, #202	@ 0xca
 8004a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a82:	3b77      	subs	r3, #119	@ 0x77
 8004a84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a86:	0028      	movs	r0, r5
 8004a88:	f7ff ff46 	bl	8004918 <RTC_EnterInitMode>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	1e07      	subs	r7, r0, #0
 8004a90:	d019      	beq.n	8004ac6 <HAL_RTC_SetTime+0xa6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a92:	22ff      	movs	r2, #255	@ 0xff
 8004a94:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a96:	2304      	movs	r3, #4
 8004a98:	9a02      	ldr	r2, [sp, #8]
 8004a9a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9a01      	ldr	r2, [sp, #4]
 8004aa0:	77d3      	strb	r3, [r2, #31]
    return HAL_ERROR;
 8004aa2:	2701      	movs	r7, #1
}
 8004aa4:	0038      	movs	r0, r7
 8004aa6:	b005      	add	sp, #20
 8004aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	0011      	movs	r1, r2
 8004aae:	4019      	ands	r1, r3
 8004ab0:	421a      	tst	r2, r3
 8004ab2:	d100      	bne.n	8004ab6 <HAL_RTC_SetTime+0x96>
      sTime->TimeFormat = 0x00U;
 8004ab4:	70e1      	strb	r1, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 8004ab6:	78a3      	ldrb	r3, [r4, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ab8:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004aba:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004abc:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004abe:	431e      	orrs	r6, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004ac0:	78e3      	ldrb	r3, [r4, #3]
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	e7da      	b.n	8004a7c <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004ac6:	4a17      	ldr	r2, [pc, #92]	@ (8004b24 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004ac8:	4917      	ldr	r1, [pc, #92]	@ (8004b28 <HAL_RTC_SetTime+0x108>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004aca:	4016      	ands	r6, r2
 8004acc:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004ace:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ad0:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ad6:	68e2      	ldr	r2, [r4, #12]
 8004ad8:	6899      	ldr	r1, [r3, #8]
 8004ada:	4302      	orrs	r2, r0
 8004adc:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004ade:	2180      	movs	r1, #128	@ 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ae0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	438a      	bics	r2, r1
 8004ae6:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	2320      	movs	r3, #32
 8004aec:	0014      	movs	r4, r2
 8004aee:	401c      	ands	r4, r3
 8004af0:	421a      	tst	r2, r3
 8004af2:	d10d      	bne.n	8004b10 <HAL_RTC_SetTime+0xf0>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004af4:	0028      	movs	r0, r5
 8004af6:	f7ff fef5 	bl	80048e4 <HAL_RTC_WaitForSynchro>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d008      	beq.n	8004b10 <HAL_RTC_SetTime+0xf0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004afe:	22ff      	movs	r2, #255	@ 0xff
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b04:	2304      	movs	r3, #4
 8004b06:	9a02      	ldr	r2, [sp, #8]
 8004b08:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004b0a:	9b01      	ldr	r3, [sp, #4]
 8004b0c:	77dc      	strb	r4, [r3, #31]
        return HAL_ERROR;
 8004b0e:	e7c8      	b.n	8004aa2 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b10:	22ff      	movs	r2, #255	@ 0xff
 8004b12:	682b      	ldr	r3, [r5, #0]
 8004b14:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004b16:	2301      	movs	r3, #1
 8004b18:	9a02      	ldr	r2, [sp, #8]
 8004b1a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	9a01      	ldr	r2, [sp, #4]
 8004b20:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 8004b22:	e7bf      	b.n	8004aa4 <HAL_RTC_SetTime+0x84>
 8004b24:	007f7f7f 	.word	0x007f7f7f
 8004b28:	fffbffff 	.word	0xfffbffff

08004b2c <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8004b2c:	2302      	movs	r3, #2
{
 8004b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004b30:	1c47      	adds	r7, r0, #1
{
 8004b32:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8004b34:	7ff9      	ldrb	r1, [r7, #31]
{
 8004b36:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004b38:	001e      	movs	r6, r3
{
 8004b3a:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8004b3c:	2901      	cmp	r1, #1
 8004b3e:	d024      	beq.n	8004b8a <HAL_RTC_SetDate+0x5e>
 8004b40:	2101      	movs	r1, #1
 8004b42:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b44:	18c1      	adds	r1, r0, r3
 8004b46:	77cb      	strb	r3, [r1, #31]
 8004b48:	9101      	str	r1, [sp, #4]
                  ((uint32_t)sDate->Date) | \
 8004b4a:	78a9      	ldrb	r1, [r5, #2]
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004b4c:	782e      	ldrb	r6, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b4e:	78e8      	ldrb	r0, [r5, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004b50:	786b      	ldrb	r3, [r5, #1]
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004b52:	0376      	lsls	r6, r6, #13
                  ((uint32_t)sDate->Date) | \
 8004b54:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b56:	2a00      	cmp	r2, #0
 8004b58:	d01a      	beq.n	8004b90 <HAL_RTC_SetDate+0x64>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b5a:	0400      	lsls	r0, r0, #16
 8004b5c:	4330      	orrs	r0, r6
 8004b5e:	4308      	orrs	r0, r1
                  (((uint32_t)sDate->Month) << 8U) | \
 8004b60:	021d      	lsls	r5, r3, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b62:	22ca      	movs	r2, #202	@ 0xca
 8004b64:	6823      	ldr	r3, [r4, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b66:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b68:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b6a:	3a77      	subs	r2, #119	@ 0x77
 8004b6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b6e:	0020      	movs	r0, r4
 8004b70:	f7ff fed2 	bl	8004918 <RTC_EnterInitMode>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	1e06      	subs	r6, r0, #0
 8004b78:	d020      	beq.n	8004bbc <HAL_RTC_SetDate+0x90>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b7a:	22ff      	movs	r2, #255	@ 0xff
 8004b7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b7e:	2304      	movs	r3, #4
 8004b80:	9a01      	ldr	r2, [sp, #4]
 8004b82:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004b84:	2300      	movs	r3, #0
 8004b86:	77fb      	strb	r3, [r7, #31]
    return HAL_ERROR;
 8004b88:	2601      	movs	r6, #1
}
 8004b8a:	0030      	movs	r0, r6
 8004b8c:	b005      	add	sp, #20
 8004b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b90:	2210      	movs	r2, #16
 8004b92:	4213      	tst	r3, r2
 8004b94:	d002      	beq.n	8004b9c <HAL_RTC_SetDate+0x70>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b96:	4393      	bics	r3, r2
 8004b98:	330a      	adds	r3, #10
 8004b9a:	706b      	strb	r3, [r5, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b9c:	f7ff ff34 	bl	8004a08 <RTC_ByteToBcd2>
 8004ba0:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ba2:	7868      	ldrb	r0, [r5, #1]
 8004ba4:	f7ff ff30 	bl	8004a08 <RTC_ByteToBcd2>
 8004ba8:	0005      	movs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004baa:	9802      	ldr	r0, [sp, #8]
 8004bac:	f7ff ff2c 	bl	8004a08 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004bb0:	9b03      	ldr	r3, [sp, #12]
 8004bb2:	4330      	orrs	r0, r6
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	4318      	orrs	r0, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004bb8:	022d      	lsls	r5, r5, #8
 8004bba:	e7d2      	b.n	8004b62 <HAL_RTC_SetDate+0x36>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004bbc:	2180      	movs	r1, #128	@ 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bbe:	4a11      	ldr	r2, [pc, #68]	@ (8004c04 <HAL_RTC_SetDate+0xd8>)
 8004bc0:	4015      	ands	r5, r2
 8004bc2:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	438a      	bics	r2, r1
 8004bc8:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	2320      	movs	r3, #32
 8004bce:	0015      	movs	r5, r2
 8004bd0:	401d      	ands	r5, r3
 8004bd2:	421a      	tst	r2, r3
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RTC_SetDate+0xc4>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bd6:	0020      	movs	r0, r4
 8004bd8:	f7ff fe84 	bl	80048e4 <HAL_RTC_WaitForSynchro>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d007      	beq.n	8004bf0 <HAL_RTC_SetDate+0xc4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004be0:	22ff      	movs	r2, #255	@ 0xff
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004be6:	2304      	movs	r3, #4
 8004be8:	9a01      	ldr	r2, [sp, #4]
 8004bea:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004bec:	77fd      	strb	r5, [r7, #31]
        return HAL_ERROR;
 8004bee:	e7cb      	b.n	8004b88 <HAL_RTC_SetDate+0x5c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bf0:	22ff      	movs	r2, #255	@ 0xff
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	9a01      	ldr	r2, [sp, #4]
 8004bfa:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8004c00:	e7c3      	b.n	8004b8a <HAL_RTC_SetDate+0x5e>
 8004c02:	46c0      	nop			@ (mov r8, r8)
 8004c04:	00ffff3f 	.word	0x00ffff3f

08004c08 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8004c08:	2302      	movs	r3, #2
{
 8004c0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c0c:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8004c0e:	1c41      	adds	r1, r0, #1
 8004c10:	7fce      	ldrb	r6, [r1, #31]
{
 8004c12:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004c14:	0018      	movs	r0, r3
 8004c16:	2e01      	cmp	r6, #1
 8004c18:	d100      	bne.n	8004c1c <HAL_RTC_SetAlarm_IT+0x14>
 8004c1a:	e094      	b.n	8004d46 <HAL_RTC_SetAlarm_IT+0x13e>
 8004c1c:	3801      	subs	r0, #1
 8004c1e:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c20:	18e1      	adds	r1, r4, r3
 8004c22:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 8004c24:	7869      	ldrb	r1, [r5, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c26:	6826      	ldr	r6, [r4, #0]
 8004c28:	9100      	str	r1, [sp, #0]
 8004c2a:	7828      	ldrb	r0, [r5, #0]
 8004c2c:	78af      	ldrb	r7, [r5, #2]
 8004c2e:	333e      	adds	r3, #62	@ 0x3e
  if (Format == RTC_FORMAT_BIN)
 8004c30:	2a00      	cmp	r2, #0
 8004c32:	d162      	bne.n	8004cfa <HAL_RTC_SetAlarm_IT+0xf2>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c34:	68b2      	ldr	r2, [r6, #8]
 8004c36:	0011      	movs	r1, r2
 8004c38:	4019      	ands	r1, r3
 8004c3a:	421a      	tst	r2, r3
 8004c3c:	d100      	bne.n	8004c40 <HAL_RTC_SetAlarm_IT+0x38>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004c3e:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c40:	f7ff fee2 	bl	8004a08 <RTC_ByteToBcd2>
 8004c44:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004c46:	9800      	ldr	r0, [sp, #0]
 8004c48:	f7ff fede 	bl	8004a08 <RTC_ByteToBcd2>
 8004c4c:	9000      	str	r0, [sp, #0]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004c4e:	0038      	movs	r0, r7
 8004c50:	f7ff feda 	bl	8004a08 <RTC_ByteToBcd2>
 8004c54:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004c56:	1c6b      	adds	r3, r5, #1
 8004c58:	7fd8      	ldrb	r0, [r3, #31]
 8004c5a:	f7ff fed5 	bl	8004a08 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c5e:	696a      	ldr	r2, [r5, #20]
 8004c60:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004c62:	0600      	lsls	r0, r0, #24
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c64:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004c66:	78ea      	ldrb	r2, [r5, #3]
 8004c68:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	431f      	orrs	r7, r3
 8004c6e:	9b01      	ldr	r3, [sp, #4]
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004c74:	9b00      	ldr	r3, [sp, #0]
 8004c76:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c78:	431f      	orrs	r7, r3
 8004c7a:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004c7c:	69ab      	ldr	r3, [r5, #24]
 8004c7e:	686a      	ldr	r2, [r5, #4]
 8004c80:	431a      	orrs	r2, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c82:	23ca      	movs	r3, #202	@ 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004c84:	9200      	str	r2, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c86:	6273      	str	r3, [r6, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004c88:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c8a:	3b77      	subs	r3, #119	@ 0x77
 8004c8c:	6273      	str	r3, [r6, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004c8e:	33ad      	adds	r3, #173	@ 0xad
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d159      	bne.n	8004d48 <HAL_RTC_SetAlarm_IT+0x140>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004c94:	68b3      	ldr	r3, [r6, #8]
 8004c96:	4a3f      	ldr	r2, [pc, #252]	@ (8004d94 <HAL_RTC_SetAlarm_IT+0x18c>)
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c98:	25fa      	movs	r5, #250	@ 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004c9e:	68f2      	ldr	r2, [r6, #12]
 8004ca0:	4b3d      	ldr	r3, [pc, #244]	@ (8004d98 <HAL_RTC_SetAlarm_IT+0x190>)
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004ca8:	f7fd fd5b 	bl	8002762 <HAL_GetTick>
 8004cac:	0006      	movs	r6, r0
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cae:	00ad      	lsls	r5, r5, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	420a      	tst	r2, r1
 8004cb8:	d036      	beq.n	8004d28 <HAL_RTC_SetAlarm_IT+0x120>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004cba:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004cbc:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004cbe:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004cc0:	2280      	movs	r2, #128	@ 0x80
 8004cc2:	6899      	ldr	r1, [r3, #8]
 8004cc4:	0052      	lsls	r2, r2, #1
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004cca:	2280      	movs	r2, #128	@ 0x80
 8004ccc:	6899      	ldr	r1, [r3, #8]
 8004cce:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004cd4:	2280      	movs	r2, #128	@ 0x80
 8004cd6:	4b31      	ldr	r3, [pc, #196]	@ (8004d9c <HAL_RTC_SetAlarm_IT+0x194>)
 8004cd8:	0292      	lsls	r2, r2, #10
 8004cda:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8004cdc:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004cde:	4311      	orrs	r1, r2
 8004ce0:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004ce2:	6899      	ldr	r1, [r3, #8]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ce8:	22ff      	movs	r2, #255	@ 0xff
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004cee:	3afe      	subs	r2, #254	@ 0xfe
 8004cf0:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 8004cf2:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8004cf4:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8004cf6:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8004cf8:	e025      	b.n	8004d46 <HAL_RTC_SetAlarm_IT+0x13e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cfa:	68b2      	ldr	r2, [r6, #8]
 8004cfc:	0011      	movs	r1, r2
 8004cfe:	4019      	ands	r1, r3
 8004d00:	421a      	tst	r2, r3
 8004d02:	d100      	bne.n	8004d06 <HAL_RTC_SetAlarm_IT+0xfe>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d04:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d06:	69eb      	ldr	r3, [r5, #28]
 8004d08:	696a      	ldr	r2, [r5, #20]
 8004d0a:	0400      	lsls	r0, r0, #16
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004d10:	9b00      	ldr	r3, [sp, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d12:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004d14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d16:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004d18:	78eb      	ldrb	r3, [r5, #3]
 8004d1a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d1c:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004d1e:	1c6b      	adds	r3, r5, #1
 8004d20:	7fdb      	ldrb	r3, [r3, #31]
 8004d22:	061b      	lsls	r3, r3, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d24:	431f      	orrs	r7, r3
 8004d26:	e7a9      	b.n	8004c7c <HAL_RTC_SetAlarm_IT+0x74>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d28:	f7fd fd1b 	bl	8002762 <HAL_GetTick>
 8004d2c:	1b80      	subs	r0, r0, r6
 8004d2e:	42a8      	cmp	r0, r5
 8004d30:	d9be      	bls.n	8004cb0 <HAL_RTC_SetAlarm_IT+0xa8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d32:	22ff      	movs	r2, #255	@ 0xff
 8004d34:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8004d36:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d38:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d3a:	1ca3      	adds	r3, r4, #2
 8004d3c:	3afc      	subs	r2, #252	@ 0xfc
 8004d3e:	77da      	strb	r2, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8004d40:	2300      	movs	r3, #0
 8004d42:	3401      	adds	r4, #1
 8004d44:	77e3      	strb	r3, [r4, #31]
}
 8004d46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004d48:	68b3      	ldr	r3, [r6, #8]
 8004d4a:	4a15      	ldr	r2, [pc, #84]	@ (8004da0 <HAL_RTC_SetAlarm_IT+0x198>)
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d4c:	25fa      	movs	r5, #250	@ 0xfa
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004d4e:	4013      	ands	r3, r2
 8004d50:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004d52:	68f2      	ldr	r2, [r6, #12]
 8004d54:	4b13      	ldr	r3, [pc, #76]	@ (8004da4 <HAL_RTC_SetAlarm_IT+0x19c>)
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004d5c:	f7fd fd01 	bl	8002762 <HAL_GetTick>
 8004d60:	0006      	movs	r6, r0
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d62:	00ad      	lsls	r5, r5, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d64:	2102      	movs	r1, #2
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	420a      	tst	r2, r1
 8004d6c:	d00b      	beq.n	8004d86 <HAL_RTC_SetAlarm_IT+0x17e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004d6e:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004d70:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004d72:	649a      	str	r2, [r3, #72]	@ 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004d74:	2280      	movs	r2, #128	@ 0x80
 8004d76:	6899      	ldr	r1, [r3, #8]
 8004d78:	0092      	lsls	r2, r2, #2
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004d7e:	2280      	movs	r2, #128	@ 0x80
 8004d80:	6899      	ldr	r1, [r3, #8]
 8004d82:	0192      	lsls	r2, r2, #6
 8004d84:	e7a4      	b.n	8004cd0 <HAL_RTC_SetAlarm_IT+0xc8>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d86:	f7fd fcec 	bl	8002762 <HAL_GetTick>
 8004d8a:	1b80      	subs	r0, r0, r6
 8004d8c:	42a8      	cmp	r0, r5
 8004d8e:	d9e9      	bls.n	8004d64 <HAL_RTC_SetAlarm_IT+0x15c>
 8004d90:	e7cf      	b.n	8004d32 <HAL_RTC_SetAlarm_IT+0x12a>
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	fffffeff 	.word	0xfffffeff
 8004d98:	fffffe7f 	.word	0xfffffe7f
 8004d9c:	40010400 	.word	0x40010400
 8004da0:	fffffdff 	.word	0xfffffdff
 8004da4:	fffffd7f 	.word	0xfffffd7f

08004da8 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004da8:	0903      	lsrs	r3, r0, #4
{
 8004daa:	0002      	movs	r2, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004dac:	200a      	movs	r0, #10
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004dae:	210f      	movs	r1, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004db0:	4358      	muls	r0, r3
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004db2:	400a      	ands	r2, r1
 8004db4:	1880      	adds	r0, r0, r2
 8004db6:	b2c0      	uxtb	r0, r0
}
 8004db8:	4770      	bx	lr
	...

08004dbc <HAL_RTC_GetTime>:
{
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004dc0:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004dc2:	203f      	movs	r0, #63	@ 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004dc4:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8004dc6:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004dc8:	690b      	ldr	r3, [r1, #16]
 8004dca:	045b      	lsls	r3, r3, #17
 8004dcc:	0c5b      	lsrs	r3, r3, #17
 8004dce:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004dd0:	680b      	ldr	r3, [r1, #0]
 8004dd2:	490e      	ldr	r1, [pc, #56]	@ (8004e0c <HAL_RTC_GetTime+0x50>)
 8004dd4:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004dd6:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004dd8:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004dda:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004ddc:	2340      	movs	r3, #64	@ 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004dde:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004de0:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004de2:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004de4:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004de6:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004de8:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004dea:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8004dec:	2a00      	cmp	r2, #0
 8004dee:	d10a      	bne.n	8004e06 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004df0:	f7ff ffda 	bl	8004da8 <RTC_Bcd2ToByte>
 8004df4:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004df6:	0030      	movs	r0, r6
 8004df8:	f7ff ffd6 	bl	8004da8 <RTC_Bcd2ToByte>
 8004dfc:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004dfe:	0028      	movs	r0, r5
 8004e00:	f7ff ffd2 	bl	8004da8 <RTC_Bcd2ToByte>
 8004e04:	70a0      	strb	r0, [r4, #2]
}
 8004e06:	2000      	movs	r0, #0
 8004e08:	bd70      	pop	{r4, r5, r6, pc}
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	007f7f7f 	.word	0x007f7f7f

08004e10 <HAL_RTC_GetDate>:
{
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004e14:	6803      	ldr	r3, [r0, #0]
 8004e16:	490e      	ldr	r1, [pc, #56]	@ (8004e50 <HAL_RTC_GetDate+0x40>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004e1c:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004e1e:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004e20:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004e22:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004e24:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004e26:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004e28:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004e2a:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004e2c:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004e2e:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8004e30:	2a00      	cmp	r2, #0
 8004e32:	d10a      	bne.n	8004e4a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004e34:	f7ff ffb8 	bl	8004da8 <RTC_Bcd2ToByte>
 8004e38:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004e3a:	0028      	movs	r0, r5
 8004e3c:	f7ff ffb4 	bl	8004da8 <RTC_Bcd2ToByte>
 8004e40:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004e42:	0030      	movs	r0, r6
 8004e44:	f7ff ffb0 	bl	8004da8 <RTC_Bcd2ToByte>
 8004e48:	70a0      	strb	r0, [r4, #2]
}
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	bd70      	pop	{r4, r5, r6, pc}
 8004e4e:	46c0      	nop			@ (mov r8, r8)
 8004e50:	00ffff3f 	.word	0x00ffff3f

08004e54 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004e54:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8004e56:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004e58:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);
 8004e5a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004e5c:	600a      	str	r2, [r1, #0]
}
 8004e5e:	4770      	bx	lr

08004e60 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004e60:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8004e62:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004e64:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);
 8004e66:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004e68:	6808      	ldr	r0, [r1, #0]
}
 8004e6a:	4770      	bx	lr

08004e6c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e6c:	2202      	movs	r2, #2
{
 8004e6e:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8004e70:	1c41      	adds	r1, r0, #1
 8004e72:	7fcc      	ldrb	r4, [r1, #31]
{
 8004e74:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8004e76:	0010      	movs	r0, r2
 8004e78:	2c01      	cmp	r4, #1
 8004e7a:	d010      	beq.n	8004e9e <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e7c:	1898      	adds	r0, r3, r2
 8004e7e:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	32c8      	adds	r2, #200	@ 0xc8
 8004e84:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e86:	3a77      	subs	r2, #119	@ 0x77
 8004e88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8004e8a:	689c      	ldr	r4, [r3, #8]
 8004e8c:	3a33      	subs	r2, #51	@ 0x33
 8004e8e:	4322      	orrs	r2, r4
 8004e90:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e92:	22ff      	movs	r2, #255	@ 0xff
 8004e94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e96:	2301      	movs	r3, #1
 8004e98:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 8004e9e:	bd10      	pop	{r4, pc}

08004ea0 <HAL_RTCEx_AlarmBEventCallback>:
/**
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
 8004ea0:	4770      	bx	lr
	...

08004ea4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea6:	001f      	movs	r7, r3
 8004ea8:	b085      	sub	sp, #20
 8004eaa:	000e      	movs	r6, r1
 8004eac:	9201      	str	r2, [sp, #4]
 8004eae:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004eb0:	f7fd fc57 	bl	8002762 <HAL_GetTick>
 8004eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eb6:	19dd      	adds	r5, r3, r7
 8004eb8:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004eba:	f7fd fc52 	bl	8002762 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ebe:	4b28      	ldr	r3, [pc, #160]	@ (8004f60 <SPI_WaitFlagStateUntilTimeout+0xbc>)
  tmp_tickstart = HAL_GetTick();
 8004ec0:	9000      	str	r0, [sp, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	015b      	lsls	r3, r3, #5
 8004ec6:	0d1b      	lsrs	r3, r3, #20
 8004ec8:	436b      	muls	r3, r5
 8004eca:	9303      	str	r3, [sp, #12]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ecc:	6822      	ldr	r2, [r4, #0]
 8004ece:	6893      	ldr	r3, [r2, #8]
 8004ed0:	4033      	ands	r3, r6
 8004ed2:	1b9b      	subs	r3, r3, r6
 8004ed4:	4259      	negs	r1, r3
 8004ed6:	414b      	adcs	r3, r1
 8004ed8:	9901      	ldr	r1, [sp, #4]
 8004eda:	428b      	cmp	r3, r1
 8004edc:	d101      	bne.n	8004ee2 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8004ede:	2000      	movs	r0, #0
 8004ee0:	e032      	b.n	8004f48 <SPI_WaitFlagStateUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8004ee2:	1c7b      	adds	r3, r7, #1
 8004ee4:	d0f3      	beq.n	8004ece <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ee6:	f7fd fc3c 	bl	8002762 <HAL_GetTick>
 8004eea:	9b00      	ldr	r3, [sp, #0]
 8004eec:	1ac0      	subs	r0, r0, r3
 8004eee:	42a8      	cmp	r0, r5
 8004ef0:	d32c      	bcc.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0xa8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ef2:	21e0      	movs	r1, #224	@ 0xe0
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	438a      	bics	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efc:	2282      	movs	r2, #130	@ 0x82
 8004efe:	6861      	ldr	r1, [r4, #4]
 8004f00:	0052      	lsls	r2, r2, #1
 8004f02:	4291      	cmp	r1, r2
 8004f04:	d10c      	bne.n	8004f20 <SPI_WaitFlagStateUntilTimeout+0x7c>
 8004f06:	2180      	movs	r1, #128	@ 0x80
 8004f08:	68a2      	ldr	r2, [r4, #8]
 8004f0a:	0209      	lsls	r1, r1, #8
 8004f0c:	428a      	cmp	r2, r1
 8004f0e:	d003      	beq.n	8004f18 <SPI_WaitFlagStateUntilTimeout+0x74>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f10:	2180      	movs	r1, #128	@ 0x80
 8004f12:	00c9      	lsls	r1, r1, #3
 8004f14:	428a      	cmp	r2, r1
 8004f16:	d103      	bne.n	8004f20 <SPI_WaitFlagStateUntilTimeout+0x7c>
          __HAL_SPI_DISABLE(hspi);
 8004f18:	2140      	movs	r1, #64	@ 0x40
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	438a      	bics	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f20:	2180      	movs	r1, #128	@ 0x80
 8004f22:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004f24:	0189      	lsls	r1, r1, #6
 8004f26:	428a      	cmp	r2, r1
 8004f28:	d106      	bne.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0x94>
          SPI_RESET_CRC(hspi);
 8004f2a:	6819      	ldr	r1, [r3, #0]
 8004f2c:	480d      	ldr	r0, [pc, #52]	@ (8004f64 <SPI_WaitFlagStateUntilTimeout+0xc0>)
 8004f2e:	4001      	ands	r1, r0
 8004f30:	6019      	str	r1, [r3, #0]
 8004f32:	6819      	ldr	r1, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004f38:	0023      	movs	r3, r4
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	3351      	adds	r3, #81	@ 0x51
 8004f3e:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8004f40:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004f42:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8004f44:	3450      	adds	r4, #80	@ 0x50
 8004f46:	7023      	strb	r3, [r4, #0]
}
 8004f48:	b005      	add	sp, #20
 8004f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8004f4c:	9b03      	ldr	r3, [sp, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d000      	beq.n	8004f54 <SPI_WaitFlagStateUntilTimeout+0xb0>
 8004f52:	002b      	movs	r3, r5
      count--;
 8004f54:	9a03      	ldr	r2, [sp, #12]
 8004f56:	001d      	movs	r5, r3
 8004f58:	3a01      	subs	r2, #1
 8004f5a:	9203      	str	r2, [sp, #12]
 8004f5c:	e7b6      	b.n	8004ecc <SPI_WaitFlagStateUntilTimeout+0x28>
 8004f5e:	46c0      	nop			@ (mov r8, r8)
 8004f60:	20000060 	.word	0x20000060
 8004f64:	ffffdfff 	.word	0xffffdfff

08004f68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f6a:	4b17      	ldr	r3, [pc, #92]	@ (8004fc8 <SPI_EndRxTxTransaction+0x60>)
{
 8004f6c:	0004      	movs	r4, r0
 8004f6e:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	4916      	ldr	r1, [pc, #88]	@ (8004fcc <SPI_EndRxTxTransaction+0x64>)
{
 8004f74:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f76:	f7fb f8f7 	bl	8000168 <__udivsi3>
 8004f7a:	23fa      	movs	r3, #250	@ 0xfa
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4343      	muls	r3, r0
 8004f80:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f82:	2382      	movs	r3, #130	@ 0x82
 8004f84:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f86:	2280      	movs	r2, #128	@ 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	4299      	cmp	r1, r3
 8004f8c:	d10f      	bne.n	8004fae <SPI_EndRxTxTransaction+0x46>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f8e:	002b      	movs	r3, r5
 8004f90:	2200      	movs	r2, #0
 8004f92:	2180      	movs	r1, #128	@ 0x80
 8004f94:	0020      	movs	r0, r4
 8004f96:	9600      	str	r6, [sp, #0]
 8004f98:	f7ff ff84 	bl	8004ea4 <SPI_WaitFlagStateUntilTimeout>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d010      	beq.n	8004fc2 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fa0:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004fa2:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	6563      	str	r3, [r4, #84]	@ 0x54
  }

  return HAL_OK;
}
 8004faa:	b004      	add	sp, #16
 8004fac:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8004fae:	9b03      	ldr	r3, [sp, #12]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d006      	beq.n	8004fc2 <SPI_EndRxTxTransaction+0x5a>
      count--;
 8004fb4:	9b03      	ldr	r3, [sp, #12]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	4213      	tst	r3, r2
 8004fc0:	d1f5      	bne.n	8004fae <SPI_EndRxTxTransaction+0x46>
  return HAL_OK;
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	e7f1      	b.n	8004faa <SPI_EndRxTxTransaction+0x42>
 8004fc6:	46c0      	nop			@ (mov r8, r8)
 8004fc8:	20000060 	.word	0x20000060
 8004fcc:	016e3600 	.word	0x016e3600

08004fd0 <SPI_EndRxTransaction>:
{
 8004fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fd2:	000b      	movs	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fd4:	2182      	movs	r1, #130	@ 0x82
{
 8004fd6:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fd8:	6840      	ldr	r0, [r0, #4]
 8004fda:	0049      	lsls	r1, r1, #1
 8004fdc:	4288      	cmp	r0, r1
 8004fde:	d00a      	beq.n	8004ff6 <SPI_EndRxTransaction+0x26>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe0:	9200      	str	r2, [sp, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	3904      	subs	r1, #4
 8004fe6:	39ff      	subs	r1, #255	@ 0xff
 8004fe8:	0020      	movs	r0, r4
 8004fea:	f7ff ff5b 	bl	8004ea4 <SPI_WaitFlagStateUntilTimeout>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	d119      	bne.n	8005026 <SPI_EndRxTransaction+0x56>
  return HAL_OK;
 8004ff2:	2000      	movs	r0, #0
}
 8004ff4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff6:	2080      	movs	r0, #128	@ 0x80
 8004ff8:	2580      	movs	r5, #128	@ 0x80
 8004ffa:	68a1      	ldr	r1, [r4, #8]
 8004ffc:	0200      	lsls	r0, r0, #8
 8004ffe:	00ed      	lsls	r5, r5, #3
 8005000:	4281      	cmp	r1, r0
 8005002:	d001      	beq.n	8005008 <SPI_EndRxTransaction+0x38>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005004:	42a9      	cmp	r1, r5
 8005006:	d106      	bne.n	8005016 <SPI_EndRxTransaction+0x46>
    __HAL_SPI_DISABLE(hspi);
 8005008:	2740      	movs	r7, #64	@ 0x40
 800500a:	6826      	ldr	r6, [r4, #0]
 800500c:	6830      	ldr	r0, [r6, #0]
 800500e:	43b8      	bics	r0, r7
 8005010:	6030      	str	r0, [r6, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005012:	42a9      	cmp	r1, r5
 8005014:	d003      	beq.n	800501e <SPI_EndRxTransaction+0x4e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005016:	9200      	str	r2, [sp, #0]
 8005018:	2180      	movs	r1, #128	@ 0x80
 800501a:	2200      	movs	r2, #0
 800501c:	e7e4      	b.n	8004fe8 <SPI_EndRxTransaction+0x18>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800501e:	9200      	str	r2, [sp, #0]
 8005020:	2101      	movs	r1, #1
 8005022:	2200      	movs	r2, #0
 8005024:	e7e0      	b.n	8004fe8 <SPI_EndRxTransaction+0x18>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005026:	2320      	movs	r3, #32
 8005028:	6d62      	ldr	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 800502a:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800502c:	4313      	orrs	r3, r2
 800502e:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005030:	e7e0      	b.n	8004ff4 <SPI_EndRxTransaction+0x24>
	...

08005034 <HAL_SPI_Init>:
{
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005038:	2001      	movs	r0, #1
  if (hspi == NULL)
 800503a:	2c00      	cmp	r4, #0
 800503c:	d05a      	beq.n	80050f4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800503e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d158      	bne.n	80050f6 <HAL_SPI_Init+0xc2>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005044:	2282      	movs	r2, #130	@ 0x82
 8005046:	6861      	ldr	r1, [r4, #4]
 8005048:	0052      	lsls	r2, r2, #1
 800504a:	4291      	cmp	r1, r2
 800504c:	d000      	beq.n	8005050 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800504e:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005050:	0025      	movs	r5, r4
 8005052:	3551      	adds	r5, #81	@ 0x51
 8005054:	782b      	ldrb	r3, [r5, #0]
 8005056:	b2da      	uxtb	r2, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d105      	bne.n	8005068 <HAL_SPI_Init+0x34>
    hspi->Lock = HAL_UNLOCKED;
 800505c:	0023      	movs	r3, r4
 800505e:	3350      	adds	r3, #80	@ 0x50
    HAL_SPI_MspInit(hspi);
 8005060:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005062:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8005064:	f7fd f9e8 	bl	8002438 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005068:	2702      	movs	r7, #2
  __HAL_SPI_DISABLE(hspi);
 800506a:	2240      	movs	r2, #64	@ 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800506c:	2682      	movs	r6, #130	@ 0x82
  hspi->State = HAL_SPI_STATE_BUSY;
 800506e:	702f      	strb	r7, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005070:	2784      	movs	r7, #132	@ 0x84
  __HAL_SPI_DISABLE(hspi);
 8005072:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005074:	0076      	lsls	r6, r6, #1
  __HAL_SPI_DISABLE(hspi);
 8005076:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005078:	023f      	lsls	r7, r7, #8
  __HAL_SPI_DISABLE(hspi);
 800507a:	4393      	bics	r3, r2
 800507c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800507e:	6863      	ldr	r3, [r4, #4]
 8005080:	69a2      	ldr	r2, [r4, #24]
 8005082:	4033      	ands	r3, r6
 8005084:	68a6      	ldr	r6, [r4, #8]
 8005086:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005088:	403e      	ands	r6, r7
 800508a:	2780      	movs	r7, #128	@ 0x80
 800508c:	4333      	orrs	r3, r6
 800508e:	68e6      	ldr	r6, [r4, #12]
 8005090:	013f      	lsls	r7, r7, #4
 8005092:	403e      	ands	r6, r7
 8005094:	2702      	movs	r7, #2
 8005096:	4333      	orrs	r3, r6
 8005098:	6926      	ldr	r6, [r4, #16]
 800509a:	403e      	ands	r6, r7
 800509c:	4333      	orrs	r3, r6
 800509e:	6966      	ldr	r6, [r4, #20]
 80050a0:	3f01      	subs	r7, #1
 80050a2:	403e      	ands	r6, r7
 80050a4:	4333      	orrs	r3, r6
 80050a6:	2680      	movs	r6, #128	@ 0x80
 80050a8:	00b6      	lsls	r6, r6, #2
 80050aa:	4016      	ands	r6, r2
 80050ac:	4333      	orrs	r3, r6
 80050ae:	69e6      	ldr	r6, [r4, #28]
 80050b0:	3737      	adds	r7, #55	@ 0x37
 80050b2:	403e      	ands	r6, r7
 80050b4:	4333      	orrs	r3, r6
 80050b6:	6a26      	ldr	r6, [r4, #32]
 80050b8:	3748      	adds	r7, #72	@ 0x48
 80050ba:	403e      	ands	r6, r7
 80050bc:	4333      	orrs	r3, r6
 80050be:	2680      	movs	r6, #128	@ 0x80
 80050c0:	0007      	movs	r7, r0
 80050c2:	01b6      	lsls	r6, r6, #6
 80050c4:	4037      	ands	r7, r6
 80050c6:	433b      	orrs	r3, r7
 80050c8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050ca:	2304      	movs	r3, #4
 80050cc:	2710      	movs	r7, #16
 80050ce:	0c12      	lsrs	r2, r2, #16
 80050d0:	401a      	ands	r2, r3
 80050d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80050d4:	403b      	ands	r3, r7
 80050d6:	431a      	orrs	r2, r3
 80050d8:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050da:	42b0      	cmp	r0, r6
 80050dc:	d102      	bne.n	80050e4 <HAL_SPI_Init+0xb0>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80050de:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050e4:	69cb      	ldr	r3, [r1, #28]
 80050e6:	4a06      	ldr	r2, [pc, #24]	@ (8005100 <HAL_SPI_Init+0xcc>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050e8:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050ea:	4013      	ands	r3, r2
 80050ec:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80050ee:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050f0:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050f2:	702b      	strb	r3, [r5, #0]
}
 80050f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050f6:	2300      	movs	r3, #0
 80050f8:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050fa:	6163      	str	r3, [r4, #20]
 80050fc:	e7a8      	b.n	8005050 <HAL_SPI_Init+0x1c>
 80050fe:	46c0      	nop			@ (mov r8, r8)
 8005100:	fffff7ff 	.word	0xfffff7ff

08005104 <HAL_SPI_TransmitReceive>:
{
 8005104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005106:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8005108:	0003      	movs	r3, r0
{
 800510a:	b087      	sub	sp, #28
 800510c:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hspi);
 800510e:	3350      	adds	r3, #80	@ 0x50
 8005110:	781a      	ldrb	r2, [r3, #0]
{
 8005112:	0004      	movs	r4, r0
 8005114:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8005116:	2702      	movs	r7, #2
 8005118:	2a01      	cmp	r2, #1
 800511a:	d021      	beq.n	8005160 <HAL_SPI_TransmitReceive+0x5c>
 800511c:	2201      	movs	r2, #1
 800511e:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8005120:	f7fd fb1f 	bl	8002762 <HAL_GetTick>
  tmp_state           = hspi->State;
 8005124:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8005126:	9002      	str	r0, [sp, #8]
  tmp_state           = hspi->State;
 8005128:	3351      	adds	r3, #81	@ 0x51
 800512a:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800512c:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800512e:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005130:	2b01      	cmp	r3, #1
 8005132:	d008      	beq.n	8005146 <HAL_SPI_TransmitReceive+0x42>
 8005134:	2382      	movs	r3, #130	@ 0x82
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	4299      	cmp	r1, r3
 800513a:	d10a      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x4e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800513c:	68a3      	ldr	r3, [r4, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x4e>
 8005142:	2a04      	cmp	r2, #4
 8005144:	d105      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x4e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005146:	2d00      	cmp	r5, #0
 8005148:	d002      	beq.n	8005150 <HAL_SPI_TransmitReceive+0x4c>
 800514a:	9b03      	ldr	r3, [sp, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10a      	bne.n	8005166 <HAL_SPI_TransmitReceive+0x62>
    errorcode = HAL_ERROR;
 8005150:	2701      	movs	r7, #1
  hspi->State = HAL_SPI_STATE_READY;
 8005152:	0023      	movs	r3, r4
 8005154:	2201      	movs	r2, #1
 8005156:	3351      	adds	r3, #81	@ 0x51
 8005158:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800515a:	2300      	movs	r3, #0
 800515c:	3450      	adds	r4, #80	@ 0x50
 800515e:	7023      	strb	r3, [r4, #0]
}
 8005160:	0038      	movs	r0, r7
 8005162:	b007      	add	sp, #28
 8005164:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005166:	2e00      	cmp	r6, #0
 8005168:	d0f2      	beq.n	8005150 <HAL_SPI_TransmitReceive+0x4c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800516a:	0023      	movs	r3, r4
 800516c:	3351      	adds	r3, #81	@ 0x51
 800516e:	781a      	ldrb	r2, [r3, #0]
 8005170:	2a04      	cmp	r2, #4
 8005172:	d001      	beq.n	8005178 <HAL_SPI_TransmitReceive+0x74>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005174:	2205      	movs	r2, #5
 8005176:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005178:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800517a:	2080      	movs	r0, #128	@ 0x80
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800517c:	9a03      	ldr	r2, [sp, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800517e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005180:	63a2      	str	r2, [r4, #56]	@ 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005182:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  hspi->RxXferCount = Size;
 8005184:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005186:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005188:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxXferSize  = Size;
 800518a:	87a6      	strh	r6, [r4, #60]	@ 0x3c
    SPI_RESET_CRC(hspi);
 800518c:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800518e:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005190:	86e6      	strh	r6, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005192:	86a6      	strh	r6, [r4, #52]	@ 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005194:	0180      	lsls	r0, r0, #6
 8005196:	4282      	cmp	r2, r0
 8005198:	d106      	bne.n	80051a8 <HAL_SPI_TransmitReceive+0xa4>
    SPI_RESET_CRC(hspi);
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	4f79      	ldr	r7, [pc, #484]	@ (8005384 <HAL_SPI_TransmitReceive+0x280>)
 800519e:	4038      	ands	r0, r7
 80051a0:	6018      	str	r0, [r3, #0]
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	4302      	orrs	r2, r0
 80051a6:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051a8:	2240      	movs	r2, #64	@ 0x40
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	4210      	tst	r0, r2
 80051ae:	d102      	bne.n	80051b6 <HAL_SPI_TransmitReceive+0xb2>
    __HAL_SPI_ENABLE(hspi);
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	4302      	orrs	r2, r0
 80051b4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051b6:	2280      	movs	r2, #128	@ 0x80
 80051b8:	68e0      	ldr	r0, [r4, #12]
 80051ba:	0112      	lsls	r2, r2, #4
 80051bc:	4290      	cmp	r0, r2
 80051be:	d167      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x18c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c0:	2900      	cmp	r1, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_SPI_TransmitReceive+0xc4>
 80051c4:	2e01      	cmp	r6, #1
 80051c6:	d107      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0xd4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051c8:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ca:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051cc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80051ce:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d0:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80051d8:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051da:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051dc:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051de:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d118      	bne.n	8005216 <HAL_SPI_TransmitReceive+0x112>
 80051e4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d115      	bne.n	8005216 <HAL_SPI_TransmitReceive+0x112>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051ea:	2380      	movs	r3, #128	@ 0x80
 80051ec:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80051ee:	019b      	lsls	r3, r3, #6
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d000      	beq.n	80051f6 <HAL_SPI_TransmitReceive+0xf2>
 80051f4:	e0a4      	b.n	8005340 <HAL_SPI_TransmitReceive+0x23c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80051f6:	2201      	movs	r2, #1
 80051f8:	9b02      	ldr	r3, [sp, #8]
 80051fa:	0011      	movs	r1, r2
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	0020      	movs	r0, r4
 8005200:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005202:	f7ff fe4f 	bl	8004ea4 <SPI_WaitFlagStateUntilTimeout>
 8005206:	2800      	cmp	r0, #0
 8005208:	d100      	bne.n	800520c <HAL_SPI_TransmitReceive+0x108>
 800520a:	e097      	b.n	800533c <HAL_SPI_TransmitReceive+0x238>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800520c:	2302      	movs	r3, #2
 800520e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005210:	4313      	orrs	r3, r2
 8005212:	6563      	str	r3, [r4, #84]	@ 0x54
      goto error;
 8005214:	e03a      	b.n	800528c <HAL_SPI_TransmitReceive+0x188>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	423a      	tst	r2, r7
 800521c:	d01b      	beq.n	8005256 <HAL_SPI_TransmitReceive+0x152>
 800521e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8005220:	2a00      	cmp	r2, #0
 8005222:	d018      	beq.n	8005256 <HAL_SPI_TransmitReceive+0x152>
 8005224:	2d01      	cmp	r5, #1
 8005226:	d115      	bne.n	8005254 <HAL_SPI_TransmitReceive+0x150>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005228:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800522a:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800522c:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800522e:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005230:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005232:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8005234:	3a01      	subs	r2, #1
 8005236:	b292      	uxth	r2, r2
 8005238:	86e2      	strh	r2, [r4, #54]	@ 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800523a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800523c:	2a00      	cmp	r2, #0
 800523e:	d109      	bne.n	8005254 <HAL_SPI_TransmitReceive+0x150>
 8005240:	2280      	movs	r2, #128	@ 0x80
 8005242:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005244:	0192      	lsls	r2, r2, #6
 8005246:	4291      	cmp	r1, r2
 8005248:	d104      	bne.n	8005254 <HAL_SPI_TransmitReceive+0x150>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800524a:	2280      	movs	r2, #128	@ 0x80
 800524c:	6819      	ldr	r1, [r3, #0]
 800524e:	0152      	lsls	r2, r2, #5
 8005250:	430a      	orrs	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
{
 8005254:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005256:	6899      	ldr	r1, [r3, #8]
 8005258:	000a      	movs	r2, r1
 800525a:	4032      	ands	r2, r6
 800525c:	4231      	tst	r1, r6
 800525e:	d00c      	beq.n	800527a <HAL_SPI_TransmitReceive+0x176>
 8005260:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8005262:	2900      	cmp	r1, #0
 8005264:	d009      	beq.n	800527a <HAL_SPI_TransmitReceive+0x176>
        txallowed = 1U;
 8005266:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005268:	68d9      	ldr	r1, [r3, #12]
 800526a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800526c:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800526e:	3302      	adds	r3, #2
 8005270:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005272:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005274:	3b01      	subs	r3, #1
 8005276:	b29b      	uxth	r3, r3
 8005278:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800527a:	f7fd fa72 	bl	8002762 <HAL_GetTick>
 800527e:	9b02      	ldr	r3, [sp, #8]
 8005280:	1ac0      	subs	r0, r0, r3
 8005282:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005284:	4298      	cmp	r0, r3
 8005286:	d3aa      	bcc.n	80051de <HAL_SPI_TransmitReceive+0xda>
 8005288:	3301      	adds	r3, #1
 800528a:	d0a8      	beq.n	80051de <HAL_SPI_TransmitReceive+0xda>
        errorcode = HAL_TIMEOUT;
 800528c:	2703      	movs	r7, #3
 800528e:	e760      	b.n	8005152 <HAL_SPI_TransmitReceive+0x4e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005290:	2900      	cmp	r1, #0
 8005292:	d001      	beq.n	8005298 <HAL_SPI_TransmitReceive+0x194>
 8005294:	2e01      	cmp	r6, #1
 8005296:	d108      	bne.n	80052aa <HAL_SPI_TransmitReceive+0x1a6>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005298:	782a      	ldrb	r2, [r5, #0]
 800529a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800529c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800529e:	3301      	adds	r3, #1
 80052a0:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80052a2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80052aa:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052ac:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052ae:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052b0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d102      	bne.n	80052bc <HAL_SPI_TransmitReceive+0x1b8>
 80052b6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d096      	beq.n	80051ea <HAL_SPI_TransmitReceive+0xe6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	423a      	tst	r2, r7
 80052c2:	d01d      	beq.n	8005300 <HAL_SPI_TransmitReceive+0x1fc>
 80052c4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80052c6:	2a00      	cmp	r2, #0
 80052c8:	d01a      	beq.n	8005300 <HAL_SPI_TransmitReceive+0x1fc>
 80052ca:	2d01      	cmp	r5, #1
 80052cc:	d117      	bne.n	80052fe <HAL_SPI_TransmitReceive+0x1fa>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052ce:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80052d0:	7812      	ldrb	r2, [r2, #0]
 80052d2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80052d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80052d6:	3301      	adds	r3, #1
 80052d8:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80052da:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29b      	uxth	r3, r3
 80052e0:	86e3      	strh	r3, [r4, #54]	@ 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80052e2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <HAL_SPI_TransmitReceive+0x1fa>
 80052e8:	2380      	movs	r3, #128	@ 0x80
 80052ea:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80052ec:	6822      	ldr	r2, [r4, #0]
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80052ee:	019b      	lsls	r3, r3, #6
 80052f0:	4299      	cmp	r1, r3
 80052f2:	d104      	bne.n	80052fe <HAL_SPI_TransmitReceive+0x1fa>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80052f4:	2380      	movs	r3, #128	@ 0x80
 80052f6:	6811      	ldr	r1, [r2, #0]
 80052f8:	015b      	lsls	r3, r3, #5
 80052fa:	430b      	orrs	r3, r1
 80052fc:	6013      	str	r3, [r2, #0]
        txallowed = 1U;
 80052fe:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	6899      	ldr	r1, [r3, #8]
 8005304:	000a      	movs	r2, r1
 8005306:	4032      	ands	r2, r6
 8005308:	4231      	tst	r1, r6
 800530a:	d00d      	beq.n	8005328 <HAL_SPI_TransmitReceive+0x224>
 800530c:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800530e:	2900      	cmp	r1, #0
 8005310:	d00a      	beq.n	8005328 <HAL_SPI_TransmitReceive+0x224>
        txallowed = 1U;
 8005312:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005314:	68d9      	ldr	r1, [r3, #12]
 8005316:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005318:	7019      	strb	r1, [r3, #0]
        hspi->pRxBuffPtr++;
 800531a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800531c:	3301      	adds	r3, #1
 800531e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005320:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005322:	3b01      	subs	r3, #1
 8005324:	b29b      	uxth	r3, r3
 8005326:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005328:	f7fd fa1b 	bl	8002762 <HAL_GetTick>
 800532c:	9b02      	ldr	r3, [sp, #8]
 800532e:	1ac0      	subs	r0, r0, r3
 8005330:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005332:	4298      	cmp	r0, r3
 8005334:	d3bc      	bcc.n	80052b0 <HAL_SPI_TransmitReceive+0x1ac>
 8005336:	3301      	adds	r3, #1
 8005338:	d0ba      	beq.n	80052b0 <HAL_SPI_TransmitReceive+0x1ac>
 800533a:	e7a7      	b.n	800528c <HAL_SPI_TransmitReceive+0x188>
    READ_REG(hspi->Instance->DR);
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005340:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005342:	2700      	movs	r7, #0
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005344:	6893      	ldr	r3, [r2, #8]
 8005346:	06db      	lsls	r3, r3, #27
 8005348:	d506      	bpl.n	8005358 <HAL_SPI_TransmitReceive+0x254>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800534a:	2302      	movs	r3, #2
 800534c:	6d61      	ldr	r1, [r4, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800534e:	3701      	adds	r7, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005350:	430b      	orrs	r3, r1
 8005352:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005354:	4b0c      	ldr	r3, [pc, #48]	@ (8005388 <HAL_SPI_TransmitReceive+0x284>)
 8005356:	6093      	str	r3, [r2, #8]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005358:	0020      	movs	r0, r4
 800535a:	9a02      	ldr	r2, [sp, #8]
 800535c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800535e:	f7ff fe03 	bl	8004f68 <SPI_EndRxTxTransaction>
 8005362:	2800      	cmp	r0, #0
 8005364:	d002      	beq.n	800536c <HAL_SPI_TransmitReceive+0x268>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005366:	2320      	movs	r3, #32
 8005368:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 800536a:	e6f1      	b.n	8005150 <HAL_SPI_TransmitReceive+0x4c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800536c:	68a3      	ldr	r3, [r4, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d000      	beq.n	8005374 <HAL_SPI_TransmitReceive+0x270>
 8005372:	e6ee      	b.n	8005152 <HAL_SPI_TransmitReceive+0x4e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005374:	9305      	str	r3, [sp, #20]
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	9205      	str	r2, [sp, #20]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	9305      	str	r3, [sp, #20]
 8005380:	9b05      	ldr	r3, [sp, #20]
 8005382:	e6e6      	b.n	8005152 <HAL_SPI_TransmitReceive+0x4e>
 8005384:	ffffdfff 	.word	0xffffdfff
 8005388:	0000ffef 	.word	0x0000ffef

0800538c <HAL_SPI_TransmitReceive_DMA>:
{
 800538c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800538e:	0006      	movs	r6, r0
 8005390:	3650      	adds	r6, #80	@ 0x50
 8005392:	7835      	ldrb	r5, [r6, #0]
{
 8005394:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8005396:	2002      	movs	r0, #2
 8005398:	2d01      	cmp	r5, #1
 800539a:	d053      	beq.n	8005444 <HAL_SPI_TransmitReceive_DMA+0xb8>
  tmp_state           = hspi->State;
 800539c:	0025      	movs	r5, r4
  __HAL_LOCK(hspi);
 800539e:	3801      	subs	r0, #1
 80053a0:	7030      	strb	r0, [r6, #0]
  tmp_state           = hspi->State;
 80053a2:	3551      	adds	r5, #81	@ 0x51
 80053a4:	7828      	ldrb	r0, [r5, #0]
 80053a6:	b2c7      	uxtb	r7, r0
 80053a8:	9701      	str	r7, [sp, #4]
  tmp_mode            = hspi->Init.Mode;
 80053aa:	6867      	ldr	r7, [r4, #4]
 80053ac:	46bc      	mov	ip, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80053ae:	2801      	cmp	r0, #1
 80053b0:	d00a      	beq.n	80053c8 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80053b2:	2782      	movs	r7, #130	@ 0x82
    errorcode = HAL_BUSY;
 80053b4:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80053b6:	007f      	lsls	r7, r7, #1
 80053b8:	45bc      	cmp	ip, r7
 80053ba:	d141      	bne.n	8005440 <HAL_SPI_TransmitReceive_DMA+0xb4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053bc:	68a7      	ldr	r7, [r4, #8]
 80053be:	2f00      	cmp	r7, #0
 80053c0:	d13e      	bne.n	8005440 <HAL_SPI_TransmitReceive_DMA+0xb4>
 80053c2:	9f01      	ldr	r7, [sp, #4]
 80053c4:	2f04      	cmp	r7, #4
 80053c6:	d13b      	bne.n	8005440 <HAL_SPI_TransmitReceive_DMA+0xb4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053c8:	2900      	cmp	r1, #0
 80053ca:	d038      	beq.n	800543e <HAL_SPI_TransmitReceive_DMA+0xb2>
 80053cc:	2a00      	cmp	r2, #0
 80053ce:	d036      	beq.n	800543e <HAL_SPI_TransmitReceive_DMA+0xb2>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d034      	beq.n	800543e <HAL_SPI_TransmitReceive_DMA+0xb2>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053d4:	7828      	ldrb	r0, [r5, #0]
 80053d6:	2804      	cmp	r0, #4
 80053d8:	d001      	beq.n	80053de <HAL_SPI_TransmitReceive_DMA+0x52>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053da:	2005      	movs	r0, #5
 80053dc:	7028      	strb	r0, [r5, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053de:	2000      	movs	r0, #0
 80053e0:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 80053e2:	6420      	str	r0, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80053e4:	6460      	str	r0, [r4, #68]	@ 0x44
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053e6:	2080      	movs	r0, #128	@ 0x80
  hspi->TxXferCount = Size;
 80053e8:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80053ea:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->RxXferSize  = Size;
 80053ec:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80053ee:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053f2:	6321      	str	r1, [r4, #48]	@ 0x30
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053f4:	63a2      	str	r2, [r4, #56]	@ 0x38
    SPI_RESET_CRC(hspi);
 80053f6:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053f8:	0180      	lsls	r0, r0, #6
 80053fa:	4283      	cmp	r3, r0
 80053fc:	d106      	bne.n	800540c <HAL_SPI_TransmitReceive_DMA+0x80>
    SPI_RESET_CRC(hspi);
 80053fe:	6808      	ldr	r0, [r1, #0]
 8005400:	4f27      	ldr	r7, [pc, #156]	@ (80054a0 <HAL_SPI_TransmitReceive_DMA+0x114>)
 8005402:	4038      	ands	r0, r7
 8005404:	6008      	str	r0, [r1, #0]
 8005406:	6808      	ldr	r0, [r1, #0]
 8005408:	4303      	orrs	r3, r0
 800540a:	600b      	str	r3, [r1, #0]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800540c:	782b      	ldrb	r3, [r5, #0]
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800540e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005410:	2b04      	cmp	r3, #4
 8005412:	d018      	beq.n	8005446 <HAL_SPI_TransmitReceive_DMA+0xba>
 8005414:	4f23      	ldr	r7, [pc, #140]	@ (80054a4 <HAL_SPI_TransmitReceive_DMA+0x118>)
 8005416:	4b24      	ldr	r3, [pc, #144]	@ (80054a8 <HAL_SPI_TransmitReceive_DMA+0x11c>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005418:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800541a:	4b24      	ldr	r3, [pc, #144]	@ (80054ac <HAL_SPI_TransmitReceive_DMA+0x120>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800541c:	6307      	str	r7, [r0, #48]	@ 0x30
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800541e:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8005420:	2300      	movs	r3, #0
 8005422:	6383      	str	r3, [r0, #56]	@ 0x38
                                 hspi->RxXferCount))
 8005424:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005426:	310c      	adds	r1, #12
                                 hspi->RxXferCount))
 8005428:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800542a:	f7fe fa5b 	bl	80038e4 <HAL_DMA_Start_IT>
 800542e:	1e03      	subs	r3, r0, #0
 8005430:	d00c      	beq.n	800544c <HAL_SPI_TransmitReceive_DMA+0xc0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005432:	2310      	movs	r3, #16
 8005434:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005436:	4313      	orrs	r3, r2
 8005438:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800543a:	2301      	movs	r3, #1
 800543c:	702b      	strb	r3, [r5, #0]
    errorcode = HAL_ERROR;
 800543e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8005440:	2300      	movs	r3, #0
 8005442:	7033      	strb	r3, [r6, #0]
}
 8005444:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005446:	4f1a      	ldr	r7, [pc, #104]	@ (80054b0 <HAL_SPI_TransmitReceive_DMA+0x124>)
 8005448:	4b1a      	ldr	r3, [pc, #104]	@ (80054b4 <HAL_SPI_TransmitReceive_DMA+0x128>)
 800544a:	e7e5      	b.n	8005418 <HAL_SPI_TransmitReceive_DMA+0x8c>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800544c:	2701      	movs	r7, #1
 800544e:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005450:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005452:	6851      	ldr	r1, [r2, #4]
 8005454:	4339      	orrs	r1, r7
 8005456:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005458:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800545a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800545c:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800545e:	6383      	str	r3, [r0, #56]	@ 0x38
                                 hspi->TxXferCount))
 8005460:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005462:	6b21      	ldr	r1, [r4, #48]	@ 0x30
                                 hspi->TxXferCount))
 8005464:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005466:	320c      	adds	r2, #12
 8005468:	f7fe fa3c 	bl	80038e4 <HAL_DMA_Start_IT>
 800546c:	2800      	cmp	r0, #0
 800546e:	d005      	beq.n	800547c <HAL_SPI_TransmitReceive_DMA+0xf0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005470:	2310      	movs	r3, #16
 8005472:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005474:	4313      	orrs	r3, r2
 8005476:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8005478:	702f      	strb	r7, [r5, #0]
    goto error;
 800547a:	e7e0      	b.n	800543e <HAL_SPI_TransmitReceive_DMA+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800547c:	2240      	movs	r2, #64	@ 0x40
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	4211      	tst	r1, r2
 8005484:	d102      	bne.n	800548c <HAL_SPI_TransmitReceive_DMA+0x100>
    __HAL_SPI_ENABLE(hspi);
 8005486:	6819      	ldr	r1, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800548c:	2220      	movs	r2, #32
 800548e:	6859      	ldr	r1, [r3, #4]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005494:	2202      	movs	r2, #2
 8005496:	6859      	ldr	r1, [r3, #4]
 8005498:	430a      	orrs	r2, r1
 800549a:	605a      	str	r2, [r3, #4]
 800549c:	e7d0      	b.n	8005440 <HAL_SPI_TransmitReceive_DMA+0xb4>
 800549e:	46c0      	nop			@ (mov r8, r8)
 80054a0:	ffffdfff 	.word	0xffffdfff
 80054a4:	080055d9 	.word	0x080055d9
 80054a8:	080056bd 	.word	0x080056bd
 80054ac:	080055e5 	.word	0x080055e5
 80054b0:	080055cd 	.word	0x080055cd
 80054b4:	08005609 	.word	0x08005609

080054b8 <HAL_SPI_Receive_DMA>:
{
 80054b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ba:	0004      	movs	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80054bc:	6880      	ldr	r0, [r0, #8]
{
 80054be:	0013      	movs	r3, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d10f      	bne.n	80054e4 <HAL_SPI_Receive_DMA+0x2c>
 80054c4:	2282      	movs	r2, #130	@ 0x82
 80054c6:	6865      	ldr	r5, [r4, #4]
 80054c8:	0052      	lsls	r2, r2, #1
 80054ca:	4295      	cmp	r5, r2
 80054cc:	d10a      	bne.n	80054e4 <HAL_SPI_Receive_DMA+0x2c>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054ce:	0022      	movs	r2, r4
 80054d0:	3004      	adds	r0, #4
 80054d2:	3251      	adds	r2, #81	@ 0x51
 80054d4:	7010      	strb	r0, [r2, #0]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80054d6:	000a      	movs	r2, r1
 80054d8:	0020      	movs	r0, r4
 80054da:	f7ff ff57 	bl	800538c <HAL_SPI_TransmitReceive_DMA>
 80054de:	0005      	movs	r5, r0
}
 80054e0:	0028      	movs	r0, r5
 80054e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 80054e4:	0026      	movs	r6, r4
 80054e6:	3650      	adds	r6, #80	@ 0x50
 80054e8:	7832      	ldrb	r2, [r6, #0]
 80054ea:	2502      	movs	r5, #2
 80054ec:	2a01      	cmp	r2, #1
 80054ee:	d0f7      	beq.n	80054e0 <HAL_SPI_Receive_DMA+0x28>
 80054f0:	2201      	movs	r2, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 80054f2:	0027      	movs	r7, r4
  __HAL_LOCK(hspi);
 80054f4:	7032      	strb	r2, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 80054f6:	3751      	adds	r7, #81	@ 0x51
 80054f8:	783a      	ldrb	r2, [r7, #0]
 80054fa:	b2d5      	uxtb	r5, r2
 80054fc:	2a01      	cmp	r2, #1
 80054fe:	d157      	bne.n	80055b0 <HAL_SPI_Receive_DMA+0xf8>
  if ((pData == NULL) || (Size == 0U))
 8005500:	2900      	cmp	r1, #0
 8005502:	d040      	beq.n	8005586 <HAL_SPI_Receive_DMA+0xce>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d03e      	beq.n	8005586 <HAL_SPI_Receive_DMA+0xce>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005508:	3203      	adds	r2, #3
 800550a:	703a      	strb	r2, [r7, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800550c:	2200      	movs	r2, #0
  hspi->RxXferSize  = Size;
 800550e:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005510:	6562      	str	r2, [r4, #84]	@ 0x54
  hspi->RxXferCount = Size;
 8005512:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005514:	2380      	movs	r3, #128	@ 0x80
  hspi->RxISR       = NULL;
 8005516:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005518:	6462      	str	r2, [r4, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 800551a:	86a2      	strh	r2, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800551c:	86e2      	strh	r2, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800551e:	63a1      	str	r1, [r4, #56]	@ 0x38
    __HAL_SPI_DISABLE(hspi);
 8005520:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	4298      	cmp	r0, r3
 8005526:	d107      	bne.n	8005538 <HAL_SPI_Receive_DMA+0x80>
    __HAL_SPI_DISABLE(hspi);
 8005528:	2040      	movs	r0, #64	@ 0x40
 800552a:	6813      	ldr	r3, [r2, #0]
 800552c:	4383      	bics	r3, r0
 800552e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8005530:	6813      	ldr	r3, [r2, #0]
 8005532:	4820      	ldr	r0, [pc, #128]	@ (80055b4 <HAL_SPI_Receive_DMA+0xfc>)
 8005534:	4003      	ands	r3, r0
 8005536:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005538:	2080      	movs	r0, #128	@ 0x80
 800553a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800553c:	0180      	lsls	r0, r0, #6
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	4283      	cmp	r3, r0
 8005542:	d107      	bne.n	8005554 <HAL_SPI_Receive_DMA+0x9c>
    SPI_RESET_CRC(hspi);
 8005544:	6813      	ldr	r3, [r2, #0]
 8005546:	481c      	ldr	r0, [pc, #112]	@ (80055b8 <HAL_SPI_Receive_DMA+0x100>)
 8005548:	4003      	ands	r3, r0
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	6810      	ldr	r0, [r2, #0]
 800554e:	9b01      	ldr	r3, [sp, #4]
 8005550:	4303      	orrs	r3, r0
 8005552:	6013      	str	r3, [r2, #0]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005554:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005556:	4b19      	ldr	r3, [pc, #100]	@ (80055bc <HAL_SPI_Receive_DMA+0x104>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005558:	320c      	adds	r2, #12
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800555a:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800555c:	4b18      	ldr	r3, [pc, #96]	@ (80055c0 <HAL_SPI_Receive_DMA+0x108>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800555e:	4694      	mov	ip, r2
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005560:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005562:	4b18      	ldr	r3, [pc, #96]	@ (80055c4 <HAL_SPI_Receive_DMA+0x10c>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005564:	000a      	movs	r2, r1
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005566:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8005568:	2300      	movs	r3, #0
 800556a:	6383      	str	r3, [r0, #56]	@ 0x38
                                 hspi->RxXferCount))
 800556c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800556e:	4661      	mov	r1, ip
                                 hspi->RxXferCount))
 8005570:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005572:	f7fe f9b7 	bl	80038e4 <HAL_DMA_Start_IT>
 8005576:	2800      	cmp	r0, #0
 8005578:	d008      	beq.n	800558c <HAL_SPI_Receive_DMA+0xd4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800557a:	2310      	movs	r3, #16
 800557c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800557e:	4313      	orrs	r3, r2
 8005580:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8005582:	2301      	movs	r3, #1
 8005584:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(hspi);
 8005586:	2300      	movs	r3, #0
 8005588:	7033      	strb	r3, [r6, #0]
  return errorcode;
 800558a:	e7a9      	b.n	80054e0 <HAL_SPI_Receive_DMA+0x28>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800558c:	2240      	movs	r2, #64	@ 0x40
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	6819      	ldr	r1, [r3, #0]
 8005592:	4211      	tst	r1, r2
 8005594:	d102      	bne.n	800559c <HAL_SPI_Receive_DMA+0xe4>
    __HAL_SPI_ENABLE(hspi);
 8005596:	6819      	ldr	r1, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800559c:	2220      	movs	r2, #32
 800559e:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055a0:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80055a6:	2201      	movs	r2, #1
 80055a8:	6859      	ldr	r1, [r3, #4]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	e7ea      	b.n	8005586 <HAL_SPI_Receive_DMA+0xce>
    errorcode = HAL_BUSY;
 80055b0:	2502      	movs	r5, #2
 80055b2:	e7e8      	b.n	8005586 <HAL_SPI_Receive_DMA+0xce>
 80055b4:	ffffbfff 	.word	0xffffbfff
 80055b8:	ffffdfff 	.word	0xffffdfff
 80055bc:	080055cd 	.word	0x080055cd
 80055c0:	08005609 	.word	0x08005609
 80055c4:	080055e5 	.word	0x080055e5

080055c8 <HAL_SPI_TxRxCpltCallback>:
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
 80055c8:	4770      	bx	lr

080055ca <HAL_SPI_RxHalfCpltCallback>:
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 80055ca:	4770      	bx	lr

080055cc <SPI_DMAHalfReceiveCplt>:
{
 80055cc:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80055ce:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80055d0:	f7ff fffb 	bl	80055ca <HAL_SPI_RxHalfCpltCallback>
}
 80055d4:	bd10      	pop	{r4, pc}

080055d6 <HAL_SPI_TxRxHalfCpltCallback>:
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 80055d6:	4770      	bx	lr

080055d8 <SPI_DMAHalfTransmitReceiveCplt>:
{
 80055d8:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80055da:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80055dc:	f7ff fffb 	bl	80055d6 <HAL_SPI_TxRxHalfCpltCallback>
}
 80055e0:	bd10      	pop	{r4, pc}

080055e2 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 80055e2:	4770      	bx	lr

080055e4 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80055e4:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055e6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 80055e8:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80055ea:	6802      	ldr	r2, [r0, #0]
 80055ec:	6853      	ldr	r3, [r2, #4]
 80055ee:	438b      	bics	r3, r1
 80055f0:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80055f2:	2310      	movs	r3, #16
 80055f4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80055f6:	4313      	orrs	r3, r2
 80055f8:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80055fa:	0003      	movs	r3, r0
 80055fc:	2201      	movs	r2, #1
 80055fe:	3351      	adds	r3, #81	@ 0x51
 8005600:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 8005602:	f7ff ffee 	bl	80055e2 <HAL_SPI_ErrorCallback>
}
 8005606:	bd10      	pop	{r4, pc}

08005608 <SPI_DMAReceiveCplt>:
{
 8005608:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800560a:	0006      	movs	r6, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800560c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 800560e:	f7fd f8a8 	bl	8002762 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005612:	2120      	movs	r1, #32
 8005614:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
 8005616:	0005      	movs	r5, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	420b      	tst	r3, r1
 800561c:	d147      	bne.n	80056ae <SPI_DMAReceiveCplt+0xa6>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800561e:	6822      	ldr	r2, [r4, #0]
 8005620:	6853      	ldr	r3, [r2, #4]
 8005622:	438b      	bics	r3, r1
 8005624:	6053      	str	r3, [r2, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005626:	2380      	movs	r3, #128	@ 0x80
 8005628:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800562a:	019b      	lsls	r3, r3, #6
 800562c:	429a      	cmp	r2, r3
 800562e:	d10e      	bne.n	800564e <SPI_DMAReceiveCplt+0x46>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005630:	2201      	movs	r2, #1
 8005632:	9000      	str	r0, [sp, #0]
 8005634:	2364      	movs	r3, #100	@ 0x64
 8005636:	0011      	movs	r1, r2
 8005638:	0020      	movs	r0, r4
 800563a:	f7ff fc33 	bl	8004ea4 <SPI_WaitFlagStateUntilTimeout>
 800563e:	2800      	cmp	r0, #0
 8005640:	d003      	beq.n	800564a <SPI_DMAReceiveCplt+0x42>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005642:	2302      	movs	r3, #2
 8005644:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005646:	4313      	orrs	r3, r2
 8005648:	6563      	str	r3, [r4, #84]	@ 0x54
      READ_REG(hspi->Instance->DR);
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800564e:	68a2      	ldr	r2, [r4, #8]
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005650:	6823      	ldr	r3, [r4, #0]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005652:	2a00      	cmp	r2, #0
 8005654:	d128      	bne.n	80056a8 <SPI_DMAReceiveCplt+0xa0>
 8005656:	3205      	adds	r2, #5
 8005658:	6861      	ldr	r1, [r4, #4]
 800565a:	32ff      	adds	r2, #255	@ 0xff
 800565c:	4291      	cmp	r1, r2
 800565e:	d123      	bne.n	80056a8 <SPI_DMAReceiveCplt+0xa0>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005660:	2103      	movs	r1, #3
 8005662:	685a      	ldr	r2, [r3, #4]
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005664:	438a      	bics	r2, r1
 8005666:	605a      	str	r2, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005668:	2164      	movs	r1, #100	@ 0x64
 800566a:	002a      	movs	r2, r5
 800566c:	0020      	movs	r0, r4
 800566e:	f7ff fcaf 	bl	8004fd0 <SPI_EndRxTransaction>
 8005672:	2800      	cmp	r0, #0
 8005674:	d001      	beq.n	800567a <SPI_DMAReceiveCplt+0x72>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005676:	2320      	movs	r3, #32
 8005678:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->RxXferCount = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800567e:	0023      	movs	r3, r4
 8005680:	2201      	movs	r2, #1
 8005682:	3351      	adds	r3, #81	@ 0x51
 8005684:	701a      	strb	r2, [r3, #0]
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	6893      	ldr	r3, [r2, #8]
 800568a:	06db      	lsls	r3, r3, #27
 800568c:	d505      	bpl.n	800569a <SPI_DMAReceiveCplt+0x92>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800568e:	2302      	movs	r3, #2
 8005690:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8005692:	430b      	orrs	r3, r1
 8005694:	6563      	str	r3, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005696:	4b08      	ldr	r3, [pc, #32]	@ (80056b8 <SPI_DMAReceiveCplt+0xb0>)
 8005698:	6093      	str	r3, [r2, #8]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800569a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800569c:	2b00      	cmp	r3, #0
 800569e:	d006      	beq.n	80056ae <SPI_DMAReceiveCplt+0xa6>
      HAL_SPI_ErrorCallback(hspi);
 80056a0:	0020      	movs	r0, r4
 80056a2:	f7ff ff9e 	bl	80055e2 <HAL_SPI_ErrorCallback>
}
 80056a6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80056a8:	2101      	movs	r1, #1
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	e7da      	b.n	8005664 <SPI_DMAReceiveCplt+0x5c>
  HAL_SPI_RxCpltCallback(hspi);
 80056ae:	0020      	movs	r0, r4
 80056b0:	f7fc fbfe 	bl	8001eb0 <HAL_SPI_RxCpltCallback>
 80056b4:	e7f7      	b.n	80056a6 <SPI_DMAReceiveCplt+0x9e>
 80056b6:	46c0      	nop			@ (mov r8, r8)
 80056b8:	0000ffef 	.word	0x0000ffef

080056bc <SPI_DMATransmitReceiveCplt>:
{
 80056bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056be:	0006      	movs	r6, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056c0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 80056c2:	f7fd f84e 	bl	8002762 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80056c6:	2120      	movs	r1, #32
 80056c8:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
 80056ca:	0005      	movs	r5, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	420b      	tst	r3, r1
 80056d0:	d13e      	bne.n	8005750 <SPI_DMATransmitReceiveCplt+0x94>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80056d2:	6822      	ldr	r2, [r4, #0]
 80056d4:	6853      	ldr	r3, [r2, #4]
 80056d6:	438b      	bics	r3, r1
 80056d8:	6053      	str	r3, [r2, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056da:	2380      	movs	r3, #128	@ 0x80
 80056dc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80056de:	019b      	lsls	r3, r3, #6
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d10e      	bne.n	8005702 <SPI_DMATransmitReceiveCplt+0x46>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80056e4:	2201      	movs	r2, #1
 80056e6:	9000      	str	r0, [sp, #0]
 80056e8:	2364      	movs	r3, #100	@ 0x64
 80056ea:	0011      	movs	r1, r2
 80056ec:	0020      	movs	r0, r4
 80056ee:	f7ff fbd9 	bl	8004ea4 <SPI_WaitFlagStateUntilTimeout>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d003      	beq.n	80056fe <SPI_DMATransmitReceiveCplt+0x42>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80056f6:	2302      	movs	r3, #2
 80056f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80056fa:	4313      	orrs	r3, r2
 80056fc:	6563      	str	r3, [r4, #84]	@ 0x54
      READ_REG(hspi->Instance->DR);
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005702:	002a      	movs	r2, r5
 8005704:	2164      	movs	r1, #100	@ 0x64
 8005706:	0020      	movs	r0, r4
 8005708:	f7ff fc2e 	bl	8004f68 <SPI_EndRxTxTransaction>
 800570c:	2800      	cmp	r0, #0
 800570e:	d003      	beq.n	8005718 <SPI_DMATransmitReceiveCplt+0x5c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005710:	2320      	movs	r3, #32
 8005712:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005714:	4313      	orrs	r3, r2
 8005716:	6563      	str	r3, [r4, #84]	@ 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005718:	2103      	movs	r1, #3
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	438a      	bics	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
    hspi->TxXferCount = 0U;
 8005722:	2200      	movs	r2, #0
 8005724:	86e2      	strh	r2, [r4, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8005726:	87e2      	strh	r2, [r4, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005728:	0022      	movs	r2, r4
 800572a:	3902      	subs	r1, #2
 800572c:	3251      	adds	r2, #81	@ 0x51
 800572e:	7011      	strb	r1, [r2, #0]
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	06d2      	lsls	r2, r2, #27
 8005734:	d505      	bpl.n	8005742 <SPI_DMATransmitReceiveCplt+0x86>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005736:	2202      	movs	r2, #2
 8005738:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800573a:	430a      	orrs	r2, r1
 800573c:	6562      	str	r2, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800573e:	4a06      	ldr	r2, [pc, #24]	@ (8005758 <SPI_DMATransmitReceiveCplt+0x9c>)
 8005740:	609a      	str	r2, [r3, #8]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005742:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <SPI_DMATransmitReceiveCplt+0x94>
      HAL_SPI_ErrorCallback(hspi);
 8005748:	0020      	movs	r0, r4
 800574a:	f7ff ff4a 	bl	80055e2 <HAL_SPI_ErrorCallback>
}
 800574e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8005750:	0020      	movs	r0, r4
 8005752:	f7ff ff39 	bl	80055c8 <HAL_SPI_TxRxCpltCallback>
 8005756:	e7fa      	b.n	800574e <SPI_DMATransmitReceiveCplt+0x92>
 8005758:	0000ffef 	.word	0x0000ffef

0800575c <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 800575c:	6803      	ldr	r3, [r0, #0]
{
 800575e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005760:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8005762:	6858      	ldr	r0, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005764:	6899      	ldr	r1, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005766:	2501      	movs	r5, #1
 8005768:	098a      	lsrs	r2, r1, #6
 800576a:	0016      	movs	r6, r2
{
 800576c:	b085      	sub	sp, #20
 800576e:	402e      	ands	r6, r5
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005770:	422a      	tst	r2, r5
 8005772:	d108      	bne.n	8005786 <HAL_SPI_IRQHandler+0x2a>
 8005774:	4229      	tst	r1, r5
 8005776:	d006      	beq.n	8005786 <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005778:	0645      	lsls	r5, r0, #25
 800577a:	d504      	bpl.n	8005786 <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 800577c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hspi->TxISR(hspi);
 800577e:	0020      	movs	r0, r4
 8005780:	4798      	blx	r3
}
 8005782:	b005      	add	sp, #20
 8005784:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005786:	078d      	lsls	r5, r1, #30
 8005788:	d503      	bpl.n	8005792 <HAL_SPI_IRQHandler+0x36>
 800578a:	0605      	lsls	r5, r0, #24
 800578c:	d501      	bpl.n	8005792 <HAL_SPI_IRQHandler+0x36>
    hspi->TxISR(hspi);
 800578e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005790:	e7f5      	b.n	800577e <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005792:	2780      	movs	r7, #128	@ 0x80
 8005794:	094d      	lsrs	r5, r1, #5
 8005796:	007f      	lsls	r7, r7, #1
 8005798:	4039      	ands	r1, r7
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800579a:	432a      	orrs	r2, r5
 800579c:	3fff      	subs	r7, #255	@ 0xff
 800579e:	403a      	ands	r2, r7
 80057a0:	430a      	orrs	r2, r1
 80057a2:	d0ee      	beq.n	8005782 <HAL_SPI_IRQHandler+0x26>
 80057a4:	0682      	lsls	r2, r0, #26
 80057a6:	d5ec      	bpl.n	8005782 <HAL_SPI_IRQHandler+0x26>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80057a8:	2e00      	cmp	r6, #0
 80057aa:	d00f      	beq.n	80057cc <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80057ac:	0022      	movs	r2, r4
 80057ae:	3251      	adds	r2, #81	@ 0x51
 80057b0:	7812      	ldrb	r2, [r2, #0]
 80057b2:	2a03      	cmp	r2, #3
 80057b4:	d050      	beq.n	8005858 <HAL_SPI_IRQHandler+0xfc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80057b6:	2204      	movs	r2, #4
 80057b8:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 80057ba:	4332      	orrs	r2, r6
 80057bc:	6562      	str	r2, [r4, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057be:	2200      	movs	r2, #0
 80057c0:	9200      	str	r2, [sp, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	9200      	str	r2, [sp, #0]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	9200      	str	r2, [sp, #0]
 80057ca:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80057cc:	2201      	movs	r2, #1
 80057ce:	4215      	tst	r5, r2
 80057d0:	d00b      	beq.n	80057ea <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80057d2:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 80057d4:	432a      	orrs	r2, r5
 80057d6:	6562      	str	r2, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80057d8:	2200      	movs	r2, #0
 80057da:	2540      	movs	r5, #64	@ 0x40
 80057dc:	9202      	str	r2, [sp, #8]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	9202      	str	r2, [sp, #8]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	43aa      	bics	r2, r5
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80057ea:	2900      	cmp	r1, #0
 80057ec:	d008      	beq.n	8005800 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80057ee:	2208      	movs	r2, #8
 80057f0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80057f2:	430a      	orrs	r2, r1
 80057f4:	6562      	str	r2, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80057f6:	2200      	movs	r2, #0
 80057f8:	9203      	str	r2, [sp, #12]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	9203      	str	r2, [sp, #12]
 80057fe:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005800:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005802:	2a00      	cmp	r2, #0
 8005804:	d0bd      	beq.n	8005782 <HAL_SPI_IRQHandler+0x26>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005806:	21e0      	movs	r1, #224	@ 0xe0
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	438a      	bics	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800580e:	0022      	movs	r2, r4
 8005810:	39df      	subs	r1, #223	@ 0xdf
 8005812:	3251      	adds	r2, #81	@ 0x51
 8005814:	7011      	strb	r1, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005816:	3102      	adds	r1, #2
 8005818:	4208      	tst	r0, r1
 800581a:	d025      	beq.n	8005868 <HAL_SPI_IRQHandler+0x10c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800581c:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800581e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005820:	438a      	bics	r2, r1
 8005822:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005824:	2800      	cmp	r0, #0
 8005826:	d009      	beq.n	800583c <HAL_SPI_IRQHandler+0xe0>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005828:	4b11      	ldr	r3, [pc, #68]	@ (8005870 <HAL_SPI_IRQHandler+0x114>)
 800582a:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800582c:	f7fe f8b8 	bl	80039a0 <HAL_DMA_Abort_IT>
 8005830:	2800      	cmp	r0, #0
 8005832:	d003      	beq.n	800583c <HAL_SPI_IRQHandler+0xe0>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005834:	2340      	movs	r3, #64	@ 0x40
 8005836:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005838:	4313      	orrs	r3, r2
 800583a:	6563      	str	r3, [r4, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800583c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800583e:	2800      	cmp	r0, #0
 8005840:	d09f      	beq.n	8005782 <HAL_SPI_IRQHandler+0x26>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005842:	4b0b      	ldr	r3, [pc, #44]	@ (8005870 <HAL_SPI_IRQHandler+0x114>)
 8005844:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005846:	f7fe f8ab 	bl	80039a0 <HAL_DMA_Abort_IT>
 800584a:	2800      	cmp	r0, #0
 800584c:	d099      	beq.n	8005782 <HAL_SPI_IRQHandler+0x26>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800584e:	2340      	movs	r3, #64	@ 0x40
 8005850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005852:	4313      	orrs	r3, r2
 8005854:	6563      	str	r3, [r4, #84]	@ 0x54
 8005856:	e794      	b.n	8005782 <HAL_SPI_IRQHandler+0x26>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005858:	2200      	movs	r2, #0
 800585a:	9201      	str	r2, [sp, #4]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	9201      	str	r2, [sp, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	9b01      	ldr	r3, [sp, #4]
        return;
 8005866:	e78c      	b.n	8005782 <HAL_SPI_IRQHandler+0x26>
        HAL_SPI_ErrorCallback(hspi);
 8005868:	0020      	movs	r0, r4
 800586a:	f7ff feba 	bl	80055e2 <HAL_SPI_ErrorCallback>
 800586e:	e788      	b.n	8005782 <HAL_SPI_IRQHandler+0x26>
 8005870:	08005875 	.word	0x08005875

08005874 <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 8005874:	2300      	movs	r3, #0
{
 8005876:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005878:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  hspi->RxXferCount = 0U;
 800587a:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800587c:	86c3      	strh	r3, [r0, #54]	@ 0x36
  HAL_SPI_ErrorCallback(hspi);
 800587e:	f7ff feb0 	bl	80055e2 <HAL_SPI_ErrorCallback>
}
 8005882:	bd10      	pop	{r4, pc}

08005884 <HAL_SPI_GetState>:
  return hspi->State;
 8005884:	3051      	adds	r0, #81	@ 0x51
 8005886:	7800      	ldrb	r0, [r0, #0]
 8005888:	b2c0      	uxtb	r0, r0
}
 800588a:	4770      	bx	lr

0800588c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800588c:	6803      	ldr	r3, [r0, #0]
 800588e:	490b      	ldr	r1, [pc, #44]	@ (80058bc <UART_EndRxTransfer+0x30>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	400a      	ands	r2, r1
 8005894:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	3123      	adds	r1, #35	@ 0x23
 800589a:	31ff      	adds	r1, #255	@ 0xff
 800589c:	438a      	bics	r2, r1
 800589e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a0:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80058a2:	428a      	cmp	r2, r1
 80058a4:	d103      	bne.n	80058ae <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	310f      	adds	r1, #15
 80058aa:	438a      	bics	r2, r1
 80058ac:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058ae:	2320      	movs	r3, #32
 80058b0:	67c3      	str	r3, [r0, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b2:	2300      	movs	r3, #0
 80058b4:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058b6:	6643      	str	r3, [r0, #100]	@ 0x64
}
 80058b8:	4770      	bx	lr
 80058ba:	46c0      	nop			@ (mov r8, r8)
 80058bc:	fffffedf 	.word	0xfffffedf

080058c0 <HAL_UART_Transmit_DMA>:
{
 80058c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058c2:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80058c4:	6f82      	ldr	r2, [r0, #120]	@ 0x78
{
 80058c6:	0004      	movs	r4, r0
    __HAL_LOCK(huart);
 80058c8:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80058ca:	2a20      	cmp	r2, #32
 80058cc:	d104      	bne.n	80058d8 <HAL_UART_Transmit_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 80058ce:	2900      	cmp	r1, #0
 80058d0:	d001      	beq.n	80058d6 <HAL_UART_Transmit_DMA+0x16>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_UART_Transmit_DMA+0x1a>
      return HAL_ERROR;
 80058d6:	2001      	movs	r0, #1
}
 80058d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058da:	2280      	movs	r2, #128	@ 0x80
 80058dc:	68a0      	ldr	r0, [r4, #8]
 80058de:	0152      	lsls	r2, r2, #5
 80058e0:	4290      	cmp	r0, r2
 80058e2:	d104      	bne.n	80058ee <HAL_UART_Transmit_DMA+0x2e>
 80058e4:	6922      	ldr	r2, [r4, #16]
 80058e6:	2a00      	cmp	r2, #0
 80058e8:	d101      	bne.n	80058ee <HAL_UART_Transmit_DMA+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 80058ea:	07ca      	lsls	r2, r1, #31
 80058ec:	d4f3      	bmi.n	80058d6 <HAL_UART_Transmit_DMA+0x16>
    __HAL_LOCK(huart);
 80058ee:	0025      	movs	r5, r4
 80058f0:	3574      	adds	r5, #116	@ 0x74
 80058f2:	782a      	ldrb	r2, [r5, #0]
 80058f4:	2002      	movs	r0, #2
 80058f6:	2a01      	cmp	r2, #1
 80058f8:	d0ee      	beq.n	80058d8 <HAL_UART_Transmit_DMA+0x18>
 80058fa:	2201      	movs	r2, #1
 80058fc:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 80058fe:	0022      	movs	r2, r4
 8005900:	3250      	adds	r2, #80	@ 0x50
    huart->pTxBuffPtr  = pData;
 8005902:	64e1      	str	r1, [r4, #76]	@ 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005904:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8005906:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8005908:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800590a:	2221      	movs	r2, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590c:	1d27      	adds	r7, r4, #4
 800590e:	67fe      	str	r6, [r7, #124]	@ 0x7c
    if (huart->hdmatx != NULL)
 8005910:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005912:	67a2      	str	r2, [r4, #120]	@ 0x78
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005914:	6822      	ldr	r2, [r4, #0]
 8005916:	9201      	str	r2, [sp, #4]
    if (huart->hdmatx != NULL)
 8005918:	42b0      	cmp	r0, r6
 800591a:	d012      	beq.n	8005942 <HAL_UART_Transmit_DMA+0x82>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800591c:	4a0e      	ldr	r2, [pc, #56]	@ (8005958 <HAL_UART_Transmit_DMA+0x98>)
      huart->hdmatx->XferAbortCallback = NULL;
 800591e:	6386      	str	r6, [r0, #56]	@ 0x38
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005920:	62c2      	str	r2, [r0, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005922:	4a0e      	ldr	r2, [pc, #56]	@ (800595c <HAL_UART_Transmit_DMA+0x9c>)
 8005924:	6302      	str	r2, [r0, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005926:	4a0e      	ldr	r2, [pc, #56]	@ (8005960 <HAL_UART_Transmit_DMA+0xa0>)
 8005928:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800592a:	9a01      	ldr	r2, [sp, #4]
 800592c:	3228      	adds	r2, #40	@ 0x28
 800592e:	f7fd ffd9 	bl	80038e4 <HAL_DMA_Start_IT>
 8005932:	42b0      	cmp	r0, r6
 8005934:	d005      	beq.n	8005942 <HAL_UART_Transmit_DMA+0x82>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005936:	2310      	movs	r3, #16
 8005938:	67fb      	str	r3, [r7, #124]	@ 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800593a:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 800593c:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 800593e:	67a3      	str	r3, [r4, #120]	@ 0x78
        return HAL_ERROR;
 8005940:	e7c9      	b.n	80058d6 <HAL_UART_Transmit_DMA+0x16>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005942:	2240      	movs	r2, #64	@ 0x40
    __HAL_UNLOCK(huart);
 8005944:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005946:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8005948:	3474      	adds	r4, #116	@ 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800594a:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800594c:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800594e:	6899      	ldr	r1, [r3, #8]
 8005950:	1892      	adds	r2, r2, r2
 8005952:	430a      	orrs	r2, r1
 8005954:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8005956:	e7bf      	b.n	80058d8 <HAL_UART_Transmit_DMA+0x18>
 8005958:	08005965 	.word	0x08005965
 800595c:	0800599b 	.word	0x0800599b
 8005960:	080059a7 	.word	0x080059a7

08005964 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005964:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005966:	681b      	ldr	r3, [r3, #0]
{
 8005968:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	2320      	movs	r3, #32
 800596e:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005970:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005972:	4019      	ands	r1, r3
 8005974:	421a      	tst	r2, r3
 8005976:	d10c      	bne.n	8005992 <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 8005978:	0003      	movs	r3, r0
 800597a:	3352      	adds	r3, #82	@ 0x52
 800597c:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800597e:	2180      	movs	r1, #128	@ 0x80
 8005980:	6803      	ldr	r3, [r0, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	438a      	bics	r2, r1
 8005986:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005988:	2240      	movs	r2, #64	@ 0x40
 800598a:	6819      	ldr	r1, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005990:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8005992:	f7fd f81f 	bl	80029d4 <HAL_UART_TxCpltCallback>
}
 8005996:	e7fb      	b.n	8005990 <UART_DMATransmitCplt+0x2c>

08005998 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8005998:	4770      	bx	lr

0800599a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800599a:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800599c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800599e:	f7ff fffb 	bl	8005998 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059a2:	bd10      	pop	{r4, pc}

080059a4 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80059a4:	4770      	bx	lr

080059a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059a6:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059a8:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80059aa:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80059ac:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80059ae:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	0612      	lsls	r2, r2, #24
 80059b4:	d50b      	bpl.n	80059ce <UART_DMAError+0x28>
 80059b6:	2821      	cmp	r0, #33	@ 0x21
 80059b8:	d109      	bne.n	80059ce <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80059ba:	0022      	movs	r2, r4
 80059bc:	2000      	movs	r0, #0
 80059be:	3252      	adds	r2, #82	@ 0x52
 80059c0:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	30c0      	adds	r0, #192	@ 0xc0
 80059c6:	4382      	bics	r2, r0
 80059c8:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80059ca:	2220      	movs	r2, #32
 80059cc:	67a2      	str	r2, [r4, #120]	@ 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	065b      	lsls	r3, r3, #25
 80059d2:	d508      	bpl.n	80059e6 <UART_DMAError+0x40>
 80059d4:	2922      	cmp	r1, #34	@ 0x22
 80059d6:	d106      	bne.n	80059e6 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80059d8:	0023      	movs	r3, r4
 80059da:	2200      	movs	r2, #0
 80059dc:	335a      	adds	r3, #90	@ 0x5a
    UART_EndRxTransfer(huart);
 80059de:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 80059e0:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 80059e2:	f7ff ff53 	bl	800588c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059e6:	2310      	movs	r3, #16
 80059e8:	1d22      	adds	r2, r4, #4
 80059ea:	6fd1      	ldr	r1, [r2, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059ec:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059ee:	430b      	orrs	r3, r1
 80059f0:	67d3      	str	r3, [r2, #124]	@ 0x7c
  HAL_UART_ErrorCallback(huart);
 80059f2:	f7ff ffd7 	bl	80059a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059f6:	bd10      	pop	{r4, pc}

080059f8 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059f8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	0002      	movs	r2, r0
{
 80059fe:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8005a00:	325a      	adds	r2, #90	@ 0x5a
 8005a02:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8005a04:	3a08      	subs	r2, #8
 8005a06:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a08:	f7ff ffcc 	bl	80059a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a0c:	bd10      	pop	{r4, pc}

08005a0e <HAL_UARTEx_RxEventCallback>:
}
 8005a0e:	4770      	bx	lr

08005a10 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a10:	6803      	ldr	r3, [r0, #0]
{
 8005a12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a14:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a16:	4a85      	ldr	r2, [pc, #532]	@ (8005c2c <HAL_UART_IRQHandler+0x21c>)
{
 8005a18:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a1a:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a1c:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8005a1e:	4211      	tst	r1, r2
 8005a20:	d10b      	bne.n	8005a3a <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a22:	2220      	movs	r2, #32
 8005a24:	4211      	tst	r1, r2
 8005a26:	d100      	bne.n	8005a2a <HAL_UART_IRQHandler+0x1a>
 8005a28:	e076      	b.n	8005b18 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a2a:	4210      	tst	r0, r2
 8005a2c:	d100      	bne.n	8005a30 <HAL_UART_IRQHandler+0x20>
 8005a2e:	e073      	b.n	8005b18 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8005a30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
      huart->TxISR(huart);
 8005a32:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d165      	bne.n	8005b04 <HAL_UART_IRQHandler+0xf4>
 8005a38:	e065      	b.n	8005b06 <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a3e:	4d7c      	ldr	r5, [pc, #496]	@ (8005c30 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a40:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a42:	4005      	ands	r5, r0
 8005a44:	433d      	orrs	r5, r7
 8005a46:	d067      	beq.n	8005b18 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a48:	1d25      	adds	r5, r4, #4
 8005a4a:	4211      	tst	r1, r2
 8005a4c:	d005      	beq.n	8005a5a <HAL_UART_IRQHandler+0x4a>
 8005a4e:	05c6      	lsls	r6, r0, #23
 8005a50:	d503      	bpl.n	8005a5a <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a52:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a54:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8005a56:	4332      	orrs	r2, r6
 8005a58:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	4211      	tst	r1, r2
 8005a5e:	d006      	beq.n	8005a6e <HAL_UART_IRQHandler+0x5e>
 8005a60:	2f00      	cmp	r7, #0
 8005a62:	d004      	beq.n	8005a6e <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a64:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a66:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8005a68:	1892      	adds	r2, r2, r2
 8005a6a:	4332      	orrs	r2, r6
 8005a6c:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a6e:	2204      	movs	r2, #4
 8005a70:	4211      	tst	r1, r2
 8005a72:	d006      	beq.n	8005a82 <HAL_UART_IRQHandler+0x72>
 8005a74:	2f00      	cmp	r7, #0
 8005a76:	d004      	beq.n	8005a82 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a78:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a7a:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8005a7c:	3a02      	subs	r2, #2
 8005a7e:	4332      	orrs	r2, r6
 8005a80:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a82:	2208      	movs	r2, #8
 8005a84:	4211      	tst	r1, r2
 8005a86:	d007      	beq.n	8005a98 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a88:	2620      	movs	r6, #32
 8005a8a:	4006      	ands	r6, r0
 8005a8c:	433e      	orrs	r6, r7
 8005a8e:	d003      	beq.n	8005a98 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a90:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a92:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8005a94:	4332      	orrs	r2, r6
 8005a96:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a98:	2280      	movs	r2, #128	@ 0x80
 8005a9a:	0112      	lsls	r2, r2, #4
 8005a9c:	4211      	tst	r1, r2
 8005a9e:	d006      	beq.n	8005aae <HAL_UART_IRQHandler+0x9e>
 8005aa0:	0146      	lsls	r6, r0, #5
 8005aa2:	d504      	bpl.n	8005aae <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aa4:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005aa6:	2320      	movs	r3, #32
 8005aa8:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aae:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d028      	beq.n	8005b06 <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ab4:	2320      	movs	r3, #32
 8005ab6:	4219      	tst	r1, r3
 8005ab8:	d006      	beq.n	8005ac8 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005aba:	4218      	tst	r0, r3
 8005abc:	d004      	beq.n	8005ac8 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8005abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8005ac4:	0020      	movs	r0, r4
 8005ac6:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ac8:	2240      	movs	r2, #64	@ 0x40
 8005aca:	6827      	ldr	r7, [r4, #0]
      errorcode = huart->ErrorCode;
 8005acc:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ace:	68be      	ldr	r6, [r7, #8]
        UART_EndRxTransfer(huart);
 8005ad0:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ad2:	4016      	ands	r6, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ad4:	3a18      	subs	r2, #24
 8005ad6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ad8:	431e      	orrs	r6, r3
 8005ada:	d019      	beq.n	8005b10 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8005adc:	f7ff fed6 	bl	800588c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	2240      	movs	r2, #64	@ 0x40
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	4213      	tst	r3, r2
 8005ae6:	d00f      	beq.n	8005b08 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
          if (huart->hdmarx != NULL)
 8005aea:	6f20      	ldr	r0, [r4, #112]	@ 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aec:	4393      	bics	r3, r2
 8005aee:	60bb      	str	r3, [r7, #8]
          if (huart->hdmarx != NULL)
 8005af0:	2800      	cmp	r0, #0
 8005af2:	d009      	beq.n	8005b08 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005af4:	4b4f      	ldr	r3, [pc, #316]	@ (8005c34 <HAL_UART_IRQHandler+0x224>)
 8005af6:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005af8:	f7fd ff52 	bl	80039a0 <HAL_DMA_Abort_IT>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	d002      	beq.n	8005b06 <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b00:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005b02:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005b04:	4798      	blx	r3
}
 8005b06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8005b08:	0020      	movs	r0, r4
 8005b0a:	f7ff ff4b 	bl	80059a4 <HAL_UART_ErrorCallback>
 8005b0e:	e7fa      	b.n	8005b06 <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8005b10:	f7ff ff48 	bl	80059a4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b14:	67ee      	str	r6, [r5, #124]	@ 0x7c
 8005b16:	e7f6      	b.n	8005b06 <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b18:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8005b1a:	2d01      	cmp	r5, #1
 8005b1c:	d161      	bne.n	8005be2 <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005b1e:	2210      	movs	r2, #16
 8005b20:	4211      	tst	r1, r2
 8005b22:	d05e      	beq.n	8005be2 <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005b24:	4210      	tst	r0, r2
 8005b26:	d05c      	beq.n	8005be2 <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b28:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2a:	6899      	ldr	r1, [r3, #8]
 8005b2c:	2640      	movs	r6, #64	@ 0x40
 8005b2e:	000f      	movs	r7, r1
 8005b30:	4037      	ands	r7, r6
 8005b32:	4231      	tst	r1, r6
 8005b34:	d038      	beq.n	8005ba8 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b36:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8005b38:	680f      	ldr	r7, [r1, #0]
 8005b3a:	9100      	str	r1, [sp, #0]
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 8005b40:	2900      	cmp	r1, #0
 8005b42:	d0e0      	beq.n	8005b06 <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005b44:	2058      	movs	r0, #88	@ 0x58
 8005b46:	4684      	mov	ip, r0
 8005b48:	44a4      	add	ip, r4
 8005b4a:	4660      	mov	r0, ip
 8005b4c:	8800      	ldrh	r0, [r0, #0]
 8005b4e:	4288      	cmp	r0, r1
 8005b50:	d9d9      	bls.n	8005b06 <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 8005b52:	205a      	movs	r0, #90	@ 0x5a
 8005b54:	4684      	mov	ip, r0
 8005b56:	44a4      	add	ip, r4
 8005b58:	4660      	mov	r0, ip
 8005b5a:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b5c:	683f      	ldr	r7, [r7, #0]
 8005b5e:	2120      	movs	r1, #32
 8005b60:	0038      	movs	r0, r7
 8005b62:	4008      	ands	r0, r1
 8005b64:	9001      	str	r0, [sp, #4]
 8005b66:	420f      	tst	r7, r1
 8005b68:	d112      	bne.n	8005b90 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b6a:	681f      	ldr	r7, [r3, #0]
 8005b6c:	4832      	ldr	r0, [pc, #200]	@ (8005c38 <HAL_UART_IRQHandler+0x228>)
 8005b6e:	4007      	ands	r7, r0
 8005b70:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b72:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b74:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b76:	43af      	bics	r7, r5
 8005b78:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b7a:	689d      	ldr	r5, [r3, #8]
 8005b7c:	43b5      	bics	r5, r6
 8005b7e:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8005b80:	67e1      	str	r1, [r4, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b82:	9901      	ldr	r1, [sp, #4]
 8005b84:	6621      	str	r1, [r4, #96]	@ 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b86:	6819      	ldr	r1, [r3, #0]
 8005b88:	4391      	bics	r1, r2
 8005b8a:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b8c:	f7fd fee8 	bl	8003960 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b90:	0023      	movs	r3, r4
 8005b92:	0022      	movs	r2, r4
 8005b94:	335a      	adds	r3, #90	@ 0x5a
 8005b96:	3258      	adds	r2, #88	@ 0x58
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	8811      	ldrh	r1, [r2, #0]
 8005b9c:	1ac9      	subs	r1, r1, r3
 8005b9e:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ba0:	0020      	movs	r0, r4
 8005ba2:	f7ff ff34 	bl	8005a0e <HAL_UARTEx_RxEventCallback>
 8005ba6:	e7ae      	b.n	8005b06 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ba8:	0026      	movs	r6, r4
 8005baa:	0021      	movs	r1, r4
 8005bac:	365a      	adds	r6, #90	@ 0x5a
 8005bae:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 8005bb0:	8836      	ldrh	r6, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bb2:	3158      	adds	r1, #88	@ 0x58
 8005bb4:	8809      	ldrh	r1, [r1, #0]
 8005bb6:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8005bb8:	2e00      	cmp	r6, #0
 8005bba:	d0a4      	beq.n	8005b06 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bbc:	1a09      	subs	r1, r1, r0
 8005bbe:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8005bc0:	2900      	cmp	r1, #0
 8005bc2:	d0a0      	beq.n	8005b06 <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	4e1d      	ldr	r6, [pc, #116]	@ (8005c3c <HAL_UART_IRQHandler+0x22c>)
 8005bc8:	4030      	ands	r0, r6
 8005bca:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bcc:	6898      	ldr	r0, [r3, #8]
 8005bce:	43a8      	bics	r0, r5
 8005bd0:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	2020      	movs	r0, #32
 8005bd4:	67e0      	str	r0, [r4, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd6:	6627      	str	r7, [r4, #96]	@ 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd8:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 8005bda:	6667      	str	r7, [r4, #100]	@ 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bdc:	4390      	bics	r0, r2
 8005bde:	6018      	str	r0, [r3, #0]
 8005be0:	e7de      	b.n	8005ba0 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005be2:	2280      	movs	r2, #128	@ 0x80
 8005be4:	0352      	lsls	r2, r2, #13
 8005be6:	4211      	tst	r1, r2
 8005be8:	d006      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x1e8>
 8005bea:	0276      	lsls	r6, r6, #9
 8005bec:	d504      	bpl.n	8005bf8 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 8005bee:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bf0:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005bf2:	f000 fb3b 	bl	800626c <HAL_UARTEx_WakeupCallback>
    return;
 8005bf6:	e786      	b.n	8005b06 <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bf8:	2280      	movs	r2, #128	@ 0x80
 8005bfa:	4211      	tst	r1, r2
 8005bfc:	d003      	beq.n	8005c06 <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bfe:	4210      	tst	r0, r2
 8005c00:	d001      	beq.n	8005c06 <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 8005c02:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8005c04:	e715      	b.n	8005a32 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c06:	2540      	movs	r5, #64	@ 0x40
 8005c08:	4229      	tst	r1, r5
 8005c0a:	d100      	bne.n	8005c0e <HAL_UART_IRQHandler+0x1fe>
 8005c0c:	e77b      	b.n	8005b06 <HAL_UART_IRQHandler+0xf6>
 8005c0e:	4228      	tst	r0, r5
 8005c10:	d100      	bne.n	8005c14 <HAL_UART_IRQHandler+0x204>
 8005c12:	e778      	b.n	8005b06 <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c14:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c16:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c18:	43aa      	bics	r2, r5
 8005c1a:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005c1c:	2320      	movs	r3, #32
 8005c1e:	67a3      	str	r3, [r4, #120]	@ 0x78
  huart->TxISR = NULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	66a3      	str	r3, [r4, #104]	@ 0x68
  HAL_UART_TxCpltCallback(huart);
 8005c24:	f7fc fed6 	bl	80029d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c28:	e76d      	b.n	8005b06 <HAL_UART_IRQHandler+0xf6>
 8005c2a:	46c0      	nop			@ (mov r8, r8)
 8005c2c:	0000080f 	.word	0x0000080f
 8005c30:	04000120 	.word	0x04000120
 8005c34:	080059f9 	.word	0x080059f9
 8005c38:	fffffeff 	.word	0xfffffeff
 8005c3c:	fffffedf 	.word	0xfffffedf

08005c40 <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 8005c40:	0003      	movs	r3, r0
{
 8005c42:	b510      	push	{r4, lr}
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c44:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
  uint16_t uhMask = huart->Mask;
 8005c46:	335c      	adds	r3, #92	@ 0x5c
 8005c48:	881a      	ldrh	r2, [r3, #0]
{
 8005c4a:	0004      	movs	r4, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c4c:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c4e:	2922      	cmp	r1, #34	@ 0x22
 8005c50:	d131      	bne.n	8005cb6 <UART_RxISR_8BIT+0x76>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c54:	6d41      	ldr	r1, [r0, #84]	@ 0x54
 8005c56:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8005c58:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c5a:	700b      	strb	r3, [r1, #0]
    huart->pRxBuffPtr++;
 8005c5c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8005c5e:	325a      	adds	r2, #90	@ 0x5a
    huart->pRxBuffPtr++;
 8005c60:	3301      	adds	r3, #1
 8005c62:	6543      	str	r3, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8005c64:	8813      	ldrh	r3, [r2, #0]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8005c6c:	8813      	ldrh	r3, [r2, #0]
 8005c6e:	b299      	uxth	r1, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11b      	bne.n	8005cac <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c74:	6803      	ldr	r3, [r0, #0]
 8005c76:	4812      	ldr	r0, [pc, #72]	@ (8005cc0 <UART_RxISR_8BIT+0x80>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4002      	ands	r2, r0
 8005c7c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	3023      	adds	r0, #35	@ 0x23
 8005c82:	30ff      	adds	r0, #255	@ 0xff
 8005c84:	4382      	bics	r2, r0
 8005c86:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c88:	2220      	movs	r2, #32
 8005c8a:	67e2      	str	r2, [r4, #124]	@ 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      huart->RxISR = NULL;
 8005c8e:	6661      	str	r1, [r4, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c90:	4282      	cmp	r2, r0
 8005c92:	d10c      	bne.n	8005cae <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c94:	2110      	movs	r1, #16
 8005c96:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c98:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9a:	438a      	bics	r2, r1
 8005c9c:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c9e:	0023      	movs	r3, r4
 8005ca0:	3358      	adds	r3, #88	@ 0x58
 8005ca2:	8819      	ldrh	r1, [r3, #0]
 8005ca4:	f7ff feb3 	bl	8005a0e <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	6623      	str	r3, [r4, #96]	@ 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cac:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8005cae:	0020      	movs	r0, r4
 8005cb0:	f7fc fe98 	bl	80029e4 <HAL_UART_RxCpltCallback>
 8005cb4:	e7f8      	b.n	8005ca8 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cb6:	2208      	movs	r2, #8
 8005cb8:	6999      	ldr	r1, [r3, #24]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	619a      	str	r2, [r3, #24]
}
 8005cbe:	e7f5      	b.n	8005cac <UART_RxISR_8BIT+0x6c>
 8005cc0:	fffffedf 	.word	0xfffffedf

08005cc4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	0004      	movs	r4, r0
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005cc8:	0003      	movs	r3, r0
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cca:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
  uint16_t uhMask = huart->Mask;
 8005ccc:	335c      	adds	r3, #92	@ 0x5c
 8005cce:	8818      	ldrh	r0, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cd0:	6823      	ldr	r3, [r4, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cd2:	2a22      	cmp	r2, #34	@ 0x22
 8005cd4:	d12f      	bne.n	8005d36 <UART_RxISR_16BIT+0x72>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cd6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005cd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8005cda:	4001      	ands	r1, r0
 8005cdc:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8005cde:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 8005ce0:	3202      	adds	r2, #2
    huart->RxXferCount--;
 8005ce2:	315a      	adds	r1, #90	@ 0x5a
    huart->pRxBuffPtr += 2U;
 8005ce4:	6562      	str	r2, [r4, #84]	@ 0x54
    huart->RxXferCount--;
 8005ce6:	880a      	ldrh	r2, [r1, #0]
 8005ce8:	3a01      	subs	r2, #1
 8005cea:	b292      	uxth	r2, r2
 8005cec:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8005cee:	880a      	ldrh	r2, [r1, #0]
 8005cf0:	b291      	uxth	r1, r2
 8005cf2:	2a00      	cmp	r2, #0
 8005cf4:	d11a      	bne.n	8005d2c <UART_RxISR_16BIT+0x68>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	4811      	ldr	r0, [pc, #68]	@ (8005d40 <UART_RxISR_16BIT+0x7c>)
 8005cfa:	4002      	ands	r2, r0
 8005cfc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	3023      	adds	r0, #35	@ 0x23
 8005d02:	30ff      	adds	r0, #255	@ 0xff
 8005d04:	4382      	bics	r2, r0
 8005d06:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d08:	2220      	movs	r2, #32
 8005d0a:	67e2      	str	r2, [r4, #124]	@ 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d0c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      huart->RxISR = NULL;
 8005d0e:	6661      	str	r1, [r4, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d10:	4282      	cmp	r2, r0
 8005d12:	d10c      	bne.n	8005d2e <UART_RxISR_16BIT+0x6a>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d14:	2110      	movs	r1, #16
 8005d16:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d18:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d1a:	438a      	bics	r2, r1
 8005d1c:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d1e:	0023      	movs	r3, r4
 8005d20:	3358      	adds	r3, #88	@ 0x58
 8005d22:	8819      	ldrh	r1, [r3, #0]
 8005d24:	f7ff fe73 	bl	8005a0e <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	6623      	str	r3, [r4, #96]	@ 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d2c:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8005d2e:	0020      	movs	r0, r4
 8005d30:	f7fc fe58 	bl	80029e4 <HAL_UART_RxCpltCallback>
 8005d34:	e7f8      	b.n	8005d28 <UART_RxISR_16BIT+0x64>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d36:	2208      	movs	r2, #8
 8005d38:	6999      	ldr	r1, [r3, #24]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	619a      	str	r2, [r3, #24]
}
 8005d3e:	e7f5      	b.n	8005d2c <UART_RxISR_16BIT+0x68>
 8005d40:	fffffedf 	.word	0xfffffedf

08005d44 <UART_SetConfig>:
{
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d48:	6925      	ldr	r5, [r4, #16]
 8005d4a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d4c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d4e:	4329      	orrs	r1, r5
 8005d50:	6965      	ldr	r5, [r4, #20]
 8005d52:	69c3      	ldr	r3, [r0, #28]
 8005d54:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d56:	6810      	ldr	r0, [r2, #0]
 8005d58:	4d6f      	ldr	r5, [pc, #444]	@ (8005f18 <UART_SetConfig+0x1d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d5a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d5c:	4028      	ands	r0, r5
 8005d5e:	4301      	orrs	r1, r0
 8005d60:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d62:	6851      	ldr	r1, [r2, #4]
 8005d64:	486d      	ldr	r0, [pc, #436]	@ (8005f1c <UART_SetConfig+0x1d8>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d66:	4d6e      	ldr	r5, [pc, #440]	@ (8005f20 <UART_SetConfig+0x1dc>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d68:	4001      	ands	r1, r0
 8005d6a:	68e0      	ldr	r0, [r4, #12]
 8005d6c:	4301      	orrs	r1, r0
 8005d6e:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d70:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d72:	42aa      	cmp	r2, r5
 8005d74:	d001      	beq.n	8005d7a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8005d76:	6a21      	ldr	r1, [r4, #32]
 8005d78:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d7a:	6891      	ldr	r1, [r2, #8]
 8005d7c:	4e69      	ldr	r6, [pc, #420]	@ (8005f24 <UART_SetConfig+0x1e0>)
 8005d7e:	4031      	ands	r1, r6
 8005d80:	4301      	orrs	r1, r0
 8005d82:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d84:	4968      	ldr	r1, [pc, #416]	@ (8005f28 <UART_SetConfig+0x1e4>)
 8005d86:	428a      	cmp	r2, r1
 8005d88:	d114      	bne.n	8005db4 <UART_SetConfig+0x70>
 8005d8a:	2103      	movs	r1, #3
 8005d8c:	2080      	movs	r0, #128	@ 0x80
 8005d8e:	4a67      	ldr	r2, [pc, #412]	@ (8005f2c <UART_SetConfig+0x1e8>)
 8005d90:	0200      	lsls	r0, r0, #8
 8005d92:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005d94:	400a      	ands	r2, r1
 8005d96:	2a02      	cmp	r2, #2
 8005d98:	d100      	bne.n	8005d9c <UART_SetConfig+0x58>
 8005d9a:	e079      	b.n	8005e90 <UART_SetConfig+0x14c>
 8005d9c:	428a      	cmp	r2, r1
 8005d9e:	d100      	bne.n	8005da2 <UART_SetConfig+0x5e>
 8005da0:	e09d      	b.n	8005ede <UART_SetConfig+0x19a>
 8005da2:	2a01      	cmp	r2, #1
 8005da4:	d100      	bne.n	8005da8 <UART_SetConfig+0x64>
 8005da6:	e093      	b.n	8005ed0 <UART_SetConfig+0x18c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005da8:	4283      	cmp	r3, r0
 8005daa:	d100      	bne.n	8005dae <UART_SetConfig+0x6a>
 8005dac:	e09a      	b.n	8005ee4 <UART_SetConfig+0x1a0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dae:	f7fe fc1f 	bl	80045f0 <HAL_RCC_GetPCLK2Freq>
        break;
 8005db2:	e063      	b.n	8005e7c <UART_SetConfig+0x138>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005db4:	495e      	ldr	r1, [pc, #376]	@ (8005f30 <UART_SetConfig+0x1ec>)
 8005db6:	428a      	cmp	r2, r1
 8005db8:	d117      	bne.n	8005dea <UART_SetConfig+0xa6>
 8005dba:	210c      	movs	r1, #12
 8005dbc:	4a5b      	ldr	r2, [pc, #364]	@ (8005f2c <UART_SetConfig+0x1e8>)
 8005dbe:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005dc0:	400a      	ands	r2, r1
 8005dc2:	2a08      	cmp	r2, #8
 8005dc4:	d100      	bne.n	8005dc8 <UART_SetConfig+0x84>
 8005dc6:	e090      	b.n	8005eea <UART_SetConfig+0x1a6>
 8005dc8:	d80a      	bhi.n	8005de0 <UART_SetConfig+0x9c>
 8005dca:	2a00      	cmp	r2, #0
 8005dcc:	d159      	bne.n	8005e82 <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dce:	2280      	movs	r2, #128	@ 0x80
 8005dd0:	0212      	lsls	r2, r2, #8
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d150      	bne.n	8005e78 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd6:	f7fe fbfb 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8005dda:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8005ddc:	d047      	beq.n	8005e6e <UART_SetConfig+0x12a>
 8005dde:	e061      	b.n	8005ea4 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005de0:	2a0c      	cmp	r2, #12
 8005de2:	d100      	bne.n	8005de6 <UART_SetConfig+0xa2>
 8005de4:	e079      	b.n	8005eda <UART_SetConfig+0x196>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005de6:	2001      	movs	r0, #1
 8005de8:	e042      	b.n	8005e70 <UART_SetConfig+0x12c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dea:	4952      	ldr	r1, [pc, #328]	@ (8005f34 <UART_SetConfig+0x1f0>)
 8005dec:	428a      	cmp	r2, r1
 8005dee:	d0ee      	beq.n	8005dce <UART_SetConfig+0x8a>
 8005df0:	4951      	ldr	r1, [pc, #324]	@ (8005f38 <UART_SetConfig+0x1f4>)
 8005df2:	428a      	cmp	r2, r1
 8005df4:	d0eb      	beq.n	8005dce <UART_SetConfig+0x8a>
 8005df6:	42aa      	cmp	r2, r5
 8005df8:	d1f5      	bne.n	8005de6 <UART_SetConfig+0xa2>
 8005dfa:	21c0      	movs	r1, #192	@ 0xc0
 8005dfc:	2080      	movs	r0, #128	@ 0x80
 8005dfe:	4a4b      	ldr	r2, [pc, #300]	@ (8005f2c <UART_SetConfig+0x1e8>)
 8005e00:	0109      	lsls	r1, r1, #4
 8005e02:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005e04:	0100      	lsls	r0, r0, #4
 8005e06:	400b      	ands	r3, r1
 8005e08:	4283      	cmp	r3, r0
 8005e0a:	d00a      	beq.n	8005e22 <UART_SetConfig+0xde>
 8005e0c:	d804      	bhi.n	8005e18 <UART_SetConfig+0xd4>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d129      	bne.n	8005e66 <UART_SetConfig+0x122>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e12:	f7fe fbdd 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
        break;
 8005e16:	e028      	b.n	8005e6a <UART_SetConfig+0x126>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e18:	428b      	cmp	r3, r1
 8005e1a:	d1e4      	bne.n	8005de6 <UART_SetConfig+0xa2>
 8005e1c:	2080      	movs	r0, #128	@ 0x80
 8005e1e:	0200      	lsls	r0, r0, #8
 8005e20:	e006      	b.n	8005e30 <UART_SetConfig+0xec>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e22:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 8005e24:	4b45      	ldr	r3, [pc, #276]	@ (8005f3c <UART_SetConfig+0x1f8>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e26:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8005e28:	17c0      	asrs	r0, r0, #31
 8005e2a:	4018      	ands	r0, r3
 8005e2c:	4b44      	ldr	r3, [pc, #272]	@ (8005f40 <UART_SetConfig+0x1fc>)
 8005e2e:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e30:	2303      	movs	r3, #3
 8005e32:	6862      	ldr	r2, [r4, #4]
 8005e34:	4353      	muls	r3, r2
 8005e36:	4298      	cmp	r0, r3
 8005e38:	d3d5      	bcc.n	8005de6 <UART_SetConfig+0xa2>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e3a:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e3c:	4298      	cmp	r0, r3
 8005e3e:	d8d2      	bhi.n	8005de6 <UART_SetConfig+0xa2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e40:	2100      	movs	r1, #0
 8005e42:	0e07      	lsrs	r7, r0, #24
 8005e44:	0206      	lsls	r6, r0, #8
 8005e46:	0850      	lsrs	r0, r2, #1
 8005e48:	1836      	adds	r6, r6, r0
 8005e4a:	414f      	adcs	r7, r1
 8005e4c:	000b      	movs	r3, r1
 8005e4e:	0030      	movs	r0, r6
 8005e50:	0039      	movs	r1, r7
 8005e52:	f7fa fb3d 	bl	80004d0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e56:	4b3b      	ldr	r3, [pc, #236]	@ (8005f44 <UART_SetConfig+0x200>)
 8005e58:	18c2      	adds	r2, r0, r3
 8005e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f48 <UART_SetConfig+0x204>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d8c2      	bhi.n	8005de6 <UART_SetConfig+0xa2>
        huart->Instance->BRR = usartdiv;
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	60d8      	str	r0, [r3, #12]
 8005e64:	e003      	b.n	8005e6e <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetSysClockFreq();
 8005e66:	f7fe f811 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d1e0      	bne.n	8005e30 <UART_SetConfig+0xec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e6e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	6663      	str	r3, [r4, #100]	@ 0x64
  huart->TxISR = NULL;
 8005e74:	66a3      	str	r3, [r4, #104]	@ 0x68
}
 8005e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e78:	f7fe fbaa 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d0f6      	beq.n	8005e6e <UART_SetConfig+0x12a>
 8005e80:	e03f      	b.n	8005f02 <UART_SetConfig+0x1be>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e82:	2280      	movs	r2, #128	@ 0x80
 8005e84:	0212      	lsls	r2, r2, #8
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d124      	bne.n	8005ed4 <UART_SetConfig+0x190>
        pclk = HAL_RCC_GetSysClockFreq();
 8005e8a:	f7fd ffff 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8005e8e:	e7a4      	b.n	8005dda <UART_SetConfig+0x96>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e90:	4283      	cmp	r3, r0
 8005e92:	d12e      	bne.n	8005ef2 <UART_SetConfig+0x1ae>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e94:	4b25      	ldr	r3, [pc, #148]	@ (8005f2c <UART_SetConfig+0x1e8>)
          pclk = (uint32_t) HSI_VALUE;
 8005e96:	4a29      	ldr	r2, [pc, #164]	@ (8005f3c <UART_SetConfig+0x1f8>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	06db      	lsls	r3, r3, #27
          pclk = (uint32_t) HSI_VALUE;
 8005e9c:	17db      	asrs	r3, r3, #31
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	4a27      	ldr	r2, [pc, #156]	@ (8005f40 <UART_SetConfig+0x1fc>)
 8005ea2:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ea4:	6861      	ldr	r1, [r4, #4]
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	0848      	lsrs	r0, r1, #1
 8005eaa:	1818      	adds	r0, r3, r0
 8005eac:	f7fa f95c 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb0:	4926      	ldr	r1, [pc, #152]	@ (8005f4c <UART_SetConfig+0x208>)
 8005eb2:	b282      	uxth	r2, r0
 8005eb4:	3a10      	subs	r2, #16
 8005eb6:	0403      	lsls	r3, r0, #16
 8005eb8:	428a      	cmp	r2, r1
 8005eba:	d900      	bls.n	8005ebe <UART_SetConfig+0x17a>
 8005ebc:	e793      	b.n	8005de6 <UART_SetConfig+0xa2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ebe:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ec0:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ec2:	4390      	bics	r0, r2
 8005ec4:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8005ec6:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ec8:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8005eca:	4318      	orrs	r0, r3
 8005ecc:	60d0      	str	r0, [r2, #12]
 8005ece:	e7ce      	b.n	8005e6e <UART_SetConfig+0x12a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ed0:	4283      	cmp	r3, r0
 8005ed2:	d0da      	beq.n	8005e8a <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 8005ed4:	f7fd ffda 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
        break;
 8005ed8:	e7d0      	b.n	8005e7c <UART_SetConfig+0x138>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eda:	2080      	movs	r0, #128	@ 0x80
 8005edc:	0200      	lsls	r0, r0, #8
 8005ede:	4283      	cmp	r3, r0
 8005ee0:	d0e0      	beq.n	8005ea4 <UART_SetConfig+0x160>
 8005ee2:	e00e      	b.n	8005f02 <UART_SetConfig+0x1be>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ee4:	f7fe fb84 	bl	80045f0 <HAL_RCC_GetPCLK2Freq>
 8005ee8:	e777      	b.n	8005dda <UART_SetConfig+0x96>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eea:	2280      	movs	r2, #128	@ 0x80
 8005eec:	0212      	lsls	r2, r2, #8
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d0d0      	beq.n	8005e94 <UART_SetConfig+0x150>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8005f2c <UART_SetConfig+0x1e8>)
 8005ef4:	6818      	ldr	r0, [r3, #0]
          pclk = (uint32_t) HSI_VALUE;
 8005ef6:	4b11      	ldr	r3, [pc, #68]	@ (8005f3c <UART_SetConfig+0x1f8>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ef8:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8005efa:	17c0      	asrs	r0, r0, #31
 8005efc:	4018      	ands	r0, r3
 8005efe:	4b10      	ldr	r3, [pc, #64]	@ (8005f40 <UART_SetConfig+0x1fc>)
 8005f00:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f02:	6861      	ldr	r1, [r4, #4]
 8005f04:	084b      	lsrs	r3, r1, #1
 8005f06:	1818      	adds	r0, r3, r0
 8005f08:	f7fa f92e 	bl	8000168 <__udivsi3>
 8005f0c:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f0e:	0002      	movs	r2, r0
 8005f10:	4b0e      	ldr	r3, [pc, #56]	@ (8005f4c <UART_SetConfig+0x208>)
 8005f12:	3a10      	subs	r2, #16
 8005f14:	e7a2      	b.n	8005e5c <UART_SetConfig+0x118>
 8005f16:	46c0      	nop			@ (mov r8, r8)
 8005f18:	efff69f3 	.word	0xefff69f3
 8005f1c:	ffffcfff 	.word	0xffffcfff
 8005f20:	40004800 	.word	0x40004800
 8005f24:	fffff4ff 	.word	0xfffff4ff
 8005f28:	40013800 	.word	0x40013800
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40004400 	.word	0x40004400
 8005f34:	40004c00 	.word	0x40004c00
 8005f38:	40005000 	.word	0x40005000
 8005f3c:	ff48e500 	.word	0xff48e500
 8005f40:	00f42400 	.word	0x00f42400
 8005f44:	fffffd00 	.word	0xfffffd00
 8005f48:	000ffcff 	.word	0x000ffcff
 8005f4c:	0000ffef 	.word	0x0000ffef

08005f50 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f50:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8005f52:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f54:	07da      	lsls	r2, r3, #31
 8005f56:	d506      	bpl.n	8005f66 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f58:	6801      	ldr	r1, [r0, #0]
 8005f5a:	4c28      	ldr	r4, [pc, #160]	@ (8005ffc <UART_AdvFeatureConfig+0xac>)
 8005f5c:	684a      	ldr	r2, [r1, #4]
 8005f5e:	4022      	ands	r2, r4
 8005f60:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8005f62:	4322      	orrs	r2, r4
 8005f64:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f66:	079a      	lsls	r2, r3, #30
 8005f68:	d506      	bpl.n	8005f78 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f6a:	6801      	ldr	r1, [r0, #0]
 8005f6c:	4c24      	ldr	r4, [pc, #144]	@ (8006000 <UART_AdvFeatureConfig+0xb0>)
 8005f6e:	684a      	ldr	r2, [r1, #4]
 8005f70:	4022      	ands	r2, r4
 8005f72:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005f74:	4322      	orrs	r2, r4
 8005f76:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f78:	075a      	lsls	r2, r3, #29
 8005f7a:	d506      	bpl.n	8005f8a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f7c:	6801      	ldr	r1, [r0, #0]
 8005f7e:	4c21      	ldr	r4, [pc, #132]	@ (8006004 <UART_AdvFeatureConfig+0xb4>)
 8005f80:	684a      	ldr	r2, [r1, #4]
 8005f82:	4022      	ands	r2, r4
 8005f84:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005f86:	4322      	orrs	r2, r4
 8005f88:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f8a:	071a      	lsls	r2, r3, #28
 8005f8c:	d506      	bpl.n	8005f9c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f8e:	6801      	ldr	r1, [r0, #0]
 8005f90:	4c1d      	ldr	r4, [pc, #116]	@ (8006008 <UART_AdvFeatureConfig+0xb8>)
 8005f92:	684a      	ldr	r2, [r1, #4]
 8005f94:	4022      	ands	r2, r4
 8005f96:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005f98:	4322      	orrs	r2, r4
 8005f9a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f9c:	06da      	lsls	r2, r3, #27
 8005f9e:	d506      	bpl.n	8005fae <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fa0:	6801      	ldr	r1, [r0, #0]
 8005fa2:	4c1a      	ldr	r4, [pc, #104]	@ (800600c <UART_AdvFeatureConfig+0xbc>)
 8005fa4:	688a      	ldr	r2, [r1, #8]
 8005fa6:	4022      	ands	r2, r4
 8005fa8:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005faa:	4322      	orrs	r2, r4
 8005fac:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fae:	069a      	lsls	r2, r3, #26
 8005fb0:	d506      	bpl.n	8005fc0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fb2:	6801      	ldr	r1, [r0, #0]
 8005fb4:	4c16      	ldr	r4, [pc, #88]	@ (8006010 <UART_AdvFeatureConfig+0xc0>)
 8005fb6:	688a      	ldr	r2, [r1, #8]
 8005fb8:	4022      	ands	r2, r4
 8005fba:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005fbc:	4322      	orrs	r2, r4
 8005fbe:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fc0:	065a      	lsls	r2, r3, #25
 8005fc2:	d510      	bpl.n	8005fe6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fc4:	6801      	ldr	r1, [r0, #0]
 8005fc6:	4d13      	ldr	r5, [pc, #76]	@ (8006014 <UART_AdvFeatureConfig+0xc4>)
 8005fc8:	684a      	ldr	r2, [r1, #4]
 8005fca:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005fcc:	402a      	ands	r2, r5
 8005fce:	4322      	orrs	r2, r4
 8005fd0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fd2:	2280      	movs	r2, #128	@ 0x80
 8005fd4:	0352      	lsls	r2, r2, #13
 8005fd6:	4294      	cmp	r4, r2
 8005fd8:	d105      	bne.n	8005fe6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fda:	684a      	ldr	r2, [r1, #4]
 8005fdc:	4c0e      	ldr	r4, [pc, #56]	@ (8006018 <UART_AdvFeatureConfig+0xc8>)
 8005fde:	4022      	ands	r2, r4
 8005fe0:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005fe2:	4322      	orrs	r2, r4
 8005fe4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fe6:	061b      	lsls	r3, r3, #24
 8005fe8:	d506      	bpl.n	8005ff8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fea:	6802      	ldr	r2, [r0, #0]
 8005fec:	490b      	ldr	r1, [pc, #44]	@ (800601c <UART_AdvFeatureConfig+0xcc>)
 8005fee:	6853      	ldr	r3, [r2, #4]
 8005ff0:	400b      	ands	r3, r1
 8005ff2:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005ff4:	430b      	orrs	r3, r1
 8005ff6:	6053      	str	r3, [r2, #4]
}
 8005ff8:	bd30      	pop	{r4, r5, pc}
 8005ffa:	46c0      	nop			@ (mov r8, r8)
 8005ffc:	fffdffff 	.word	0xfffdffff
 8006000:	fffeffff 	.word	0xfffeffff
 8006004:	fffbffff 	.word	0xfffbffff
 8006008:	ffff7fff 	.word	0xffff7fff
 800600c:	ffffefff 	.word	0xffffefff
 8006010:	ffffdfff 	.word	0xffffdfff
 8006014:	ffefffff 	.word	0xffefffff
 8006018:	ff9fffff 	.word	0xff9fffff
 800601c:	fff7ffff 	.word	0xfff7ffff

08006020 <UART_WaitOnFlagUntilTimeout>:
{
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	0004      	movs	r4, r0
 8006024:	000d      	movs	r5, r1
 8006026:	0017      	movs	r7, r2
 8006028:	001e      	movs	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800602a:	6822      	ldr	r2, [r4, #0]
 800602c:	69d3      	ldr	r3, [r2, #28]
 800602e:	402b      	ands	r3, r5
 8006030:	1b5b      	subs	r3, r3, r5
 8006032:	4259      	negs	r1, r3
 8006034:	414b      	adcs	r3, r1
 8006036:	42bb      	cmp	r3, r7
 8006038:	d001      	beq.n	800603e <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800603a:	2000      	movs	r0, #0
 800603c:	e01b      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800603e:	9b06      	ldr	r3, [sp, #24]
 8006040:	3301      	adds	r3, #1
 8006042:	d0f3      	beq.n	800602c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006044:	f7fc fb8d 	bl	8002762 <HAL_GetTick>
 8006048:	9a06      	ldr	r2, [sp, #24]
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	1b80      	subs	r0, r0, r6
 800604e:	4290      	cmp	r0, r2
 8006050:	d801      	bhi.n	8006056 <UART_WaitOnFlagUntilTimeout+0x36>
 8006052:	2a00      	cmp	r2, #0
 8006054:	d110      	bne.n	8006078 <UART_WaitOnFlagUntilTimeout+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	4913      	ldr	r1, [pc, #76]	@ (80060a8 <UART_WaitOnFlagUntilTimeout+0x88>)
 800605a:	400a      	ands	r2, r1
 800605c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	31a3      	adds	r1, #163	@ 0xa3
 8006062:	31ff      	adds	r1, #255	@ 0xff
 8006064:	438a      	bics	r2, r1
 8006066:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006068:	2320      	movs	r3, #32
 800606a:	67a3      	str	r3, [r4, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800606c:	67e3      	str	r3, [r4, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800606e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8006070:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8006072:	3474      	adds	r4, #116	@ 0x74
 8006074:	7023      	strb	r3, [r4, #0]
}
 8006076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	0752      	lsls	r2, r2, #29
 800607c:	d5d5      	bpl.n	800602a <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800607e:	2280      	movs	r2, #128	@ 0x80
 8006080:	69d9      	ldr	r1, [r3, #28]
 8006082:	0112      	lsls	r2, r2, #4
 8006084:	4211      	tst	r1, r2
 8006086:	d0d0      	beq.n	800602a <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006088:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	4906      	ldr	r1, [pc, #24]	@ (80060a8 <UART_WaitOnFlagUntilTimeout+0x88>)
 800608e:	400a      	ands	r2, r1
 8006090:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	31a3      	adds	r1, #163	@ 0xa3
 8006096:	31ff      	adds	r1, #255	@ 0xff
 8006098:	438a      	bics	r2, r1
 800609a:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800609c:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800609e:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 80060a0:	67a3      	str	r3, [r4, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060a2:	67e3      	str	r3, [r4, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060a4:	67d3      	str	r3, [r2, #124]	@ 0x7c
          return HAL_TIMEOUT;
 80060a6:	e7e2      	b.n	800606e <UART_WaitOnFlagUntilTimeout+0x4e>
 80060a8:	fffffe5f 	.word	0xfffffe5f

080060ac <UART_CheckIdleState>:
{
 80060ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ae:	2600      	movs	r6, #0
{
 80060b0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b2:	1d03      	adds	r3, r0, #4
 80060b4:	67de      	str	r6, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 80060b6:	f7fc fb54 	bl	8002762 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ba:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80060bc:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	071b      	lsls	r3, r3, #28
 80060c2:	d416      	bmi.n	80060f2 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	075b      	lsls	r3, r3, #29
 80060ca:	d50a      	bpl.n	80060e2 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060cc:	2180      	movs	r1, #128	@ 0x80
 80060ce:	4b0f      	ldr	r3, [pc, #60]	@ (800610c <UART_CheckIdleState+0x60>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	0020      	movs	r0, r4
 80060d6:	002b      	movs	r3, r5
 80060d8:	03c9      	lsls	r1, r1, #15
 80060da:	f7ff ffa1 	bl	8006020 <UART_WaitOnFlagUntilTimeout>
 80060de:	2800      	cmp	r0, #0
 80060e0:	d112      	bne.n	8006108 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 80060e2:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80060e6:	67a3      	str	r3, [r4, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80060e8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ea:	6620      	str	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(huart);
 80060ec:	3474      	adds	r4, #116	@ 0x74
 80060ee:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80060f0:	e00b      	b.n	800610a <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060f2:	2180      	movs	r1, #128	@ 0x80
 80060f4:	4b05      	ldr	r3, [pc, #20]	@ (800610c <UART_CheckIdleState+0x60>)
 80060f6:	0032      	movs	r2, r6
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	0389      	lsls	r1, r1, #14
 80060fc:	0003      	movs	r3, r0
 80060fe:	0020      	movs	r0, r4
 8006100:	f7ff ff8e 	bl	8006020 <UART_WaitOnFlagUntilTimeout>
 8006104:	2800      	cmp	r0, #0
 8006106:	d0dd      	beq.n	80060c4 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8006108:	2003      	movs	r0, #3
}
 800610a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800610c:	01ffffff 	.word	0x01ffffff

08006110 <HAL_UART_Init>:
{
 8006110:	b510      	push	{r4, lr}
 8006112:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8006114:	d101      	bne.n	800611a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8006116:	2001      	movs	r0, #1
}
 8006118:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800611a:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800611c:	2b00      	cmp	r3, #0
 800611e:	d104      	bne.n	800612a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8006120:	0002      	movs	r2, r0
 8006122:	3274      	adds	r2, #116	@ 0x74
 8006124:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8006126:	f7fc fb59 	bl	80027dc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800612a:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800612c:	2101      	movs	r1, #1
 800612e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006130:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UART_DISABLE(huart);
 8006132:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006134:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8006136:	438b      	bics	r3, r1
 8006138:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800613a:	f7ff fe03 	bl	8005d44 <UART_SetConfig>
 800613e:	2801      	cmp	r0, #1
 8006140:	d0e9      	beq.n	8006116 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006142:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8006148:	0020      	movs	r0, r4
 800614a:	f7ff ff01 	bl	8005f50 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	4907      	ldr	r1, [pc, #28]	@ (8006170 <HAL_UART_Init+0x60>)
 8006152:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8006154:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006156:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006158:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800615a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	438a      	bics	r2, r1
 8006160:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006162:	2201      	movs	r2, #1
 8006164:	6819      	ldr	r1, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800616a:	f7ff ff9f 	bl	80060ac <UART_CheckIdleState>
 800616e:	e7d3      	b.n	8006118 <HAL_UART_Init+0x8>
 8006170:	ffffb7ff 	.word	0xffffb7ff

08006174 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8006174:	0003      	movs	r3, r0
 8006176:	3358      	adds	r3, #88	@ 0x58
{
 8006178:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 800617a:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800617c:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 800617e:	805a      	strh	r2, [r3, #2]
  UART_MASK_COMPUTATION(huart);
 8006180:	2380      	movs	r3, #128	@ 0x80
 8006182:	6881      	ldr	r1, [r0, #8]
 8006184:	015b      	lsls	r3, r3, #5
 8006186:	4299      	cmp	r1, r3
 8006188:	d126      	bne.n	80061d8 <UART_Start_Receive_IT+0x64>
 800618a:	6903      	ldr	r3, [r0, #16]
 800618c:	425a      	negs	r2, r3
 800618e:	4153      	adcs	r3, r2
 8006190:	021b      	lsls	r3, r3, #8
 8006192:	33ff      	adds	r3, #255	@ 0xff
 8006194:	0002      	movs	r2, r0
 8006196:	325c      	adds	r2, #92	@ 0x5c
 8006198:	8013      	strh	r3, [r2, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619a:	2200      	movs	r2, #0
 800619c:	1d03      	adds	r3, r0, #4
 800619e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061a0:	2322      	movs	r3, #34	@ 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a2:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061a4:	67c3      	str	r3, [r0, #124]	@ 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a6:	6894      	ldr	r4, [r2, #8]
 80061a8:	3b21      	subs	r3, #33	@ 0x21
 80061aa:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ac:	2480      	movs	r4, #128	@ 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ae:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b0:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 80061b2:	4b13      	ldr	r3, [pc, #76]	@ (8006200 <UART_Start_Receive_IT+0x8c>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b4:	42a1      	cmp	r1, r4
 80061b6:	d104      	bne.n	80061c2 <UART_Start_Receive_IT+0x4e>
 80061b8:	6901      	ldr	r1, [r0, #16]
    huart->RxISR = UART_RxISR_16BIT;
 80061ba:	4b12      	ldr	r3, [pc, #72]	@ (8006204 <UART_Start_Receive_IT+0x90>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061bc:	2900      	cmp	r1, #0
 80061be:	d000      	beq.n	80061c2 <UART_Start_Receive_IT+0x4e>
    huart->RxISR = UART_RxISR_8BIT;
 80061c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006200 <UART_Start_Receive_IT+0x8c>)
 80061c2:	6643      	str	r3, [r0, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 80061c4:	0003      	movs	r3, r0
 80061c6:	2000      	movs	r0, #0
 80061c8:	3374      	adds	r3, #116	@ 0x74
 80061ca:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80061cc:	2390      	movs	r3, #144	@ 0x90
 80061ce:	6811      	ldr	r1, [r2, #0]
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	430b      	orrs	r3, r1
 80061d4:	6013      	str	r3, [r2, #0]
}
 80061d6:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 80061d8:	2900      	cmp	r1, #0
 80061da:	d105      	bne.n	80061e8 <UART_Start_Receive_IT+0x74>
 80061dc:	6902      	ldr	r2, [r0, #16]
 80061de:	23ff      	movs	r3, #255	@ 0xff
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	d0d7      	beq.n	8006194 <UART_Start_Receive_IT+0x20>
 80061e4:	3b80      	subs	r3, #128	@ 0x80
 80061e6:	e7d5      	b.n	8006194 <UART_Start_Receive_IT+0x20>
 80061e8:	2280      	movs	r2, #128	@ 0x80
 80061ea:	2300      	movs	r3, #0
 80061ec:	0552      	lsls	r2, r2, #21
 80061ee:	4291      	cmp	r1, r2
 80061f0:	d1d0      	bne.n	8006194 <UART_Start_Receive_IT+0x20>
 80061f2:	6902      	ldr	r2, [r0, #16]
 80061f4:	337f      	adds	r3, #127	@ 0x7f
 80061f6:	2a00      	cmp	r2, #0
 80061f8:	d0cc      	beq.n	8006194 <UART_Start_Receive_IT+0x20>
 80061fa:	3b40      	subs	r3, #64	@ 0x40
 80061fc:	e7ca      	b.n	8006194 <UART_Start_Receive_IT+0x20>
 80061fe:	46c0      	nop			@ (mov r8, r8)
 8006200:	08005c41 	.word	0x08005c41
 8006204:	08005cc5 	.word	0x08005cc5

08006208 <HAL_UART_Receive_IT>:
{
 8006208:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800620a:	6fc4      	ldr	r4, [r0, #124]	@ 0x7c
{
 800620c:	0003      	movs	r3, r0
    __HAL_LOCK(huart);
 800620e:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8006210:	2c20      	cmp	r4, #32
 8006212:	d127      	bne.n	8006264 <HAL_UART_Receive_IT+0x5c>
      return HAL_ERROR;
 8006214:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8006216:	2900      	cmp	r1, #0
 8006218:	d024      	beq.n	8006264 <HAL_UART_Receive_IT+0x5c>
 800621a:	2a00      	cmp	r2, #0
 800621c:	d022      	beq.n	8006264 <HAL_UART_Receive_IT+0x5c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800621e:	2080      	movs	r0, #128	@ 0x80
 8006220:	689c      	ldr	r4, [r3, #8]
 8006222:	0140      	lsls	r0, r0, #5
 8006224:	4284      	cmp	r4, r0
 8006226:	d106      	bne.n	8006236 <HAL_UART_Receive_IT+0x2e>
 8006228:	6918      	ldr	r0, [r3, #16]
 800622a:	2800      	cmp	r0, #0
 800622c:	d103      	bne.n	8006236 <HAL_UART_Receive_IT+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 800622e:	2401      	movs	r4, #1
      return HAL_ERROR;
 8006230:	0020      	movs	r0, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8006232:	4221      	tst	r1, r4
 8006234:	d116      	bne.n	8006264 <HAL_UART_Receive_IT+0x5c>
    __HAL_LOCK(huart);
 8006236:	0018      	movs	r0, r3
 8006238:	3074      	adds	r0, #116	@ 0x74
 800623a:	7804      	ldrb	r4, [r0, #0]
 800623c:	2002      	movs	r0, #2
 800623e:	2c01      	cmp	r4, #1
 8006240:	d010      	beq.n	8006264 <HAL_UART_Receive_IT+0x5c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006242:	2000      	movs	r0, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006244:	4c08      	ldr	r4, [pc, #32]	@ (8006268 <HAL_UART_Receive_IT+0x60>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006246:	6618      	str	r0, [r3, #96]	@ 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	42a0      	cmp	r0, r4
 800624c:	d007      	beq.n	800625e <HAL_UART_Receive_IT+0x56>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800624e:	6844      	ldr	r4, [r0, #4]
 8006250:	0224      	lsls	r4, r4, #8
 8006252:	d504      	bpl.n	800625e <HAL_UART_Receive_IT+0x56>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006254:	2480      	movs	r4, #128	@ 0x80
 8006256:	6805      	ldr	r5, [r0, #0]
 8006258:	04e4      	lsls	r4, r4, #19
 800625a:	432c      	orrs	r4, r5
 800625c:	6004      	str	r4, [r0, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 800625e:	0018      	movs	r0, r3
 8006260:	f7ff ff88 	bl	8006174 <UART_Start_Receive_IT>
}
 8006264:	bd70      	pop	{r4, r5, r6, pc}
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	40004800 	.word	0x40004800

0800626c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800626c:	4770      	bx	lr
	...

08006270 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006270:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006272:	0005      	movs	r5, r0
{
 8006274:	b085      	sub	sp, #20
 8006276:	9102      	str	r1, [sp, #8]
 8006278:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(huart);
 800627a:	3574      	adds	r5, #116	@ 0x74
 800627c:	782b      	ldrb	r3, [r5, #0]
{
 800627e:	0004      	movs	r4, r0
 8006280:	000f      	movs	r7, r1
  __HAL_LOCK(huart);
 8006282:	2002      	movs	r0, #2
{
 8006284:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 8006286:	2b01      	cmp	r3, #1
 8006288:	d030      	beq.n	80062ec <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>

  huart->gState = HAL_UART_STATE_BUSY;
 800628a:	2324      	movs	r3, #36	@ 0x24
  __HAL_LOCK(huart);
 800628c:	3801      	subs	r0, #1
 800628e:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006290:	67a3      	str	r3, [r4, #120]	@ 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	6819      	ldr	r1, [r3, #0]
 8006296:	4381      	bics	r1, r0
 8006298:	6019      	str	r1, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800629a:	6899      	ldr	r1, [r3, #8]
 800629c:	4815      	ldr	r0, [pc, #84]	@ (80062f4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x84>)
 800629e:	4001      	ands	r1, r0
 80062a0:	4339      	orrs	r1, r7
 80062a2:	6099      	str	r1, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80062a4:	2f00      	cmp	r7, #0
 80062a6:	d10c      	bne.n	80062c2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x52>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80062a8:	2010      	movs	r0, #16
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	79b1      	ldrb	r1, [r6, #6]
 80062ae:	4382      	bics	r2, r0
 80062b0:	88b0      	ldrh	r0, [r6, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80062b2:	0609      	lsls	r1, r1, #24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80062b4:	4302      	orrs	r2, r0
 80062b6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	0212      	lsls	r2, r2, #8
 80062bc:	0a12      	lsrs	r2, r2, #8
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 80062c2:	2201      	movs	r2, #1
 80062c4:	6819      	ldr	r1, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80062ca:	f7fc fa4a 	bl	8002762 <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ce:	2180      	movs	r1, #128	@ 0x80
 80062d0:	4a09      	ldr	r2, [pc, #36]	@ (80062f8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x88>)
  tickstart = HAL_GetTick();
 80062d2:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d4:	9200      	str	r2, [sp, #0]
 80062d6:	0020      	movs	r0, r4
 80062d8:	2200      	movs	r2, #0
 80062da:	03c9      	lsls	r1, r1, #15
 80062dc:	f7ff fea0 	bl	8006020 <UART_WaitOnFlagUntilTimeout>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d105      	bne.n	80062f0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80062e4:	2320      	movs	r3, #32
 80062e6:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UNLOCK(huart);
 80062e8:	2300      	movs	r3, #0
 80062ea:	702b      	strb	r3, [r5, #0]
}
 80062ec:	b005      	add	sp, #20
 80062ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_TIMEOUT;
 80062f0:	2003      	movs	r0, #3
 80062f2:	e7f9      	b.n	80062e8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x78>
 80062f4:	ffcfffff 	.word	0xffcfffff
 80062f8:	01ffffff 	.word	0x01ffffff

080062fc <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80062fc:	0001      	movs	r1, r0
 80062fe:	2302      	movs	r3, #2
{
 8006300:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 8006302:	3174      	adds	r1, #116	@ 0x74
 8006304:	780c      	ldrb	r4, [r1, #0]
{
 8006306:	0002      	movs	r2, r0
  __HAL_LOCK(huart);
 8006308:	0018      	movs	r0, r3
 800630a:	2c01      	cmp	r4, #1
 800630c:	d005      	beq.n	800631a <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800630e:	6812      	ldr	r2, [r2, #0]
 8006310:	6810      	ldr	r0, [r2, #0]
 8006312:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 8006314:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006316:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8006318:	7008      	strb	r0, [r1, #0]
}
 800631a:	bd10      	pop	{r4, pc}

0800631c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800631c:	b510      	push	{r4, lr}
 800631e:	0004      	movs	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8006320:	2210      	movs	r2, #16
 8006322:	2100      	movs	r1, #0
 8006324:	30f1      	adds	r0, #241	@ 0xf1
 8006326:	f006 f8df 	bl	800c4e8 <memset1>
    ctx->M_n = 0;
 800632a:	0023      	movs	r3, r4
 800632c:	2100      	movs	r1, #0
 800632e:	33fc      	adds	r3, #252	@ 0xfc
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8006330:	22f0      	movs	r2, #240	@ 0xf0
 8006332:	0020      	movs	r0, r4
    ctx->M_n = 0;
 8006334:	6199      	str	r1, [r3, #24]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8006336:	f006 f8d7 	bl	800c4e8 <memset1>
}
 800633a:	bd10      	pop	{r4, pc}

0800633c <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800633c:	b510      	push	{r4, lr}
 800633e:	0002      	movs	r2, r0
 8006340:	0008      	movs	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8006342:	2110      	movs	r1, #16
 8006344:	f000 f99e 	bl	8006684 <lorawan_aes_set_key>
}
 8006348:	bd10      	pop	{r4, pc}

0800634a <AES_CMAC_Update>:
void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800634a:	0003      	movs	r3, r0
{
 800634c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ctx->M_n > 0 )
 800634e:	33fc      	adds	r3, #252	@ 0xfc
{
 8006350:	0004      	movs	r4, r0
    if( ctx->M_n > 0 )
 8006352:	6998      	ldr	r0, [r3, #24]
{
 8006354:	000e      	movs	r6, r1
 8006356:	0015      	movs	r5, r2
 8006358:	b087      	sub	sp, #28
    if( ctx->M_n > 0 )
 800635a:	2800      	cmp	r0, #0
 800635c:	d035      	beq.n	80063ca <AES_CMAC_Update+0x80>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800635e:	2710      	movs	r7, #16
 8006360:	1a3f      	subs	r7, r7, r0
 8006362:	9700      	str	r7, [sp, #0]
 8006364:	4297      	cmp	r7, r2
 8006366:	d900      	bls.n	800636a <AES_CMAC_Update+0x20>
 8006368:	9200      	str	r2, [sp, #0]
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800636a:	466b      	mov	r3, sp
 800636c:	881a      	ldrh	r2, [r3, #0]
 800636e:	1ca3      	adds	r3, r4, #2
 8006370:	33ff      	adds	r3, #255	@ 0xff
 8006372:	0031      	movs	r1, r6
 8006374:	1818      	adds	r0, r3, r0
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	f006 f8a0 	bl	800c4bc <memcpy1>
        ctx->M_n += mlen;
 800637c:	0022      	movs	r2, r4
 800637e:	32fc      	adds	r2, #252	@ 0xfc
 8006380:	6993      	ldr	r3, [r2, #24]
 8006382:	9900      	ldr	r1, [sp, #0]
 8006384:	18cb      	adds	r3, r1, r3
 8006386:	6193      	str	r3, [r2, #24]
        if( ctx->M_n < 16 || len == mlen )
 8006388:	2b0f      	cmp	r3, #15
 800638a:	d928      	bls.n	80063de <AES_CMAC_Update+0x94>
 800638c:	42af      	cmp	r7, r5
 800638e:	d226      	bcs.n	80063de <AES_CMAC_Update+0x94>
 8006390:	0027      	movs	r7, r4
 8006392:	37f1      	adds	r7, #241	@ 0xf1
 8006394:	003b      	movs	r3, r7
            return;
        XOR( ctx->M_last, ctx->X );
 8006396:	781a      	ldrb	r2, [r3, #0]
 8006398:	7c19      	ldrb	r1, [r3, #16]
 800639a:	404a      	eors	r2, r1
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	9a01      	ldr	r2, [sp, #4]
 80063a0:	3301      	adds	r3, #1
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d1f7      	bne.n	8006396 <AES_CMAC_Update+0x4c>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80063a6:	2210      	movs	r2, #16
 80063a8:	0039      	movs	r1, r7
 80063aa:	a802      	add	r0, sp, #8
 80063ac:	f006 f886 	bl	800c4bc <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80063b0:	a902      	add	r1, sp, #8
 80063b2:	0022      	movs	r2, r4
 80063b4:	0008      	movs	r0, r1
 80063b6:	f000 f9e9 	bl	800678c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80063ba:	2210      	movs	r2, #16
 80063bc:	0038      	movs	r0, r7
 80063be:	a902      	add	r1, sp, #8
 80063c0:	f006 f87c 	bl	800c4bc <memcpy1>

        data += mlen;
 80063c4:	9b00      	ldr	r3, [sp, #0]
 80063c6:	18f6      	adds	r6, r6, r3
        len -= mlen;
 80063c8:	1aed      	subs	r5, r5, r3
    }
    while( len > 16 )
 80063ca:	1ca0      	adds	r0, r4, #2
 80063cc:	30ff      	adds	r0, #255	@ 0xff
 80063ce:	2d10      	cmp	r5, #16
 80063d0:	d807      	bhi.n	80063e2 <AES_CMAC_Update+0x98>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 80063d2:	0031      	movs	r1, r6
 80063d4:	b2aa      	uxth	r2, r5
    ctx->M_n = len;
 80063d6:	34fc      	adds	r4, #252	@ 0xfc
    memcpy1( ctx->M_last, data, len );
 80063d8:	f006 f870 	bl	800c4bc <memcpy1>
    ctx->M_n = len;
 80063dc:	61a5      	str	r5, [r4, #24]
}
 80063de:	b007      	add	sp, #28
 80063e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e2:	0027      	movs	r7, r4
 80063e4:	37f1      	adds	r7, #241	@ 0xf1
 80063e6:	003b      	movs	r3, r7
 80063e8:	9600      	str	r6, [sp, #0]
        XOR( data, ctx->X );
 80063ea:	9900      	ldr	r1, [sp, #0]
 80063ec:	781a      	ldrb	r2, [r3, #0]
 80063ee:	7809      	ldrb	r1, [r1, #0]
 80063f0:	404a      	eors	r2, r1
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	9a00      	ldr	r2, [sp, #0]
 80063f6:	3301      	adds	r3, #1
 80063f8:	3201      	adds	r2, #1
 80063fa:	9200      	str	r2, [sp, #0]
 80063fc:	4298      	cmp	r0, r3
 80063fe:	d1f4      	bne.n	80063ea <AES_CMAC_Update+0xa0>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8006400:	2210      	movs	r2, #16
 8006402:	0039      	movs	r1, r7
 8006404:	a802      	add	r0, sp, #8
 8006406:	f006 f859 	bl	800c4bc <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800640a:	a902      	add	r1, sp, #8
 800640c:	0022      	movs	r2, r4
 800640e:	0008      	movs	r0, r1
 8006410:	f000 f9bc 	bl	800678c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8006414:	2210      	movs	r2, #16
 8006416:	0038      	movs	r0, r7
 8006418:	a902      	add	r1, sp, #8
 800641a:	f006 f84f 	bl	800c4bc <memcpy1>
        data += 16;
 800641e:	3610      	adds	r6, #16
        len -= 16;
 8006420:	3d10      	subs	r5, #16
 8006422:	e7d2      	b.n	80063ca <AES_CMAC_Update+0x80>

08006424 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8006424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006426:	000c      	movs	r4, r1
 8006428:	b089      	sub	sp, #36	@ 0x24
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800642a:	2210      	movs	r2, #16
 800642c:	2100      	movs	r1, #0
{
 800642e:	0005      	movs	r5, r0
    memset1( K, '\0', 16 );
 8006430:	4668      	mov	r0, sp
 8006432:	f006 f859 	bl	800c4e8 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8006436:	0022      	movs	r2, r4
 8006438:	4669      	mov	r1, sp
 800643a:	4668      	mov	r0, sp
 800643c:	f000 f9a6 	bl	800678c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8006440:	466b      	mov	r3, sp
 8006442:	781a      	ldrb	r2, [r3, #0]
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8006444:	2100      	movs	r1, #0
    if( K[0] & 0x80 )
 8006446:	2a7f      	cmp	r2, #127	@ 0x7f
 8006448:	d941      	bls.n	80064ce <AES_CMAC_Final+0xaa>
        LSHIFT( K, K );
 800644a:	7818      	ldrb	r0, [r3, #0]
 800644c:	785a      	ldrb	r2, [r3, #1]
 800644e:	0040      	lsls	r0, r0, #1
 8006450:	09d2      	lsrs	r2, r2, #7
 8006452:	4302      	orrs	r2, r0
 8006454:	3101      	adds	r1, #1
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	3301      	adds	r3, #1
 800645a:	290f      	cmp	r1, #15
 800645c:	d1f5      	bne.n	800644a <AES_CMAC_Final+0x26>
 800645e:	466b      	mov	r3, sp
 8006460:	7bda      	ldrb	r2, [r3, #15]
        K[15] ^= 0x87;
 8006462:	2379      	movs	r3, #121	@ 0x79
        LSHIFT( K, K );
 8006464:	0052      	lsls	r2, r2, #1
        K[15] ^= 0x87;
 8006466:	425b      	negs	r3, r3
 8006468:	4053      	eors	r3, r2

    if( ctx->M_n == 16 )
 800646a:	0021      	movs	r1, r4
        K[15] ^= 0x87;
 800646c:	466a      	mov	r2, sp
        LSHIFT( K, K );
 800646e:	b2db      	uxtb	r3, r3
    if( ctx->M_n == 16 )
 8006470:	31fc      	adds	r1, #252	@ 0xfc
        K[15] ^= 0x87;
 8006472:	73d3      	strb	r3, [r2, #15]
    if( ctx->M_n == 16 )
 8006474:	698a      	ldr	r2, [r1, #24]
 8006476:	2a10      	cmp	r2, #16
 8006478:	d137      	bne.n	80064ea <AES_CMAC_Final+0xc6>
 800647a:	0020      	movs	r0, r4
 800647c:	466a      	mov	r2, sp
 800647e:	1ca3      	adds	r3, r4, #2
 8006480:	3012      	adds	r0, #18
 8006482:	33ff      	adds	r3, #255	@ 0xff
 8006484:	30ff      	adds	r0, #255	@ 0xff
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8006486:	7819      	ldrb	r1, [r3, #0]
 8006488:	7816      	ldrb	r6, [r2, #0]
 800648a:	3201      	adds	r2, #1
 800648c:	4071      	eors	r1, r6
 800648e:	7019      	strb	r1, [r3, #0]
 8006490:	3301      	adds	r3, #1
 8006492:	4298      	cmp	r0, r3
 8006494:	d1f7      	bne.n	8006486 <AES_CMAC_Final+0x62>
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 8006496:	0021      	movs	r1, r4
 8006498:	31f1      	adds	r1, #241	@ 0xf1
 800649a:	000b      	movs	r3, r1
 800649c:	1ca0      	adds	r0, r4, #2
 800649e:	30ff      	adds	r0, #255	@ 0xff
 80064a0:	781a      	ldrb	r2, [r3, #0]
 80064a2:	7c1e      	ldrb	r6, [r3, #16]
 80064a4:	4072      	eors	r2, r6
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	3301      	adds	r3, #1
 80064aa:	4298      	cmp	r0, r3
 80064ac:	d1f8      	bne.n	80064a0 <AES_CMAC_Final+0x7c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80064ae:	a804      	add	r0, sp, #16
 80064b0:	2210      	movs	r2, #16
 80064b2:	f006 f803 	bl	800c4bc <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 80064b6:	0022      	movs	r2, r4
 80064b8:	0029      	movs	r1, r5
 80064ba:	a804      	add	r0, sp, #16
 80064bc:	f000 f966 	bl	800678c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 80064c0:	2210      	movs	r2, #16
 80064c2:	2100      	movs	r1, #0
 80064c4:	4668      	mov	r0, sp
 80064c6:	f006 f80f 	bl	800c4e8 <memset1>
}
 80064ca:	b009      	add	sp, #36	@ 0x24
 80064cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LSHIFT( K, K );
 80064ce:	7818      	ldrb	r0, [r3, #0]
 80064d0:	785a      	ldrb	r2, [r3, #1]
 80064d2:	0040      	lsls	r0, r0, #1
 80064d4:	09d2      	lsrs	r2, r2, #7
 80064d6:	4302      	orrs	r2, r0
 80064d8:	3101      	adds	r1, #1
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	3301      	adds	r3, #1
 80064de:	290f      	cmp	r1, #15
 80064e0:	d1f5      	bne.n	80064ce <AES_CMAC_Final+0xaa>
 80064e2:	466b      	mov	r3, sp
 80064e4:	7bdb      	ldrb	r3, [r3, #15]
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	e7bf      	b.n	800646a <AES_CMAC_Final+0x46>
        if( K[0] & 0x80 )
 80064ea:	466b      	mov	r3, sp
 80064ec:	2000      	movs	r0, #0
            LSHIFT( K, K );
 80064ee:	2600      	movs	r6, #0
        if( K[0] & 0x80 )
 80064f0:	5618      	ldrsb	r0, [r3, r0]
 80064f2:	42b0      	cmp	r0, r6
 80064f4:	da31      	bge.n	800655a <AES_CMAC_Final+0x136>
            LSHIFT( K, K );
 80064f6:	781f      	ldrb	r7, [r3, #0]
 80064f8:	7858      	ldrb	r0, [r3, #1]
 80064fa:	007f      	lsls	r7, r7, #1
 80064fc:	09c0      	lsrs	r0, r0, #7
 80064fe:	4338      	orrs	r0, r7
 8006500:	3601      	adds	r6, #1
 8006502:	7018      	strb	r0, [r3, #0]
 8006504:	3301      	adds	r3, #1
 8006506:	2e0f      	cmp	r6, #15
 8006508:	d1f5      	bne.n	80064f6 <AES_CMAC_Final+0xd2>
 800650a:	466b      	mov	r3, sp
 800650c:	7bd8      	ldrb	r0, [r3, #15]
            K[15] ^= 0x87;
 800650e:	2379      	movs	r3, #121	@ 0x79
            LSHIFT( K, K );
 8006510:	0040      	lsls	r0, r0, #1
            K[15] ^= 0x87;
 8006512:	425b      	negs	r3, r3
 8006514:	4043      	eors	r3, r0
 8006516:	4668      	mov	r0, sp
            LSHIFT( K, K );
 8006518:	b2db      	uxtb	r3, r3
            K[15] ^= 0x87;
 800651a:	73c3      	strb	r3, [r0, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 800651c:	2080      	movs	r0, #128	@ 0x80
 800651e:	18a3      	adds	r3, r4, r2
 8006520:	33ff      	adds	r3, #255	@ 0xff
 8006522:	1c56      	adds	r6, r2, #1
 8006524:	7098      	strb	r0, [r3, #2]
        while( ++ctx->M_n < 16 )
 8006526:	2700      	movs	r7, #0
 8006528:	0030      	movs	r0, r6
 800652a:	1ca3      	adds	r3, r4, #2
 800652c:	33ff      	adds	r3, #255	@ 0xff
 800652e:	280f      	cmp	r0, #15
 8006530:	d921      	bls.n	8006576 <AES_CMAC_Final+0x152>
 8006532:	2000      	movs	r0, #0
 8006534:	2e10      	cmp	r6, #16
 8006536:	d801      	bhi.n	800653c <AES_CMAC_Final+0x118>
 8006538:	300f      	adds	r0, #15
 800653a:	1a80      	subs	r0, r0, r2
 800653c:	1980      	adds	r0, r0, r6
 800653e:	6188      	str	r0, [r1, #24]
 8006540:	0020      	movs	r0, r4
 8006542:	466a      	mov	r2, sp
 8006544:	3012      	adds	r0, #18
 8006546:	30ff      	adds	r0, #255	@ 0xff
        XOR( K, ctx->M_last );
 8006548:	7819      	ldrb	r1, [r3, #0]
 800654a:	7816      	ldrb	r6, [r2, #0]
 800654c:	3201      	adds	r2, #1
 800654e:	4071      	eors	r1, r6
 8006550:	7019      	strb	r1, [r3, #0]
 8006552:	3301      	adds	r3, #1
 8006554:	4298      	cmp	r0, r3
 8006556:	d1f7      	bne.n	8006548 <AES_CMAC_Final+0x124>
 8006558:	e79d      	b.n	8006496 <AES_CMAC_Final+0x72>
            LSHIFT( K, K );
 800655a:	781f      	ldrb	r7, [r3, #0]
 800655c:	7858      	ldrb	r0, [r3, #1]
 800655e:	007f      	lsls	r7, r7, #1
 8006560:	09c0      	lsrs	r0, r0, #7
 8006562:	4338      	orrs	r0, r7
 8006564:	3601      	adds	r6, #1
 8006566:	7018      	strb	r0, [r3, #0]
 8006568:	3301      	adds	r3, #1
 800656a:	2e0f      	cmp	r6, #15
 800656c:	d1f5      	bne.n	800655a <AES_CMAC_Final+0x136>
 800656e:	466b      	mov	r3, sp
 8006570:	7bdb      	ldrb	r3, [r3, #15]
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	e7cf      	b.n	8006516 <AES_CMAC_Final+0xf2>
            ctx->M_last[ctx->M_n] = 0;
 8006576:	541f      	strb	r7, [r3, r0]
 8006578:	3001      	adds	r0, #1
 800657a:	e7d8      	b.n	800652e <AES_CMAC_Final+0x10a>

0800657c <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800657c:	780a      	ldrb	r2, [r1, #0]
 800657e:	7803      	ldrb	r3, [r0, #0]
 8006580:	4053      	eors	r3, r2
 8006582:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8006584:	784a      	ldrb	r2, [r1, #1]
 8006586:	7843      	ldrb	r3, [r0, #1]
 8006588:	4053      	eors	r3, r2
 800658a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800658c:	788a      	ldrb	r2, [r1, #2]
 800658e:	7883      	ldrb	r3, [r0, #2]
 8006590:	4053      	eors	r3, r2
 8006592:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8006594:	78ca      	ldrb	r2, [r1, #3]
 8006596:	78c3      	ldrb	r3, [r0, #3]
 8006598:	4053      	eors	r3, r2
 800659a:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800659c:	790a      	ldrb	r2, [r1, #4]
 800659e:	7903      	ldrb	r3, [r0, #4]
 80065a0:	4053      	eors	r3, r2
 80065a2:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80065a4:	794a      	ldrb	r2, [r1, #5]
 80065a6:	7943      	ldrb	r3, [r0, #5]
 80065a8:	4053      	eors	r3, r2
 80065aa:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80065ac:	798a      	ldrb	r2, [r1, #6]
 80065ae:	7983      	ldrb	r3, [r0, #6]
 80065b0:	4053      	eors	r3, r2
 80065b2:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80065b4:	79ca      	ldrb	r2, [r1, #7]
 80065b6:	79c3      	ldrb	r3, [r0, #7]
 80065b8:	4053      	eors	r3, r2
 80065ba:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80065bc:	7a0a      	ldrb	r2, [r1, #8]
 80065be:	7a03      	ldrb	r3, [r0, #8]
 80065c0:	4053      	eors	r3, r2
 80065c2:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80065c4:	7a4a      	ldrb	r2, [r1, #9]
 80065c6:	7a43      	ldrb	r3, [r0, #9]
 80065c8:	4053      	eors	r3, r2
 80065ca:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 80065cc:	7a8a      	ldrb	r2, [r1, #10]
 80065ce:	7a83      	ldrb	r3, [r0, #10]
 80065d0:	4053      	eors	r3, r2
 80065d2:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 80065d4:	7aca      	ldrb	r2, [r1, #11]
 80065d6:	7ac3      	ldrb	r3, [r0, #11]
 80065d8:	4053      	eors	r3, r2
 80065da:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 80065dc:	7b0a      	ldrb	r2, [r1, #12]
 80065de:	7b03      	ldrb	r3, [r0, #12]
 80065e0:	4053      	eors	r3, r2
 80065e2:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 80065e4:	7b4a      	ldrb	r2, [r1, #13]
 80065e6:	7b43      	ldrb	r3, [r0, #13]
 80065e8:	4053      	eors	r3, r2
 80065ea:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80065ec:	7b8a      	ldrb	r2, [r1, #14]
 80065ee:	7b83      	ldrb	r3, [r0, #14]
 80065f0:	4053      	eors	r3, r2
 80065f2:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 80065f4:	7bca      	ldrb	r2, [r1, #15]
 80065f6:	7bc3      	ldrb	r3, [r0, #15]
 80065f8:	4053      	eors	r3, r2
 80065fa:	73c3      	strb	r3, [r0, #15]
#endif
}
 80065fc:	4770      	bx	lr

080065fe <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 80065fe:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8006600:	780b      	ldrb	r3, [r1, #0]
 8006602:	7814      	ldrb	r4, [r2, #0]
 8006604:	4063      	eors	r3, r4
 8006606:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8006608:	7854      	ldrb	r4, [r2, #1]
 800660a:	784b      	ldrb	r3, [r1, #1]
 800660c:	4063      	eors	r3, r4
 800660e:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8006610:	7894      	ldrb	r4, [r2, #2]
 8006612:	788b      	ldrb	r3, [r1, #2]
 8006614:	4063      	eors	r3, r4
 8006616:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8006618:	78d4      	ldrb	r4, [r2, #3]
 800661a:	78cb      	ldrb	r3, [r1, #3]
 800661c:	4063      	eors	r3, r4
 800661e:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8006620:	7914      	ldrb	r4, [r2, #4]
 8006622:	790b      	ldrb	r3, [r1, #4]
 8006624:	4063      	eors	r3, r4
 8006626:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8006628:	7954      	ldrb	r4, [r2, #5]
 800662a:	794b      	ldrb	r3, [r1, #5]
 800662c:	4063      	eors	r3, r4
 800662e:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8006630:	7994      	ldrb	r4, [r2, #6]
 8006632:	798b      	ldrb	r3, [r1, #6]
 8006634:	4063      	eors	r3, r4
 8006636:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8006638:	79d4      	ldrb	r4, [r2, #7]
 800663a:	79cb      	ldrb	r3, [r1, #7]
 800663c:	4063      	eors	r3, r4
 800663e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8006640:	7a14      	ldrb	r4, [r2, #8]
 8006642:	7a0b      	ldrb	r3, [r1, #8]
 8006644:	4063      	eors	r3, r4
 8006646:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8006648:	7a54      	ldrb	r4, [r2, #9]
 800664a:	7a4b      	ldrb	r3, [r1, #9]
 800664c:	4063      	eors	r3, r4
 800664e:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8006650:	7a8b      	ldrb	r3, [r1, #10]
 8006652:	7a94      	ldrb	r4, [r2, #10]
 8006654:	4063      	eors	r3, r4
 8006656:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8006658:	7ad4      	ldrb	r4, [r2, #11]
 800665a:	7acb      	ldrb	r3, [r1, #11]
 800665c:	4063      	eors	r3, r4
 800665e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8006660:	7b14      	ldrb	r4, [r2, #12]
 8006662:	7b0b      	ldrb	r3, [r1, #12]
 8006664:	4063      	eors	r3, r4
 8006666:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8006668:	7b54      	ldrb	r4, [r2, #13]
 800666a:	7b4b      	ldrb	r3, [r1, #13]
 800666c:	4063      	eors	r3, r4
 800666e:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8006670:	7b94      	ldrb	r4, [r2, #14]
 8006672:	7b8b      	ldrb	r3, [r1, #14]
 8006674:	4063      	eors	r3, r4
 8006676:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8006678:	7bcb      	ldrb	r3, [r1, #15]
 800667a:	7bd2      	ldrb	r2, [r2, #15]
 800667c:	4053      	eors	r3, r2
 800667e:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8006680:	bd10      	pop	{r4, pc}
	...

08006684 <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 8006684:	000b      	movs	r3, r1
{
 8006686:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( keylen )
 8006688:	3b10      	subs	r3, #16
 800668a:	b2db      	uxtb	r3, r3
{
 800668c:	000e      	movs	r6, r1
 800668e:	0014      	movs	r4, r2
 8006690:	b089      	sub	sp, #36	@ 0x24
    switch( keylen )
 8006692:	2b10      	cmp	r3, #16
 8006694:	d804      	bhi.n	80066a0 <lorawan_aes_set_key+0x1c>
 8006696:	4a3b      	ldr	r2, [pc, #236]	@ (8006784 <lorawan_aes_set_key+0x100>)
 8006698:	40da      	lsrs	r2, r3
 800669a:	2300      	movs	r3, #0
 800669c:	07d2      	lsls	r2, r2, #31
 800669e:	d405      	bmi.n	80066ac <lorawan_aes_set_key+0x28>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 80066a0:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 80066a2:	20ff      	movs	r0, #255	@ 0xff
        ctx->rnd = 0;
 80066a4:	34f0      	adds	r4, #240	@ 0xf0
 80066a6:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 80066a8:	b009      	add	sp, #36	@ 0x24
 80066aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *d++ = *s++;
 80066ac:	5cc2      	ldrb	r2, [r0, r3]
 80066ae:	54e2      	strb	r2, [r4, r3]
    while( nn-- )
 80066b0:	3301      	adds	r3, #1
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	4296      	cmp	r6, r2
 80066b6:	d1f9      	bne.n	80066ac <lorawan_aes_set_key+0x28>
    hi = (keylen + 28) << 2;
 80066b8:	0033      	movs	r3, r6
    ctx->rnd = (hi >> 4) - 1;
 80066ba:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 80066bc:	331c      	adds	r3, #28
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	9307      	str	r3, [sp, #28]
    ctx->rnd = (hi >> 4) - 1;
 80066c4:	091b      	lsrs	r3, r3, #4
 80066c6:	3b01      	subs	r3, #1
 80066c8:	32f0      	adds	r2, #240	@ 0xf0
 80066ca:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80066cc:	2301      	movs	r3, #1
 80066ce:	9305      	str	r3, [sp, #20]
            t0 = s_box(t1) ^ rc;
 80066d0:	4b2d      	ldr	r3, [pc, #180]	@ (8006788 <lorawan_aes_set_key+0x104>)
 80066d2:	1f35      	subs	r5, r6, #4
 80066d4:	9604      	str	r6, [sp, #16]
 80066d6:	1965      	adds	r5, r4, r5
 80066d8:	9306      	str	r3, [sp, #24]
        t1 = ctx->ksch[cc - 3];
 80066da:	786b      	ldrb	r3, [r5, #1]
        if( cc % keylen == 0 )
 80066dc:	0031      	movs	r1, r6
        t1 = ctx->ksch[cc - 3];
 80066de:	9301      	str	r3, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 80066e0:	78ab      	ldrb	r3, [r5, #2]
        t0 = ctx->ksch[cc - 4];
 80066e2:	782f      	ldrb	r7, [r5, #0]
        t2 = ctx->ksch[cc - 2];
 80066e4:	9302      	str	r3, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 80066e6:	78eb      	ldrb	r3, [r5, #3]
 80066e8:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 80066ea:	466b      	mov	r3, sp
 80066ec:	7c18      	ldrb	r0, [r3, #16]
 80066ee:	f7f9 fdc1 	bl	8000274 <__aeabi_uidivmod>
 80066f2:	b2c9      	uxtb	r1, r1
 80066f4:	2900      	cmp	r1, #0
 80066f6:	d135      	bne.n	8006764 <lorawan_aes_set_key+0xe0>
            t0 = s_box(t1) ^ rc;
 80066f8:	9b06      	ldr	r3, [sp, #24]
 80066fa:	9a01      	ldr	r2, [sp, #4]
            t1 = s_box(t2);
 80066fc:	9902      	ldr	r1, [sp, #8]
            t0 = s_box(t1) ^ rc;
 80066fe:	5c9a      	ldrb	r2, [r3, r2]
 8006700:	9b05      	ldr	r3, [sp, #20]
 8006702:	405a      	eors	r2, r3
            t1 = s_box(t2);
 8006704:	9b06      	ldr	r3, [sp, #24]
 8006706:	5c5b      	ldrb	r3, [r3, r1]
            t2 = s_box(t3);
 8006708:	9903      	ldr	r1, [sp, #12]
            t1 = s_box(t2);
 800670a:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 800670c:	9b06      	ldr	r3, [sp, #24]
 800670e:	5c5b      	ldrb	r3, [r3, r1]
            rc = f2(rc);
 8006710:	211b      	movs	r1, #27
            t2 = s_box(t3);
 8006712:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 8006714:	9b06      	ldr	r3, [sp, #24]
 8006716:	5ddb      	ldrb	r3, [r3, r7]
            t0 = s_box(t1) ^ rc;
 8006718:	0017      	movs	r7, r2
            t3 = s_box(tt);
 800671a:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 800671c:	9b05      	ldr	r3, [sp, #20]
 800671e:	09db      	lsrs	r3, r3, #7
 8006720:	425b      	negs	r3, r3
 8006722:	400b      	ands	r3, r1
 8006724:	9905      	ldr	r1, [sp, #20]
 8006726:	0049      	lsls	r1, r1, #1
 8006728:	404b      	eors	r3, r1
 800672a:	b2db      	uxtb	r3, r3
 800672c:	9305      	str	r3, [sp, #20]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800672e:	7823      	ldrb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8006730:	9a01      	ldr	r2, [sp, #4]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8006732:	405f      	eors	r7, r3
 8006734:	712f      	strb	r7, [r5, #4]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8006736:	7863      	ldrb	r3, [r4, #1]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006738:	3504      	adds	r5, #4
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800673a:	405a      	eors	r2, r3
 800673c:	706a      	strb	r2, [r5, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800673e:	78a3      	ldrb	r3, [r4, #2]
 8006740:	9a02      	ldr	r2, [sp, #8]
 8006742:	405a      	eors	r2, r3
 8006744:	70aa      	strb	r2, [r5, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8006746:	78e3      	ldrb	r3, [r4, #3]
 8006748:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800674a:	3404      	adds	r4, #4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800674c:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800674e:	9b04      	ldr	r3, [sp, #16]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8006750:	70ea      	strb	r2, [r5, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006752:	3304      	adds	r3, #4
 8006754:	9304      	str	r3, [sp, #16]
 8006756:	466b      	mov	r3, sp
 8006758:	9a07      	ldr	r2, [sp, #28]
 800675a:	7c1b      	ldrb	r3, [r3, #16]
 800675c:	429a      	cmp	r2, r3
 800675e:	d8bc      	bhi.n	80066da <lorawan_aes_set_key+0x56>
    return 0;
 8006760:	2000      	movs	r0, #0
 8006762:	e7a1      	b.n	80066a8 <lorawan_aes_set_key+0x24>
        else if( keylen > 24 && cc % keylen == 16 )
 8006764:	2e18      	cmp	r6, #24
 8006766:	d9e2      	bls.n	800672e <lorawan_aes_set_key+0xaa>
 8006768:	2910      	cmp	r1, #16
 800676a:	d1e0      	bne.n	800672e <lorawan_aes_set_key+0xaa>
            t0 = s_box(t0);
 800676c:	4b06      	ldr	r3, [pc, #24]	@ (8006788 <lorawan_aes_set_key+0x104>)
            t1 = s_box(t1);
 800676e:	9a01      	ldr	r2, [sp, #4]
            t0 = s_box(t0);
 8006770:	5ddf      	ldrb	r7, [r3, r7]
            t1 = s_box(t1);
 8006772:	5c9a      	ldrb	r2, [r3, r2]
 8006774:	9201      	str	r2, [sp, #4]
            t2 = s_box(t2);
 8006776:	9a02      	ldr	r2, [sp, #8]
 8006778:	5c9a      	ldrb	r2, [r3, r2]
 800677a:	9202      	str	r2, [sp, #8]
            t3 = s_box(t3);
 800677c:	9a03      	ldr	r2, [sp, #12]
 800677e:	5c9b      	ldrb	r3, [r3, r2]
 8006780:	9303      	str	r3, [sp, #12]
 8006782:	e7d4      	b.n	800672e <lorawan_aes_set_key+0xaa>
 8006784:	00010101 	.word	0x00010101
 8006788:	0800eb0d 	.word	0x0800eb0d

0800678c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800678c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ctx->rnd )
 800678e:	0017      	movs	r7, r2
{
 8006790:	b0a7      	sub	sp, #156	@ 0x9c
 8006792:	0016      	movs	r6, r2
 8006794:	9121      	str	r1, [sp, #132]	@ 0x84
    if( ctx->rnd )
 8006796:	32f0      	adds	r2, #240	@ 0xf0
 8006798:	7812      	ldrb	r2, [r2, #0]
{
 800679a:	0003      	movs	r3, r0
    if( ctx->rnd )
 800679c:	3710      	adds	r7, #16
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 800679e:	20ff      	movs	r0, #255	@ 0xff
    if( ctx->rnd )
 80067a0:	9201      	str	r2, [sp, #4]
 80067a2:	2a00      	cmp	r2, #0
 80067a4:	d100      	bne.n	80067a8 <lorawan_aes_encrypt+0x1c>
 80067a6:	e08c      	b.n	80068c2 <lorawan_aes_encrypt+0x136>
        copy_and_key( s1, in, ctx->ksch );
 80067a8:	0019      	movs	r1, r3
 80067aa:	0032      	movs	r2, r6
 80067ac:	a822      	add	r0, sp, #136	@ 0x88
 80067ae:	f7ff ff26 	bl	80065fe <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80067b2:	9b01      	ldr	r3, [sp, #4]
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	18fb      	adds	r3, r7, r3
 80067b8:	931f      	str	r3, [sp, #124]	@ 0x7c
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80067ba:	ab22      	add	r3, sp, #136	@ 0x88
 80067bc:	781b      	ldrb	r3, [r3, #0]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80067be:	9720      	str	r7, [sp, #128]	@ 0x80
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80067c0:	9302      	str	r3, [sp, #8]
 80067c2:	ab22      	add	r3, sp, #136	@ 0x88
 80067c4:	795b      	ldrb	r3, [r3, #5]
        for( r = 1 ; r < ctx->rnd ; ++r )
 80067c6:	3710      	adds	r7, #16
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80067c8:	9303      	str	r3, [sp, #12]
 80067ca:	ab22      	add	r3, sp, #136	@ 0x88
 80067cc:	7a9b      	ldrb	r3, [r3, #10]
 80067ce:	9304      	str	r3, [sp, #16]
 80067d0:	9a04      	ldr	r2, [sp, #16]
 80067d2:	4b90      	ldr	r3, [pc, #576]	@ (8006a14 <lorawan_aes_encrypt+0x288>)
 80067d4:	5c9a      	ldrb	r2, [r3, r2]
 80067d6:	9205      	str	r2, [sp, #20]
 80067d8:	aa22      	add	r2, sp, #136	@ 0x88
 80067da:	7bd2      	ldrb	r2, [r2, #15]
 80067dc:	9206      	str	r2, [sp, #24]
 80067de:	5c9a      	ldrb	r2, [r3, r2]
 80067e0:	9207      	str	r2, [sp, #28]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80067e2:	9a02      	ldr	r2, [sp, #8]
 80067e4:	5c9c      	ldrb	r4, [r3, r2]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80067e6:	9a03      	ldr	r2, [sp, #12]
 80067e8:	5c98      	ldrb	r0, [r3, r2]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80067ea:	aa22      	add	r2, sp, #136	@ 0x88
 80067ec:	7912      	ldrb	r2, [r2, #4]
 80067ee:	9208      	str	r2, [sp, #32]
 80067f0:	aa22      	add	r2, sp, #136	@ 0x88
 80067f2:	7a52      	ldrb	r2, [r2, #9]
 80067f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80067f6:	aa22      	add	r2, sp, #136	@ 0x88
 80067f8:	7b92      	ldrb	r2, [r2, #14]
 80067fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80067fc:	5c9a      	ldrb	r2, [r3, r2]
 80067fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006800:	aa22      	add	r2, sp, #136	@ 0x88
 8006802:	78d2      	ldrb	r2, [r2, #3]
 8006804:	920c      	str	r2, [sp, #48]	@ 0x30
 8006806:	5c9a      	ldrb	r2, [r3, r2]
 8006808:	4694      	mov	ip, r2
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800680a:	9a08      	ldr	r2, [sp, #32]
 800680c:	5c9a      	ldrb	r2, [r3, r2]
 800680e:	920d      	str	r2, [sp, #52]	@ 0x34
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8006810:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006812:	5c9a      	ldrb	r2, [r3, r2]
 8006814:	920e      	str	r2, [sp, #56]	@ 0x38
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8006816:	aa22      	add	r2, sp, #136	@ 0x88
 8006818:	7a12      	ldrb	r2, [r2, #8]
 800681a:	920f      	str	r2, [sp, #60]	@ 0x3c
 800681c:	aa22      	add	r2, sp, #136	@ 0x88
 800681e:	7b52      	ldrb	r2, [r2, #13]
 8006820:	9210      	str	r2, [sp, #64]	@ 0x40
 8006822:	aa22      	add	r2, sp, #136	@ 0x88
 8006824:	7892      	ldrb	r2, [r2, #2]
 8006826:	9211      	str	r2, [sp, #68]	@ 0x44
 8006828:	5c9a      	ldrb	r2, [r3, r2]
 800682a:	9212      	str	r2, [sp, #72]	@ 0x48
 800682c:	aa22      	add	r2, sp, #136	@ 0x88
 800682e:	79d2      	ldrb	r2, [r2, #7]
 8006830:	9213      	str	r2, [sp, #76]	@ 0x4c
 8006832:	5c9a      	ldrb	r2, [r3, r2]
 8006834:	9214      	str	r2, [sp, #80]	@ 0x50
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8006836:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006838:	5c9a      	ldrb	r2, [r3, r2]
 800683a:	9215      	str	r2, [sp, #84]	@ 0x54
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800683c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800683e:	5c9a      	ldrb	r2, [r3, r2]
 8006840:	9216      	str	r2, [sp, #88]	@ 0x58
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8006842:	aa22      	add	r2, sp, #136	@ 0x88
 8006844:	7b12      	ldrb	r2, [r2, #12]
 8006846:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006848:	aa22      	add	r2, sp, #136	@ 0x88
 800684a:	7852      	ldrb	r2, [r2, #1]
 800684c:	9218      	str	r2, [sp, #96]	@ 0x60
 800684e:	aa22      	add	r2, sp, #136	@ 0x88
 8006850:	7992      	ldrb	r2, [r2, #6]
 8006852:	9219      	str	r2, [sp, #100]	@ 0x64
 8006854:	5c9a      	ldrb	r2, [r3, r2]
 8006856:	921a      	str	r2, [sp, #104]	@ 0x68
 8006858:	aa22      	add	r2, sp, #136	@ 0x88
 800685a:	7ad2      	ldrb	r2, [r2, #11]
 800685c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800685e:	5c9a      	ldrb	r2, [r3, r2]
 8006860:	921c      	str	r2, [sp, #112]	@ 0x70
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8006862:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006864:	5c9a      	ldrb	r2, [r3, r2]
 8006866:	921d      	str	r2, [sp, #116]	@ 0x74
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8006868:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800686a:	5c9b      	ldrb	r3, [r3, r2]
 800686c:	931e      	str	r3, [sp, #120]	@ 0x78
        for( r = 1 ; r < ctx->rnd ; ++r )
 800686e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8006870:	42bb      	cmp	r3, r7
 8006872:	d128      	bne.n	80068c6 <lorawan_aes_encrypt+0x13a>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8006874:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006876:	ab22      	add	r3, sp, #136	@ 0x88
 8006878:	711a      	strb	r2, [r3, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800687a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800687c:	7058      	strb	r0, [r3, #1]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800687e:	721a      	strb	r2, [r3, #8]
 8006880:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8006882:	701c      	strb	r4, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8006884:	731a      	strb	r2, [r3, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8006886:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8006888:	9821      	ldr	r0, [sp, #132]	@ 0x84
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800688a:	715a      	strb	r2, [r3, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800688c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800688e:	a922      	add	r1, sp, #136	@ 0x88
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8006890:	725a      	strb	r2, [r3, #9]
 8006892:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8006894:	735a      	strb	r2, [r3, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8006896:	9a05      	ldr	r2, [sp, #20]
 8006898:	709a      	strb	r2, [r3, #2]
 800689a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800689c:	729a      	strb	r2, [r3, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800689e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068a0:	719a      	strb	r2, [r3, #6]
 80068a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80068a4:	739a      	strb	r2, [r3, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 80068a6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80068a8:	73da      	strb	r2, [r3, #15]
 80068aa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80068ac:	72da      	strb	r2, [r3, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 80068ae:	4662      	mov	r2, ip
 80068b0:	71da      	strb	r2, [r3, #7]
 80068b2:	9a07      	ldr	r2, [sp, #28]
 80068b4:	70da      	strb	r2, [r3, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80068b6:	9b01      	ldr	r3, [sp, #4]
 80068b8:	011a      	lsls	r2, r3, #4
 80068ba:	18b2      	adds	r2, r6, r2
 80068bc:	f7ff fe9f 	bl	80065fe <copy_and_key>
    return 0;
 80068c0:	2000      	movs	r0, #0
}
 80068c2:	b027      	add	sp, #156	@ 0x9c
 80068c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80068c6:	4b54      	ldr	r3, [pc, #336]	@ (8006a18 <lorawan_aes_encrypt+0x28c>)
 80068c8:	9d02      	ldr	r5, [sp, #8]
 80068ca:	9907      	ldr	r1, [sp, #28]
 80068cc:	9a05      	ldr	r2, [sp, #20]
 80068ce:	5d5d      	ldrb	r5, [r3, r5]
 80068d0:	404a      	eors	r2, r1
 80068d2:	4055      	eors	r5, r2
 80068d4:	9903      	ldr	r1, [sp, #12]
 80068d6:	4a51      	ldr	r2, [pc, #324]	@ (8006a1c <lorawan_aes_encrypt+0x290>)
 80068d8:	5c51      	ldrb	r1, [r2, r1]
 80068da:	404d      	eors	r5, r1
 80068dc:	a922      	add	r1, sp, #136	@ 0x88
 80068de:	700d      	strb	r5, [r1, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80068e0:	9d03      	ldr	r5, [sp, #12]
 80068e2:	9907      	ldr	r1, [sp, #28]
 80068e4:	5d5d      	ldrb	r5, [r3, r5]
 80068e6:	4061      	eors	r1, r4
 80068e8:	4069      	eors	r1, r5
 80068ea:	9d04      	ldr	r5, [sp, #16]
 80068ec:	5d55      	ldrb	r5, [r2, r5]
 80068ee:	4069      	eors	r1, r5
 80068f0:	ad22      	add	r5, sp, #136	@ 0x88
 80068f2:	7069      	strb	r1, [r5, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80068f4:	0021      	movs	r1, r4
 80068f6:	9c04      	ldr	r4, [sp, #16]
 80068f8:	4041      	eors	r1, r0
 80068fa:	5d1c      	ldrb	r4, [r3, r4]
 80068fc:	404c      	eors	r4, r1
 80068fe:	9906      	ldr	r1, [sp, #24]
 8006900:	5c51      	ldrb	r1, [r2, r1]
 8006902:	404c      	eors	r4, r1
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8006904:	9905      	ldr	r1, [sp, #20]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8006906:	70ac      	strb	r4, [r5, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8006908:	4041      	eors	r1, r0
 800690a:	0008      	movs	r0, r1
 800690c:	9902      	ldr	r1, [sp, #8]
 800690e:	5c51      	ldrb	r1, [r2, r1]
 8006910:	4041      	eors	r1, r0
 8006912:	9806      	ldr	r0, [sp, #24]
 8006914:	5c18      	ldrb	r0, [r3, r0]
 8006916:	4041      	eors	r1, r0
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8006918:	4660      	mov	r0, ip
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800691a:	70e9      	strb	r1, [r5, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800691c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800691e:	4041      	eors	r1, r0
 8006920:	9808      	ldr	r0, [sp, #32]
 8006922:	5c18      	ldrb	r0, [r3, r0]
 8006924:	4041      	eors	r1, r0
 8006926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006928:	5c10      	ldrb	r0, [r2, r0]
 800692a:	4041      	eors	r1, r0
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800692c:	4660      	mov	r0, ip
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800692e:	7129      	strb	r1, [r5, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8006930:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006932:	4048      	eors	r0, r1
 8006934:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006936:	5c59      	ldrb	r1, [r3, r1]
 8006938:	4041      	eors	r1, r0
 800693a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800693c:	5c10      	ldrb	r0, [r2, r0]
 800693e:	4041      	eors	r1, r0
 8006940:	7169      	strb	r1, [r5, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8006942:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006944:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006946:	4048      	eors	r0, r1
 8006948:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800694a:	5c59      	ldrb	r1, [r3, r1]
 800694c:	4041      	eors	r1, r0
 800694e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006950:	5c10      	ldrb	r0, [r2, r0]
 8006952:	4041      	eors	r1, r0
 8006954:	71a9      	strb	r1, [r5, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8006956:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8006958:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800695a:	4041      	eors	r1, r0
 800695c:	9808      	ldr	r0, [sp, #32]
 800695e:	5c10      	ldrb	r0, [r2, r0]
 8006960:	4048      	eors	r0, r1
 8006962:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006964:	5c59      	ldrb	r1, [r3, r1]
 8006966:	4048      	eors	r0, r1
 8006968:	71e8      	strb	r0, [r5, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800696a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800696c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800696e:	4041      	eors	r1, r0
 8006970:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8006972:	5c18      	ldrb	r0, [r3, r0]
 8006974:	4041      	eors	r1, r0
 8006976:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006978:	5c10      	ldrb	r0, [r2, r0]
 800697a:	4041      	eors	r1, r0
 800697c:	7229      	strb	r1, [r5, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800697e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8006980:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8006982:	4048      	eors	r0, r1
 8006984:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006986:	5c59      	ldrb	r1, [r3, r1]
 8006988:	4041      	eors	r1, r0
 800698a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800698c:	5c10      	ldrb	r0, [r2, r0]
 800698e:	4041      	eors	r1, r0
 8006990:	7269      	strb	r1, [r5, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8006992:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8006994:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8006996:	4048      	eors	r0, r1
 8006998:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800699a:	5c59      	ldrb	r1, [r3, r1]
 800699c:	4041      	eors	r1, r0
 800699e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80069a0:	5c10      	ldrb	r0, [r2, r0]
 80069a2:	4041      	eors	r1, r0
 80069a4:	72a9      	strb	r1, [r5, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80069a6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80069a8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80069aa:	4041      	eors	r1, r0
 80069ac:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80069ae:	5c10      	ldrb	r0, [r2, r0]
 80069b0:	4048      	eors	r0, r1
 80069b2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80069b4:	5c59      	ldrb	r1, [r3, r1]
 80069b6:	4048      	eors	r0, r1
 80069b8:	72e8      	strb	r0, [r5, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80069ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069bc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80069be:	4041      	eors	r1, r0
 80069c0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80069c2:	5c18      	ldrb	r0, [r3, r0]
 80069c4:	4041      	eors	r1, r0
 80069c6:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80069c8:	5c10      	ldrb	r0, [r2, r0]
 80069ca:	4041      	eors	r1, r0
 80069cc:	7329      	strb	r1, [r5, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80069ce:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80069d0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80069d2:	4048      	eors	r0, r1
 80069d4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80069d6:	5c59      	ldrb	r1, [r3, r1]
 80069d8:	4041      	eors	r1, r0
 80069da:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80069dc:	5c10      	ldrb	r0, [r2, r0]
 80069de:	4041      	eors	r1, r0
 80069e0:	7369      	strb	r1, [r5, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80069e2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80069e4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80069e6:	4048      	eors	r0, r1
 80069e8:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80069ea:	5c59      	ldrb	r1, [r3, r1]
 80069ec:	4041      	eors	r1, r0
 80069ee:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80069f0:	5c10      	ldrb	r0, [r2, r0]
 80069f2:	4041      	eors	r1, r0
 80069f4:	73a9      	strb	r1, [r5, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80069f6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80069f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069fa:	4041      	eors	r1, r0
 80069fc:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80069fe:	5c12      	ldrb	r2, [r2, r0]
    xor_block(d, k);
 8006a00:	0028      	movs	r0, r5
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006a02:	4051      	eors	r1, r2
 8006a04:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006a06:	5c9b      	ldrb	r3, [r3, r2]
 8006a08:	4059      	eors	r1, r3
 8006a0a:	73e9      	strb	r1, [r5, #15]
    xor_block(d, k);
 8006a0c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006a0e:	f7ff fdb5 	bl	800657c <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8006a12:	e6d2      	b.n	80067ba <lorawan_aes_encrypt+0x2e>
 8006a14:	0800eb0d 	.word	0x0800eb0d
 8006a18:	0800ea0d 	.word	0x0800ea0d
 8006a1c:	0800e90d 	.word	0x0800e90d

08006a20 <SecureElementGetKeyByID>:
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 8006a20:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <SecureElementGetKeyByID+0x2c>)
{
 8006a22:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (SeNvm->KeyList[i].KeyID == keyID)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	2511      	movs	r5, #17
 8006a28:	0016      	movs	r6, r2
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	3610      	adds	r6, #16
 8006a2e:	002c      	movs	r4, r5
 8006a30:	435c      	muls	r4, r3
 8006a32:	5d37      	ldrb	r7, [r6, r4]
 8006a34:	4287      	cmp	r7, r0
 8006a36:	d104      	bne.n	8006a42 <SecureElementGetKeyByID+0x22>
        {
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
 8006a38:	2000      	movs	r0, #0
            *keyItem = &(SeNvm->KeyList[i]);
 8006a3a:	3410      	adds	r4, #16
 8006a3c:	1912      	adds	r2, r2, r4
 8006a3e:	600a      	str	r2, [r1, #0]
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 8006a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8006a42:	3301      	adds	r3, #1
 8006a44:	2b0a      	cmp	r3, #10
 8006a46:	d1f2      	bne.n	8006a2e <SecureElementGetKeyByID+0xe>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006a48:	2003      	movs	r0, #3
 8006a4a:	e7f9      	b.n	8006a40 <SecureElementGetKeyByID+0x20>
 8006a4c:	200005dc 	.word	0x200005dc

08006a50 <ComputeCmac>:
{
 8006a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a52:	b0cf      	sub	sp, #316	@ 0x13c
 8006a54:	0006      	movs	r6, r0
 8006a56:	000d      	movs	r5, r1
 8006a58:	0017      	movs	r7, r2
        return SECURE_ELEMENT_ERROR_NPE;
 8006a5a:	2402      	movs	r4, #2
{
 8006a5c:	9301      	str	r3, [sp, #4]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8006a5e:	2900      	cmp	r1, #0
 8006a60:	d023      	beq.n	8006aaa <ComputeCmac+0x5a>
 8006a62:	9b54      	ldr	r3, [sp, #336]	@ 0x150
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d020      	beq.n	8006aaa <ComputeCmac+0x5a>
    AES_CMAC_Init( aesCmacCtx );
 8006a68:	a808      	add	r0, sp, #32
 8006a6a:	f7ff fc57 	bl	800631c <AES_CMAC_Init>
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8006a6e:	9801      	ldr	r0, [sp, #4]
 8006a70:	a903      	add	r1, sp, #12
 8006a72:	f7ff ffd5 	bl	8006a20 <SecureElementGetKeyByID>
 8006a76:	1e04      	subs	r4, r0, #0
    if( retval == SECURE_ELEMENT_SUCCESS )
 8006a78:	d117      	bne.n	8006aaa <ComputeCmac+0x5a>
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8006a7a:	9903      	ldr	r1, [sp, #12]
 8006a7c:	a808      	add	r0, sp, #32
 8006a7e:	3101      	adds	r1, #1
 8006a80:	f7ff fc5c 	bl	800633c <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8006a84:	2e00      	cmp	r6, #0
 8006a86:	d004      	beq.n	8006a92 <ComputeCmac+0x42>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 8006a88:	2210      	movs	r2, #16
 8006a8a:	0031      	movs	r1, r6
 8006a8c:	a808      	add	r0, sp, #32
 8006a8e:	f7ff fc5c 	bl	800634a <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8006a92:	003a      	movs	r2, r7
 8006a94:	0029      	movs	r1, r5
 8006a96:	a808      	add	r0, sp, #32
 8006a98:	f7ff fc57 	bl	800634a <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8006a9c:	a908      	add	r1, sp, #32
 8006a9e:	a804      	add	r0, sp, #16
 8006aa0:	f7ff fcc0 	bl	8006424 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8006aa4:	9b04      	ldr	r3, [sp, #16]
 8006aa6:	9a54      	ldr	r2, [sp, #336]	@ 0x150
 8006aa8:	6013      	str	r3, [r2, #0]
}
 8006aaa:	0020      	movs	r0, r4
 8006aac:	b04f      	add	sp, #316	@ 0x13c
 8006aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ab0 <PrintKey>:
{
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	b092      	sub	sp, #72	@ 0x48
    retval = SecureElementGetKeyByID(key, &keyItem);
 8006ab4:	a911      	add	r1, sp, #68	@ 0x44
{
 8006ab6:	0004      	movs	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 8006ab8:	f7ff ffb2 	bl	8006a20 <SecureElementGetKeyByID>
 8006abc:	1e01      	subs	r1, r0, #0
    if (retval == SECURE_ELEMENT_SUCCESS)
 8006abe:	d133      	bne.n	8006b28 <PrintKey+0x78>
        if (key == APP_KEY)
 8006ac0:	2c02      	cmp	r4, #2
 8006ac2:	d033      	beq.n	8006b2c <PrintKey+0x7c>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8006ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8006b34 <PrintKey+0x84>)
 8006ac6:	2c03      	cmp	r4, #3
 8006ac8:	d003      	beq.n	8006ad2 <PrintKey+0x22>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 8006aca:	4b1b      	ldr	r3, [pc, #108]	@ (8006b38 <PrintKey+0x88>)
 8006acc:	2c01      	cmp	r4, #1
 8006ace:	d100      	bne.n	8006ad2 <PrintKey+0x22>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 8006ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b3c <PrintKey+0x8c>)
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8006ad2:	000a      	movs	r2, r1
 8006ad4:	2002      	movs	r0, #2
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 8006ad6:	f007 f89b 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006ada:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006adc:	4b18      	ldr	r3, [pc, #96]	@ (8006b40 <PrintKey+0x90>)
 8006ade:	7c11      	ldrb	r1, [r2, #16]
 8006ae0:	2002      	movs	r0, #2
 8006ae2:	910f      	str	r1, [sp, #60]	@ 0x3c
 8006ae4:	7bd1      	ldrb	r1, [r2, #15]
 8006ae6:	910e      	str	r1, [sp, #56]	@ 0x38
 8006ae8:	7b91      	ldrb	r1, [r2, #14]
 8006aea:	910d      	str	r1, [sp, #52]	@ 0x34
 8006aec:	7b51      	ldrb	r1, [r2, #13]
 8006aee:	910c      	str	r1, [sp, #48]	@ 0x30
 8006af0:	7b11      	ldrb	r1, [r2, #12]
 8006af2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006af4:	7ad1      	ldrb	r1, [r2, #11]
 8006af6:	910a      	str	r1, [sp, #40]	@ 0x28
 8006af8:	7a91      	ldrb	r1, [r2, #10]
 8006afa:	9109      	str	r1, [sp, #36]	@ 0x24
 8006afc:	7a51      	ldrb	r1, [r2, #9]
 8006afe:	9108      	str	r1, [sp, #32]
 8006b00:	7a11      	ldrb	r1, [r2, #8]
 8006b02:	9107      	str	r1, [sp, #28]
 8006b04:	79d1      	ldrb	r1, [r2, #7]
 8006b06:	9106      	str	r1, [sp, #24]
 8006b08:	7991      	ldrb	r1, [r2, #6]
 8006b0a:	9105      	str	r1, [sp, #20]
 8006b0c:	7951      	ldrb	r1, [r2, #5]
 8006b0e:	9104      	str	r1, [sp, #16]
 8006b10:	7911      	ldrb	r1, [r2, #4]
 8006b12:	9103      	str	r1, [sp, #12]
 8006b14:	78d1      	ldrb	r1, [r2, #3]
 8006b16:	9102      	str	r1, [sp, #8]
 8006b18:	7891      	ldrb	r1, [r2, #2]
 8006b1a:	9101      	str	r1, [sp, #4]
 8006b1c:	7852      	ldrb	r2, [r2, #1]
 8006b1e:	9200      	str	r2, [sp, #0]
 8006b20:	2200      	movs	r2, #0
 8006b22:	0011      	movs	r1, r2
 8006b24:	f007 f874 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
}
 8006b28:	b012      	add	sp, #72	@ 0x48
 8006b2a:	bd10      	pop	{r4, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 8006b2c:	0002      	movs	r2, r0
 8006b2e:	4b05      	ldr	r3, [pc, #20]	@ (8006b44 <PrintKey+0x94>)
 8006b30:	0020      	movs	r0, r4
 8006b32:	e7d0      	b.n	8006ad6 <PrintKey+0x26>
 8006b34:	0800f114 	.word	0x0800f114
 8006b38:	0800f0ea 	.word	0x0800f0ea
 8006b3c:	0800f0ff 	.word	0x0800f0ff
 8006b40:	0800f13e 	.word	0x0800f13e
 8006b44:	0800f129 	.word	0x0800f129

08006b48 <SecureElementInit>:
{
 8006b48:	b510      	push	{r4, lr}
 8006b4a:	b0b0      	sub	sp, #192	@ 0xc0
    SecureElementNvmData_t seNvmInit =
 8006b4c:	22b0      	movs	r2, #176	@ 0xb0
 8006b4e:	2100      	movs	r1, #0
{
 8006b50:	0004      	movs	r4, r0
    SecureElementNvmData_t seNvmInit =
 8006b52:	a804      	add	r0, sp, #16
 8006b54:	f007 fd98 	bl	800e688 <memset>
 8006b58:	2210      	movs	r2, #16
 8006b5a:	4921      	ldr	r1, [pc, #132]	@ (8006be0 <SecureElementInit+0x98>)
 8006b5c:	4668      	mov	r0, sp
 8006b5e:	f007 fdbf 	bl	800e6e0 <memcpy>
 8006b62:	2011      	movs	r0, #17
 8006b64:	2244      	movs	r2, #68	@ 0x44
 8006b66:	491f      	ldr	r1, [pc, #124]	@ (8006be4 <SecureElementInit+0x9c>)
 8006b68:	4468      	add	r0, sp
 8006b6a:	f007 fdb9 	bl	800e6e0 <memcpy>
 8006b6e:	2365      	movs	r3, #101	@ 0x65
 8006b70:	227f      	movs	r2, #127	@ 0x7f
 8006b72:	446b      	add	r3, sp
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	2376      	movs	r3, #118	@ 0x76
 8006b78:	3201      	adds	r2, #1
 8006b7a:	446b      	add	r3, sp
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	2387      	movs	r3, #135	@ 0x87
 8006b80:	3201      	adds	r2, #1
 8006b82:	446b      	add	r3, sp
 8006b84:	701a      	strb	r2, [r3, #0]
 8006b86:	ab26      	add	r3, sp, #152	@ 0x98
 8006b88:	3201      	adds	r2, #1
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	23a9      	movs	r3, #169	@ 0xa9
 8006b8e:	3201      	adds	r2, #1
 8006b90:	446b      	add	r3, sp
        return SECURE_ELEMENT_ERROR_NPE;
 8006b92:	2002      	movs	r0, #2
    SecureElementNvmData_t seNvmInit =
 8006b94:	701a      	strb	r2, [r3, #0]
    if( nvm == NULL )
 8006b96:	2c00      	cmp	r4, #0
 8006b98:	d01f      	beq.n	8006bda <SecureElementInit+0x92>
    SeNvm = nvm;
 8006b9a:	4b13      	ldr	r3, [pc, #76]	@ (8006be8 <SecureElementInit+0xa0>)
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8006b9c:	4669      	mov	r1, sp
 8006b9e:	0020      	movs	r0, r4
 8006ba0:	323d      	adds	r2, #61	@ 0x3d
    SeNvm = nvm;
 8006ba2:	601c      	str	r4, [r3, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8006ba4:	f005 fc8a 	bl	800c4bc <memcpy1>
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8006ba8:	2200      	movs	r2, #0
 8006baa:	4b10      	ldr	r3, [pc, #64]	@ (8006bec <SecureElementInit+0xa4>)
 8006bac:	0011      	movs	r1, r2
 8006bae:	2002      	movs	r0, #2
 8006bb0:	f007 f82e 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	f7ff ff7b 	bl	8006ab0 <PrintKey>
    PrintKey(NWK_KEY);
 8006bba:	2001      	movs	r0, #1
 8006bbc:	f7ff ff78 	bl	8006ab0 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf0 <SecureElementInit+0xa8>)
 8006bc4:	0011      	movs	r1, r2
 8006bc6:	2002      	movs	r0, #2
 8006bc8:	f007 f822 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 8006bcc:	2003      	movs	r0, #3
 8006bce:	f7ff ff6f 	bl	8006ab0 <PrintKey>
    PrintKey(NWK_S_KEY);
 8006bd2:	2002      	movs	r0, #2
 8006bd4:	f7ff ff6c 	bl	8006ab0 <PrintKey>
    return SECURE_ELEMENT_SUCCESS;
 8006bd8:	2000      	movs	r0, #0
}
 8006bda:	b030      	add	sp, #192	@ 0xc0
 8006bdc:	bd10      	pop	{r4, pc}
 8006bde:	46c0      	nop			@ (mov r8, r8)
 8006be0:	0800ec0d 	.word	0x0800ec0d
 8006be4:	0800f1ba 	.word	0x0800f1ba
 8006be8:	200005dc 	.word	0x200005dc
 8006bec:	0800f190 	.word	0x0800f190
 8006bf0:	0800f1a5 	.word	0x0800f1a5

08006bf4 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 8006bf4:	b513      	push	{r0, r1, r4, lr}
 8006bf6:	0004      	movs	r4, r0
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006bf8:	2003      	movs	r0, #3
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8006bfa:	2b7e      	cmp	r3, #126	@ 0x7e
 8006bfc:	d804      	bhi.n	8006c08 <SecureElementComputeAesCmac+0x14>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8006bfe:	9804      	ldr	r0, [sp, #16]
 8006c00:	9000      	str	r0, [sp, #0]
 8006c02:	0020      	movs	r0, r4
 8006c04:	f7ff ff24 	bl	8006a50 <ComputeCmac>
}
 8006c08:	bd16      	pop	{r1, r2, r4, pc}

08006c0a <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 8006c0a:	b530      	push	{r4, r5, lr}
 8006c0c:	0005      	movs	r5, r0
 8006c0e:	0014      	movs	r4, r2
    if( buffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006c10:	2002      	movs	r0, #2
{
 8006c12:	b085      	sub	sp, #20
    if( buffer == NULL )
 8006c14:	2d00      	cmp	r5, #0
 8006c16:	d00e      	beq.n	8006c36 <SecureElementVerifyAesCmac+0x2c>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 8006c18:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8006c1a:	aa03      	add	r2, sp, #12
 8006c1c:	9200      	str	r2, [sp, #0]
 8006c1e:	000a      	movs	r2, r1
 8006c20:	0029      	movs	r1, r5
    uint32_t              compCmac = 0;
 8006c22:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8006c24:	f7ff ff14 	bl	8006a50 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d104      	bne.n	8006c36 <SecureElementVerifyAesCmac+0x2c>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8006c2c:	9803      	ldr	r0, [sp, #12]
 8006c2e:	1b00      	subs	r0, r0, r4
 8006c30:	1e43      	subs	r3, r0, #1
 8006c32:	4198      	sbcs	r0, r3
 8006c34:	b2c0      	uxtb	r0, r0
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8006c36:	b005      	add	sp, #20
 8006c38:	bd30      	pop	{r4, r5, pc}

08006c3a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 8006c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c3c:	b0c1      	sub	sp, #260	@ 0x104
 8006c3e:	000e      	movs	r6, r1
 8006c40:	0015      	movs	r5, r2
 8006c42:	001f      	movs	r7, r3
    if( buffer == NULL || encBuffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006c44:	2402      	movs	r4, #2
{
 8006c46:	9001      	str	r0, [sp, #4]
    if( buffer == NULL || encBuffer == NULL )
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d01b      	beq.n	8006c84 <SecureElementAesEncrypt+0x4a>
 8006c4c:	2f00      	cmp	r7, #0
 8006c4e:	d019      	beq.n	8006c84 <SecureElementAesEncrypt+0x4a>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8006c50:	230f      	movs	r3, #15
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8006c52:	3403      	adds	r4, #3
    if( ( size % 16 ) != 0 )
 8006c54:	4019      	ands	r1, r3
 8006c56:	421e      	tst	r6, r3
 8006c58:	d114      	bne.n	8006c84 <SecureElementAesEncrypt+0x4a>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8006c5a:	22f0      	movs	r2, #240	@ 0xf0
 8006c5c:	a803      	add	r0, sp, #12
 8006c5e:	f005 fc43 	bl	800c4e8 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8006c62:	0028      	movs	r0, r5
 8006c64:	a902      	add	r1, sp, #8
 8006c66:	f7ff fedb 	bl	8006a20 <SecureElementGetKeyByID>
 8006c6a:	1e04      	subs	r4, r0, #0

    if( retval == SECURE_ELEMENT_SUCCESS )
 8006c6c:	d10a      	bne.n	8006c84 <SecureElementAesEncrypt+0x4a>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 8006c6e:	9802      	ldr	r0, [sp, #8]
 8006c70:	2110      	movs	r1, #16
 8006c72:	3001      	adds	r0, #1
 8006c74:	aa03      	add	r2, sp, #12
 8006c76:	f7ff fd05 	bl	8006684 <lorawan_aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
 8006c7a:	0035      	movs	r5, r6
 8006c7c:	1b70      	subs	r0, r6, r5
 8006c7e:	b2c0      	uxtb	r0, r0
 8006c80:	2d00      	cmp	r5, #0
 8006c82:	d102      	bne.n	8006c8a <SecureElementAesEncrypt+0x50>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8006c84:	0020      	movs	r0, r4
 8006c86:	b041      	add	sp, #260	@ 0x104
 8006c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8006c8a:	9b01      	ldr	r3, [sp, #4]
 8006c8c:	1839      	adds	r1, r7, r0
 8006c8e:	aa03      	add	r2, sp, #12
 8006c90:	1818      	adds	r0, r3, r0
            size  = size - 16;
 8006c92:	3d10      	subs	r5, #16
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8006c94:	f7ff fd7a 	bl	800678c <lorawan_aes_encrypt>
            size  = size - 16;
 8006c98:	b2ad      	uxth	r5, r5
 8006c9a:	e7ef      	b.n	8006c7c <SecureElementAesEncrypt+0x42>

08006c9c <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8006c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
 8006c9e:	4e19      	ldr	r6, [pc, #100]	@ (8006d04 <SecureElementSetKey.part.0+0x68>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8006ca0:	000d      	movs	r5, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 8006ca2:	6832      	ldr	r2, [r6, #0]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	0014      	movs	r4, r2
 8006ca8:	2111      	movs	r1, #17
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8006caa:	b085      	sub	sp, #20
        if( SeNvm->KeyList[i].KeyID == keyID )
 8006cac:	3410      	adds	r4, #16
 8006cae:	000f      	movs	r7, r1
 8006cb0:	435f      	muls	r7, r3
 8006cb2:	5de7      	ldrb	r7, [r4, r7]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	4287      	cmp	r7, r0
 8006cb8:	d11f      	bne.n	8006cfa <SecureElementSetKey.part.0+0x5e>
            if ( keyID == MC_KEY_0 )
 8006cba:	4359      	muls	r1, r3
 8006cbc:	000c      	movs	r4, r1
 8006cbe:	2880      	cmp	r0, #128	@ 0x80
 8006cc0:	d114      	bne.n	8006cec <SecureElementSetKey.part.0+0x50>
                uint8_t               decryptedKey[16] = { 0 };
 8006cc2:	2210      	movs	r2, #16
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	4668      	mov	r0, sp
 8006cc8:	f007 fcde 	bl	800e688 <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8006ccc:	227f      	movs	r2, #127	@ 0x7f
 8006cce:	2110      	movs	r1, #16
 8006cd0:	0028      	movs	r0, r5
 8006cd2:	466b      	mov	r3, sp
 8006cd4:	f7ff ffb1 	bl	8006c3a <SecureElementAesEncrypt>
 8006cd8:	0005      	movs	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8006cda:	6830      	ldr	r0, [r6, #0]
 8006cdc:	2210      	movs	r2, #16
 8006cde:	4669      	mov	r1, sp
 8006ce0:	1900      	adds	r0, r0, r4
 8006ce2:	f005 fbeb 	bl	800c4bc <memcpy1>
}
 8006ce6:	0028      	movs	r0, r5
 8006ce8:	b005      	add	sp, #20
 8006cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8006cec:	1850      	adds	r0, r2, r1
 8006cee:	0029      	movs	r1, r5
 8006cf0:	2210      	movs	r2, #16
 8006cf2:	f005 fbe3 	bl	800c4bc <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8006cf6:	2500      	movs	r5, #0
 8006cf8:	e7f5      	b.n	8006ce6 <SecureElementSetKey.part.0+0x4a>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8006cfa:	2b0a      	cmp	r3, #10
 8006cfc:	d1d7      	bne.n	8006cae <SecureElementSetKey.part.0+0x12>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006cfe:	2503      	movs	r5, #3
 8006d00:	e7f1      	b.n	8006ce6 <SecureElementSetKey.part.0+0x4a>
 8006d02:	46c0      	nop			@ (mov r8, r8)
 8006d04:	200005dc 	.word	0x200005dc

08006d08 <SecureElementSetKey>:
        return SECURE_ELEMENT_ERROR_NPE;
 8006d08:	2302      	movs	r3, #2
{
 8006d0a:	b510      	push	{r4, lr}
    if( key == NULL )
 8006d0c:	2900      	cmp	r1, #0
 8006d0e:	d002      	beq.n	8006d16 <SecureElementSetKey+0xe>
 8006d10:	f7ff ffc4 	bl	8006c9c <SecureElementSetKey.part.0>
 8006d14:	0003      	movs	r3, r0
}
 8006d16:	0018      	movs	r0, r3
 8006d18:	bd10      	pop	{r4, pc}

08006d1a <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8006d1a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006d1c:	0005      	movs	r5, r0
 8006d1e:	000e      	movs	r6, r1
 8006d20:	0014      	movs	r4, r2
    if( input == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006d22:	2002      	movs	r0, #2
    if( input == NULL )
 8006d24:	2d00      	cmp	r5, #0
 8006d26:	d015      	beq.n	8006d54 <SecureElementDeriveAndStoreKey+0x3a>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8006d28:	2a7f      	cmp	r2, #127	@ 0x7f
 8006d2a:	d102      	bne.n	8006d32 <SecureElementDeriveAndStoreKey+0x18>
    {
        if( rootKeyID != MC_ROOT_KEY )
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006d2c:	3001      	adds	r0, #1
        if( rootKeyID != MC_ROOT_KEY )
 8006d2e:	2904      	cmp	r1, #4
 8006d30:	d110      	bne.n	8006d54 <SecureElementDeriveAndStoreKey+0x3a>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8006d32:	2210      	movs	r2, #16
 8006d34:	2100      	movs	r1, #0
 8006d36:	4668      	mov	r0, sp
 8006d38:	f007 fca6 	bl	800e688 <memset>
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8006d3c:	466b      	mov	r3, sp
 8006d3e:	0032      	movs	r2, r6
 8006d40:	2110      	movs	r1, #16
 8006d42:	0028      	movs	r0, r5
 8006d44:	f7ff ff79 	bl	8006c3a <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d103      	bne.n	8006d54 <SecureElementDeriveAndStoreKey+0x3a>
    if( key == NULL )
 8006d4c:	4669      	mov	r1, sp
 8006d4e:	0020      	movs	r0, r4
 8006d50:	f7ff ffa4 	bl	8006c9c <SecureElementSetKey.part.0>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8006d54:	b004      	add	sp, #16
 8006d56:	bd70      	pop	{r4, r5, r6, pc}

08006d58 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	001d      	movs	r5, r3
 8006d5c:	ab06      	add	r3, sp, #24
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006d5e:	2002      	movs	r0, #2
{
 8006d60:	781c      	ldrb	r4, [r3, #0]
 8006d62:	9e07      	ldr	r6, [sp, #28]
 8006d64:	9f08      	ldr	r7, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	d034      	beq.n	8006dd4 <SecureElementProcessJoinAccept+0x7c>
 8006d6a:	2e00      	cmp	r6, #0
 8006d6c:	d032      	beq.n	8006dd4 <SecureElementProcessJoinAccept+0x7c>
 8006d6e:	2f00      	cmp	r7, #0
 8006d70:	d030      	beq.n	8006dd4 <SecureElementProcessJoinAccept+0x7c>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8006d72:	3003      	adds	r0, #3
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8006d74:	2c21      	cmp	r4, #33	@ 0x21
 8006d76:	d82d      	bhi.n	8006dd4 <SecureElementProcessJoinAccept+0x7c>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8006d78:	0022      	movs	r2, r4
 8006d7a:	0029      	movs	r1, r5
 8006d7c:	0030      	movs	r0, r6
 8006d7e:	f005 fb9d 	bl	800c4bc <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8006d82:	1e61      	subs	r1, r4, #1
 8006d84:	1c73      	adds	r3, r6, #1
 8006d86:	2201      	movs	r2, #1
 8006d88:	b289      	uxth	r1, r1
 8006d8a:	1c68      	adds	r0, r5, #1
 8006d8c:	f7ff ff55 	bl	8006c3a <SecureElementAesEncrypt>
 8006d90:	0003      	movs	r3, r0
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8006d92:	2007      	movs	r0, #7
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d11d      	bne.n	8006dd4 <SecureElementProcessJoinAccept+0x7c>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8006d98:	7af3      	ldrb	r3, [r6, #11]
 8006d9a:	40c3      	lsrs	r3, r0
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8006d9c:	3803      	subs	r0, #3
    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8006d9e:	703b      	strb	r3, [r7, #0]
    if( *versionMinor == 0 )
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d117      	bne.n	8006dd4 <SecureElementProcessJoinAccept+0x7c>
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8006da4:	1932      	adds	r2, r6, r4
 8006da6:	1e93      	subs	r3, r2, #2
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006da8:	1e51      	subs	r1, r2, #1
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8006daa:	781b      	ldrb	r3, [r3, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006dac:	7809      	ldrb	r1, [r1, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8006dae:	041b      	lsls	r3, r3, #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006db0:	0609      	lsls	r1, r1, #24
 8006db2:	430b      	orrs	r3, r1
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8006db4:	1f11      	subs	r1, r2, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8006db6:	3a03      	subs	r2, #3
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8006db8:	7809      	ldrb	r1, [r1, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8006dba:	7812      	ldrb	r2, [r2, #0]
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	0212      	lsls	r2, r2, #8
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8006dc0:	3c04      	subs	r4, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006dc2:	431a      	orrs	r2, r3
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8006dc4:	0030      	movs	r0, r6
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	b2a1      	uxth	r1, r4
 8006dca:	f7ff ff1e 	bl	8006c0a <SecureElementVerifyAesCmac>
 8006dce:	1e43      	subs	r3, r0, #1
 8006dd0:	4198      	sbcs	r0, r3
 8006dd2:	b2c0      	uxtb	r0, r0
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8006dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006dd8 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8006dd8:	b510      	push	{r4, lr}
 8006dda:	0004      	movs	r4, r0
    if( randomNum == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006ddc:	2002      	movs	r0, #2
    if( randomNum == NULL )
 8006dde:	2c00      	cmp	r4, #0
 8006de0:	d004      	beq.n	8006dec <SecureElementRandomNumber+0x14>
    }
    *randomNum = Radio.Random();
 8006de2:	4b03      	ldr	r3, [pc, #12]	@ (8006df0 <SecureElementRandomNumber+0x18>)
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	4798      	blx	r3
 8006de8:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8006dea:	2000      	movs	r0, #0
}
 8006dec:	bd10      	pop	{r4, pc}
 8006dee:	46c0      	nop			@ (mov r8, r8)
 8006df0:	0800edf8 	.word	0x0800edf8

08006df4 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 8006df4:	0001      	movs	r1, r0
 8006df6:	b510      	push	{r4, lr}
    if( devEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006df8:	2002      	movs	r0, #2
    if( devEui == NULL )
 8006dfa:	2900      	cmp	r1, #0
 8006dfc:	d005      	beq.n	8006e0a <SecureElementSetDevEui+0x16>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8006dfe:	4b03      	ldr	r3, [pc, #12]	@ (8006e0c <SecureElementSetDevEui+0x18>)
 8006e00:	2208      	movs	r2, #8
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	f005 fb5a 	bl	800c4bc <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8006e08:	2000      	movs	r0, #0
}
 8006e0a:	bd10      	pop	{r4, pc}
 8006e0c:	200005dc 	.word	0x200005dc

08006e10 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
 8006e10:	4b01      	ldr	r3, [pc, #4]	@ (8006e18 <SecureElementGetDevEui+0x8>)
 8006e12:	6818      	ldr	r0, [r3, #0]
}
 8006e14:	4770      	bx	lr
 8006e16:	46c0      	nop			@ (mov r8, r8)
 8006e18:	200005dc 	.word	0x200005dc

08006e1c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 8006e1c:	0001      	movs	r1, r0
 8006e1e:	b510      	push	{r4, lr}
    if( joinEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006e20:	2002      	movs	r0, #2
    if( joinEui == NULL )
 8006e22:	2900      	cmp	r1, #0
 8006e24:	d006      	beq.n	8006e34 <SecureElementSetJoinEui+0x18>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 8006e26:	4b04      	ldr	r3, [pc, #16]	@ (8006e38 <SecureElementSetJoinEui+0x1c>)
 8006e28:	2208      	movs	r2, #8
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	3008      	adds	r0, #8
 8006e2e:	f005 fb45 	bl	800c4bc <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8006e32:	2000      	movs	r0, #0
}
 8006e34:	bd10      	pop	{r4, pc}
 8006e36:	46c0      	nop			@ (mov r8, r8)
 8006e38:	200005dc 	.word	0x200005dc

08006e3c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8006e3c:	4b01      	ldr	r3, [pc, #4]	@ (8006e44 <SecureElementGetJoinEui+0x8>)
 8006e3e:	6818      	ldr	r0, [r3, #0]
 8006e40:	3008      	adds	r0, #8
}
 8006e42:	4770      	bx	lr
 8006e44:	200005dc 	.word	0x200005dc

08006e48 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8006e48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8006e4a:	230a      	movs	r3, #10
 8006e4c:	a801      	add	r0, sp, #4
 8006e4e:	7003      	strb	r3, [r0, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8006e50:	f002 ffda 	bl	8009e08 <LoRaMacMlmeRequest>

    if( status == LORAMAC_STATUS_OK )
 8006e54:	1e43      	subs	r3, r0, #1
 8006e56:	4198      	sbcs	r0, r3
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
    }
}
 8006e58:	4240      	negs	r0, r0
 8006e5a:	b007      	add	sp, #28
 8006e5c:	bd00      	pop	{pc}
	...

08006e60 <McpsConfirm>:
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
    TxParams.IsMcpsConfirm = 1;
 8006e60:	2301      	movs	r3, #1
{
 8006e62:	b570      	push	{r4, r5, r6, lr}
    TxParams.IsMcpsConfirm = 1;
 8006e64:	4c10      	ldr	r4, [pc, #64]	@ (8006ea8 <McpsConfirm+0x48>)
{
 8006e66:	0005      	movs	r5, r0
    TxParams.IsMcpsConfirm = 1;
 8006e68:	7023      	strb	r3, [r4, #0]
    TxParams.Status = mcpsConfirm->Status;
 8006e6a:	7843      	ldrb	r3, [r0, #1]
 8006e6c:	0026      	movs	r6, r4
 8006e6e:	7063      	strb	r3, [r4, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8006e70:	7883      	ldrb	r3, [r0, #2]
 8006e72:	361c      	adds	r6, #28
 8006e74:	7123      	strb	r3, [r4, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006e76:	68c3      	ldr	r3, [r0, #12]
 8006e78:	60a3      	str	r3, [r4, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006e7a:	78c3      	ldrb	r3, [r0, #3]
 8006e7c:	7523      	strb	r3, [r4, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 8006e7e:	6903      	ldr	r3, [r0, #16]
 8006e80:	7563      	strb	r3, [r4, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006e82:	7903      	ldrb	r3, [r0, #4]

    LmHandlerCallbacks->OnTxData( &TxParams );
 8006e84:	0020      	movs	r0, r4
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006e86:	70e3      	strb	r3, [r4, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006e88:	69a3      	ldr	r3, [r4, #24]
 8006e8a:	3430      	adds	r4, #48	@ 0x30
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	4798      	blx	r3

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
    {
        if( LmHandlerPackages[i] != NULL )
 8006e90:	6833      	ldr	r3, [r6, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d004      	beq.n	8006ea0 <McpsConfirm+0x40>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <McpsConfirm+0x40>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8006e9c:	0028      	movs	r0, r5
 8006e9e:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006ea0:	3604      	adds	r6, #4
 8006ea2:	42b4      	cmp	r4, r6
 8006ea4:	d1f4      	bne.n	8006e90 <McpsConfirm+0x30>
}
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	200005e0 	.word	0x200005e0

08006eac <LmHandlerConfigure>:
{
 8006eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006eae:	4f5b      	ldr	r7, [pc, #364]	@ (800701c <LmHandlerConfigure+0x170>)
 8006eb0:	4b5b      	ldr	r3, [pc, #364]	@ (8007020 <LmHandlerConfigure+0x174>)
{
 8006eb2:	0001      	movs	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006eb4:	2210      	movs	r2, #16
{
 8006eb6:	b0a1      	sub	sp, #132	@ 0x84
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006eb8:	0038      	movs	r0, r7
 8006eba:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ebc:	f006 ffbc 	bl	800de38 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 8006ec0:	f7fa fe5e 	bl	8001b80 <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	783a      	ldrb	r2, [r7, #0]
 8006ec8:	6841      	ldr	r1, [r0, #4]
 8006eca:	4093      	lsls	r3, r2
 8006ecc:	0008      	movs	r0, r1
 8006ece:	4018      	ands	r0, r3
 8006ed0:	4219      	tst	r1, r3
 8006ed2:	d00a      	beq.n	8006eea <LmHandlerConfigure+0x3e>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8006ed4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ed8:	3140      	adds	r1, #64	@ 0x40
 8006eda:	3054      	adds	r0, #84	@ 0x54
 8006edc:	f002 fa74 	bl	80093c8 <LoRaMacInitialization>
 8006ee0:	1e06      	subs	r6, r0, #0
 8006ee2:	d008      	beq.n	8006ef6 <LmHandlerConfigure+0x4a>
            return LORAMAC_HANDLER_ERROR;
 8006ee4:	2001      	movs	r0, #1
 8006ee6:	4240      	negs	r0, r0
 8006ee8:	e095      	b.n	8007016 <LmHandlerConfigure+0x16a>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8006eea:	2201      	movs	r2, #1
 8006eec:	0001      	movs	r1, r0
 8006eee:	4b4d      	ldr	r3, [pc, #308]	@ (8007024 <LmHandlerConfigure+0x178>)
 8006ef0:	f006 fe8e 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 8006ef4:	e7fe      	b.n	8006ef4 <LmHandlerConfigure+0x48>
    nbNvmData = NvmDataMgmtRestore( );
 8006ef6:	f000 fcd0 	bl	800789a <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 8006efa:	1e42      	subs	r2, r0, #1
 8006efc:	4190      	sbcs	r0, r2
 8006efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    mibReq.Type = MIB_DEV_EUI;
 8006f00:	ad0e      	add	r5, sp, #56	@ 0x38
 8006f02:	3364      	adds	r3, #100	@ 0x64
    if( nbNvmData > 0 )
 8006f04:	7018      	strb	r0, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 8006f06:	2302      	movs	r3, #2
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006f08:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEV_EUI;
 8006f0a:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006f0c:	f002 fc88 	bl	8009820 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8006f10:	4c45      	ldr	r4, [pc, #276]	@ (8007028 <LmHandlerConfigure+0x17c>)
 8006f12:	2208      	movs	r2, #8
 8006f14:	0020      	movs	r0, r4
 8006f16:	6869      	ldr	r1, [r5, #4]
 8006f18:	f005 fad0 	bl	800c4bc <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8006f1c:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006f1e:	0028      	movs	r0, r5
    mibReq.Type = MIB_JOIN_EUI;
 8006f20:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006f22:	f002 fc7d 	bl	8009820 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8006f26:	0020      	movs	r0, r4
 8006f28:	2208      	movs	r2, #8
 8006f2a:	6869      	ldr	r1, [r5, #4]
 8006f2c:	3008      	adds	r0, #8
 8006f2e:	f005 fac5 	bl	800c4bc <memcpy1>
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8006f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	4798      	blx	r3
    mibReq.Type = MIB_DEV_ADDR;
 8006f3a:	2306      	movs	r3, #6
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8006f3c:	6160      	str	r0, [r4, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8006f3e:	6068      	str	r0, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006f40:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEV_ADDR;
 8006f42:	702b      	strb	r3, [r5, #0]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006f44:	f002 fd1e 	bl	8009984 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006f48:	79e2      	ldrb	r2, [r4, #7]
 8006f4a:	0031      	movs	r1, r6
 8006f4c:	9207      	str	r2, [sp, #28]
 8006f4e:	79a2      	ldrb	r2, [r4, #6]
 8006f50:	4b36      	ldr	r3, [pc, #216]	@ (800702c <LmHandlerConfigure+0x180>)
 8006f52:	9206      	str	r2, [sp, #24]
 8006f54:	7962      	ldrb	r2, [r4, #5]
 8006f56:	2002      	movs	r0, #2
 8006f58:	9205      	str	r2, [sp, #20]
 8006f5a:	7922      	ldrb	r2, [r4, #4]
 8006f5c:	9204      	str	r2, [sp, #16]
 8006f5e:	78e2      	ldrb	r2, [r4, #3]
 8006f60:	9203      	str	r2, [sp, #12]
 8006f62:	78a2      	ldrb	r2, [r4, #2]
 8006f64:	9202      	str	r2, [sp, #8]
 8006f66:	7862      	ldrb	r2, [r4, #1]
 8006f68:	9201      	str	r2, [sp, #4]
 8006f6a:	7822      	ldrb	r2, [r4, #0]
 8006f6c:	9200      	str	r2, [sp, #0]
 8006f6e:	0032      	movs	r2, r6
 8006f70:	f006 fe4e 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006f74:	7be2      	ldrb	r2, [r4, #15]
 8006f76:	0031      	movs	r1, r6
 8006f78:	9207      	str	r2, [sp, #28]
 8006f7a:	7ba2      	ldrb	r2, [r4, #14]
 8006f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8007030 <LmHandlerConfigure+0x184>)
 8006f7e:	9206      	str	r2, [sp, #24]
 8006f80:	7b62      	ldrb	r2, [r4, #13]
 8006f82:	2002      	movs	r0, #2
 8006f84:	9205      	str	r2, [sp, #20]
 8006f86:	7b22      	ldrb	r2, [r4, #12]
 8006f88:	9204      	str	r2, [sp, #16]
 8006f8a:	7ae2      	ldrb	r2, [r4, #11]
 8006f8c:	9203      	str	r2, [sp, #12]
 8006f8e:	7aa2      	ldrb	r2, [r4, #10]
 8006f90:	9202      	str	r2, [sp, #8]
 8006f92:	7a62      	ldrb	r2, [r4, #9]
 8006f94:	9201      	str	r2, [sp, #4]
 8006f96:	7a22      	ldrb	r2, [r4, #8]
 8006f98:	9200      	str	r2, [sp, #0]
 8006f9a:	0032      	movs	r2, r6
 8006f9c:	f006 fe38 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 8006fa0:	7d22      	ldrb	r2, [r4, #20]
 8006fa2:	0031      	movs	r1, r6
 8006fa4:	9203      	str	r2, [sp, #12]
 8006fa6:	7d62      	ldrb	r2, [r4, #21]
 8006fa8:	4b22      	ldr	r3, [pc, #136]	@ (8007034 <LmHandlerConfigure+0x188>)
 8006faa:	9202      	str	r2, [sp, #8]
 8006fac:	7da2      	ldrb	r2, [r4, #22]
 8006fae:	2002      	movs	r0, #2
 8006fb0:	9201      	str	r2, [sp, #4]
 8006fb2:	7de2      	ldrb	r2, [r4, #23]
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8006fb4:	240f      	movs	r4, #15
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 8006fb6:	9200      	str	r2, [sp, #0]
 8006fb8:	0032      	movs	r2, r6
 8006fba:	f006 fe29 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8006fbe:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006fc0:	0028      	movs	r0, r5
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8006fc2:	712b      	strb	r3, [r5, #4]
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8006fc4:	702c      	strb	r4, [r5, #0]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006fc6:	f002 fcdd 	bl	8009984 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 8006fca:	2305      	movs	r3, #5
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006fcc:	0028      	movs	r0, r5
    mibReq.Type = MIB_NET_ID;
 8006fce:	702b      	strb	r3, [r5, #0]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8006fd0:	606e      	str	r6, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006fd2:	f002 fcd7 	bl	8009984 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8006fd6:	2310      	movs	r3, #16
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006fd8:	0028      	movs	r0, r5
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8006fda:	702b      	strb	r3, [r5, #0]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8006fdc:	712e      	strb	r6, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006fde:	f002 fcd1 	bl	8009984 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8006fe2:	2304      	movs	r3, #4
 8006fe4:	702b      	strb	r3, [r5, #0]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8006fe6:	78bb      	ldrb	r3, [r7, #2]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006fe8:	0028      	movs	r0, r5
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8006fea:	712b      	strb	r3, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006fec:	f002 fcca 	bl	8009984 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8006ff0:	a90c      	add	r1, sp, #48	@ 0x30
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8006ff2:	7838      	ldrb	r0, [r7, #0]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8006ff4:	700c      	strb	r4, [r1, #0]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8006ff6:	f004 f89a 	bl	800b12e <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8006ffa:	1e43      	subs	r3, r0, #1
 8006ffc:	4198      	sbcs	r0, r3
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8006ffe:	2322      	movs	r3, #34	@ 0x22
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8007000:	7178      	strb	r0, [r7, #5]
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007002:	a817      	add	r0, sp, #92	@ 0x5c
 8007004:	7003      	strb	r3, [r0, #0]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8007006:	3b0e      	subs	r3, #14
 8007008:	6043      	str	r3, [r0, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800700a:	f002 fcbb 	bl	8009984 <LoRaMacMibSetRequestConfirm>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800700e:	7978      	ldrb	r0, [r7, #5]
 8007010:	f003 f9ae 	bl	800a370 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8007014:	0030      	movs	r0, r6
}
 8007016:	b021      	add	sp, #132	@ 0x84
 8007018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800701a:	46c0      	nop			@ (mov r8, r8)
 800701c:	20000610 	.word	0x20000610
 8007020:	200005e0 	.word	0x200005e0
 8007024:	0800f1ff 	.word	0x0800f1ff
 8007028:	2000006c 	.word	0x2000006c
 800702c:	0800f248 	.word	0x0800f248
 8007030:	0800f282 	.word	0x0800f282
 8007034:	0800f2bc 	.word	0x0800f2bc

08007038 <LmHandlerProcess>:
{
 8007038:	b570      	push	{r4, r5, r6, lr}
    LoRaMacProcess( );
 800703a:	f001 fc53 	bl	80088e4 <LoRaMacProcess>
    }
}

static void LmHandlerPackagesProcess( void )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800703e:	4c0b      	ldr	r4, [pc, #44]	@ (800706c <LmHandlerProcess+0x34>)
 8007040:	4d0b      	ldr	r5, [pc, #44]	@ (8007070 <LmHandlerProcess+0x38>)
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00b      	beq.n	8007060 <LmHandlerProcess+0x28>
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	2a00      	cmp	r2, #0
 800704c:	d008      	beq.n	8007060 <LmHandlerProcess+0x28>
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <LmHandlerProcess+0x28>
        return LmHandlerPackages[id]->IsInitialized( );
 8007054:	4798      	blx	r3
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007056:	2800      	cmp	r0, #0
 8007058:	d002      	beq.n	8007060 <LmHandlerProcess+0x28>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
        {
            LmHandlerPackages[i]->Process( );
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007060:	3404      	adds	r4, #4
 8007062:	42ac      	cmp	r4, r5
 8007064:	d1ed      	bne.n	8007042 <LmHandlerProcess+0xa>
    NvmDataMgmtStore( );
 8007066:	f000 fc16 	bl	8007896 <NvmDataMgmtStore>
}
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	200005fc 	.word	0x200005fc
 8007070:	20000610 	.word	0x20000610

08007074 <LmHandlerJoinStatus>:
{
 8007074:	b500      	push	{lr}
 8007076:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007078:	2301      	movs	r3, #1
 800707a:	466a      	mov	r2, sp
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800707c:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800707e:	7113      	strb	r3, [r2, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8007080:	f002 fbce 	bl	8009820 <LoRaMacMibGetRequestConfirm>
 8007084:	0003      	movs	r3, r0
            return LORAMAC_HANDLER_RESET;
 8007086:	2000      	movs	r0, #0
    if( status == LORAMAC_STATUS_OK )
 8007088:	4283      	cmp	r3, r0
 800708a:	d104      	bne.n	8007096 <LmHandlerJoinStatus+0x22>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800708c:	466b      	mov	r3, sp
 800708e:	7a18      	ldrb	r0, [r3, #8]
 8007090:	1e43      	subs	r3, r0, #1
 8007092:	4198      	sbcs	r0, r3
 8007094:	b2c0      	uxtb	r0, r0
}
 8007096:	b00b      	add	sp, #44	@ 0x2c
 8007098:	bd00      	pop	{pc}
	...

0800709c <LmHandlerRequestClass>:
{
 800709c:	b570      	push	{r4, r5, r6, lr}
 800709e:	b08c      	sub	sp, #48	@ 0x30
 80070a0:	0004      	movs	r4, r0
    if (LoRaMacIsBusy() == true)
 80070a2:	f001 fc0d 	bl	80088c0 <LoRaMacIsBusy>
 80070a6:	1e06      	subs	r6, r0, #0
 80070a8:	d146      	bne.n	8007138 <LmHandlerRequestClass+0x9c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80070aa:	f7ff ffe3 	bl	8007074 <LmHandlerJoinStatus>
 80070ae:	2801      	cmp	r0, #1
 80070b0:	d144      	bne.n	800713c <LmHandlerRequestClass+0xa0>
    mibReq.Type = MIB_DEVICE_CLASS;
 80070b2:	ad03      	add	r5, sp, #12
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80070b4:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEVICE_CLASS;
 80070b6:	702e      	strb	r6, [r5, #0]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80070b8:	f002 fbb2 	bl	8009820 <LoRaMacMibGetRequestConfirm>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d138      	bne.n	8007132 <LmHandlerRequestClass+0x96>
    currentClass = mibReq.Param.Class;
 80070c0:	792b      	ldrb	r3, [r5, #4]
    if( currentClass != newClass )
 80070c2:	42a3      	cmp	r3, r4
 80070c4:	d005      	beq.n	80070d2 <LmHandlerRequestClass+0x36>
        switch( newClass )
 80070c6:	2c01      	cmp	r4, #1
 80070c8:	d033      	beq.n	8007132 <LmHandlerRequestClass+0x96>
 80070ca:	2c02      	cmp	r4, #2
 80070cc:	d01b      	beq.n	8007106 <LmHandlerRequestClass+0x6a>
 80070ce:	2c00      	cmp	r4, #0
 80070d0:	d002      	beq.n	80070d8 <LmHandlerRequestClass+0x3c>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80070d2:	2000      	movs	r0, #0
}
 80070d4:	b00c      	add	sp, #48	@ 0x30
 80070d6:	bd70      	pop	{r4, r5, r6, pc}
                if( currentClass != CLASS_A )
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0fa      	beq.n	80070d2 <LmHandlerRequestClass+0x36>
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80070dc:	0028      	movs	r0, r5
                    mibReq.Param.Class = newClass;
 80070de:	712c      	strb	r4, [r5, #4]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80070e0:	f002 fc50 	bl	8009984 <LoRaMacMibSetRequestConfirm>
 80070e4:	1e01      	subs	r1, r0, #0
 80070e6:	d124      	bne.n	8007132 <LmHandlerRequestClass+0x96>
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80070e8:	2241      	movs	r2, #65	@ 0x41
 80070ea:	4b15      	ldr	r3, [pc, #84]	@ (8007140 <LmHandlerRequestClass+0xa4>)
 80070ec:	9200      	str	r2, [sp, #0]
 80070ee:	0002      	movs	r2, r0
 80070f0:	2002      	movs	r0, #2
 80070f2:	f006 fd8d 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80070f6:	4b13      	ldr	r3, [pc, #76]	@ (8007144 <LmHandlerRequestClass+0xa8>)
                            LmHandlerCallbacks->OnClassChange( newClass );
 80070f8:	2000      	movs	r0, #0
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0e7      	beq.n	80070d2 <LmHandlerRequestClass+0x36>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8007102:	4798      	blx	r3
 8007104:	e7e5      	b.n	80070d2 <LmHandlerRequestClass+0x36>
                if( currentClass != CLASS_A )
 8007106:	2b00      	cmp	r3, #0
 8007108:	d113      	bne.n	8007132 <LmHandlerRequestClass+0x96>
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800710a:	0028      	movs	r0, r5
                    mibReq.Param.Class = newClass;
 800710c:	712c      	strb	r4, [r5, #4]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800710e:	f002 fc39 	bl	8009984 <LoRaMacMibSetRequestConfirm>
 8007112:	1e01      	subs	r1, r0, #0
 8007114:	d10d      	bne.n	8007132 <LmHandlerRequestClass+0x96>
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8007116:	2243      	movs	r2, #67	@ 0x43
 8007118:	4b09      	ldr	r3, [pc, #36]	@ (8007140 <LmHandlerRequestClass+0xa4>)
 800711a:	9200      	str	r2, [sp, #0]
 800711c:	0002      	movs	r2, r0
 800711e:	0020      	movs	r0, r4
 8007120:	f006 fd76 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8007124:	4b07      	ldr	r3, [pc, #28]	@ (8007144 <LmHandlerRequestClass+0xa8>)
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0d1      	beq.n	80070d2 <LmHandlerRequestClass+0x36>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800712e:	0020      	movs	r0, r4
 8007130:	e7e7      	b.n	8007102 <LmHandlerRequestClass+0x66>
        return LORAMAC_HANDLER_ERROR;
 8007132:	2001      	movs	r0, #1
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007134:	4240      	negs	r0, r0
 8007136:	e7cd      	b.n	80070d4 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007138:	2002      	movs	r0, #2
 800713a:	e7fb      	b.n	8007134 <LmHandlerRequestClass+0x98>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800713c:	2003      	movs	r0, #3
 800713e:	e7f9      	b.n	8007134 <LmHandlerRequestClass+0x98>
 8007140:	0800f2e2 	.word	0x0800f2e2
 8007144:	200005e0 	.word	0x200005e0

08007148 <LmHandlerJoin>:
{
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	b08a      	sub	sp, #40	@ 0x28
 800714c:	4e1b      	ldr	r6, [pc, #108]	@ (80071bc <LmHandlerJoin+0x74>)
 800714e:	4c1c      	ldr	r4, [pc, #112]	@ (80071c0 <LmHandlerJoin+0x78>)
 8007150:	ad01      	add	r5, sp, #4
    if ( mode == ACTIVATION_TYPE_OTAA )
 8007152:	2802      	cmp	r0, #2
 8007154:	d10c      	bne.n	8007170 <LmHandlerJoin+0x28>
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8007156:	76b0      	strb	r0, [r6, #26]
        LoRaMacStart();
 8007158:	f002 fb00 	bl	800975c <LoRaMacStart>
        mlmeReq.Type = MLME_JOIN;
 800715c:	2301      	movs	r3, #1
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800715e:	3430      	adds	r4, #48	@ 0x30
        mlmeReq.Type = MLME_JOIN;
 8007160:	702b      	strb	r3, [r5, #0]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007162:	78e3      	ldrb	r3, [r4, #3]
        LoRaMacMlmeRequest( &mlmeReq );
 8007164:	0028      	movs	r0, r5
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007166:	712b      	strb	r3, [r5, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 8007168:	f002 fe4e 	bl	8009e08 <LoRaMacMlmeRequest>
}
 800716c:	b00a      	add	sp, #40	@ 0x28
 800716e:	bd70      	pop	{r4, r5, r6, pc}
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8007170:	2301      	movs	r3, #1
 8007172:	76b3      	strb	r3, [r6, #26]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8007174:	0023      	movs	r3, r4
 8007176:	3330      	adds	r3, #48	@ 0x30
 8007178:	78db      	ldrb	r3, [r3, #3]
 800717a:	7633      	strb	r3, [r6, #24]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800717c:	2300      	movs	r3, #0
 800717e:	7673      	strb	r3, [r6, #25]
        if (CtxRestoreDone == false)
 8007180:	0023      	movs	r3, r4
 8007182:	3364      	adds	r3, #100	@ 0x64
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d106      	bne.n	8007198 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800718a:	3327      	adds	r3, #39	@ 0x27
 800718c:	702b      	strb	r3, [r5, #0]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800718e:	4b0d      	ldr	r3, [pc, #52]	@ (80071c4 <LmHandlerJoin+0x7c>)
            LoRaMacMibSetRequestConfirm(&mibReq);
 8007190:	0028      	movs	r0, r5
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8007192:	606b      	str	r3, [r5, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 8007194:	f002 fbf6 	bl	8009984 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 8007198:	f002 fae0 	bl	800975c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800719c:	2301      	movs	r3, #1
        LoRaMacMibSetRequestConfirm( &mibReq );
 800719e:	0028      	movs	r0, r5
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80071a0:	702b      	strb	r3, [r5, #0]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80071a2:	712b      	strb	r3, [r5, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80071a4:	f002 fbee 	bl	8009984 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80071a8:	0030      	movs	r0, r6
 80071aa:	69a3      	ldr	r3, [r4, #24]
 80071ac:	3018      	adds	r0, #24
 80071ae:	69db      	ldr	r3, [r3, #28]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80071b0:	3430      	adds	r4, #48	@ 0x30
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80071b2:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80071b4:	7860      	ldrb	r0, [r4, #1]
 80071b6:	f7ff ff71 	bl	800709c <LmHandlerRequestClass>
}
 80071ba:	e7d7      	b.n	800716c <LmHandlerJoin+0x24>
 80071bc:	2000006c 	.word	0x2000006c
 80071c0:	200005e0 	.word	0x200005e0
 80071c4:	01000300 	.word	0x01000300

080071c8 <LmHandlerSend>:
{
 80071c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ca:	b089      	sub	sp, #36	@ 0x24
 80071cc:	0005      	movs	r5, r0
 80071ce:	000f      	movs	r7, r1
 80071d0:	9200      	str	r2, [sp, #0]
 80071d2:	9301      	str	r3, [sp, #4]
    if (LoRaMacIsBusy() == true)
 80071d4:	f001 fb74 	bl	80088c0 <LoRaMacIsBusy>
 80071d8:	2800      	cmp	r0, #0
 80071da:	d159      	bne.n	8007290 <LmHandlerSend+0xc8>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80071dc:	f7ff ff4a 	bl	8007074 <LmHandlerJoinStatus>
 80071e0:	2801      	cmp	r0, #1
 80071e2:	d006      	beq.n	80071f2 <LmHandlerSend+0x2a>
        LmHandlerJoin(JoinParams.Mode);
 80071e4:	4b2f      	ldr	r3, [pc, #188]	@ (80072a4 <LmHandlerSend+0xdc>)
 80071e6:	7e98      	ldrb	r0, [r3, #26]
 80071e8:	f7ff ffae 	bl	8007148 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80071ec:	2003      	movs	r0, #3
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80071ee:	4240      	negs	r0, r0
 80071f0:	e04c      	b.n	800728c <LmHandlerSend+0xc4>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 80071f2:	4e2d      	ldr	r6, [pc, #180]	@ (80072a8 <LmHandlerSend+0xe0>)
 80071f4:	69f3      	ldr	r3, [r6, #28]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	4798      	blx	r3
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d006      	beq.n	800720c <LmHandlerSend+0x44>
 80071fe:	69f2      	ldr	r2, [r6, #28]
 8007200:	782b      	ldrb	r3, [r5, #0]
 8007202:	7812      	ldrb	r2, [r2, #0]
 8007204:	429a      	cmp	r2, r3
 8007206:	d001      	beq.n	800720c <LmHandlerSend+0x44>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d147      	bne.n	800729c <LmHandlerSend+0xd4>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800720c:	0033      	movs	r3, r6
 800720e:	3330      	adds	r3, #48	@ 0x30
 8007210:	78db      	ldrb	r3, [r3, #3]
 8007212:	ac03      	add	r4, sp, #12
 8007214:	73a3      	strb	r3, [r4, #14]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8007216:	7868      	ldrb	r0, [r5, #1]
 8007218:	a902      	add	r1, sp, #8
 800721a:	f002 faa7 	bl	800976c <LoRaMacQueryTxPossible>
 800721e:	2800      	cmp	r0, #0
 8007220:	d023      	beq.n	800726a <LmHandlerSend+0xa2>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8007222:	2300      	movs	r3, #0
 8007224:	70b3      	strb	r3, [r6, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8007226:	7023      	strb	r3, [r4, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007228:	60a3      	str	r3, [r4, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800722a:	81a3      	strh	r3, [r4, #12]
    TxParams.AppData = *appData;
 800722c:	0033      	movs	r3, r6
 800722e:	330c      	adds	r3, #12
 8007230:	cd06      	ldmia	r5!, {r1, r2}
 8007232:	c306      	stmia	r3!, {r1, r2}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8007234:	0033      	movs	r3, r6
 8007236:	3330      	adds	r3, #48	@ 0x30
 8007238:	78db      	ldrb	r3, [r3, #3]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800723a:	0020      	movs	r0, r4
 800723c:	9901      	ldr	r1, [sp, #4]
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800723e:	7133      	strb	r3, [r6, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8007240:	f002 fee8 	bl	800a014 <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 8007244:	9b00      	ldr	r3, [sp, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <LmHandlerSend+0x88>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800724a:	6923      	ldr	r3, [r4, #16]
 800724c:	9a00      	ldr	r2, [sp, #0]
 800724e:	6013      	str	r3, [r2, #0]
    switch (status)
 8007250:	2811      	cmp	r0, #17
 8007252:	d821      	bhi.n	8007298 <LmHandlerSend+0xd0>
 8007254:	f7f8 ff60 	bl	8000118 <__gnu_thumb1_case_sqi>
 8007258:	20201c19 	.word	0x20201c19
 800725c:	ca202020 	.word	0xca202020
 8007260:	1e202020 	.word	0x1e202020
 8007264:	1c1c2020 	.word	0x1c1c2020
 8007268:	241c      	.short	0x241c
        TxParams.MsgType = isTxConfirmed;
 800726a:	70b7      	strb	r7, [r6, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800726c:	782b      	ldrb	r3, [r5, #0]
 800726e:	7123      	strb	r3, [r4, #4]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8007270:	786b      	ldrb	r3, [r5, #1]
 8007272:	81a3      	strh	r3, [r4, #12]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8007274:	686b      	ldr	r3, [r5, #4]
 8007276:	60a3      	str	r3, [r4, #8]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 8007278:	2f00      	cmp	r7, #0
 800727a:	d101      	bne.n	8007280 <LmHandlerSend+0xb8>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800727c:	7027      	strb	r7, [r4, #0]
 800727e:	e7d5      	b.n	800722c <LmHandlerSend+0x64>
            mcpsReq.Type = MCPS_CONFIRMED;
 8007280:	2301      	movs	r3, #1
 8007282:	7023      	strb	r3, [r4, #0]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 8007284:	3307      	adds	r3, #7
 8007286:	73e3      	strb	r3, [r4, #15]
 8007288:	e7d0      	b.n	800722c <LmHandlerSend+0x64>
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800728a:	2000      	movs	r0, #0
}
 800728c:	b009      	add	sp, #36	@ 0x24
 800728e:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
 8007290:	2002      	movs	r0, #2
 8007292:	e7ac      	b.n	80071ee <LmHandlerSend+0x26>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8007294:	2006      	movs	r0, #6
 8007296:	e7aa      	b.n	80071ee <LmHandlerSend+0x26>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007298:	2001      	movs	r0, #1
 800729a:	e7a8      	b.n	80071ee <LmHandlerSend+0x26>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800729c:	2004      	movs	r0, #4
 800729e:	e7a6      	b.n	80071ee <LmHandlerSend+0x26>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80072a0:	2005      	movs	r0, #5
 80072a2:	e7a4      	b.n	80071ee <LmHandlerSend+0x26>
 80072a4:	2000006c 	.word	0x2000006c
 80072a8:	200005e0 	.word	0x200005e0

080072ac <MlmeIndication>:
{
 80072ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072ae:	0004      	movs	r4, r0
    RxParams.IsMcpsIndication = 0;
 80072b0:	2000      	movs	r0, #0
 80072b2:	4b14      	ldr	r3, [pc, #80]	@ (8007304 <MlmeIndication+0x58>)
 80072b4:	7718      	strb	r0, [r3, #28]
    RxParams.Status = mlmeIndication->Status;
 80072b6:	7862      	ldrb	r2, [r4, #1]
 80072b8:	775a      	strb	r2, [r3, #29]
    RxParams.Rssi = RxStatus->Rssi;
 80072ba:	880d      	ldrh	r5, [r1, #0]
 80072bc:	77dd      	strb	r5, [r3, #31]
    RxParams.Snr = RxStatus->Snr;
 80072be:	788e      	ldrb	r6, [r1, #2]
 80072c0:	1c5d      	adds	r5, r3, #1
 80072c2:	77ee      	strb	r6, [r5, #31]
    RxParams.RxSlot = RxStatus->RxSlot;
 80072c4:	001d      	movs	r5, r3
 80072c6:	78c9      	ldrb	r1, [r1, #3]
 80072c8:	3528      	adds	r5, #40	@ 0x28
 80072ca:	7029      	strb	r1, [r5, #0]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 80072cc:	2a0e      	cmp	r2, #14
 80072ce:	d005      	beq.n	80072dc <MlmeIndication+0x30>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80072d0:	331c      	adds	r3, #28
 80072d2:	0019      	movs	r1, r3
 80072d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007308 <MlmeIndication+0x5c>)
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
 80072dc:	7823      	ldrb	r3, [r4, #0]
 80072de:	2b07      	cmp	r3, #7
 80072e0:	d10e      	bne.n	8007300 <MlmeIndication+0x54>
            LmHandlerAppData_t appData =
 80072e2:	2300      	movs	r3, #0
 80072e4:	466a      	mov	r2, sp
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	8013      	strh	r3, [r2, #0]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 80072ea:	4b07      	ldr	r3, [pc, #28]	@ (8007308 <MlmeIndication+0x5c>)
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	4798      	blx	r3
 80072f2:	1e01      	subs	r1, r0, #0
 80072f4:	d104      	bne.n	8007300 <MlmeIndication+0x54>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 80072f6:	0002      	movs	r2, r0
 80072f8:	2301      	movs	r3, #1
 80072fa:	4668      	mov	r0, sp
 80072fc:	f7ff ff64 	bl	80071c8 <LmHandlerSend>
}
 8007300:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8007302:	46c0      	nop			@ (mov r8, r8)
 8007304:	2000006c 	.word	0x2000006c
 8007308:	200005e0 	.word	0x200005e0

0800730c <LmHandlerGetCurrentClass>:
{
 800730c:	b510      	push	{r4, lr}
 800730e:	0004      	movs	r4, r0
 8007310:	b08a      	sub	sp, #40	@ 0x28
    if (deviceClass == NULL)
 8007312:	2800      	cmp	r0, #0
 8007314:	d103      	bne.n	800731e <LmHandlerGetCurrentClass+0x12>
        return LORAMAC_HANDLER_ERROR;
 8007316:	2001      	movs	r0, #1
 8007318:	4240      	negs	r0, r0
}
 800731a:	b00a      	add	sp, #40	@ 0x28
 800731c:	bd10      	pop	{r4, pc}
    mibReq.Type = MIB_DEVICE_CLASS;
 800731e:	2300      	movs	r3, #0
 8007320:	466a      	mov	r2, sp
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8007322:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_DEVICE_CLASS;
 8007324:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8007326:	f002 fa7b 	bl	8009820 <LoRaMacMibGetRequestConfirm>
 800732a:	2800      	cmp	r0, #0
 800732c:	d1f3      	bne.n	8007316 <LmHandlerGetCurrentClass+0xa>
    *deviceClass = mibReq.Param.Class;
 800732e:	466b      	mov	r3, sp
 8007330:	7a1b      	ldrb	r3, [r3, #8]
 8007332:	7023      	strb	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8007334:	e7f1      	b.n	800731a <LmHandlerGetCurrentClass+0xe>
	...

08007338 <McpsIndication>:
{
 8007338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800733a:	b087      	sub	sp, #28
    DeviceClass_t deviceClass = CLASS_A;
 800733c:	2200      	movs	r2, #0
{
 800733e:	000b      	movs	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 8007340:	4669      	mov	r1, sp
 8007342:	71ca      	strb	r2, [r1, #7]
    RxParams.IsMcpsIndication = 1;
 8007344:	492d      	ldr	r1, [pc, #180]	@ (80073fc <McpsIndication+0xc4>)
 8007346:	3201      	adds	r2, #1
 8007348:	770a      	strb	r2, [r1, #28]
    RxParams.Status = mcpsIndication->Status;
 800734a:	7842      	ldrb	r2, [r0, #1]
{
 800734c:	0004      	movs	r4, r0
    RxParams.Status = mcpsIndication->Status;
 800734e:	774a      	strb	r2, [r1, #29]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8007350:	2a00      	cmp	r2, #0
 8007352:	d149      	bne.n	80073e8 <McpsIndication+0xb0>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8007354:	7902      	ldrb	r2, [r0, #4]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8007356:	4e2a      	ldr	r6, [pc, #168]	@ (8007400 <McpsIndication+0xc8>)
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8007358:	778a      	strb	r2, [r1, #30]
    RxParams.Rssi = RxStatus->Rssi;
 800735a:	881a      	ldrh	r2, [r3, #0]
 800735c:	77ca      	strb	r2, [r1, #31]
    RxParams.Snr = RxStatus->Snr;
 800735e:	7898      	ldrb	r0, [r3, #2]
 8007360:	1c4a      	adds	r2, r1, #1
 8007362:	77d0      	strb	r0, [r2, #31]
    RxParams.RxSlot = RxStatus->RxSlot;
 8007364:	000a      	movs	r2, r1
 8007366:	78db      	ldrb	r3, [r3, #3]
 8007368:	3228      	adds	r2, #40	@ 0x28
 800736a:	7013      	strb	r3, [r2, #0]
    appData.Port = mcpsIndication->Port;
 800736c:	466a      	mov	r2, sp
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800736e:	6923      	ldr	r3, [r4, #16]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8007370:	311c      	adds	r1, #28
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8007372:	608b      	str	r3, [r1, #8]
    appData.Port = mcpsIndication->Port;
 8007374:	78e3      	ldrb	r3, [r4, #3]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8007376:	a802      	add	r0, sp, #8
    appData.Port = mcpsIndication->Port;
 8007378:	7213      	strb	r3, [r2, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 800737a:	7b23      	ldrb	r3, [r4, #12]
 800737c:	7253      	strb	r3, [r2, #9]
    appData.Buffer = mcpsIndication->Buffer;
 800737e:	68a3      	ldr	r3, [r4, #8]
 8007380:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8007382:	69b3      	ldr	r3, [r6, #24]
 8007384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007386:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8007388:	69b3      	ldr	r3, [r6, #24]
 800738a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <McpsIndication+0x60>
 8007390:	7e22      	ldrb	r2, [r4, #24]
 8007392:	2a00      	cmp	r2, #0
 8007394:	d000      	beq.n	8007398 <McpsIndication+0x60>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8007396:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007398:	0037      	movs	r7, r6
{
 800739a:	2500      	movs	r5, #0
 800739c:	371c      	adds	r7, #28
        if( LmHandlerPackages[i] != NULL )
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00a      	beq.n	80073ba <McpsIndication+0x82>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 80073a4:	69da      	ldr	r2, [r3, #28]
 80073a6:	2a00      	cmp	r2, #0
 80073a8:	d007      	beq.n	80073ba <McpsIndication+0x82>
 80073aa:	781a      	ldrb	r2, [r3, #0]
 80073ac:	78e3      	ldrb	r3, [r4, #3]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d11c      	bne.n	80073ec <McpsIndication+0xb4>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	0020      	movs	r0, r4
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80073ba:	3501      	adds	r5, #1
 80073bc:	b2eb      	uxtb	r3, r5
 80073be:	3704      	adds	r7, #4
 80073c0:	b26d      	sxtb	r5, r5
 80073c2:	2b05      	cmp	r3, #5
 80073c4:	d1eb      	bne.n	800739e <McpsIndication+0x66>
    LmHandlerGetCurrentClass(&deviceClass);
 80073c6:	466b      	mov	r3, sp
 80073c8:	1dd8      	adds	r0, r3, #7
 80073ca:	f7ff ff9f 	bl	800730c <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80073ce:	7963      	ldrb	r3, [r4, #5]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d109      	bne.n	80073e8 <McpsIndication+0xb0>
 80073d4:	466a      	mov	r2, sp
 80073d6:	79d1      	ldrb	r1, [r2, #7]
 80073d8:	2900      	cmp	r1, #0
 80073da:	d105      	bne.n	80073e8 <McpsIndication+0xb0>
        LmHandlerAppData_t appData =
 80073dc:	a804      	add	r0, sp, #16
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80073de:	000a      	movs	r2, r1
        LmHandlerAppData_t appData =
 80073e0:	8001      	strh	r1, [r0, #0]
 80073e2:	6041      	str	r1, [r0, #4]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80073e4:	f7ff fef0 	bl	80071c8 <LmHandlerSend>
}
 80073e8:	b007      	add	sp, #28
 80073ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 80073ec:	2d00      	cmp	r5, #0
 80073ee:	d1e4      	bne.n	80073ba <McpsIndication+0x82>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 80073f0:	69f3      	ldr	r3, [r6, #28]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	4798      	blx	r3
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d1db      	bne.n	80073b2 <McpsIndication+0x7a>
 80073fa:	e7de      	b.n	80073ba <McpsIndication+0x82>
 80073fc:	2000006c 	.word	0x2000006c
 8007400:	200005e0 	.word	0x200005e0

08007404 <LmHandlerGetTxDatarate>:
{
 8007404:	b510      	push	{r4, lr}
 8007406:	0004      	movs	r4, r0
 8007408:	b08a      	sub	sp, #40	@ 0x28
    if (txDatarate == NULL)
 800740a:	2800      	cmp	r0, #0
 800740c:	d103      	bne.n	8007416 <LmHandlerGetTxDatarate+0x12>
        return LORAMAC_HANDLER_ERROR;
 800740e:	2001      	movs	r0, #1
 8007410:	4240      	negs	r0, r0
}
 8007412:	b00a      	add	sp, #40	@ 0x28
 8007414:	bd10      	pop	{r4, pc}
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8007416:	231f      	movs	r3, #31
 8007418:	466a      	mov	r2, sp
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800741a:	a801      	add	r0, sp, #4
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800741c:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800741e:	f002 f9ff 	bl	8009820 <LoRaMacMibGetRequestConfirm>
 8007422:	2800      	cmp	r0, #0
 8007424:	d1f3      	bne.n	800740e <LmHandlerGetTxDatarate+0xa>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8007426:	466b      	mov	r3, sp
 8007428:	7a1b      	ldrb	r3, [r3, #8]
    LmHandlerParams.TxDatarate = *txDatarate;
 800742a:	4a02      	ldr	r2, [pc, #8]	@ (8007434 <LmHandlerGetTxDatarate+0x30>)
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800742c:	b25b      	sxtb	r3, r3
 800742e:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8007430:	70d3      	strb	r3, [r2, #3]
    return LORAMAC_HANDLER_SUCCESS;
 8007432:	e7ee      	b.n	8007412 <LmHandlerGetTxDatarate+0xe>
 8007434:	20000610 	.word	0x20000610

08007438 <MlmeConfirm>:
    TxParams.IsMcpsConfirm = 0;
 8007438:	2300      	movs	r3, #0
{
 800743a:	b5f0      	push	{r4, r5, r6, r7, lr}
    TxParams.IsMcpsConfirm = 0;
 800743c:	4d25      	ldr	r5, [pc, #148]	@ (80074d4 <MlmeConfirm+0x9c>)
{
 800743e:	b08b      	sub	sp, #44	@ 0x2c
    TxParams.IsMcpsConfirm = 0;
 8007440:	702b      	strb	r3, [r5, #0]
    TxParams.Status = mlmeConfirm->Status;
 8007442:	7843      	ldrb	r3, [r0, #1]
{
 8007444:	0004      	movs	r4, r0
    TxParams.Status = mlmeConfirm->Status;
 8007446:	706b      	strb	r3, [r5, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8007448:	69ab      	ldr	r3, [r5, #24]
 800744a:	0028      	movs	r0, r5
 800744c:	002e      	movs	r6, r5
 800744e:	002f      	movs	r7, r5
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007454:	361c      	adds	r6, #28
 8007456:	3730      	adds	r7, #48	@ 0x30
        if( LmHandlerPackages[i] != NULL )
 8007458:	6833      	ldr	r3, [r6, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d004      	beq.n	8007468 <MlmeConfirm+0x30>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <MlmeConfirm+0x30>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8007464:	0020      	movs	r0, r4
 8007466:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007468:	3604      	adds	r6, #4
 800746a:	42be      	cmp	r6, r7
 800746c:	d1f4      	bne.n	8007458 <MlmeConfirm+0x20>
    switch( mlmeConfirm->MlmeRequest )
 800746e:	7823      	ldrb	r3, [r4, #0]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d003      	beq.n	800747c <MlmeConfirm+0x44>
 8007474:	2b04      	cmp	r3, #4
 8007476:	d020      	beq.n	80074ba <MlmeConfirm+0x82>
}
 8007478:	b00b      	add	sp, #44	@ 0x2c
 800747a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mibReq.Type = MIB_DEV_ADDR;
 800747c:	2306      	movs	r3, #6
 800747e:	af01      	add	r7, sp, #4
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007480:	0038      	movs	r0, r7
            mibReq.Type = MIB_DEV_ADDR;
 8007482:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007484:	f002 f9cc 	bl	8009820 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007488:	4e13      	ldr	r6, [pc, #76]	@ (80074d8 <MlmeConfirm+0xa0>)
 800748a:	9b02      	ldr	r3, [sp, #8]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800748c:	0030      	movs	r0, r6
 800748e:	3018      	adds	r0, #24
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007490:	6173      	str	r3, [r6, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8007492:	f7ff ffb7 	bl	8007404 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007496:	7863      	ldrb	r3, [r4, #1]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10b      	bne.n	80074b4 <MlmeConfirm+0x7c>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800749c:	7673      	strb	r3, [r6, #25]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800749e:	002b      	movs	r3, r5
 80074a0:	3330      	adds	r3, #48	@ 0x30
 80074a2:	7858      	ldrb	r0, [r3, #1]
 80074a4:	f7ff fdfa 	bl	800709c <LmHandlerRequestClass>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80074a8:	0030      	movs	r0, r6
 80074aa:	69ab      	ldr	r3, [r5, #24]
 80074ac:	3018      	adds	r0, #24
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	4798      	blx	r3
        break;
 80074b2:	e7e1      	b.n	8007478 <MlmeConfirm+0x40>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80074b4:	23ff      	movs	r3, #255	@ 0xff
 80074b6:	7673      	strb	r3, [r6, #25]
 80074b8:	e7f6      	b.n	80074a8 <MlmeConfirm+0x70>
            RxParams.LinkCheck = true;
 80074ba:	2101      	movs	r1, #1
 80074bc:	4b06      	ldr	r3, [pc, #24]	@ (80074d8 <MlmeConfirm+0xa0>)
 80074be:	4a07      	ldr	r2, [pc, #28]	@ (80074dc <MlmeConfirm+0xa4>)
 80074c0:	7011      	strb	r1, [r2, #0]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80074c2:	001a      	movs	r2, r3
 80074c4:	7a21      	ldrb	r1, [r4, #8]
 80074c6:	322a      	adds	r2, #42	@ 0x2a
 80074c8:	7011      	strb	r1, [r2, #0]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 80074ca:	7a62      	ldrb	r2, [r4, #9]
 80074cc:	332b      	adds	r3, #43	@ 0x2b
 80074ce:	701a      	strb	r2, [r3, #0]
}
 80074d0:	e7d2      	b.n	8007478 <MlmeConfirm+0x40>
 80074d2:	46c0      	nop			@ (mov r8, r8)
 80074d4:	200005e0 	.word	0x200005e0
 80074d8:	2000006c 	.word	0x2000006c
 80074dc:	20000095 	.word	0x20000095

080074e0 <LmHandlerPackageRegister>:
{
 80074e0:	b570      	push	{r4, r5, r6, lr}
 80074e2:	0004      	movs	r4, r0
 80074e4:	000d      	movs	r5, r1
    switch( id )
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d002      	beq.n	80074f0 <LmHandlerPackageRegister+0x10>
        return LORAMAC_HANDLER_ERROR;
 80074ea:	2001      	movs	r0, #1
 80074ec:	4240      	negs	r0, r0
}
 80074ee:	bd70      	pop	{r4, r5, r6, pc}
            package = LmhpCompliancePackageFactory( );
 80074f0:	f000 f9cc 	bl	800788c <LmhpCompliancePackageFactory>
    if( package != NULL )
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d0f8      	beq.n	80074ea <LmHandlerPackageRegister+0xa>
        LmHandlerPackages[id] = package;
 80074f8:	4a08      	ldr	r2, [pc, #32]	@ (800751c <LmHandlerPackageRegister+0x3c>)
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80074fa:	4909      	ldr	r1, [pc, #36]	@ (8007520 <LmHandlerPackageRegister+0x40>)
        LmHandlerPackages[id] = package;
 80074fc:	61d0      	str	r0, [r2, #28]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80074fe:	6241      	str	r1, [r0, #36]	@ 0x24
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8007500:	6992      	ldr	r2, [r2, #24]
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8007502:	4908      	ldr	r1, [pc, #32]	@ (8007524 <LmHandlerPackageRegister+0x44>)
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8007504:	6912      	ldr	r2, [r2, #16]
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8007506:	6281      	str	r1, [r0, #40]	@ 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8007508:	4907      	ldr	r1, [pc, #28]	@ (8007528 <LmHandlerPackageRegister+0x48>)
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800750a:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800750c:	62c1      	str	r1, [r0, #44]	@ 0x2c
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800750e:	6843      	ldr	r3, [r0, #4]
 8007510:	22f2      	movs	r2, #242	@ 0xf2
 8007512:	0028      	movs	r0, r5
 8007514:	4905      	ldr	r1, [pc, #20]	@ (800752c <LmHandlerPackageRegister+0x4c>)
 8007516:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8007518:	0020      	movs	r0, r4
 800751a:	e7e8      	b.n	80074ee <LmHandlerPackageRegister+0xe>
 800751c:	200005e0 	.word	0x200005e0
 8007520:	08007149 	.word	0x08007149
 8007524:	080071c9 	.word	0x080071c9
 8007528:	08006e49 	.word	0x08006e49
 800752c:	20000645 	.word	0x20000645

08007530 <LmHandlerInit>:
    LmHandlerCallbacks = handlerCallbacks;
 8007530:	4b0e      	ldr	r3, [pc, #56]	@ (800756c <LmHandlerInit+0x3c>)
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007532:	4a0f      	ldr	r2, [pc, #60]	@ (8007570 <LmHandlerInit+0x40>)
{
 8007534:	b510      	push	{r4, lr}
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007536:	655a      	str	r2, [r3, #84]	@ 0x54
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007538:	4a0e      	ldr	r2, [pc, #56]	@ (8007574 <LmHandlerInit+0x44>)
    LmHandlerCallbacks = handlerCallbacks;
 800753a:	6198      	str	r0, [r3, #24]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800753c:	659a      	str	r2, [r3, #88]	@ 0x58
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800753e:	4a0e      	ldr	r2, [pc, #56]	@ (8007578 <LmHandlerInit+0x48>)
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8007540:	490e      	ldr	r1, [pc, #56]	@ (800757c <LmHandlerInit+0x4c>)
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007542:	65da      	str	r2, [r3, #92]	@ 0x5c
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007544:	4a0e      	ldr	r2, [pc, #56]	@ (8007580 <LmHandlerInit+0x50>)
 8007546:	661a      	str	r2, [r3, #96]	@ 0x60
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8007548:	6802      	ldr	r2, [r0, #0]
 800754a:	641a      	str	r2, [r3, #64]	@ 0x40
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800754c:	6842      	ldr	r2, [r0, #4]
 800754e:	645a      	str	r2, [r3, #68]	@ 0x44
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8007550:	6882      	ldr	r2, [r0, #8]
 8007552:	649a      	str	r2, [r3, #72]	@ 0x48
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8007554:	4a0b      	ldr	r2, [pc, #44]	@ (8007584 <LmHandlerInit+0x54>)
 8007556:	64da      	str	r2, [r3, #76]	@ 0x4c
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8007558:	6902      	ldr	r2, [r0, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800755a:	2000      	movs	r0, #0
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800755c:	651a      	str	r2, [r3, #80]	@ 0x50
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800755e:	f7ff ffbf 	bl	80074e0 <LmHandlerPackageRegister>
 8007562:	1e43      	subs	r3, r0, #1
 8007564:	4198      	sbcs	r0, r3
}
 8007566:	4240      	negs	r0, r0
 8007568:	bd10      	pop	{r4, pc}
 800756a:	46c0      	nop			@ (mov r8, r8)
 800756c:	200005e0 	.word	0x200005e0
 8007570:	08006e61 	.word	0x08006e61
 8007574:	08007339 	.word	0x08007339
 8007578:	08007439 	.word	0x08007439
 800757c:	20000098 	.word	0x20000098
 8007580:	080072ad 	.word	0x080072ad
 8007584:	08007895 	.word	0x08007895

08007588 <LmhpComplianceIsInitialized>:
    }
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
 8007588:	4b01      	ldr	r3, [pc, #4]	@ (8007590 <LmhpComplianceIsInitialized+0x8>)
 800758a:	7818      	ldrb	r0, [r3, #0]
}
 800758c:	4770      	bx	lr
 800758e:	46c0      	nop			@ (mov r8, r8)
 8007590:	20000738 	.word	0x20000738

08007594 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 8007594:	4b02      	ldr	r3, [pc, #8]	@ (80075a0 <LmhpComplianceIsRunning+0xc>)
 8007596:	7818      	ldrb	r0, [r3, #0]
 8007598:	2800      	cmp	r0, #0
 800759a:	d000      	beq.n	800759e <LmhpComplianceIsRunning+0xa>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 800759c:	7858      	ldrb	r0, [r3, #1]
}
 800759e:	4770      	bx	lr
 80075a0:	20000738 	.word	0x20000738

080075a4 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 80075a4:	4770      	bx	lr
	...

080075a8 <LmhpComplianceInit>:
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80075a8:	4b06      	ldr	r3, [pc, #24]	@ (80075c4 <LmhpComplianceInit+0x1c>)
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d007      	beq.n	80075be <LmhpComplianceInit+0x16>
 80075ae:	2900      	cmp	r1, #0
 80075b0:	d005      	beq.n	80075be <LmhpComplianceInit+0x16>
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80075b2:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 80075b4:	2201      	movs	r2, #1
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 80075b6:	6158      	str	r0, [r3, #20]
        ComplianceTestState.DataBuffer = dataBuffer;
 80075b8:	6099      	str	r1, [r3, #8]
        ComplianceTestState.Initialized = true;
 80075ba:	701a      	strb	r2, [r3, #0]
}
 80075bc:	4770      	bx	lr
        LmhpComplianceParams = NULL;
 80075be:	2200      	movs	r2, #0
 80075c0:	615a      	str	r2, [r3, #20]
}
 80075c2:	e7fa      	b.n	80075ba <LmhpComplianceInit+0x12>
 80075c4:	20000738 	.word	0x20000738

080075c8 <LmhpComplianceOnMcpsConfirm>:
    if (ComplianceTestState.Initialized == false)
 80075c8:	4b08      	ldr	r3, [pc, #32]	@ (80075ec <LmhpComplianceOnMcpsConfirm+0x24>)
 80075ca:	781a      	ldrb	r2, [r3, #0]
 80075cc:	2a00      	cmp	r2, #0
 80075ce:	d00b      	beq.n	80075e8 <LmhpComplianceOnMcpsConfirm+0x20>
    if ((ComplianceTestState.IsRunning == true) &&
 80075d0:	785a      	ldrb	r2, [r3, #1]
 80075d2:	2a00      	cmp	r2, #0
 80075d4:	d008      	beq.n	80075e8 <LmhpComplianceOnMcpsConfirm+0x20>
 80075d6:	7802      	ldrb	r2, [r0, #0]
 80075d8:	2a01      	cmp	r2, #1
 80075da:	d105      	bne.n	80075e8 <LmhpComplianceOnMcpsConfirm+0x20>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 80075dc:	7902      	ldrb	r2, [r0, #4]
 80075de:	2a00      	cmp	r2, #0
 80075e0:	d002      	beq.n	80075e8 <LmhpComplianceOnMcpsConfirm+0x20>
        ComplianceTestState.DownLinkCounter++;
 80075e2:	899a      	ldrh	r2, [r3, #12]
 80075e4:	3201      	adds	r2, #1
 80075e6:	819a      	strh	r2, [r3, #12]
}
 80075e8:	4770      	bx	lr
 80075ea:	46c0      	nop			@ (mov r8, r8)
 80075ec:	20000738 	.word	0x20000738

080075f0 <LmhpComplianceOnMlmeConfirm>:
    if( ComplianceTestState.Initialized == false )
 80075f0:	4b08      	ldr	r3, [pc, #32]	@ (8007614 <LmhpComplianceOnMlmeConfirm+0x24>)
 80075f2:	781a      	ldrb	r2, [r3, #0]
 80075f4:	2a00      	cmp	r2, #0
 80075f6:	d00b      	beq.n	8007610 <LmhpComplianceOnMlmeConfirm+0x20>
    if( ComplianceTestState.IsRunning == false )
 80075f8:	785a      	ldrb	r2, [r3, #1]
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	d008      	beq.n	8007610 <LmhpComplianceOnMlmeConfirm+0x20>
    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 80075fe:	7802      	ldrb	r2, [r0, #0]
 8007600:	2a04      	cmp	r2, #4
 8007602:	d105      	bne.n	8007610 <LmhpComplianceOnMlmeConfirm+0x20>
 8007604:	7a01      	ldrb	r1, [r0, #8]
 8007606:	7a42      	ldrb	r2, [r0, #9]
        ComplianceTestState.LinkCheck = true;
 8007608:	2001      	movs	r0, #1
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800760a:	73d9      	strb	r1, [r3, #15]
        ComplianceTestState.LinkCheck = true;
 800760c:	7398      	strb	r0, [r3, #14]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800760e:	741a      	strb	r2, [r3, #16]
}
 8007610:	4770      	bx	lr
 8007612:	46c0      	nop			@ (mov r8, r8)
 8007614:	20000738 	.word	0x20000738

08007618 <LmhpComplianceTxProcess.isra.0>:
static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
 8007618:	b513      	push	{r0, r1, r4, lr}
    if( ComplianceTestState.Initialized == false )
 800761a:	4c1b      	ldr	r4, [pc, #108]	@ (8007688 <LmhpComplianceTxProcess.isra.0+0x70>)
 800761c:	7823      	ldrb	r3, [r4, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d023      	beq.n	800766a <LmhpComplianceTxProcess.isra.0+0x52>
    if( ComplianceTestState.IsRunning == false )
 8007622:	7863      	ldrb	r3, [r4, #1]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d020      	beq.n	800766a <LmhpComplianceTxProcess.isra.0+0x52>
    if( ComplianceTestState.LinkCheck == true )
 8007628:	7ba2      	ldrb	r2, [r4, #14]
        ComplianceTestState.DataBuffer[0] = 5;
 800762a:	68a3      	ldr	r3, [r4, #8]
    if( ComplianceTestState.LinkCheck == true )
 800762c:	2a00      	cmp	r2, #0
 800762e:	d01d      	beq.n	800766c <LmhpComplianceTxProcess.isra.0+0x54>
        ComplianceTestState.LinkCheck = false;
 8007630:	2200      	movs	r2, #0
 8007632:	73a2      	strb	r2, [r4, #14]
        ComplianceTestState.DataBufferSize = 3;
 8007634:	3203      	adds	r2, #3
 8007636:	71a2      	strb	r2, [r4, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8007638:	3202      	adds	r2, #2
 800763a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800763c:	7be2      	ldrb	r2, [r4, #15]
 800763e:	705a      	strb	r2, [r3, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8007640:	7c22      	ldrb	r2, [r4, #16]
 8007642:	709a      	strb	r2, [r3, #2]
        ComplianceTestState.State = 1;
 8007644:	2201      	movs	r2, #1
 8007646:	70a2      	strb	r2, [r4, #2]
    LmHandlerAppData_t appData =
 8007648:	4669      	mov	r1, sp
 800764a:	22e0      	movs	r2, #224	@ 0xe0
    TimerStart( &ComplianceTxNextPacketTimer );
 800764c:	0020      	movs	r0, r4
    LmHandlerAppData_t appData =
 800764e:	700a      	strb	r2, [r1, #0]
 8007650:	79a2      	ldrb	r2, [r4, #6]
    TimerStart( &ComplianceTxNextPacketTimer );
 8007652:	3018      	adds	r0, #24
    LmHandlerAppData_t appData =
 8007654:	704a      	strb	r2, [r1, #1]
 8007656:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 8007658:	f006 fe46 	bl	800e2e8 <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800765c:	4b0b      	ldr	r3, [pc, #44]	@ (800768c <LmhpComplianceTxProcess.isra.0+0x74>)
 800765e:	78e1      	ldrb	r1, [r4, #3]
 8007660:	2200      	movs	r2, #0
 8007662:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8007664:	4668      	mov	r0, sp
 8007666:	2301      	movs	r3, #1
 8007668:	47a0      	blx	r4
}
 800766a:	bd13      	pop	{r0, r1, r4, pc}
        switch( ComplianceTestState.State )
 800766c:	78a2      	ldrb	r2, [r4, #2]
 800766e:	2a01      	cmp	r2, #1
 8007670:	d002      	beq.n	8007678 <LmhpComplianceTxProcess.isra.0+0x60>
 8007672:	2a04      	cmp	r2, #4
 8007674:	d1e8      	bne.n	8007648 <LmhpComplianceTxProcess.isra.0+0x30>
 8007676:	e7e5      	b.n	8007644 <LmhpComplianceTxProcess.isra.0+0x2c>
            ComplianceTestState.DataBufferSize = 2;
 8007678:	2202      	movs	r2, #2
 800767a:	71a2      	strb	r2, [r4, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800767c:	89a2      	ldrh	r2, [r4, #12]
 800767e:	0a11      	lsrs	r1, r2, #8
 8007680:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8007682:	705a      	strb	r2, [r3, #1]
            break;
 8007684:	e7e0      	b.n	8007648 <LmhpComplianceTxProcess.isra.0+0x30>
 8007686:	46c0      	nop			@ (mov r8, r8)
 8007688:	20000738 	.word	0x20000738
 800768c:	200000a4 	.word	0x200000a4

08007690 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8007690:	b510      	push	{r4, lr}
    LmhpComplianceTxProcess( );
 8007692:	f7ff ffc1 	bl	8007618 <LmhpComplianceTxProcess.isra.0>
}
 8007696:	bd10      	pop	{r4, pc}

08007698 <LmhpComplianceOnMcpsIndication>:
{
 8007698:	b530      	push	{r4, r5, lr}
    if( ComplianceTestState.Initialized == false )
 800769a:	4c78      	ldr	r4, [pc, #480]	@ (800787c <LmhpComplianceOnMcpsIndication+0x1e4>)
{
 800769c:	0002      	movs	r2, r0
    if( ComplianceTestState.Initialized == false )
 800769e:	7823      	ldrb	r3, [r4, #0]
{
 80076a0:	b08d      	sub	sp, #52	@ 0x34
    if( ComplianceTestState.Initialized == false )
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d044      	beq.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
    if( mcpsIndication->RxData == false )
 80076a6:	7b43      	ldrb	r3, [r0, #13]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d041      	beq.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
    if ((ComplianceTestState.IsRunning == true) &&
 80076ac:	7865      	ldrb	r5, [r4, #1]
 80076ae:	2d00      	cmp	r5, #0
 80076b0:	d005      	beq.n	80076be <LmhpComplianceOnMcpsIndication+0x26>
 80076b2:	7b83      	ldrb	r3, [r0, #14]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d102      	bne.n	80076be <LmhpComplianceOnMcpsIndication+0x26>
        ComplianceTestState.DownLinkCounter++;
 80076b8:	89a3      	ldrh	r3, [r4, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	81a3      	strh	r3, [r4, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80076be:	78d0      	ldrb	r0, [r2, #3]
 80076c0:	28e0      	cmp	r0, #224	@ 0xe0
 80076c2:	d135      	bne.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
    if( ComplianceTestState.IsRunning == false )
 80076c4:	2d00      	cmp	r5, #0
 80076c6:	d135      	bne.n	8007734 <LmhpComplianceOnMcpsIndication+0x9c>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80076c8:	7b11      	ldrb	r1, [r2, #12]
 80076ca:	2904      	cmp	r1, #4
 80076cc:	d130      	bne.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80076ce:	6893      	ldr	r3, [r2, #8]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80076d0:	781a      	ldrb	r2, [r3, #0]
 80076d2:	2a01      	cmp	r2, #1
 80076d4:	d12c      	bne.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80076d6:	785a      	ldrb	r2, [r3, #1]
 80076d8:	2a01      	cmp	r2, #1
 80076da:	d129      	bne.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80076dc:	789a      	ldrb	r2, [r3, #2]
 80076de:	2a01      	cmp	r2, #1
 80076e0:	d126      	bne.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80076e2:	78db      	ldrb	r3, [r3, #3]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d123      	bne.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.DataBufferSize = 2;
 80076e8:	3201      	adds	r2, #1
 80076ea:	71a2      	strb	r2, [r4, #6]
            mibReq.Type = MIB_ADR;
 80076ec:	466a      	mov	r2, sp
            ComplianceTestState.Port = 224;
 80076ee:	7120      	strb	r0, [r4, #4]
            mibReq.Param.AdrEnable = true;
 80076f0:	7413      	strb	r3, [r2, #16]
            mibReq.Type = MIB_ADR;
 80076f2:	7311      	strb	r1, [r2, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80076f4:	a803      	add	r0, sp, #12
            ComplianceTestState.IsRunning = true;
 80076f6:	7063      	strb	r3, [r4, #1]
            ComplianceTestState.State = 1;
 80076f8:	8063      	strh	r3, [r4, #2]
            ComplianceTestState.DownLinkCounter = 0;
 80076fa:	60e5      	str	r5, [r4, #12]
            ComplianceTestState.NbGateways = 0;
 80076fc:	7425      	strb	r5, [r4, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80076fe:	f002 f941 	bl	8009984 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8007702:	0028      	movs	r0, r5
 8007704:	f002 fe34 	bl	800a370 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8007708:	6963      	ldr	r3, [r4, #20]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d000      	beq.n	8007712 <LmhpComplianceOnMcpsIndication+0x7a>
                LmhpComplianceParams->StopPeripherals( );
 8007710:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8007712:	2200      	movs	r2, #0
 8007714:	2101      	movs	r1, #1
 8007716:	3418      	adds	r4, #24
 8007718:	4b59      	ldr	r3, [pc, #356]	@ (8007880 <LmhpComplianceOnMcpsIndication+0x1e8>)
 800771a:	9200      	str	r2, [sp, #0]
 800771c:	4249      	negs	r1, r1
 800771e:	0020      	movs	r0, r4
 8007720:	f006 fd30 	bl	800e184 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8007724:	4957      	ldr	r1, [pc, #348]	@ (8007884 <LmhpComplianceOnMcpsIndication+0x1ec>)
 8007726:	0020      	movs	r0, r4
 8007728:	f006 fe1c 	bl	800e364 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 800772c:	f7ff ff74 	bl	8007618 <LmhpComplianceTxProcess.isra.0>
}
 8007730:	b00d      	add	sp, #52	@ 0x34
 8007732:	bd30      	pop	{r4, r5, pc}
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8007734:	6893      	ldr	r3, [r2, #8]
 8007736:	7818      	ldrb	r0, [r3, #0]
 8007738:	70a0      	strb	r0, [r4, #2]
        switch( ComplianceTestState.State )
 800773a:	280a      	cmp	r0, #10
 800773c:	d8f8      	bhi.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
 800773e:	f7f8 fcf5 	bl	800012c <__gnu_thumb1_case_uqi>
 8007742:	2006      	.short	0x2006
 8007744:	3e292723 	.word	0x3e292723
 8007748:	8d8a6244 	.word	0x8d8a6244
 800774c:	96          	.byte	0x96
 800774d:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 800774e:	0020      	movs	r0, r4
 8007750:	3018      	adds	r0, #24
 8007752:	f006 fd75 	bl	800e240 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8007756:	2300      	movs	r3, #0
                mibReq.Type = MIB_ADR;
 8007758:	466a      	mov	r2, sp
                ComplianceTestState.DownLinkCounter = 0;
 800775a:	81a3      	strh	r3, [r4, #12]
                ComplianceTestState.IsRunning = false;
 800775c:	7063      	strb	r3, [r4, #1]
                mibReq.Type = MIB_ADR;
 800775e:	3304      	adds	r3, #4
 8007760:	7313      	strb	r3, [r2, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8007762:	6963      	ldr	r3, [r4, #20]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007764:	a803      	add	r0, sp, #12
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	7413      	strb	r3, [r2, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800776a:	f002 f90b 	bl	8009984 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800776e:	6963      	ldr	r3, [r4, #20]
 8007770:	7858      	ldrb	r0, [r3, #1]
 8007772:	f002 fdfd 	bl	800a370 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8007776:	6963      	ldr	r3, [r4, #20]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d0d8      	beq.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
                    LmhpComplianceParams->StartPeripherals( );
 800777e:	4798      	blx	r3
            break;
 8007780:	e7d6      	b.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.DataBufferSize = 2;
 8007782:	2302      	movs	r3, #2
 8007784:	71a3      	strb	r3, [r4, #6]
            break;
 8007786:	e7d3      	b.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.State = 1;
 8007788:	2302      	movs	r3, #2
 800778a:	33ff      	adds	r3, #255	@ 0xff
            ComplianceTestState.State = 1;
 800778c:	8063      	strh	r3, [r4, #2]
            break;
 800778e:	e7cf      	b.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.State = 1;
 8007790:	2301      	movs	r3, #1
 8007792:	e7fb      	b.n	800778c <LmhpComplianceOnMcpsIndication+0xf4>
            ComplianceTestState.DataBuffer[0] = 4;
 8007794:	2304      	movs	r3, #4
 8007796:	68a5      	ldr	r5, [r4, #8]
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8007798:	7b11      	ldrb	r1, [r2, #12]
            ComplianceTestState.DataBuffer[0] = 4;
 800779a:	702b      	strb	r3, [r5, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800779c:	7960      	ldrb	r0, [r4, #5]
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800779e:	71a1      	strb	r1, [r4, #6]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80077a0:	1c03      	adds	r3, r0, #0
 80077a2:	4288      	cmp	r0, r1
 80077a4:	d900      	bls.n	80077a8 <LmhpComplianceOnMcpsIndication+0x110>
 80077a6:	1c0b      	adds	r3, r1, #0
 80077a8:	b2d9      	uxtb	r1, r3
 80077aa:	2300      	movs	r3, #0
 80077ac:	3301      	adds	r3, #1
 80077ae:	b2d8      	uxtb	r0, r3
 80077b0:	4281      	cmp	r1, r0
 80077b2:	d9bd      	bls.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 80077b4:	6890      	ldr	r0, [r2, #8]
 80077b6:	5cc0      	ldrb	r0, [r0, r3]
 80077b8:	3001      	adds	r0, #1
 80077ba:	54e8      	strb	r0, [r5, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80077bc:	e7f6      	b.n	80077ac <LmhpComplianceOnMcpsIndication+0x114>
                mlmeReq.Type = MLME_LINK_CHECK;
 80077be:	2304      	movs	r3, #4
 80077c0:	a803      	add	r0, sp, #12
                mlmeReq.Type = MLME_DEVICE_TIME;
 80077c2:	7003      	strb	r3, [r0, #0]
                LoRaMacMlmeRequest( &mlmeReq );
 80077c4:	f002 fb20 	bl	8009e08 <LoRaMacMlmeRequest>
            break;
 80077c8:	e7b2      	b.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
                TimerStop(&ComplianceTxNextPacketTimer);
 80077ca:	0020      	movs	r0, r4
 80077cc:	3018      	adds	r0, #24
 80077ce:	f006 fd37 	bl	800e240 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 80077d2:	2300      	movs	r3, #0
                mibReq.Type = MIB_ADR;
 80077d4:	466a      	mov	r2, sp
                ComplianceTestState.DownLinkCounter = 0;
 80077d6:	81a3      	strh	r3, [r4, #12]
                ComplianceTestState.IsRunning = false;
 80077d8:	7063      	strb	r3, [r4, #1]
                mibReq.Type = MIB_ADR;
 80077da:	3304      	adds	r3, #4
 80077dc:	7313      	strb	r3, [r2, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80077de:	6963      	ldr	r3, [r4, #20]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80077e0:	a803      	add	r0, sp, #12
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	7413      	strb	r3, [r2, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80077e6:	f002 f8cd 	bl	8009984 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80077ea:	6963      	ldr	r3, [r4, #20]
 80077ec:	7858      	ldrb	r0, [r3, #1]
 80077ee:	f002 fdbf 	bl	800a370 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80077f2:	6963      	ldr	r3, [r4, #20]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d000      	beq.n	80077fc <LmhpComplianceOnMcpsIndication+0x164>
                    LmhpComplianceParams->StartPeripherals( );
 80077fa:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 80077fc:	4b22      	ldr	r3, [pc, #136]	@ (8007888 <LmhpComplianceOnMcpsIndication+0x1f0>)
 80077fe:	2002      	movs	r0, #2
 8007800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007802:	4798      	blx	r3
            break;
 8007804:	e794      	b.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
                if( mcpsIndication->BufferSize == 3 )
 8007806:	7b12      	ldrb	r2, [r2, #12]
 8007808:	a803      	add	r0, sp, #12
 800780a:	2a03      	cmp	r2, #3
 800780c:	d10c      	bne.n	8007828 <LmhpComplianceOnMcpsIndication+0x190>
                    mlmeReq.Type = MLME_TXCW;
 800780e:	3202      	adds	r2, #2
 8007810:	7002      	strb	r2, [r0, #0]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007812:	785a      	ldrb	r2, [r3, #1]
 8007814:	789b      	ldrb	r3, [r3, #2]
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	4313      	orrs	r3, r2
 800781a:	ba5b      	rev16	r3, r3
 800781c:	8083      	strh	r3, [r0, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 800781e:	f002 faf3 	bl	8009e08 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8007822:	2301      	movs	r3, #1
 8007824:	70a3      	strb	r3, [r4, #2]
            break;
 8007826:	e783      	b.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
                else if( mcpsIndication->BufferSize == 7 )
 8007828:	2a07      	cmp	r2, #7
 800782a:	d1f8      	bne.n	800781e <LmhpComplianceOnMcpsIndication+0x186>
                    mlmeReq.Type = MLME_TXCW_1;
 800782c:	3a01      	subs	r2, #1
 800782e:	7002      	strb	r2, [r0, #0]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007830:	789a      	ldrb	r2, [r3, #2]
 8007832:	7859      	ldrb	r1, [r3, #1]
 8007834:	0212      	lsls	r2, r2, #8
 8007836:	430a      	orrs	r2, r1
 8007838:	ba52      	rev16	r2, r2
 800783a:	8082      	strh	r2, [r0, #4]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800783c:	78da      	ldrb	r2, [r3, #3]
 800783e:	7919      	ldrb	r1, [r3, #4]
 8007840:	0412      	lsls	r2, r2, #16
 8007842:	0209      	lsls	r1, r1, #8
 8007844:	430a      	orrs	r2, r1
 8007846:	7959      	ldrb	r1, [r3, #5]
 8007848:	430a      	orrs	r2, r1
 800784a:	2164      	movs	r1, #100	@ 0x64
 800784c:	434a      	muls	r2, r1
 800784e:	6082      	str	r2, [r0, #8]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8007850:	799b      	ldrb	r3, [r3, #6]
 8007852:	7303      	strb	r3, [r0, #12]
 8007854:	e7e3      	b.n	800781e <LmhpComplianceOnMcpsIndication+0x186>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8007856:	230a      	movs	r3, #10
 8007858:	a803      	add	r0, sp, #12
 800785a:	e7b2      	b.n	80077c2 <LmhpComplianceOnMcpsIndication+0x12a>
                mibReq.Type = MIB_DEVICE_CLASS;
 800785c:	4669      	mov	r1, sp
 800785e:	2200      	movs	r2, #0
 8007860:	730a      	strb	r2, [r1, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8007862:	785b      	ldrb	r3, [r3, #1]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007864:	a803      	add	r0, sp, #12
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8007866:	740b      	strb	r3, [r1, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007868:	f002 f88c 	bl	8009984 <LoRaMacMibSetRequestConfirm>
            break;
 800786c:	e760      	b.n	8007730 <LmhpComplianceOnMcpsIndication+0x98>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800786e:	4669      	mov	r1, sp
 8007870:	220d      	movs	r2, #13
 8007872:	730a      	strb	r2, [r1, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8007874:	785b      	ldrb	r3, [r3, #1]
                LoRaMacMlmeRequest( &mlmeReq );
 8007876:	a803      	add	r0, sp, #12
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8007878:	740b      	strb	r3, [r1, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 800787a:	e7a3      	b.n	80077c4 <LmhpComplianceOnMcpsIndication+0x12c>
 800787c:	20000738 	.word	0x20000738
 8007880:	08007691 	.word	0x08007691
 8007884:	00001388 	.word	0x00001388
 8007888:	200000a4 	.word	0x200000a4

0800788c <LmhpCompliancePackageFactory>:
    return &LmhpCompliancePackage;
 800788c:	4800      	ldr	r0, [pc, #0]	@ (8007890 <LmhpCompliancePackageFactory+0x4>)
}
 800788e:	4770      	bx	lr
 8007890:	200000a4 	.word	0x200000a4

08007894 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8007894:	4770      	bx	lr

08007896 <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 8007896:	2000      	movs	r0, #0
 8007898:	4770      	bx	lr

0800789a <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
 800789a:	2000      	movs	r0, #0
 800789c:	4770      	bx	lr
	...

080078a0 <OnRadioRxError>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 80078a0:	2302      	movs	r3, #2
 80078a2:	4a08      	ldr	r2, [pc, #32]	@ (80078c4 <OnRadioRxError+0x24>)
{
 80078a4:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 80078a6:	7811      	ldrb	r1, [r2, #0]
 80078a8:	430b      	orrs	r3, r1
 80078aa:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80078ac:	22d2      	movs	r2, #210	@ 0xd2
 80078ae:	4b06      	ldr	r3, [pc, #24]	@ (80078c8 <OnRadioRxError+0x28>)
 80078b0:	0092      	lsls	r2, r2, #2
 80078b2:	589b      	ldr	r3, [r3, r2]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <OnRadioRxError+0x20>
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d000      	beq.n	80078c0 <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80078be:	4798      	blx	r3
    }
}
 80078c0:	bd10      	pop	{r4, pc}
 80078c2:	46c0      	nop			@ (mov r8, r8)
 80078c4:	20000768 	.word	0x20000768
 80078c8:	20000d18 	.word	0x20000d18

080078cc <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80078cc:	4b04      	ldr	r3, [pc, #16]	@ (80078e0 <UpdateRxSlotIdleState+0x14>)
 80078ce:	781a      	ldrb	r2, [r3, #0]
 80078d0:	2a02      	cmp	r2, #2
 80078d2:	d000      	beq.n	80078d6 <UpdateRxSlotIdleState+0xa>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80078d4:	2206      	movs	r2, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80078d6:	2190      	movs	r1, #144	@ 0x90
 80078d8:	4b02      	ldr	r3, [pc, #8]	@ (80078e4 <UpdateRxSlotIdleState+0x18>)
 80078da:	00c9      	lsls	r1, r1, #3
 80078dc:	545a      	strb	r2, [r3, r1]
 80078de:	4770      	bx	lr
 80078e0:	2000087c 	.word	0x2000087c
 80078e4:	20000d18 	.word	0x20000d18

080078e8 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 80078e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80078ea:	4a09      	ldr	r2, [pc, #36]	@ (8007910 <GetMaxAppPayloadWithoutFOptsLength+0x28>)
 80078ec:	4b09      	ldr	r3, [pc, #36]	@ (8007914 <GetMaxAppPayloadWithoutFOptsLength+0x2c>)
 80078ee:	7812      	ldrb	r2, [r2, #0]
 80078f0:	a902      	add	r1, sp, #8
 80078f2:	708a      	strb	r2, [r1, #2]
    getPhy.Datarate = datarate;
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80078f4:	001a      	movs	r2, r3
    getPhy.Datarate = datarate;
 80078f6:	7048      	strb	r0, [r1, #1]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80078f8:	3280      	adds	r2, #128	@ 0x80
 80078fa:	7812      	ldrb	r2, [r2, #0]
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80078fc:	3340      	adds	r3, #64	@ 0x40
 80078fe:	320d      	adds	r2, #13
 8007900:	700a      	strb	r2, [r1, #0]
 8007902:	7818      	ldrb	r0, [r3, #0]
 8007904:	f003 fc13 	bl	800b12e <RegionGetPhyParam>

    return phyParam.Value;
 8007908:	b2c0      	uxtb	r0, r0
}
 800790a:	b005      	add	sp, #20
 800790c:	bd00      	pop	{pc}
 800790e:	46c0      	nop			@ (mov r8, r8)
 8007910:	200007f4 	.word	0x200007f4
 8007914:	20000780 	.word	0x20000780

08007918 <OnAckTimeoutTimerEvent>:
{
 8007918:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 800791a:	480f      	ldr	r0, [pc, #60]	@ (8007958 <OnAckTimeoutTimerEvent+0x40>)
 800791c:	f006 fc90 	bl	800e240 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8007920:	4b0e      	ldr	r3, [pc, #56]	@ (800795c <OnAckTimeoutTimerEvent+0x44>)
 8007922:	4a0f      	ldr	r2, [pc, #60]	@ (8007960 <OnAckTimeoutTimerEvent+0x48>)
 8007924:	5c9a      	ldrb	r2, [r3, r2]
 8007926:	2a00      	cmp	r2, #0
 8007928:	d002      	beq.n	8007930 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 800792a:	2101      	movs	r1, #1
 800792c:	4a0d      	ldr	r2, [pc, #52]	@ (8007964 <OnAckTimeoutTimerEvent+0x4c>)
 800792e:	5499      	strb	r1, [r3, r2]
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007930:	4a0d      	ldr	r2, [pc, #52]	@ (8007968 <OnAckTimeoutTimerEvent+0x50>)
 8007932:	7812      	ldrb	r2, [r2, #0]
 8007934:	2a02      	cmp	r2, #2
 8007936:	d104      	bne.n	8007942 <OnAckTimeoutTimerEvent+0x2a>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8007938:	490c      	ldr	r1, [pc, #48]	@ (800796c <OnAckTimeoutTimerEvent+0x54>)
 800793a:	321e      	adds	r2, #30
 800793c:	5c58      	ldrb	r0, [r3, r1]
 800793e:	4302      	orrs	r2, r0
 8007940:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007942:	22d2      	movs	r2, #210	@ 0xd2
 8007944:	0092      	lsls	r2, r2, #2
 8007946:	589b      	ldr	r3, [r3, r2]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <OnAckTimeoutTimerEvent+0x3c>
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d000      	beq.n	8007954 <OnAckTimeoutTimerEvent+0x3c>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007952:	4798      	blx	r3
}
 8007954:	bd10      	pop	{r4, pc}
 8007956:	46c0      	nop			@ (mov r8, r8)
 8007958:	20001110 	.word	0x20001110
 800795c:	20000d18 	.word	0x20000d18
 8007960:	00000414 	.word	0x00000414
 8007964:	00000413 	.word	0x00000413
 8007968:	2000087c 	.word	0x2000087c
 800796c:	00000481 	.word	0x00000481

08007970 <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8007970:	22d0      	movs	r2, #208	@ 0xd0
 8007972:	2380      	movs	r3, #128	@ 0x80
{
 8007974:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8007976:	4c0a      	ldr	r4, [pc, #40]	@ (80079a0 <PrepareRxDoneAbort+0x30>)
 8007978:	0092      	lsls	r2, r2, #2
 800797a:	58a1      	ldr	r1, [r4, r2]
 800797c:	430b      	orrs	r3, r1
 800797e:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 8007980:	4b08      	ldr	r3, [pc, #32]	@ (80079a4 <PrepareRxDoneAbort+0x34>)
 8007982:	5ce3      	ldrb	r3, [r4, r3]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 8007988:	2000      	movs	r0, #0
 800798a:	f7ff ffc5 	bl	8007918 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800798e:	2322      	movs	r3, #34	@ 0x22
 8007990:	4905      	ldr	r1, [pc, #20]	@ (80079a8 <PrepareRxDoneAbort+0x38>)
 8007992:	5c62      	ldrb	r2, [r4, r1]
 8007994:	439a      	bics	r2, r3
 8007996:	4313      	orrs	r3, r2
 8007998:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 800799a:	f7ff ff97 	bl	80078cc <UpdateRxSlotIdleState>
}
 800799e:	bd10      	pop	{r4, pc}
 80079a0:	20000d18 	.word	0x20000d18
 80079a4:	00000414 	.word	0x00000414
 80079a8:	00000481 	.word	0x00000481

080079ac <HandleRadioRxErrorTimeout>:
{
 80079ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80079ae:	4b30      	ldr	r3, [pc, #192]	@ (8007a70 <HandleRadioRxErrorTimeout+0xc4>)
{
 80079b0:	9101      	str	r1, [sp, #4]
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80079b2:	781b      	ldrb	r3, [r3, #0]
{
 80079b4:	0006      	movs	r6, r0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80079b6:	4c2f      	ldr	r4, [pc, #188]	@ (8007a74 <HandleRadioRxErrorTimeout+0xc8>)
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d002      	beq.n	80079c2 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 80079bc:	4b2e      	ldr	r3, [pc, #184]	@ (8007a78 <HandleRadioRxErrorTimeout+0xcc>)
 80079be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c0:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80079c2:	f002 fd5c 	bl	800a47e <LoRaMacClassBIsBeaconExpected>
 80079c6:	1e05      	subs	r5, r0, #0
 80079c8:	d005      	beq.n	80079d6 <HandleRadioRxErrorTimeout+0x2a>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80079ca:	2002      	movs	r0, #2
 80079cc:	f002 fd4d 	bl	800a46a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80079d0:	2000      	movs	r0, #0
 80079d2:	f002 fd4f 	bl	800a474 <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80079d6:	0023      	movs	r3, r4
 80079d8:	33fc      	adds	r3, #252	@ 0xfc
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d117      	bne.n	8007a10 <HandleRadioRxErrorTimeout+0x64>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80079e0:	f002 fd4f 	bl	800a482 <LoRaMacClassBIsPingExpected>
 80079e4:	1e07      	subs	r7, r0, #0
 80079e6:	d006      	beq.n	80079f6 <HandleRadioRxErrorTimeout+0x4a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80079e8:	2000      	movs	r0, #0
 80079ea:	f002 fd3f 	bl	800a46c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80079ee:	2000      	movs	r0, #0
 80079f0:	f002 fd41 	bl	800a476 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80079f4:	003d      	movs	r5, r7
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80079f6:	f002 fd46 	bl	800a486 <LoRaMacClassBIsMulticastExpected>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d008      	beq.n	8007a10 <HandleRadioRxErrorTimeout+0x64>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80079fe:	2000      	movs	r0, #0
 8007a00:	f002 fd35 	bl	800a46e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007a04:	2000      	movs	r0, #0
 8007a06:	f002 fd37 	bl	800a478 <LoRaMacClassBMulticastSlotTimerEvent>
    UpdateRxSlotIdleState( );
 8007a0a:	f7ff ff5f 	bl	80078cc <UpdateRxSlotIdleState>
}
 8007a0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if( classBRx == false )
 8007a10:	2d00      	cmp	r5, #0
 8007a12:	d1fa      	bne.n	8007a0a <HandleRadioRxErrorTimeout+0x5e>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007a14:	2290      	movs	r2, #144	@ 0x90
            if( MacCtx.NodeAckRequested == true )
 8007a16:	4d19      	ldr	r5, [pc, #100]	@ (8007a7c <HandleRadioRxErrorTimeout+0xd0>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007a18:	00d2      	lsls	r2, r2, #3
            if( MacCtx.NodeAckRequested == true )
 8007a1a:	4b19      	ldr	r3, [pc, #100]	@ (8007a80 <HandleRadioRxErrorTimeout+0xd4>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007a1c:	5caa      	ldrb	r2, [r5, r2]
            if( MacCtx.NodeAckRequested == true )
 8007a1e:	5ceb      	ldrb	r3, [r5, r3]
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007a20:	2a00      	cmp	r2, #0
 8007a22:	d117      	bne.n	8007a54 <HandleRadioRxErrorTimeout+0xa8>
            if( MacCtx.NodeAckRequested == true )
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <HandleRadioRxErrorTimeout+0x80>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8007a28:	4b16      	ldr	r3, [pc, #88]	@ (8007a84 <HandleRadioRxErrorTimeout+0xd8>)
 8007a2a:	54ee      	strb	r6, [r5, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8007a2c:	0030      	movs	r0, r6
 8007a2e:	f002 fed9 	bl	800a7e4 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8007a32:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007a34:	f006 fbcc 	bl	800e1d0 <UTIL_TIMER_GetElapsedTime>
 8007a38:	23ed      	movs	r3, #237	@ 0xed
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	58eb      	ldr	r3, [r5, r3]
 8007a3e:	4298      	cmp	r0, r3
 8007a40:	d3e3      	bcc.n	8007a0a <HandleRadioRxErrorTimeout+0x5e>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8007a42:	4811      	ldr	r0, [pc, #68]	@ (8007a88 <HandleRadioRxErrorTimeout+0xdc>)
 8007a44:	f006 fbfc 	bl	800e240 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8007a48:	2320      	movs	r3, #32
 8007a4a:	4a10      	ldr	r2, [pc, #64]	@ (8007a8c <HandleRadioRxErrorTimeout+0xe0>)
 8007a4c:	5ca9      	ldrb	r1, [r5, r2]
 8007a4e:	430b      	orrs	r3, r1
 8007a50:	54ab      	strb	r3, [r5, r2]
 8007a52:	e7da      	b.n	8007a0a <HandleRadioRxErrorTimeout+0x5e>
            if( MacCtx.NodeAckRequested == true )
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <HandleRadioRxErrorTimeout+0xb2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8007a58:	4b0a      	ldr	r3, [pc, #40]	@ (8007a84 <HandleRadioRxErrorTimeout+0xd8>)
 8007a5a:	9a01      	ldr	r2, [sp, #4]
 8007a5c:	54ea      	strb	r2, [r5, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8007a5e:	9801      	ldr	r0, [sp, #4]
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007a60:	34fc      	adds	r4, #252	@ 0xfc
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8007a62:	f002 febf 	bl	800a7e4 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007a66:	7823      	ldrb	r3, [r4, #0]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d1ed      	bne.n	8007a48 <HandleRadioRxErrorTimeout+0x9c>
 8007a6c:	e7cd      	b.n	8007a0a <HandleRadioRxErrorTimeout+0x5e>
 8007a6e:	46c0      	nop			@ (mov r8, r8)
 8007a70:	2000087c 	.word	0x2000087c
 8007a74:	20000780 	.word	0x20000780
 8007a78:	0800edf8 	.word	0x0800edf8
 8007a7c:	20000d18 	.word	0x20000d18
 8007a80:	00000414 	.word	0x00000414
 8007a84:	00000439 	.word	0x00000439
 8007a88:	200010b0 	.word	0x200010b0
 8007a8c:	00000481 	.word	0x00000481

08007a90 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8007a90:	2301      	movs	r3, #1
 8007a92:	4a0b      	ldr	r2, [pc, #44]	@ (8007ac0 <OnRadioRxTimeout+0x30>)
{
 8007a94:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8007a96:	7811      	ldrb	r1, [r2, #0]
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007a9c:	22d2      	movs	r2, #210	@ 0xd2
 8007a9e:	4b09      	ldr	r3, [pc, #36]	@ (8007ac4 <OnRadioRxTimeout+0x34>)
 8007aa0:	0092      	lsls	r2, r2, #2
 8007aa2:	589b      	ldr	r3, [r3, r2]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d003      	beq.n	8007ab0 <OnRadioRxTimeout+0x20>
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d000      	beq.n	8007ab0 <OnRadioRxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007aae:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	2002      	movs	r0, #2
 8007ab6:	4b04      	ldr	r3, [pc, #16]	@ (8007ac8 <OnRadioRxTimeout+0x38>)
 8007ab8:	f006 f8aa 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
}
 8007abc:	bd10      	pop	{r4, pc}
 8007abe:	46c0      	nop			@ (mov r8, r8)
 8007ac0:	20000768 	.word	0x20000768
 8007ac4:	20000d18 	.word	0x20000d18
 8007ac8:	0800f2fc 	.word	0x0800f2fc

08007acc <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8007acc:	2304      	movs	r3, #4
 8007ace:	4a0b      	ldr	r2, [pc, #44]	@ (8007afc <OnRadioTxTimeout+0x30>)
{
 8007ad0:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8007ad2:	7811      	ldrb	r1, [r2, #0]
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007ad8:	22d2      	movs	r2, #210	@ 0xd2
 8007ada:	4b09      	ldr	r3, [pc, #36]	@ (8007b00 <OnRadioTxTimeout+0x34>)
 8007adc:	0092      	lsls	r2, r2, #2
 8007ade:	589b      	ldr	r3, [r3, r2]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <OnRadioTxTimeout+0x20>
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d000      	beq.n	8007aec <OnRadioTxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007aea:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8007aec:	2201      	movs	r2, #1
 8007aee:	2100      	movs	r1, #0
 8007af0:	2002      	movs	r0, #2
 8007af2:	4b04      	ldr	r3, [pc, #16]	@ (8007b04 <OnRadioTxTimeout+0x38>)
 8007af4:	f006 f88c 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
}
 8007af8:	bd10      	pop	{r4, pc}
 8007afa:	46c0      	nop			@ (mov r8, r8)
 8007afc:	20000768 	.word	0x20000768
 8007b00:	20000d18 	.word	0x20000d18
 8007b04:	0800f30c 	.word	0x0800f30c

08007b08 <OnRadioRxDone>:
{
 8007b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0a:	000e      	movs	r6, r1
 8007b0c:	0015      	movs	r5, r2
 8007b0e:	001c      	movs	r4, r3
 8007b10:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007b12:	f006 fb53 	bl	800e1bc <UTIL_TIMER_GetCurrentTime>
    LoRaMacRadioEvents.Events.RxDone = 1;
 8007b16:	2208      	movs	r2, #8
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007b18:	4b0c      	ldr	r3, [pc, #48]	@ (8007b4c <OnRadioRxDone+0x44>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 8007b1a:	7819      	ldrb	r1, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007b1c:	6058      	str	r0, [r3, #4]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007b22:	22d2      	movs	r2, #210	@ 0xd2
    RxDoneParams.Payload = payload;
 8007b24:	609f      	str	r7, [r3, #8]
    RxDoneParams.Size = size;
 8007b26:	819e      	strh	r6, [r3, #12]
    RxDoneParams.Rssi = rssi;
 8007b28:	81dd      	strh	r5, [r3, #14]
    RxDoneParams.Snr = snr;
 8007b2a:	741c      	strb	r4, [r3, #16]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007b2c:	4b08      	ldr	r3, [pc, #32]	@ (8007b50 <OnRadioRxDone+0x48>)
 8007b2e:	0092      	lsls	r2, r2, #2
 8007b30:	589b      	ldr	r3, [r3, r2]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <OnRadioRxDone+0x36>
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d000      	beq.n	8007b3e <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007b3c:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8007b3e:	2201      	movs	r2, #1
 8007b40:	2100      	movs	r1, #0
 8007b42:	4b04      	ldr	r3, [pc, #16]	@ (8007b54 <OnRadioRxDone+0x4c>)
 8007b44:	2002      	movs	r0, #2
 8007b46:	f006 f863 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
}
 8007b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b4c:	20000768 	.word	0x20000768
 8007b50:	20000d18 	.word	0x20000d18
 8007b54:	0800f31c 	.word	0x0800f31c

08007b58 <OnRadioTxDone>:
{
 8007b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8007b5a:	f006 fb2f 	bl	800e1bc <UTIL_TIMER_GetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007b5e:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8007b60:	4e0e      	ldr	r6, [pc, #56]	@ (8007b9c <OnRadioTxDone+0x44>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007b62:	4d0f      	ldr	r5, [pc, #60]	@ (8007ba0 <OnRadioTxDone+0x48>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8007b64:	6170      	str	r0, [r6, #20]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007b66:	0020      	movs	r0, r4
 8007b68:	f006 fa7c 	bl	800e064 <SysTimeGet>
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba4 <OnRadioTxDone+0x4c>)
 8007b6e:	cc06      	ldmia	r4!, {r1, r2}
 8007b70:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8007b72:	2310      	movs	r3, #16
 8007b74:	7832      	ldrb	r2, [r6, #0]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	7033      	strb	r3, [r6, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007b7a:	23d2      	movs	r3, #210	@ 0xd2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	58eb      	ldr	r3, [r5, r3]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <OnRadioTxDone+0x34>
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d000      	beq.n	8007b8c <OnRadioTxDone+0x34>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007b8a:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	2100      	movs	r1, #0
 8007b90:	4b05      	ldr	r3, [pc, #20]	@ (8007ba8 <OnRadioTxDone+0x50>)
 8007b92:	2002      	movs	r0, #2
 8007b94:	f006 f83c 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
}
 8007b98:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8007b9a:	46c0      	nop			@ (mov r8, r8)
 8007b9c:	20000768 	.word	0x20000768
 8007ba0:	20000d18 	.word	0x20000d18
 8007ba4:	20001050 	.word	0x20001050
 8007ba8:	0800f329 	.word	0x0800f329

08007bac <ResetMacParameters>:
    }
}


static void ResetMacParameters( void )
{
 8007bac:	b570      	push	{r4, r5, r6, lr}
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8007bae:	2600      	movs	r6, #0
 8007bb0:	4c42      	ldr	r4, [pc, #264]	@ (8007cbc <ResetMacParameters+0x110>)
 8007bb2:	4b43      	ldr	r3, [pc, #268]	@ (8007cc0 <ResetMacParameters+0x114>)
{
 8007bb4:	b08e      	sub	sp, #56	@ 0x38
    MacCtx.ChannelsNbTransCounter = 0;
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;

    Nvm.MacGroup2.MaxDCycle = 0;
 8007bb6:	701e      	strb	r6, [r3, #0]
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8007bb8:	745e      	strb	r6, [r3, #17]
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8007bba:	0023      	movs	r3, r4
 8007bbc:	2001      	movs	r0, #1
 8007bbe:	33fe      	adds	r3, #254	@ 0xfe
 8007bc0:	8098      	strh	r0, [r3, #4]

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007bc2:	0023      	movs	r3, r4
 8007bc4:	33c4      	adds	r3, #196	@ 0xc4
 8007bc6:	881b      	ldrh	r3, [r3, #0]
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007bc8:	0022      	movs	r2, r4
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007bca:	8723      	strh	r3, [r4, #56]	@ 0x38
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007bcc:	0023      	movs	r3, r4
    Nvm.MacGroup1.AdrAckCounter = 0;
 8007bce:	62a6      	str	r6, [r4, #40]	@ 0x28
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007bd0:	32a1      	adds	r2, #161	@ 0xa1
 8007bd2:	7812      	ldrb	r2, [r2, #0]
 8007bd4:	3361      	adds	r3, #97	@ 0x61
 8007bd6:	701a      	strb	r2, [r3, #0]
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8007bd8:	0022      	movs	r2, r4
 8007bda:	0023      	movs	r3, r4
 8007bdc:	32a4      	adds	r2, #164	@ 0xa4
 8007bde:	3364      	adds	r3, #100	@ 0x64
 8007be0:	ca22      	ldmia	r2!, {r1, r5}
 8007be2:	c322      	stmia	r3!, {r1, r5}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8007be4:	0022      	movs	r2, r4
 8007be6:	0023      	movs	r3, r4
 8007be8:	32ac      	adds	r2, #172	@ 0xac
 8007bea:	336c      	adds	r3, #108	@ 0x6c
 8007bec:	ca22      	ldmia	r2!, {r1, r5}
 8007bee:	c322      	stmia	r3!, {r1, r5}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8007bf0:	0022      	movs	r2, r4
 8007bf2:	0023      	movs	r3, r4
 8007bf4:	32b4      	adds	r2, #180	@ 0xb4
 8007bf6:	8812      	ldrh	r2, [r2, #0]
 8007bf8:	3374      	adds	r3, #116	@ 0x74
 8007bfa:	801a      	strh	r2, [r3, #0]
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8007bfc:	0023      	movs	r3, r4
 8007bfe:	33b8      	adds	r3, #184	@ 0xb8
 8007c00:	681b      	ldr	r3, [r3, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 8007c02:	4d30      	ldr	r5, [pc, #192]	@ (8007cc4 <ResetMacParameters+0x118>)
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8007c04:	67a3      	str	r3, [r4, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007c06:	0023      	movs	r3, r4
 8007c08:	33bc      	adds	r3, #188	@ 0xbc
 8007c0a:	681b      	ldr	r3, [r3, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 8007c0c:	4a2e      	ldr	r2, [pc, #184]	@ (8007cc8 <ResetMacParameters+0x11c>)
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007c0e:	67e3      	str	r3, [r4, #124]	@ 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 8007c10:	2382      	movs	r3, #130	@ 0x82
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	50ea      	str	r2, [r5, r3]

    MacCtx.NodeAckRequested = false;
 8007c16:	4b2d      	ldr	r3, [pc, #180]	@ (8007ccc <ResetMacParameters+0x120>)
    Nvm.MacGroup1.SrvAckRequested = false;

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8007c18:	a903      	add	r1, sp, #12
    MacCtx.NodeAckRequested = false;
 8007c1a:	54ee      	strb	r6, [r5, r3]
    Nvm.MacGroup1.SrvAckRequested = false;
 8007c1c:	0023      	movs	r3, r4
 8007c1e:	333a      	adds	r3, #58	@ 0x3a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8007c20:	7208      	strb	r0, [r1, #8]
    Nvm.MacGroup1.SrvAckRequested = false;
 8007c22:	701e      	strb	r6, [r3, #0]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8007c24:	4b2a      	ldr	r3, [pc, #168]	@ (8007cd0 <ResetMacParameters+0x124>)
 8007c26:	9303      	str	r3, [sp, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8007c28:	4b2a      	ldr	r3, [pc, #168]	@ (8007cd4 <ResetMacParameters+0x128>)
 8007c2a:	604b      	str	r3, [r1, #4]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007c2c:	0023      	movs	r3, r4
 8007c2e:	3340      	adds	r3, #64	@ 0x40
 8007c30:	7818      	ldrb	r0, [r3, #0]
 8007c32:	f003 fa8f 	bl	800b154 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8007c36:	4b28      	ldr	r3, [pc, #160]	@ (8007cd8 <ResetMacParameters+0x12c>)

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8007c38:	6e62      	ldr	r2, [r4, #100]	@ 0x64
    MacCtx.Channel = 0;
 8007c3a:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8007c3c:	3b49      	subs	r3, #73	@ 0x49
 8007c3e:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8007c40:	3304      	adds	r3, #4
 8007c42:	50ea      	str	r2, [r5, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007c44:	0023      	movs	r3, r4
 8007c46:	3375      	adds	r3, #117	@ 0x75
 8007c48:	781a      	ldrb	r2, [r3, #0]
 8007c4a:	23f7      	movs	r3, #247	@ 0xf7
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007c50:	3480      	adds	r4, #128	@ 0x80
 8007c52:	7822      	ldrb	r2, [r4, #0]
 8007c54:	4b21      	ldr	r3, [pc, #132]	@ (8007cdc <ResetMacParameters+0x130>)
 8007c56:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8007c58:	2280      	movs	r2, #128	@ 0x80
 8007c5a:	4b21      	ldr	r3, [pc, #132]	@ (8007ce0 <ResetMacParameters+0x134>)
 8007c5c:	0052      	lsls	r2, r2, #1
 8007c5e:	52ea      	strh	r2, [r5, r3]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007c60:	22f3      	movs	r2, #243	@ 0xf3
 8007c62:	3302      	adds	r3, #2
 8007c64:	0092      	lsls	r2, r2, #2
 8007c66:	18eb      	adds	r3, r5, r3
 8007c68:	18aa      	adds	r2, r5, r2
 8007c6a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007c6c:	c313      	stmia	r3!, {r0, r1, r4}
 8007c6e:	ca03      	ldmia	r2!, {r0, r1}
 8007c70:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007c72:	4b1c      	ldr	r3, [pc, #112]	@ (8007ce4 <ResetMacParameters+0x138>)
 8007c74:	4a1c      	ldr	r2, [pc, #112]	@ (8007ce8 <ResetMacParameters+0x13c>)
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8007c76:	9601      	str	r6, [sp, #4]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007c78:	52ea      	strh	r2, [r5, r3]
    classBCallbacks.MacProcessNotify = NULL;

    if( MacCtx.MacCallbacks != NULL )
 8007c7a:	3baa      	subs	r3, #170	@ 0xaa
 8007c7c:	58eb      	ldr	r3, [r5, r3]
    classBCallbacks.MacProcessNotify = NULL;
 8007c7e:	9602      	str	r6, [sp, #8]
    if( MacCtx.MacCallbacks != NULL )
 8007c80:	42b3      	cmp	r3, r6
 8007c82:	d003      	beq.n	8007c8c <ResetMacParameters+0xe0>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8007c84:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8007c86:	691b      	ldr	r3, [r3, #16]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8007c88:	9201      	str	r2, [sp, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8007c8a:	9302      	str	r3, [sp, #8]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8007c8c:	4b17      	ldr	r3, [pc, #92]	@ (8007cec <ResetMacParameters+0x140>)
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007c8e:	4a18      	ldr	r2, [pc, #96]	@ (8007cf0 <ResetMacParameters+0x144>)
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8007c90:	9306      	str	r3, [sp, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8007c92:	4b18      	ldr	r3, [pc, #96]	@ (8007cf4 <ResetMacParameters+0x148>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007c94:	a901      	add	r1, sp, #4
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8007c96:	9307      	str	r3, [sp, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8007c98:	4b17      	ldr	r3, [pc, #92]	@ (8007cf8 <ResetMacParameters+0x14c>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007c9a:	a806      	add	r0, sp, #24
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8007c9c:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8007c9e:	4b17      	ldr	r3, [pc, #92]	@ (8007cfc <ResetMacParameters+0x150>)
 8007ca0:	9309      	str	r3, [sp, #36]	@ 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8007ca2:	4b17      	ldr	r3, [pc, #92]	@ (8007d00 <ResetMacParameters+0x154>)
 8007ca4:	930a      	str	r3, [sp, #40]	@ 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8007ca6:	4b17      	ldr	r3, [pc, #92]	@ (8007d04 <ResetMacParameters+0x158>)
 8007ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8007caa:	4b17      	ldr	r3, [pc, #92]	@ (8007d08 <ResetMacParameters+0x15c>)
 8007cac:	930c      	str	r3, [sp, #48]	@ 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8007cae:	4b17      	ldr	r3, [pc, #92]	@ (8007d0c <ResetMacParameters+0x160>)
 8007cb0:	930d      	str	r3, [sp, #52]	@ 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007cb2:	f002 fbd9 	bl	800a468 <LoRaMacClassBInit>
}
 8007cb6:	b00e      	add	sp, #56	@ 0x38
 8007cb8:	bd70      	pop	{r4, r5, r6, pc}
 8007cba:	46c0      	nop			@ (mov r8, r8)
 8007cbc:	20000780 	.word	0x20000780
 8007cc0:	2000087f 	.word	0x2000087f
 8007cc4:	20000d18 	.word	0x20000d18
 8007cc8:	00010100 	.word	0x00010100
 8007ccc:	00000414 	.word	0x00000414
 8007cd0:	20000958 	.word	0x20000958
 8007cd4:	20000984 	.word	0x20000984
 8007cd8:	00000415 	.word	0x00000415
 8007cdc:	000003dd 	.word	0x000003dd
 8007ce0:	000003de 	.word	0x000003de
 8007ce4:	000003f2 	.word	0x000003f2
 8007ce8:	00000201 	.word	0x00000201
 8007cec:	20001178 	.word	0x20001178
 8007cf0:	20000d00 	.word	0x20000d00
 8007cf4:	20001134 	.word	0x20001134
 8007cf8:	20001164 	.word	0x20001164
 8007cfc:	20001199 	.word	0x20001199
 8007d00:	2000084c 	.word	0x2000084c
 8007d04:	200007c0 	.word	0x200007c0
 8007d08:	200007c4 	.word	0x200007c4
 8007d0c:	20000850 	.word	0x20000850

08007d10 <ScheduleTx>:
{
 8007d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d12:	b095      	sub	sp, #84	@ 0x54
 8007d14:	9003      	str	r0, [sp, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007d16:	f002 fbb2 	bl	800a47e <LoRaMacClassBIsBeaconExpected>
        return status;
 8007d1a:	240e      	movs	r4, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d117      	bne.n	8007d50 <ScheduleTx+0x40>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007d20:	4bb9      	ldr	r3, [pc, #740]	@ (8008008 <ScheduleTx+0x2f8>)
 8007d22:	4dba      	ldr	r5, [pc, #744]	@ (800800c <ScheduleTx+0x2fc>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d00d      	beq.n	8007d46 <ScheduleTx+0x36>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8007d2a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007d2c:	4eb8      	ldr	r6, [pc, #736]	@ (8008010 <ScheduleTx+0x300>)
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d016      	beq.n	8007d60 <ScheduleTx+0x50>
    switch( MacCtx.TxMsg.Type )
 8007d32:	0034      	movs	r4, r6
 8007d34:	34ff      	adds	r4, #255	@ 0xff
 8007d36:	7963      	ldrb	r3, [r4, #5]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01b      	beq.n	8007d74 <ScheduleTx+0x64>
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d100      	bne.n	8007d42 <ScheduleTx+0x32>
 8007d40:	e071      	b.n	8007e26 <ScheduleTx+0x116>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
    if( status != LORAMAC_STATUS_OK )
    {
        return status;
 8007d42:	2403      	movs	r4, #3
 8007d44:	e004      	b.n	8007d50 <ScheduleTx+0x40>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007d46:	f002 fb9c 	bl	800a482 <LoRaMacClassBIsPingExpected>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d003      	beq.n	8007d56 <ScheduleTx+0x46>
        return status;
 8007d4e:	240f      	movs	r4, #15
}
 8007d50:	0020      	movs	r0, r4
 8007d52:	b015      	add	sp, #84	@ 0x54
 8007d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007d56:	f002 fb96 	bl	800a486 <LoRaMacClassBIsMulticastExpected>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d0e5      	beq.n	8007d2a <ScheduleTx+0x1a>
 8007d5e:	e7f6      	b.n	8007d4e <ScheduleTx+0x3e>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8007d60:	002b      	movs	r3, r5
 8007d62:	33fe      	adds	r3, #254	@ 0xfe
 8007d64:	889a      	ldrh	r2, [r3, #4]
 8007d66:	2383      	movs	r3, #131	@ 0x83
 8007d68:	00db      	lsls	r3, r3, #3
 8007d6a:	58f3      	ldr	r3, [r6, r3]
 8007d6c:	3a01      	subs	r2, #1
 8007d6e:	4353      	muls	r3, r2
 8007d70:	632b      	str	r3, [r5, #48]	@ 0x30
 8007d72:	e7de      	b.n	8007d32 <ScheduleTx+0x22>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8007d74:	48a7      	ldr	r0, [pc, #668]	@ (8008014 <ScheduleTx+0x304>)
 8007d76:	f003 f931 	bl	800afdc <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d000      	beq.n	8007d80 <ScheduleTx+0x70>
 8007d7e:	e128      	b.n	8007fd2 <ScheduleTx+0x2c2>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007d80:	7b63      	ldrb	r3, [r4, #13]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8007d82:	002f      	movs	r7, r5
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007d84:	8033      	strh	r3, [r6, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8007d86:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007d88:	ac0e      	add	r4, sp, #56	@ 0x38
 8007d8a:	930e      	str	r3, [sp, #56]	@ 0x38
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007d8c:	002b      	movs	r3, r5
 8007d8e:	3339      	adds	r3, #57	@ 0x39
 8007d90:	781b      	ldrb	r3, [r3, #0]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8007d92:	37ff      	adds	r7, #255	@ 0xff
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007d94:	7223      	strb	r3, [r4, #8]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8007d96:	787b      	ldrb	r3, [r7, #1]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007d98:	a808      	add	r0, sp, #32
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8007d9a:	72a3      	strb	r3, [r4, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007d9c:	f006 f98a 	bl	800e0b4 <SysTimeGetMcuTime>
 8007da0:	002b      	movs	r3, r5
 8007da2:	3309      	adds	r3, #9
 8007da4:	33ff      	adds	r3, #255	@ 0xff
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	9908      	ldr	r1, [sp, #32]
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	2382      	movs	r3, #130	@ 0x82
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	58eb      	ldr	r3, [r5, r3]
 8007db2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007db4:	a804      	add	r0, sp, #16
 8007db6:	f006 f919 	bl	800dfec <SysTimeSub>
 8007dba:	ab11      	add	r3, sp, #68	@ 0x44
 8007dbc:	aa04      	add	r2, sp, #16
 8007dbe:	ca03      	ldmia	r2!, {r0, r1}
 8007dc0:	c303      	stmia	r3!, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8007dc2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
    nextChan.Joined = true;
 8007dc4:	2201      	movs	r2, #1
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8007dc6:	6063      	str	r3, [r4, #4]
    nextChan.LastTxIsJoinRequest = false;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	7523      	strb	r3, [r4, #20]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8007dcc:	8833      	ldrh	r3, [r6, #0]
    nextChan.Joined = true;
 8007dce:	7262      	strb	r2, [r4, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8007dd0:	82e3      	strh	r3, [r4, #22]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007dd2:	7c7b      	ldrb	r3, [r7, #17]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <ScheduleTx+0xcc>
        nextChan.LastTxIsJoinRequest = true;
 8007dd8:	7522      	strb	r2, [r4, #20]
        nextChan.Joined = false;
 8007dda:	7263      	strb	r3, [r4, #9]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8007ddc:	498e      	ldr	r1, [pc, #568]	@ (8008018 <ScheduleTx+0x308>)
 8007dde:	4f8f      	ldr	r7, [pc, #572]	@ (800801c <ScheduleTx+0x30c>)
 8007de0:	4b8f      	ldr	r3, [pc, #572]	@ (8008020 <ScheduleTx+0x310>)
 8007de2:	7838      	ldrb	r0, [r7, #0]
 8007de4:	4a8f      	ldr	r2, [pc, #572]	@ (8008024 <ScheduleTx+0x314>)
 8007de6:	9100      	str	r1, [sp, #0]
 8007de8:	0021      	movs	r1, r4
 8007dea:	4d88      	ldr	r5, [pc, #544]	@ (800800c <ScheduleTx+0x2fc>)
 8007dec:	f003 fa3e 	bl	800b26c <RegionNextChannel>
 8007df0:	1e04      	subs	r4, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8007df2:	d01c      	beq.n	8007e2e <ScheduleTx+0x11e>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8007df4:	280b      	cmp	r0, #11
 8007df6:	d1ab      	bne.n	8007d50 <ScheduleTx+0x40>
 8007df8:	9b03      	ldr	r3, [sp, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0a8      	beq.n	8007d50 <ScheduleTx+0x40>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8007dfe:	4b84      	ldr	r3, [pc, #528]	@ (8008010 <ScheduleTx+0x300>)
 8007e00:	4a89      	ldr	r2, [pc, #548]	@ (8008028 <ScheduleTx+0x318>)
 8007e02:	5899      	ldr	r1, [r3, r2]
 8007e04:	2900      	cmp	r1, #0
 8007e06:	d00c      	beq.n	8007e22 <ScheduleTx+0x112>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8007e08:	20d0      	movs	r0, #208	@ 0xd0
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	0080      	lsls	r0, r0, #2
 8007e0e:	581c      	ldr	r4, [r3, r0]
 8007e10:	4322      	orrs	r2, r4
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8007e12:	4c86      	ldr	r4, [pc, #536]	@ (800802c <ScheduleTx+0x31c>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8007e14:	501a      	str	r2, [r3, r0]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8007e16:	0020      	movs	r0, r4
 8007e18:	f006 faa4 	bl	800e364 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8007e1c:	0020      	movs	r0, r4
 8007e1e:	f006 fa63 	bl	800e2e8 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 8007e22:	2400      	movs	r4, #0
 8007e24:	e794      	b.n	8007d50 <ScheduleTx+0x40>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8007e26:	487b      	ldr	r0, [pc, #492]	@ (8008014 <ScheduleTx+0x304>)
 8007e28:	f003 f90d 	bl	800b046 <LoRaMacSerializerData>
 8007e2c:	e7a5      	b.n	8007d7a <ScheduleTx+0x6a>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007e2e:	783b      	ldrb	r3, [r7, #0]
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007e30:	0029      	movs	r1, r5
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007e32:	9303      	str	r3, [sp, #12]
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8007e34:	002b      	movs	r3, r5
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007e36:	4a7e      	ldr	r2, [pc, #504]	@ (8008030 <ScheduleTx+0x320>)
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8007e38:	3361      	adds	r3, #97	@ 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	7812      	ldrb	r2, [r2, #0]
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007e3e:	002e      	movs	r6, r5
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007e40:	3175      	adds	r1, #117	@ 0x75
 8007e42:	7809      	ldrb	r1, [r1, #0]
 8007e44:	b25b      	sxtb	r3, r3
 8007e46:	b252      	sxtb	r2, r2
 8007e48:	9803      	ldr	r0, [sp, #12]
 8007e4a:	f003 fa24 	bl	800b296 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007e4e:	4b79      	ldr	r3, [pc, #484]	@ (8008034 <ScheduleTx+0x324>)
 8007e50:	3648      	adds	r6, #72	@ 0x48
 8007e52:	7832      	ldrb	r2, [r6, #0]
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	b241      	sxtb	r1, r0
 8007e58:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007e5a:	9803      	ldr	r0, [sp, #12]
 8007e5c:	f003 f99e 	bl	800b19c <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007e60:	2168      	movs	r1, #104	@ 0x68
 8007e62:	4b75      	ldr	r3, [pc, #468]	@ (8008038 <ScheduleTx+0x328>)
 8007e64:	7832      	ldrb	r2, [r6, #0]
 8007e66:	7838      	ldrb	r0, [r7, #0]
 8007e68:	5669      	ldrsb	r1, [r5, r1]
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007e6e:	f003 f995 	bl	800b19c <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8007e72:	23f1      	movs	r3, #241	@ 0xf1
 8007e74:	20ec      	movs	r0, #236	@ 0xec
 8007e76:	4e66      	ldr	r6, [pc, #408]	@ (8008010 <ScheduleTx+0x300>)
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	58f7      	ldr	r7, [r6, r3]
 8007e7c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8007e7e:	0080      	lsls	r0, r0, #2
 8007e80:	19db      	adds	r3, r3, r7
 8007e82:	5033      	str	r3, [r6, r0]
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8007e84:	23f6      	movs	r3, #246	@ 0xf6
 8007e86:	22ed      	movs	r2, #237	@ 0xed
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	58f1      	ldr	r1, [r6, r3]
 8007e8c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8007e8e:	0092      	lsls	r2, r2, #2
 8007e90:	185b      	adds	r3, r3, r1
 8007e92:	50b3      	str	r3, [r6, r2]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007e94:	002b      	movs	r3, r5
 8007e96:	33ff      	adds	r3, #255	@ 0xff
 8007e98:	7c5b      	ldrb	r3, [r3, #17]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d176      	bne.n	8007f8c <ScheduleTx+0x27c>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8007e9e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8007ea0:	19db      	adds	r3, r3, r7
 8007ea2:	5033      	str	r3, [r6, r0]
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8007ea4:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8007ea6:	185b      	adds	r3, r3, r1
 8007ea8:	50b3      	str	r3, [r6, r2]
    return SendFrameOnChannel( MacCtx.Channel );
 8007eaa:	4b64      	ldr	r3, [pc, #400]	@ (800803c <ScheduleTx+0x32c>)
    int8_t txPower = 0;
 8007eac:	aa02      	add	r2, sp, #8
    return SendFrameOnChannel( MacCtx.Channel );
 8007eae:	5cf3      	ldrb	r3, [r6, r3]
    txConfig.Channel = channel;
 8007eb0:	a90a      	add	r1, sp, #40	@ 0x28
    return SendFrameOnChannel( MacCtx.Channel );
 8007eb2:	9303      	str	r3, [sp, #12]
    int8_t txPower = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	74d3      	strb	r3, [r2, #19]
    txConfig.Channel = channel;
 8007eb8:	9b03      	ldr	r3, [sp, #12]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007eba:	4f5d      	ldr	r7, [pc, #372]	@ (8008030 <ScheduleTx+0x320>)
    txConfig.Channel = channel;
 8007ebc:	700b      	strb	r3, [r1, #0]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007ebe:	783b      	ldrb	r3, [r7, #0]
 8007ec0:	4d52      	ldr	r5, [pc, #328]	@ (800800c <ScheduleTx+0x2fc>)
 8007ec2:	704b      	strb	r3, [r1, #1]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007ec4:	002b      	movs	r3, r5
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007ec6:	002a      	movs	r2, r5
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007ec8:	3338      	adds	r3, #56	@ 0x38
 8007eca:	781b      	ldrb	r3, [r3, #0]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007ecc:	3240      	adds	r2, #64	@ 0x40
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007ece:	708b      	strb	r3, [r1, #2]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8007ed0:	6fab      	ldr	r3, [r5, #120]	@ 0x78
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007ed2:	a802      	add	r0, sp, #8
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8007ed4:	604b      	str	r3, [r1, #4]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8007ed6:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8007ed8:	608b      	str	r3, [r1, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8007eda:	8833      	ldrh	r3, [r6, #0]
 8007edc:	818b      	strh	r3, [r1, #12]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007ede:	7812      	ldrb	r2, [r2, #0]
 8007ee0:	4b57      	ldr	r3, [pc, #348]	@ (8008040 <ScheduleTx+0x330>)
 8007ee2:	4694      	mov	ip, r2
 8007ee4:	2213      	movs	r2, #19
 8007ee6:	1812      	adds	r2, r2, r0
 8007ee8:	4660      	mov	r0, ip
 8007eea:	f003 f96e 	bl	800b1ca <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007eee:	2201      	movs	r2, #1
 8007ef0:	4b54      	ldr	r3, [pc, #336]	@ (8008044 <ScheduleTx+0x334>)
 8007ef2:	54f2      	strb	r2, [r6, r3]
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007ef4:	783a      	ldrb	r2, [r7, #0]
 8007ef6:	4b54      	ldr	r3, [pc, #336]	@ (8008048 <ScheduleTx+0x338>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007ef8:	2783      	movs	r7, #131	@ 0x83
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007efa:	54f2      	strb	r2, [r6, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8007efc:	ab02      	add	r3, sp, #8
 8007efe:	7cda      	ldrb	r2, [r3, #19]
 8007f00:	4b52      	ldr	r3, [pc, #328]	@ (800804c <ScheduleTx+0x33c>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007f02:	00ff      	lsls	r7, r7, #3
    MacCtx.McpsConfirm.TxPower = txPower;
 8007f04:	54f2      	strb	r2, [r6, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8007f06:	9a03      	ldr	r2, [sp, #12]
 8007f08:	330d      	adds	r3, #13
 8007f0a:	50f2      	str	r2, [r6, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007f0c:	2288      	movs	r2, #136	@ 0x88
 8007f0e:	59f3      	ldr	r3, [r6, r7]
 8007f10:	00d2      	lsls	r2, r2, #3
 8007f12:	50b3      	str	r3, [r6, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007f14:	3210      	adds	r2, #16
 8007f16:	50b3      	str	r3, [r6, r2]
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8007f18:	f002 fab7 	bl	800a48a <LoRaMacClassBIsBeaconModeActive>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d14c      	bne.n	8007fba <ScheduleTx+0x2aa>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007f20:	002b      	movs	r3, r5
 8007f22:	33fc      	adds	r3, #252	@ 0xfc
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <ScheduleTx+0x21e>
        LoRaMacClassBStopRxSlots( );
 8007f2a:	f002 fac2 	bl	800a4b2 <LoRaMacClassBStopRxSlots>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007f2e:	2639      	movs	r6, #57	@ 0x39
    LoRaMacClassBHaltBeaconing( );
 8007f30:	f002 faae 	bl	800a490 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007f34:	57ae      	ldrsb	r6, [r5, r6]
 8007f36:	4b41      	ldr	r3, [pc, #260]	@ (800803c <ScheduleTx+0x32c>)
 8007f38:	4d35      	ldr	r5, [pc, #212]	@ (8008010 <ScheduleTx+0x300>)
 8007f3a:	5ceb      	ldrb	r3, [r5, r3]
    switch( MacCtx.TxMsg.Type )
 8007f3c:	002f      	movs	r7, r5
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007f3e:	9303      	str	r3, [sp, #12]
    uint32_t fCntUp = 0;
 8007f40:	2300      	movs	r3, #0
    switch( MacCtx.TxMsg.Type )
 8007f42:	37ff      	adds	r7, #255	@ 0xff
    uint32_t fCntUp = 0;
 8007f44:	9307      	str	r3, [sp, #28]
    switch( MacCtx.TxMsg.Type )
 8007f46:	797b      	ldrb	r3, [r7, #5]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d03d      	beq.n	8007fc8 <ScheduleTx+0x2b8>
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d000      	beq.n	8007f52 <ScheduleTx+0x242>
 8007f50:	e6f7      	b.n	8007d42 <ScheduleTx+0x32>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8007f52:	a807      	add	r0, sp, #28
 8007f54:	f002 fdb0 	bl	800aab8 <LoRaMacCryptoGetFCntUp>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d152      	bne.n	8008002 <ScheduleTx+0x2f2>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8007f5c:	2382      	movs	r3, #130	@ 0x82
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	5ceb      	ldrb	r3, [r5, r3]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d103      	bne.n	8007f6e <ScheduleTx+0x25e>
 8007f66:	4b3a      	ldr	r3, [pc, #232]	@ (8008050 <ScheduleTx+0x340>)
 8007f68:	5ceb      	ldrb	r3, [r5, r3]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d902      	bls.n	8007f74 <ScheduleTx+0x264>
                fCntUp -= 1;
 8007f6e:	9b07      	ldr	r3, [sp, #28]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	9307      	str	r3, [sp, #28]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8007f74:	4b27      	ldr	r3, [pc, #156]	@ (8008014 <ScheduleTx+0x304>)
 8007f76:	9a03      	ldr	r2, [sp, #12]
 8007f78:	9807      	ldr	r0, [sp, #28]
 8007f7a:	b2f1      	uxtb	r1, r6
 8007f7c:	f002 fe20 	bl	800abc0 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d126      	bne.n	8007fd2 <ScheduleTx+0x2c2>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007f84:	002b      	movs	r3, r5
 8007f86:	33ff      	adds	r3, #255	@ 0xff
 8007f88:	7b59      	ldrb	r1, [r3, #13]
    if( status != LORAMAC_STATUS_OK )
 8007f8a:	e025      	b.n	8007fd8 <ScheduleTx+0x2c8>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8007f8c:	a80a      	add	r0, sp, #40	@ 0x28
    size_t macCmdsSize = 0;
 8007f8e:	940a      	str	r4, [sp, #40]	@ 0x28
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8007f90:	f002 fb34 	bl	800a5fc <LoRaMacCommandsGetSizeSerializedCmds>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d10e      	bne.n	8007fb6 <ScheduleTx+0x2a6>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007f98:	2000      	movs	r0, #0
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8007f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8008054 <ScheduleTx+0x344>)
 8007f9c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8007f9e:	5cf5      	ldrb	r5, [r6, r3]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007fa0:	4b23      	ldr	r3, [pc, #140]	@ (8008030 <ScheduleTx+0x320>)
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8007fa2:	b2ff      	uxtb	r7, r7
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007fa4:	5618      	ldrsb	r0, [r3, r0]
 8007fa6:	f7ff fc9f 	bl	80078e8 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007faa:	19ed      	adds	r5, r5, r7
 8007fac:	42a8      	cmp	r0, r5
 8007fae:	d300      	bcc.n	8007fb2 <ScheduleTx+0x2a2>
 8007fb0:	e77b      	b.n	8007eaa <ScheduleTx+0x19a>
        return status;
 8007fb2:	2408      	movs	r4, #8
 8007fb4:	e6cc      	b.n	8007d50 <ScheduleTx+0x40>
 8007fb6:	2413      	movs	r4, #19
 8007fb8:	e6ca      	b.n	8007d50 <ScheduleTx+0x40>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8007fba:	59f0      	ldr	r0, [r6, r7]
 8007fbc:	f002 fa77 	bl	800a4ae <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d0ad      	beq.n	8007f20 <ScheduleTx+0x210>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8007fc4:	2410      	movs	r4, #16
    return SendFrameOnChannel( MacCtx.Channel );
 8007fc6:	e6c3      	b.n	8007d50 <ScheduleTx+0x40>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8007fc8:	4812      	ldr	r0, [pc, #72]	@ (8008014 <ScheduleTx+0x304>)
 8007fca:	f002 fdcd 	bl	800ab68 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d001      	beq.n	8007fd6 <ScheduleTx+0x2c6>
        return status;
 8007fd2:	2411      	movs	r4, #17
 8007fd4:	e6bc      	b.n	8007d50 <ScheduleTx+0x40>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8007fd6:	7b79      	ldrb	r1, [r7, #13]
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007fd8:	22d0      	movs	r2, #208	@ 0xd0
 8007fda:	2302      	movs	r3, #2
 8007fdc:	0092      	lsls	r2, r2, #2
 8007fde:	58a8      	ldr	r0, [r5, r2]
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007fe0:	8029      	strh	r1, [r5, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007fe2:	4303      	orrs	r3, r0
 8007fe4:	50ab      	str	r3, [r5, r2]
    if( MacCtx.NodeAckRequested == false )
 8007fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8008058 <ScheduleTx+0x348>)
 8007fe8:	5ceb      	ldrb	r3, [r5, r3]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d103      	bne.n	8007ff6 <ScheduleTx+0x2e6>
    {
        MacCtx.ChannelsNbTransCounter++;
 8007fee:	32d0      	adds	r2, #208	@ 0xd0
 8007ff0:	5cab      	ldrb	r3, [r5, r2]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	54ab      	strb	r3, [r5, r2]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8007ff6:	4b19      	ldr	r3, [pc, #100]	@ (800805c <ScheduleTx+0x34c>)
 8007ff8:	4819      	ldr	r0, [pc, #100]	@ (8008060 <ScheduleTx+0x350>)
 8007ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ffc:	b2c9      	uxtb	r1, r1
 8007ffe:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8008000:	e6a6      	b.n	8007d50 <ScheduleTx+0x40>
        return status;
 8008002:	2412      	movs	r4, #18
 8008004:	e6a4      	b.n	8007d50 <ScheduleTx+0x40>
 8008006:	46c0      	nop			@ (mov r8, r8)
 8008008:	2000087c 	.word	0x2000087c
 800800c:	20000780 	.word	0x20000780
 8008010:	20000d18 	.word	0x20000d18
 8008014:	20000e20 	.word	0x20000e20
 8008018:	200007b0 	.word	0x200007b0
 800801c:	200007c0 	.word	0x200007c0
 8008020:	2000119c 	.word	0x2000119c
 8008024:	2000112d 	.word	0x2000112d
 8008028:	00000484 	.word	0x00000484
 800802c:	20001080 	.word	0x20001080
 8008030:	200007b9 	.word	0x200007b9
 8008034:	200010d0 	.word	0x200010d0
 8008038:	200010e4 	.word	0x200010e4
 800803c:	00000415 	.word	0x00000415
 8008040:	20001130 	.word	0x20001130
 8008044:	00000439 	.word	0x00000439
 8008048:	0000043a 	.word	0x0000043a
 800804c:	0000043b 	.word	0x0000043b
 8008050:	00000412 	.word	0x00000412
 8008054:	00000237 	.word	0x00000237
 8008058:	00000414 	.word	0x00000414
 800805c:	0800edf8 	.word	0x0800edf8
 8008060:	20000d1a 	.word	0x20000d1a

08008064 <OpenContinuousRxCWindow>:
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008064:	4b11      	ldr	r3, [pc, #68]	@ (80080ac <OpenContinuousRxCWindow+0x48>)
{
 8008066:	b573      	push	{r0, r1, r4, r5, r6, lr}
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8008068:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800806a:	001e      	movs	r6, r3
 800806c:	4d10      	ldr	r5, [pc, #64]	@ (80080b0 <OpenContinuousRxCWindow+0x4c>)
 800806e:	4a11      	ldr	r2, [pc, #68]	@ (80080b4 <OpenContinuousRxCWindow+0x50>)
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8008070:	3170      	adds	r1, #112	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008072:	7809      	ldrb	r1, [r1, #0]
 8008074:	3640      	adds	r6, #64	@ 0x40
 8008076:	7812      	ldrb	r2, [r2, #0]
 8008078:	7830      	ldrb	r0, [r6, #0]
 800807a:	9500      	str	r5, [sp, #0]
 800807c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800807e:	b249      	sxtb	r1, r1
 8008080:	f003 f88c 	bl	800b19c <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8008084:	4a0c      	ldr	r2, [pc, #48]	@ (80080b8 <OpenContinuousRxCWindow+0x54>)
 8008086:	4c0d      	ldr	r4, [pc, #52]	@ (80080bc <OpenContinuousRxCWindow+0x58>)
 8008088:	4b0d      	ldr	r3, [pc, #52]	@ (80080c0 <OpenContinuousRxCWindow+0x5c>)
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800808a:	0029      	movs	r1, r5
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800808c:	52e2      	strh	r2, [r4, r3]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800808e:	7830      	ldrb	r0, [r6, #0]
 8008090:	4a0c      	ldr	r2, [pc, #48]	@ (80080c4 <OpenContinuousRxCWindow+0x60>)
 8008092:	f003 f88e 	bl	800b1b2 <RegionRxConfig>
 8008096:	2800      	cmp	r0, #0
 8008098:	d007      	beq.n	80080aa <OpenContinuousRxCWindow+0x46>
        Radio.Rx( 0 ); // Continuous mode
 800809a:	4b0b      	ldr	r3, [pc, #44]	@ (80080c8 <OpenContinuousRxCWindow+0x64>)
 800809c:	2000      	movs	r0, #0
 800809e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080a0:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80080a2:	4b0a      	ldr	r3, [pc, #40]	@ (80080cc <OpenContinuousRxCWindow+0x68>)
 80080a4:	5ce2      	ldrb	r2, [r4, r3]
 80080a6:	338d      	adds	r3, #141	@ 0x8d
 80080a8:	54e2      	strb	r2, [r4, r3]
}
 80080aa:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80080ac:	20000780 	.word	0x20000780
 80080b0:	200010f8 	.word	0x200010f8
 80080b4:	200007c8 	.word	0x200007c8
 80080b8:	00000201 	.word	0x00000201
 80080bc:	20000d18 	.word	0x20000d18
 80080c0:	000003f2 	.word	0x000003f2
 80080c4:	20001138 	.word	0x20001138
 80080c8:	0800edf8 	.word	0x0800edf8
 80080cc:	000003f3 	.word	0x000003f3

080080d0 <SwitchClass>:
{
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
 80080d2:	4d2e      	ldr	r5, [pc, #184]	@ (800818c <SwitchClass+0xbc>)
{
 80080d4:	0004      	movs	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 80080d6:	782a      	ldrb	r2, [r5, #0]
 80080d8:	4b2d      	ldr	r3, [pc, #180]	@ (8008190 <SwitchClass+0xc0>)
 80080da:	2a01      	cmp	r2, #1
 80080dc:	d00e      	beq.n	80080fc <SwitchClass+0x2c>
 80080de:	2a02      	cmp	r2, #2
 80080e0:	d04d      	beq.n	800817e <SwitchClass+0xae>
 80080e2:	2a00      	cmp	r2, #0
 80080e4:	d106      	bne.n	80080f4 <SwitchClass+0x24>
            if( deviceClass == CLASS_A )
 80080e6:	2800      	cmp	r0, #0
 80080e8:	d106      	bne.n	80080f8 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80080ea:	001a      	movs	r2, r3
 80080ec:	3364      	adds	r3, #100	@ 0x64
 80080ee:	326c      	adds	r2, #108	@ 0x6c
 80080f0:	cb03      	ldmia	r3!, {r0, r1}
 80080f2:	c203      	stmia	r2!, {r0, r1}
{
 80080f4:	2003      	movs	r0, #3
 80080f6:	e041      	b.n	800817c <SwitchClass+0xac>
            if( deviceClass == CLASS_B )
 80080f8:	2801      	cmp	r0, #1
 80080fa:	d106      	bne.n	800810a <SwitchClass+0x3a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 80080fc:	0020      	movs	r0, r4
 80080fe:	f002 f9c9 	bl	800a494 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8008102:	2800      	cmp	r0, #0
 8008104:	d13a      	bne.n	800817c <SwitchClass+0xac>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008106:	702c      	strb	r4, [r5, #0]
 8008108:	e038      	b.n	800817c <SwitchClass+0xac>
            if( deviceClass == CLASS_C )
 800810a:	2802      	cmp	r0, #2
 800810c:	d1f2      	bne.n	80080f4 <SwitchClass+0x24>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800810e:	21f3      	movs	r1, #243	@ 0xf3
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008110:	7028      	strb	r0, [r5, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8008112:	4820      	ldr	r0, [pc, #128]	@ (8008194 <SwitchClass+0xc4>)
 8008114:	4a20      	ldr	r2, [pc, #128]	@ (8008198 <SwitchClass+0xc8>)
 8008116:	0089      	lsls	r1, r1, #2
 8008118:	1841      	adds	r1, r0, r1
 800811a:	c9e0      	ldmia	r1!, {r5, r6, r7}
 800811c:	c2e0      	stmia	r2!, {r5, r6, r7}
 800811e:	c960      	ldmia	r1!, {r5, r6}
 8008120:	c260      	stmia	r2!, {r5, r6}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008122:	4a1e      	ldr	r2, [pc, #120]	@ (800819c <SwitchClass+0xcc>)
 8008124:	5484      	strb	r4, [r0, r2]
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8008126:	001a      	movs	r2, r3
 8008128:	32d2      	adds	r2, #210	@ 0xd2
 800812a:	7812      	ldrb	r2, [r2, #0]
 800812c:	2a00      	cmp	r2, #0
 800812e:	d01c      	beq.n	800816a <SwitchClass+0x9a>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8008130:	001a      	movs	r2, r3
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8008132:	001c      	movs	r4, r3
 8008134:	0019      	movs	r1, r3
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8008136:	32e8      	adds	r2, #232	@ 0xe8
 8008138:	6812      	ldr	r2, [r2, #0]
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800813a:	34ec      	adds	r4, #236	@ 0xec
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800813c:	66da      	str	r2, [r3, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800813e:	7824      	ldrb	r4, [r4, #0]
 8008140:	3170      	adds	r1, #112	@ 0x70
 8008142:	700c      	strb	r4, [r1, #0]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8008144:	4916      	ldr	r1, [pc, #88]	@ (80081a0 <SwitchClass+0xd0>)
 8008146:	5c44      	ldrb	r4, [r0, r1]
 8008148:	3935      	subs	r1, #53	@ 0x35
 800814a:	5444      	strb	r4, [r0, r1]
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800814c:	3104      	adds	r1, #4
 800814e:	5042      	str	r2, [r0, r1]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008150:	001a      	movs	r2, r3
 8008152:	3275      	adds	r2, #117	@ 0x75
 8008154:	7811      	ldrb	r1, [r2, #0]
 8008156:	22fc      	movs	r2, #252	@ 0xfc
 8008158:	0092      	lsls	r2, r2, #2
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800815a:	3380      	adds	r3, #128	@ 0x80
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800815c:	5481      	strb	r1, [r0, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800815e:	781a      	ldrb	r2, [r3, #0]
 8008160:	4b10      	ldr	r3, [pc, #64]	@ (80081a4 <SwitchClass+0xd4>)
 8008162:	54c2      	strb	r2, [r0, r3]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8008164:	4b10      	ldr	r3, [pc, #64]	@ (80081a8 <SwitchClass+0xd8>)
 8008166:	4a11      	ldr	r2, [pc, #68]	@ (80081ac <SwitchClass+0xdc>)
 8008168:	52c2      	strh	r2, [r0, r3]
                MacCtx.NodeAckRequested = false;
 800816a:	2200      	movs	r2, #0
 800816c:	4b10      	ldr	r3, [pc, #64]	@ (80081b0 <SwitchClass+0xe0>)
 800816e:	54c2      	strb	r2, [r0, r3]
                Radio.Sleep( );
 8008170:	4b10      	ldr	r3, [pc, #64]	@ (80081b4 <SwitchClass+0xe4>)
 8008172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008174:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8008176:	f7ff ff75 	bl	8008064 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800817a:	2000      	movs	r0, #0
}
 800817c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 800817e:	2800      	cmp	r0, #0
 8008180:	d1b8      	bne.n	80080f4 <SwitchClass+0x24>
                Radio.Sleep( );
 8008182:	4b0c      	ldr	r3, [pc, #48]	@ (80081b4 <SwitchClass+0xe4>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008184:	7028      	strb	r0, [r5, #0]
                Radio.Sleep( );
 8008186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008188:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800818a:	e7f6      	b.n	800817a <SwitchClass+0xaa>
 800818c:	2000087c 	.word	0x2000087c
 8008190:	20000780 	.word	0x20000780
 8008194:	20000d18 	.word	0x20000d18
 8008198:	200010f8 	.word	0x200010f8
 800819c:	000003f3 	.word	0x000003f3
 80081a0:	00000415 	.word	0x00000415
 80081a4:	000003f1 	.word	0x000003f1
 80081a8:	000003f2 	.word	0x000003f2
 80081ac:	00000301 	.word	0x00000301
 80081b0:	00000414 	.word	0x00000414
 80081b4:	0800edf8 	.word	0x0800edf8

080081b8 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 80081b8:	b570      	push	{r4, r5, r6, lr}
 80081ba:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 80081bc:	f006 f840 	bl	800e240 <UTIL_TIMER_Stop>
    Radio.Standby( );
 80081c0:	4d0a      	ldr	r5, [pc, #40]	@ (80081ec <RxWindowSetup.constprop.0+0x34>)
 80081c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80081c4:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80081c6:	4b0a      	ldr	r3, [pc, #40]	@ (80081f0 <RxWindowSetup.constprop.0+0x38>)
 80081c8:	0021      	movs	r1, r4
 80081ca:	4a0a      	ldr	r2, [pc, #40]	@ (80081f4 <RxWindowSetup.constprop.0+0x3c>)
 80081cc:	7818      	ldrb	r0, [r3, #0]
 80081ce:	4e0a      	ldr	r6, [pc, #40]	@ (80081f8 <RxWindowSetup.constprop.0+0x40>)
 80081d0:	f002 ffef 	bl	800b1b2 <RegionRxConfig>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d007      	beq.n	80081e8 <RxWindowSetup.constprop.0+0x30>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80081d8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80081da:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80081dc:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80081de:	2290      	movs	r2, #144	@ 0x90
 80081e0:	4b06      	ldr	r3, [pc, #24]	@ (80081fc <RxWindowSetup.constprop.0+0x44>)
 80081e2:	7ce1      	ldrb	r1, [r4, #19]
 80081e4:	00d2      	lsls	r2, r2, #3
 80081e6:	5499      	strb	r1, [r3, r2]
}
 80081e8:	bd70      	pop	{r4, r5, r6, pc}
 80081ea:	46c0      	nop			@ (mov r8, r8)
 80081ec:	0800edf8 	.word	0x0800edf8
 80081f0:	200007c0 	.word	0x200007c0
 80081f4:	20001138 	.word	0x20001138
 80081f8:	20000780 	.word	0x20000780
 80081fc:	20000d18 	.word	0x20000d18

08008200 <OnRxWindow1TimerEvent>:
{
 8008200:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8008202:	4b0e      	ldr	r3, [pc, #56]	@ (800823c <OnRxWindow1TimerEvent+0x3c>)
 8008204:	4a0e      	ldr	r2, [pc, #56]	@ (8008240 <OnRxWindow1TimerEvent+0x40>)
 8008206:	5c99      	ldrb	r1, [r3, r2]
 8008208:	3a5d      	subs	r2, #93	@ 0x5d
 800820a:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800820c:	490d      	ldr	r1, [pc, #52]	@ (8008244 <OnRxWindow1TimerEvent+0x44>)
 800820e:	4a0e      	ldr	r2, [pc, #56]	@ (8008248 <OnRxWindow1TimerEvent+0x48>)
 8008210:	7808      	ldrb	r0, [r1, #0]
 8008212:	490e      	ldr	r1, [pc, #56]	@ (800824c <OnRxWindow1TimerEvent+0x4c>)
 8008214:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008216:	0011      	movs	r1, r2
 8008218:	3175      	adds	r1, #117	@ 0x75
 800821a:	7808      	ldrb	r0, [r1, #0]
 800821c:	21f2      	movs	r1, #242	@ 0xf2
 800821e:	0089      	lsls	r1, r1, #2
 8008220:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008222:	3280      	adds	r2, #128	@ 0x80
 8008224:	7811      	ldrb	r1, [r2, #0]
 8008226:	4a0a      	ldr	r2, [pc, #40]	@ (8008250 <OnRxWindow1TimerEvent+0x50>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8008228:	480a      	ldr	r0, [pc, #40]	@ (8008254 <OnRxWindow1TimerEvent+0x54>)
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800822a:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 800822c:	2100      	movs	r1, #0
 800822e:	4a0a      	ldr	r2, [pc, #40]	@ (8008258 <OnRxWindow1TimerEvent+0x58>)
 8008230:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8008232:	490a      	ldr	r1, [pc, #40]	@ (800825c <OnRxWindow1TimerEvent+0x5c>)
 8008234:	f7ff ffc0 	bl	80081b8 <RxWindowSetup.constprop.0>
}
 8008238:	bd10      	pop	{r4, pc}
 800823a:	46c0      	nop			@ (mov r8, r8)
 800823c:	20000d18 	.word	0x20000d18
 8008240:	00000415 	.word	0x00000415
 8008244:	200007e1 	.word	0x200007e1
 8008248:	20000780 	.word	0x20000780
 800824c:	000003bb 	.word	0x000003bb
 8008250:	000003c9 	.word	0x000003c9
 8008254:	20001098 	.word	0x20001098
 8008258:	000003ca 	.word	0x000003ca
 800825c:	200010d0 	.word	0x200010d0

08008260 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008260:	2290      	movs	r2, #144	@ 0x90
{
 8008262:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008264:	4b10      	ldr	r3, [pc, #64]	@ (80082a8 <OnRxWindow2TimerEvent+0x48>)
 8008266:	00d2      	lsls	r2, r2, #3
 8008268:	5c9a      	ldrb	r2, [r3, r2]
 800826a:	2a00      	cmp	r2, #0
 800826c:	d01a      	beq.n	80082a4 <OnRxWindow2TimerEvent+0x44>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800826e:	4a0f      	ldr	r2, [pc, #60]	@ (80082ac <OnRxWindow2TimerEvent+0x4c>)
 8008270:	5c99      	ldrb	r1, [r3, r2]
 8008272:	3a49      	subs	r2, #73	@ 0x49
 8008274:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8008276:	21f4      	movs	r1, #244	@ 0xf4
 8008278:	4a0d      	ldr	r2, [pc, #52]	@ (80082b0 <OnRxWindow2TimerEvent+0x50>)
 800827a:	0089      	lsls	r1, r1, #2
 800827c:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 800827e:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008280:	0011      	movs	r1, r2
 8008282:	3175      	adds	r1, #117	@ 0x75
 8008284:	7808      	ldrb	r0, [r1, #0]
 8008286:	21f7      	movs	r1, #247	@ 0xf7
 8008288:	0089      	lsls	r1, r1, #2
 800828a:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800828c:	3280      	adds	r2, #128	@ 0x80
 800828e:	7811      	ldrb	r1, [r2, #0]
 8008290:	4a08      	ldr	r2, [pc, #32]	@ (80082b4 <OnRxWindow2TimerEvent+0x54>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8008292:	4809      	ldr	r0, [pc, #36]	@ (80082b8 <OnRxWindow2TimerEvent+0x58>)
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008294:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8008296:	2180      	movs	r1, #128	@ 0x80
 8008298:	4a08      	ldr	r2, [pc, #32]	@ (80082bc <OnRxWindow2TimerEvent+0x5c>)
 800829a:	0049      	lsls	r1, r1, #1
 800829c:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800829e:	4908      	ldr	r1, [pc, #32]	@ (80082c0 <OnRxWindow2TimerEvent+0x60>)
 80082a0:	f7ff ff8a 	bl	80081b8 <RxWindowSetup.constprop.0>
}
 80082a4:	bd10      	pop	{r4, pc}
 80082a6:	46c0      	nop			@ (mov r8, r8)
 80082a8:	20000d18 	.word	0x20000d18
 80082ac:	00000415 	.word	0x00000415
 80082b0:	20000780 	.word	0x20000780
 80082b4:	000003dd 	.word	0x000003dd
 80082b8:	200010b0 	.word	0x200010b0
 80082bc:	000003de 	.word	0x000003de
 80082c0:	200010e4 	.word	0x200010e4

080082c4 <ProcessMacCommands.constprop.0>:
    uint8_t status = 0;
 80082c4:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80082c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082c8:	b095      	sub	sp, #84	@ 0x54
 80082ca:	9207      	str	r2, [sp, #28]
    uint8_t status = 0;
 80082cc:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80082ce:	0007      	movs	r7, r0
    while( macIndex < commandsSize )
 80082d0:	001c      	movs	r4, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80082d2:	9104      	str	r1, [sp, #16]
    uint8_t status = 0;
 80082d4:	a906      	add	r1, sp, #24
 80082d6:	1852      	adds	r2, r2, r1
 80082d8:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80082da:	aa0a      	add	r2, sp, #40	@ 0x28
 80082dc:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 80082de:	9303      	str	r3, [sp, #12]
    while( macIndex < commandsSize )
 80082e0:	9b04      	ldr	r3, [sp, #16]
 80082e2:	429c      	cmp	r4, r3
 80082e4:	d301      	bcc.n	80082ea <ProcessMacCommands.constprop.0+0x26>
}
 80082e6:	b015      	add	sp, #84	@ 0x54
 80082e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80082ea:	5d38      	ldrb	r0, [r7, r4]
 80082ec:	f002 f9da 	bl	800a6a4 <LoRaMacCommandsGetCmdSize>
 80082f0:	9b04      	ldr	r3, [sp, #16]
 80082f2:	1900      	adds	r0, r0, r4
 80082f4:	193e      	adds	r6, r7, r4
 80082f6:	4298      	cmp	r0, r3
 80082f8:	dcf5      	bgt.n	80082e6 <ProcessMacCommands.constprop.0+0x22>
        switch( payload[macIndex++] )
 80082fa:	7830      	ldrb	r0, [r6, #0]
 80082fc:	1c65      	adds	r5, r4, #1
 80082fe:	3802      	subs	r0, #2
 8008300:	b2ed      	uxtb	r5, r5
 8008302:	2811      	cmp	r0, #17
 8008304:	d8ef      	bhi.n	80082e6 <ProcessMacCommands.constprop.0+0x22>
 8008306:	f7f7 ff1b 	bl	8000140 <__gnu_thumb1_case_shi>
 800830a:	0012      	.short	0x0012
 800830c:	00870028 	.word	0x00870028
 8008310:	00dd009a 	.word	0x00dd009a
 8008314:	012500f5 	.word	0x012500f5
 8008318:	01870144 	.word	0x01870144
 800831c:	ffeeffee 	.word	0xffeeffee
 8008320:	ffee01c5 	.word	0xffee01c5
 8008324:	0212ffee 	.word	0x0212ffee
 8008328:	02420227 	.word	0x02420227
 800832c:	025c      	.short	0x025c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800832e:	2004      	movs	r0, #4
 8008330:	f002 fa76 	bl	800a820 <LoRaMacConfirmQueueIsCmdActive>
 8008334:	2800      	cmp	r0, #0
 8008336:	d00e      	beq.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8008338:	2104      	movs	r1, #4
 800833a:	2000      	movs	r0, #0
 800833c:	f002 fa28 	bl	800a790 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8008340:	5d79      	ldrb	r1, [r7, r5]
 8008342:	4bc9      	ldr	r3, [pc, #804]	@ (8008668 <ProcessMacCommands.constprop.0+0x3a4>)
 8008344:	4ac9      	ldr	r2, [pc, #804]	@ (800866c <ProcessMacCommands.constprop.0+0x3a8>)
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8008346:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8008348:	3402      	adds	r4, #2
 800834a:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800834c:	b2e4      	uxtb	r4, r4
 800834e:	5d39      	ldrb	r1, [r7, r4]
 8008350:	4ac7      	ldr	r2, [pc, #796]	@ (8008670 <ProcessMacCommands.constprop.0+0x3ac>)
 8008352:	b2ed      	uxtb	r5, r5
 8008354:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 8008356:	002c      	movs	r4, r5
 8008358:	e7c2      	b.n	80082e0 <ProcessMacCommands.constprop.0+0x1c>
                int8_t linkAdrDatarate = DR_0;
 800835a:	2300      	movs	r3, #0
 800835c:	aa06      	add	r2, sp, #24
 800835e:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 8008360:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 8008362:	ae0b      	add	r6, sp, #44	@ 0x2c
                uint8_t linkAdrNbBytesParsed = 0;
 8008364:	aa0c      	add	r2, sp, #48	@ 0x30
                uint8_t linkAdrNbRep = 0;
 8008366:	7033      	strb	r3, [r6, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8008368:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 800836a:	9b03      	ldr	r3, [sp, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d150      	bne.n	8008412 <ProcessMacCommands.constprop.0+0x14e>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8008370:	1e6b      	subs	r3, r5, #1
 8008372:	a910      	add	r1, sp, #64	@ 0x40
 8008374:	18fb      	adds	r3, r7, r3
 8008376:	604b      	str	r3, [r1, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8008378:	9b04      	ldr	r3, [sp, #16]
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800837a:	48be      	ldr	r0, [pc, #760]	@ (8008674 <ProcessMacCommands.constprop.0+0x3b0>)
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800837c:	1b1c      	subs	r4, r3, r4
 800837e:	720c      	strb	r4, [r1, #8]
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8008380:	7800      	ldrb	r0, [r0, #0]
 8008382:	4bbd      	ldr	r3, [pc, #756]	@ (8008678 <ProcessMacCommands.constprop.0+0x3b4>)
 8008384:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008386:	0018      	movs	r0, r3
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008388:	001c      	movs	r4, r3
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800838a:	3074      	adds	r0, #116	@ 0x74
 800838c:	7800      	ldrb	r0, [r0, #0]
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800838e:	3460      	adds	r4, #96	@ 0x60
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008390:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8008392:	48ba      	ldr	r0, [pc, #744]	@ (800867c <ProcessMacCommands.constprop.0+0x3b8>)
 8008394:	7800      	ldrb	r0, [r0, #0]
 8008396:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008398:	48b9      	ldr	r0, [pc, #740]	@ (8008680 <ProcessMacCommands.constprop.0+0x3bc>)
 800839a:	7800      	ldrb	r0, [r0, #0]
 800839c:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800839e:	7820      	ldrb	r0, [r4, #0]
 80083a0:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80083a2:	0018      	movs	r0, r3
 80083a4:	30fc      	adds	r0, #252	@ 0xfc
 80083a6:	6900      	ldr	r0, [r0, #16]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80083a8:	3340      	adds	r3, #64	@ 0x40
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80083aa:	9010      	str	r0, [sp, #64]	@ 0x40
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	9201      	str	r2, [sp, #4]
 80083b0:	469c      	mov	ip, r3
 80083b2:	230f      	movs	r3, #15
 80083b4:	aa06      	add	r2, sp, #24
 80083b6:	189b      	adds	r3, r3, r2
 80083b8:	220e      	movs	r2, #14
 80083ba:	a806      	add	r0, sp, #24
 80083bc:	1812      	adds	r2, r2, r0
 80083be:	9600      	str	r6, [sp, #0]
 80083c0:	4660      	mov	r0, ip
 80083c2:	f002 ff0f 	bl	800b1e4 <RegionLinkAdrReq>
 80083c6:	ab06      	add	r3, sp, #24
 80083c8:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 80083ca:	43c0      	mvns	r0, r0
 80083cc:	0740      	lsls	r0, r0, #29
 80083ce:	d108      	bne.n	80083e2 <ProcessMacCommands.constprop.0+0x11e>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80083d0:	7b9b      	ldrb	r3, [r3, #14]
 80083d2:	4aaa      	ldr	r2, [pc, #680]	@ (800867c <ProcessMacCommands.constprop.0+0x3b8>)
 80083d4:	7013      	strb	r3, [r2, #0]
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80083d6:	ab06      	add	r3, sp, #24
 80083d8:	7bdb      	ldrb	r3, [r3, #15]
 80083da:	4aa9      	ldr	r2, [pc, #676]	@ (8008680 <ProcessMacCommands.constprop.0+0x3bc>)
 80083dc:	7013      	strb	r3, [r2, #0]
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80083de:	7833      	ldrb	r3, [r6, #0]
 80083e0:	7023      	strb	r3, [r4, #0]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80083e2:	2600      	movs	r6, #0
 80083e4:	e009      	b.n	80083fa <ProcessMacCommands.constprop.0+0x136>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80083e6:	230d      	movs	r3, #13
 80083e8:	a906      	add	r1, sp, #24
 80083ea:	185b      	adds	r3, r3, r1
 80083ec:	2201      	movs	r2, #1
 80083ee:	0019      	movs	r1, r3
 80083f0:	2003      	movs	r0, #3
 80083f2:	f002 f86f 	bl	800a4d4 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80083f6:	3601      	adds	r6, #1
 80083f8:	b2f6      	uxtb	r6, r6
 80083fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80083fc:	781c      	ldrb	r4, [r3, #0]
 80083fe:	2105      	movs	r1, #5
 8008400:	0020      	movs	r0, r4
 8008402:	f7f7 feb1 	bl	8000168 <__udivsi3>
 8008406:	b2c0      	uxtb	r0, r0
 8008408:	4286      	cmp	r6, r0
 800840a:	d3ec      	bcc.n	80083e6 <ProcessMacCommands.constprop.0+0x122>
                    macIndex += linkAdrNbBytesParsed - 1;
 800840c:	3c01      	subs	r4, #1
 800840e:	192d      	adds	r5, r5, r4
 8008410:	b2ed      	uxtb	r5, r5
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8008412:	2301      	movs	r3, #1
 8008414:	9303      	str	r3, [sp, #12]
 8008416:	e79e      	b.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8008418:	220f      	movs	r2, #15
 800841a:	5d7b      	ldrb	r3, [r7, r5]
 800841c:	3402      	adds	r4, #2
 800841e:	4013      	ands	r3, r2
 8008420:	4a98      	ldr	r2, [pc, #608]	@ (8008684 <ProcessMacCommands.constprop.0+0x3c0>)
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008422:	2004      	movs	r0, #4
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8008424:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8008426:	2201      	movs	r2, #1
 8008428:	409a      	lsls	r2, r3
 800842a:	0013      	movs	r3, r2
 800842c:	4a91      	ldr	r2, [pc, #580]	@ (8008674 <ProcessMacCommands.constprop.0+0x3b0>)
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800842e:	a90a      	add	r1, sp, #40	@ 0x28
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8008430:	8093      	strh	r3, [r2, #4]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008432:	2200      	movs	r2, #0
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8008434:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008436:	f002 f84d 	bl	800a4d4 <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800843a:	0025      	movs	r5, r4
}
 800843c:	e78b      	b.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                status = 0x07;
 800843e:	2107      	movs	r1, #7
 8008440:	ab06      	add	r3, sp, #24
 8008442:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8008444:	5d7b      	ldrb	r3, [r7, r5]
 8008446:	ae10      	add	r6, sp, #64	@ 0x40
 8008448:	091a      	lsrs	r2, r3, #4
 800844a:	400a      	ands	r2, r1
 800844c:	7072      	strb	r2, [r6, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800844e:	220f      	movs	r2, #15
 8008450:	4013      	ands	r3, r2
 8008452:	7033      	strb	r3, [r6, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008454:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008456:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008458:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800845a:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800845c:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800845e:	5cba      	ldrb	r2, [r7, r2]
 8008460:	1d65      	adds	r5, r4, #5
                macIndex++;
 8008462:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008464:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008466:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008468:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800846a:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800846c:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800846e:	0031      	movs	r1, r6
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008470:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8008472:	2264      	movs	r2, #100	@ 0x64
 8008474:	4353      	muls	r3, r2
 8008476:	9311      	str	r3, [sp, #68]	@ 0x44
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8008478:	4b83      	ldr	r3, [pc, #524]	@ (8008688 <ProcessMacCommands.constprop.0+0x3c4>)
 800847a:	4c7f      	ldr	r4, [pc, #508]	@ (8008678 <ProcessMacCommands.constprop.0+0x3b4>)
 800847c:	7818      	ldrb	r0, [r3, #0]
 800847e:	f002 fec1 	bl	800b204 <RegionRxParamSetupReq>
 8008482:	ab06      	add	r3, sp, #24
 8008484:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 8008486:	2307      	movs	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008488:	b2ed      	uxtb	r5, r5
                if( ( status & 0x07 ) == 0x07 )
 800848a:	4003      	ands	r3, r0
 800848c:	2b07      	cmp	r3, #7
 800848e:	d10c      	bne.n	80084aa <ProcessMacCommands.constprop.0+0x1e6>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8008490:	0022      	movs	r2, r4
 8008492:	7833      	ldrb	r3, [r6, #0]
 8008494:	3268      	adds	r2, #104	@ 0x68
 8008496:	7013      	strb	r3, [r2, #0]
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008498:	0022      	movs	r2, r4
 800849a:	3270      	adds	r2, #112	@ 0x70
 800849c:	7013      	strb	r3, [r2, #0]
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800849e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80084a0:	6663      	str	r3, [r4, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80084a2:	66e3      	str	r3, [r4, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80084a4:	7873      	ldrb	r3, [r6, #1]
 80084a6:	3461      	adds	r4, #97	@ 0x61
 80084a8:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 80084aa:	a90a      	add	r1, sp, #40	@ 0x28
 80084ac:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80084ae:	2201      	movs	r2, #1
 80084b0:	2005      	movs	r0, #5
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80084b2:	f002 f80f 	bl	800a4d4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80084b6:	2210      	movs	r2, #16
 80084b8:	4b6b      	ldr	r3, [pc, #428]	@ (8008668 <ProcessMacCommands.constprop.0+0x3a4>)
 80084ba:	4974      	ldr	r1, [pc, #464]	@ (800868c <ProcessMacCommands.constprop.0+0x3c8>)
 80084bc:	5c58      	ldrb	r0, [r3, r1]
 80084be:	4302      	orrs	r2, r0
 80084c0:	545a      	strb	r2, [r3, r1]
}
 80084c2:	e748      	b.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80084c4:	22d2      	movs	r2, #210	@ 0xd2
 80084c6:	4b68      	ldr	r3, [pc, #416]	@ (8008668 <ProcessMacCommands.constprop.0+0x3a4>)
 80084c8:	0092      	lsls	r2, r2, #2
 80084ca:	589b      	ldr	r3, [r3, r2]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80084cc:	20ff      	movs	r0, #255	@ 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <ProcessMacCommands.constprop.0+0x216>
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d000      	beq.n	80084da <ProcessMacCommands.constprop.0+0x216>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80084d8:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 80084da:	ab06      	add	r3, sp, #24
 80084dc:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80084de:	233f      	movs	r3, #63	@ 0x3f
 80084e0:	9a07      	ldr	r2, [sp, #28]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80084e2:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80084e4:	4013      	ands	r3, r2
 80084e6:	aa06      	add	r2, sp, #24
 80084e8:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80084ea:	2202      	movs	r2, #2
 80084ec:	a90a      	add	r1, sp, #40	@ 0x28
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80084ee:	f001 fff1 	bl	800a4d4 <LoRaMacCommandsAddCmd>
                break;
 80084f2:	e730      	b.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80084f4:	1ce2      	adds	r2, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80084f6:	1d20      	adds	r0, r4, #4
 80084f8:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80084fa:	b2c0      	uxtb	r0, r0
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80084fc:	5cba      	ldrb	r2, [r7, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80084fe:	5c38      	ldrb	r0, [r7, r0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008500:	0212      	lsls	r2, r2, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008502:	0400      	lsls	r0, r0, #16
 8008504:	4310      	orrs	r0, r2
                newChannelReq.ChannelId = payload[macIndex++];
 8008506:	1ca2      	adds	r2, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8008508:	b2d2      	uxtb	r2, r2
 800850a:	5cba      	ldrb	r2, [r7, r2]
                status = 0x03;
 800850c:	260d      	movs	r6, #13
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800850e:	4310      	orrs	r0, r2
                chParam.Frequency *= 100;
 8008510:	2264      	movs	r2, #100	@ 0x64
 8008512:	4342      	muls	r2, r0
                status = 0x03;
 8008514:	ab06      	add	r3, sp, #24
 8008516:	18f6      	adds	r6, r6, r3
 8008518:	2303      	movs	r3, #3
                chParam.Frequency *= 100;
 800851a:	9210      	str	r2, [sp, #64]	@ 0x40
                chParam.Rx1Frequency = 0;
 800851c:	2200      	movs	r2, #0
                status = 0x03;
 800851e:	7033      	strb	r3, [r6, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 8008520:	5d7b      	ldrb	r3, [r7, r5]
                chParam.DrRange.Value = payload[macIndex++];
 8008522:	1da5      	adds	r5, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008524:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 8008526:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 8008528:	9211      	str	r2, [sp, #68]	@ 0x44
                newChannelReq.ChannelId = payload[macIndex++];
 800852a:	a90c      	add	r1, sp, #48	@ 0x30
                chParam.DrRange.Value = payload[macIndex++];
 800852c:	5d3a      	ldrb	r2, [r7, r4]
                newChannelReq.ChannelId = payload[macIndex++];
 800852e:	710b      	strb	r3, [r1, #4]
                newChannelReq.NewChannel = &chParam;
 8008530:	ab10      	add	r3, sp, #64	@ 0x40
 8008532:	930c      	str	r3, [sp, #48]	@ 0x30
                chParam.DrRange.Value = payload[macIndex++];
 8008534:	721a      	strb	r2, [r3, #8]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8008536:	4b54      	ldr	r3, [pc, #336]	@ (8008688 <ProcessMacCommands.constprop.0+0x3c4>)
                chParam.DrRange.Value = payload[macIndex++];
 8008538:	b2ed      	uxtb	r5, r5
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800853a:	7818      	ldrb	r0, [r3, #0]
 800853c:	f002 fe6c 	bl	800b218 <RegionNewChannelReq>
 8008540:	b2c3      	uxtb	r3, r0
 8008542:	7033      	strb	r3, [r6, #0]
                if( ( int8_t )status >= 0 )
 8008544:	2800      	cmp	r0, #0
 8008546:	da00      	bge.n	800854a <ProcessMacCommands.constprop.0+0x286>
 8008548:	e705      	b.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                    macCmdPayload[0] = status;
 800854a:	a90a      	add	r1, sp, #40	@ 0x28
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800854c:	2201      	movs	r2, #1
 800854e:	2007      	movs	r0, #7
                    macCmdPayload[0] = status;
 8008550:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8008552:	e7cc      	b.n	80084ee <ProcessMacCommands.constprop.0+0x22a>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008554:	230f      	movs	r3, #15
 8008556:	5d7a      	ldrb	r2, [r7, r5]
 8008558:	3402      	adds	r4, #2
 800855a:	401a      	ands	r2, r3
 800855c:	b2e4      	uxtb	r4, r4
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800855e:	1c13      	adds	r3, r2, #0
 8008560:	2a00      	cmp	r2, #0
 8008562:	d100      	bne.n	8008566 <ProcessMacCommands.constprop.0+0x2a2>
 8008564:	2301      	movs	r3, #1
 8008566:	b2da      	uxtb	r2, r3
 8008568:	23fa      	movs	r3, #250	@ 0xfa
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800856a:	21fa      	movs	r1, #250	@ 0xfa
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4353      	muls	r3, r2
 8008570:	4a41      	ldr	r2, [pc, #260]	@ (8008678 <ProcessMacCommands.constprop.0+0x3b4>)
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008572:	0089      	lsls	r1, r1, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8008574:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008576:	185b      	adds	r3, r3, r1
 8008578:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800857a:	a90a      	add	r1, sp, #40	@ 0x28
 800857c:	2200      	movs	r2, #0
 800857e:	2008      	movs	r0, #8
 8008580:	f001 ffa8 	bl	800a4d4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008584:	2210      	movs	r2, #16
 8008586:	4b38      	ldr	r3, [pc, #224]	@ (8008668 <ProcessMacCommands.constprop.0+0x3a4>)
 8008588:	4940      	ldr	r1, [pc, #256]	@ (800868c <ProcessMacCommands.constprop.0+0x3c8>)
 800858a:	5c58      	ldrb	r0, [r3, r1]
 800858c:	4302      	orrs	r2, r0
 800858e:	545a      	strb	r2, [r3, r1]
 8008590:	e753      	b.n	800843a <ProcessMacCommands.constprop.0+0x176>
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8008592:	2101      	movs	r1, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 8008594:	3402      	adds	r4, #2
 8008596:	b2e3      	uxtb	r3, r4
 8008598:	9305      	str	r3, [sp, #20]
 800859a:	5d7b      	ldrb	r3, [r7, r5]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800859c:	ad0b      	add	r5, sp, #44	@ 0x2c
 800859e:	095a      	lsrs	r2, r3, #5
 80085a0:	400a      	ands	r2, r1
 80085a2:	706a      	strb	r2, [r5, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80085a4:	091a      	lsrs	r2, r3, #4
 80085a6:	400a      	ands	r2, r1
 80085a8:	702a      	strb	r2, [r5, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80085aa:	220f      	movs	r2, #15
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80085ac:	4e36      	ldr	r6, [pc, #216]	@ (8008688 <ProcessMacCommands.constprop.0+0x3c4>)
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80085ae:	4013      	ands	r3, r2
 80085b0:	70ab      	strb	r3, [r5, #2]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80085b2:	0029      	movs	r1, r5
 80085b4:	7830      	ldrb	r0, [r6, #0]
 80085b6:	4c30      	ldr	r4, [pc, #192]	@ (8008678 <ProcessMacCommands.constprop.0+0x3b4>)
 80085b8:	f002 fe38 	bl	800b22c <RegionTxParamSetupReq>
 80085bc:	3001      	adds	r0, #1
 80085be:	d029      	beq.n	8008614 <ProcessMacCommands.constprop.0+0x350>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80085c0:	782b      	ldrb	r3, [r5, #0]
 80085c2:	882a      	ldrh	r2, [r5, #0]
 80085c4:	9306      	str	r3, [sp, #24]
 80085c6:	0023      	movs	r3, r4
 80085c8:	3374      	adds	r3, #116	@ 0x74
 80085ca:	801a      	strh	r2, [r3, #0]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80085cc:	78aa      	ldrb	r2, [r5, #2]
 80085ce:	4b30      	ldr	r3, [pc, #192]	@ (8008690 <ProcessMacCommands.constprop.0+0x3cc>)
 80085d0:	5c98      	ldrb	r0, [r3, r2]
 80085d2:	f7f8 fafb 	bl	8000bcc <__aeabi_ui2f>
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80085d6:	2128      	movs	r1, #40	@ 0x28
 80085d8:	2302      	movs	r3, #2
 80085da:	aa06      	add	r2, sp, #24
 80085dc:	1852      	adds	r2, r2, r1
 80085de:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80085e0:	222a      	movs	r2, #42	@ 0x2a
 80085e2:	ab06      	add	r3, sp, #24
 80085e4:	189b      	adds	r3, r3, r2
 80085e6:	9a06      	ldr	r2, [sp, #24]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80085e8:	67a0      	str	r0, [r4, #120]	@ 0x78
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80085ea:	701a      	strb	r2, [r3, #0]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80085ec:	a910      	add	r1, sp, #64	@ 0x40
 80085ee:	7830      	ldrb	r0, [r6, #0]
 80085f0:	f002 fd9d 	bl	800b12e <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80085f4:	2100      	movs	r1, #0
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80085f6:	900c      	str	r0, [sp, #48]	@ 0x30
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80085f8:	3439      	adds	r4, #57	@ 0x39
 80085fa:	5661      	ldrsb	r1, [r4, r1]
 80085fc:	1c03      	adds	r3, r0, #0
 80085fe:	b240      	sxtb	r0, r0
 8008600:	7822      	ldrb	r2, [r4, #0]
 8008602:	4288      	cmp	r0, r1
 8008604:	da00      	bge.n	8008608 <ProcessMacCommands.constprop.0+0x344>
 8008606:	1c13      	adds	r3, r2, #0
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008608:	2200      	movs	r2, #0
 800860a:	2009      	movs	r0, #9
 800860c:	a90a      	add	r1, sp, #40	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800860e:	7023      	strb	r3, [r4, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008610:	f001 ff60 	bl	800a4d4 <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 8008614:	9d05      	ldr	r5, [sp, #20]
 8008616:	e69e      	b.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                status = 0x03;
 8008618:	260d      	movs	r6, #13
 800861a:	ab06      	add	r3, sp, #24
 800861c:	18f6      	adds	r6, r6, r3
 800861e:	2303      	movs	r3, #3
 8008620:	7033      	strb	r3, [r6, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 8008622:	5d7b      	ldrb	r3, [r7, r5]
 8008624:	a910      	add	r1, sp, #64	@ 0x40
 8008626:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008628:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800862a:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800862c:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800862e:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008630:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008632:	5cba      	ldrb	r2, [r7, r2]
 8008634:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8008636:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008638:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800863a:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800863c:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800863e:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008640:	5d3a      	ldrb	r2, [r7, r4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008642:	b2ed      	uxtb	r5, r5
 8008644:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8008646:	2264      	movs	r2, #100	@ 0x64
 8008648:	4353      	muls	r3, r2
 800864a:	604b      	str	r3, [r1, #4]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800864c:	4b0e      	ldr	r3, [pc, #56]	@ (8008688 <ProcessMacCommands.constprop.0+0x3c4>)
 800864e:	7818      	ldrb	r0, [r3, #0]
 8008650:	f002 fdf6 	bl	800b240 <RegionDlChannelReq>
 8008654:	b2c3      	uxtb	r3, r0
 8008656:	7033      	strb	r3, [r6, #0]
                if( ( int8_t )status >= 0 )
 8008658:	2800      	cmp	r0, #0
 800865a:	da00      	bge.n	800865e <ProcessMacCommands.constprop.0+0x39a>
 800865c:	e67b      	b.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                    macCmdPayload[0] = status;
 800865e:	a90a      	add	r1, sp, #40	@ 0x28
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008660:	2201      	movs	r2, #1
 8008662:	200a      	movs	r0, #10
                    macCmdPayload[0] = status;
 8008664:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008666:	e724      	b.n	80084b2 <ProcessMacCommands.constprop.0+0x1ee>
 8008668:	20000d18 	.word	0x20000d18
 800866c:	00000454 	.word	0x00000454
 8008670:	00000455 	.word	0x00000455
 8008674:	2000087e 	.word	0x2000087e
 8008678:	20000780 	.word	0x20000780
 800867c:	200007b9 	.word	0x200007b9
 8008680:	200007b8 	.word	0x200007b8
 8008684:	2000087f 	.word	0x2000087f
 8008688:	200007c0 	.word	0x200007c0
 800868c:	00000481 	.word	0x00000481
 8008690:	0800ec1d 	.word	0x0800ec1d
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8008694:	200a      	movs	r0, #10
 8008696:	f002 f8c3 	bl	800a820 <LoRaMacConfirmQueueIsCmdActive>
 800869a:	2800      	cmp	r0, #0
 800869c:	d100      	bne.n	80086a0 <ProcessMacCommands.constprop.0+0x3dc>
 800869e:	e65a      	b.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80086a0:	210a      	movs	r1, #10
 80086a2:	2000      	movs	r0, #0
 80086a4:	f002 f874 	bl	800a790 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 80086a8:	231e      	movs	r3, #30
 80086aa:	aa06      	add	r2, sp, #24
 80086ac:	189b      	adds	r3, r3, r2
 80086ae:	2200      	movs	r2, #0
 80086b0:	801a      	strh	r2, [r3, #0]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80086b2:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	5cfe      	ldrb	r6, [r7, r3]
 80086b8:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	5cfb      	ldrb	r3, [r7, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80086be:	0236      	lsls	r6, r6, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80086c0:	041b      	lsls	r3, r3, #16
 80086c2:	431e      	orrs	r6, r3
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80086c4:	5d7b      	ldrb	r3, [r7, r5]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80086c6:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80086c8:	431e      	orrs	r6, r3
 80086ca:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	5cfb      	ldrb	r3, [r7, r3]
 80086d0:	3405      	adds	r4, #5
 80086d2:	061b      	lsls	r3, r3, #24
 80086d4:	431e      	orrs	r6, r3
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80086d6:	23fa      	movs	r3, #250	@ 0xfa
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80086d8:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80086da:	5d3a      	ldrb	r2, [r7, r4]
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4353      	muls	r3, r2
                    sysTime = gpsEpochTime;
 80086e0:	aa06      	add	r2, sp, #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80086e2:	121b      	asrs	r3, r3, #8
                    sysTime = gpsEpochTime;
 80086e4:	8393      	strh	r3, [r2, #28]
                    sysTimeCurrent = SysTimeGet( );
 80086e6:	a810      	add	r0, sp, #64	@ 0x40
 80086e8:	f005 fcbc 	bl	800e064 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80086ec:	4b40      	ldr	r3, [pc, #256]	@ (80087f0 <ProcessMacCommands.constprop.0+0x52c>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80086ee:	4c41      	ldr	r4, [pc, #260]	@ (80087f4 <ProcessMacCommands.constprop.0+0x530>)
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80086f0:	18f1      	adds	r1, r6, r3
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80086f2:	4b41      	ldr	r3, [pc, #260]	@ (80087f8 <ProcessMacCommands.constprop.0+0x534>)
 80086f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	a80e      	add	r0, sp, #56	@ 0x38
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	23ce      	movs	r3, #206	@ 0xce
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	58e3      	ldr	r3, [r4, r3]
 8008702:	910c      	str	r1, [sp, #48]	@ 0x30
 8008704:	f005 fc72 	bl	800dfec <SysTimeSub>
 8008708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800870a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800870c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	a80c      	add	r0, sp, #48	@ 0x30
 8008712:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008714:	f005 fc50 	bl	800dfb8 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8008718:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800871a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800871c:	f005 fc7c 	bl	800e018 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8008720:	f001 fec2 	bl	800a4a8 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008724:	2201      	movs	r2, #1
 8008726:	4b35      	ldr	r3, [pc, #212]	@ (80087fc <ProcessMacCommands.constprop.0+0x538>)
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008728:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800872a:	54e2      	strb	r2, [r4, r3]
 800872c:	e613      	b.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800872e:	200d      	movs	r0, #13
 8008730:	f002 f876 	bl	800a820 <LoRaMacConfirmQueueIsCmdActive>
 8008734:	2800      	cmp	r0, #0
 8008736:	d100      	bne.n	800873a <ProcessMacCommands.constprop.0+0x476>
 8008738:	e60d      	b.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800873a:	210d      	movs	r1, #13
 800873c:	2000      	movs	r0, #0
 800873e:	f002 f827 	bl	800a790 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8008742:	2290      	movs	r2, #144	@ 0x90
 8008744:	4b2b      	ldr	r3, [pc, #172]	@ (80087f4 <ProcessMacCommands.constprop.0+0x530>)
 8008746:	00d2      	lsls	r2, r2, #3
 8008748:	5c9b      	ldrb	r3, [r3, r2]
 800874a:	3b04      	subs	r3, #4
 800874c:	2b01      	cmp	r3, #1
 800874e:	d800      	bhi.n	8008752 <ProcessMacCommands.constprop.0+0x48e>
 8008750:	e601      	b.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                        LoRaMacClassBPingSlotInfoAns( );
 8008752:	f001 fea5 	bl	800a4a0 <LoRaMacClassBPingSlotInfoAns>
 8008756:	e5fe      	b.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                frequency = ( uint32_t )payload[macIndex++];
 8008758:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800875a:	1ce2      	adds	r2, r4, #3
 800875c:	b2db      	uxtb	r3, r3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800875e:	b2d2      	uxtb	r2, r2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008760:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008762:	5cba      	ldrb	r2, [r7, r2]
                frequency = ( uint32_t )payload[macIndex++];
 8008764:	5d79      	ldrb	r1, [r7, r5]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008766:	0412      	lsls	r2, r2, #16
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008768:	021b      	lsls	r3, r3, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800876a:	4313      	orrs	r3, r2
 800876c:	430b      	orrs	r3, r1
                frequency *= 100;
 800876e:	2164      	movs	r1, #100	@ 0x64
 8008770:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008772:	230f      	movs	r3, #15
                datarate = payload[macIndex++] & 0x0F;
 8008774:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008776:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 8008778:	b2e4      	uxtb	r4, r4
 800877a:	5d38      	ldrb	r0, [r7, r4]
 800877c:	b2ed      	uxtb	r5, r5
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800877e:	4018      	ands	r0, r3
 8008780:	f001 fe8f 	bl	800a4a2 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008784:	a90a      	add	r1, sp, #40	@ 0x28
 8008786:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8008788:	2201      	movs	r2, #1
 800878a:	2011      	movs	r0, #17
 800878c:	e6af      	b.n	80084ee <ProcessMacCommands.constprop.0+0x22a>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800878e:	200e      	movs	r0, #14
 8008790:	f002 f846 	bl	800a820 <LoRaMacConfirmQueueIsCmdActive>
 8008794:	2800      	cmp	r0, #0
 8008796:	d100      	bne.n	800879a <ProcessMacCommands.constprop.0+0x4d6>
 8008798:	e5dd      	b.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800879a:	210e      	movs	r1, #14
 800879c:	2000      	movs	r0, #0
 800879e:	f001 fff7 	bl	800a790 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80087a2:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	5cfb      	ldrb	r3, [r7, r3]
 80087a8:	5d78      	ldrb	r0, [r7, r5]
 80087aa:	021b      	lsls	r3, r3, #8
 80087ac:	4318      	orrs	r0, r3
                    beaconTimingChannel = payload[macIndex++];
 80087ae:	1d25      	adds	r5, r4, #4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80087b0:	4b13      	ldr	r3, [pc, #76]	@ (8008800 <ProcessMacCommands.constprop.0+0x53c>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80087b2:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
 80087b4:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80087b6:	5d39      	ldrb	r1, [r7, r4]
 80087b8:	685a      	ldr	r2, [r3, #4]
                    beaconTimingChannel = payload[macIndex++];
 80087ba:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80087bc:	f001 fe73 	bl	800a4a6 <LoRaMacClassBBeaconTimingAns>
 80087c0:	e5c9      	b.n	8008356 <ProcessMacCommands.constprop.0+0x92>
                    frequency *= 100;
 80087c2:	2064      	movs	r0, #100	@ 0x64
                    frequency = ( uint32_t )payload[macIndex++];
 80087c4:	5d79      	ldrb	r1, [r7, r5]
 80087c6:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80087c8:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80087ca:	3403      	adds	r4, #3
 80087cc:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80087ce:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80087d0:	5cfb      	ldrb	r3, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80087d2:	5d3a      	ldrb	r2, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80087d4:	021b      	lsls	r3, r3, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80087d6:	0412      	lsls	r2, r2, #16
 80087d8:	4313      	orrs	r3, r2
 80087da:	430b      	orrs	r3, r1
                    frequency *= 100;
 80087dc:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80087de:	f001 fe64 	bl	800a4aa <LoRaMacClassBBeaconFreqReq>
 80087e2:	a90a      	add	r1, sp, #40	@ 0x28
 80087e4:	7008      	strb	r0, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80087e6:	2201      	movs	r2, #1
 80087e8:	2013      	movs	r0, #19
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80087ea:	b2ed      	uxtb	r5, r5
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80087ec:	e67f      	b.n	80084ee <ProcessMacCommands.constprop.0+0x22a>
 80087ee:	46c0      	nop			@ (mov r8, r8)
 80087f0:	12d53d80 	.word	0x12d53d80
 80087f4:	20000d18 	.word	0x20000d18
 80087f8:	20001054 	.word	0x20001054
 80087fc:	00000434 	.word	0x00000434
 8008800:	20000768 	.word	0x20000768

08008804 <StopRetransmission.isra.0>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008804:	4b0f      	ldr	r3, [pc, #60]	@ (8008844 <StopRetransmission.isra.0+0x40>)
 8008806:	4a10      	ldr	r2, [pc, #64]	@ (8008848 <StopRetransmission.isra.0+0x44>)
 8008808:	5c9a      	ldrb	r2, [r3, r2]
 800880a:	0792      	lsls	r2, r2, #30
 800880c:	d503      	bpl.n	8008816 <StopRetransmission.isra.0+0x12>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800880e:	4a0f      	ldr	r2, [pc, #60]	@ (800884c <StopRetransmission.isra.0+0x48>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008810:	5c9a      	ldrb	r2, [r3, r2]
 8008812:	2a01      	cmp	r2, #1
 8008814:	d907      	bls.n	8008826 <StopRetransmission.isra.0+0x22>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8008816:	4a0e      	ldr	r2, [pc, #56]	@ (8008850 <StopRetransmission.isra.0+0x4c>)
 8008818:	490e      	ldr	r1, [pc, #56]	@ (8008854 <StopRetransmission.isra.0+0x50>)
 800881a:	7812      	ldrb	r2, [r2, #0]
 800881c:	2a00      	cmp	r2, #0
 800881e:	d002      	beq.n	8008826 <StopRetransmission.isra.0+0x22>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8008820:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8008822:	3201      	adds	r2, #1
 8008824:	628a      	str	r2, [r1, #40]	@ 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8008826:	2182      	movs	r1, #130	@ 0x82
 8008828:	2200      	movs	r2, #0
    MacCtx.NodeAckRequested = false;
    MacCtx.AckTimeoutRetry = false;
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800882a:	2002      	movs	r0, #2
    MacCtx.ChannelsNbTransCounter = 0;
 800882c:	00c9      	lsls	r1, r1, #3
 800882e:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 8008830:	4909      	ldr	r1, [pc, #36]	@ (8008858 <StopRetransmission.isra.0+0x54>)
 8008832:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 8008834:	4909      	ldr	r1, [pc, #36]	@ (800885c <StopRetransmission.isra.0+0x58>)
 8008836:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008838:	39d3      	subs	r1, #211	@ 0xd3
 800883a:	585a      	ldr	r2, [r3, r1]
 800883c:	4382      	bics	r2, r0
 800883e:	505a      	str	r2, [r3, r1]

    return true;
}
 8008840:	4770      	bx	lr
 8008842:	46c0      	nop			@ (mov r8, r8)
 8008844:	20000d18 	.word	0x20000d18
 8008848:	00000481 	.word	0x00000481
 800884c:	0000047f 	.word	0x0000047f
 8008850:	2000087e 	.word	0x2000087e
 8008854:	20000780 	.word	0x20000780
 8008858:	00000414 	.word	0x00000414
 800885c:	00000413 	.word	0x00000413

08008860 <OnTxDelayedTimerEvent>:
{
 8008860:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8008862:	4810      	ldr	r0, [pc, #64]	@ (80088a4 <OnTxDelayedTimerEvent+0x44>)
 8008864:	f005 fcec 	bl	800e240 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008868:	22d0      	movs	r2, #208	@ 0xd0
 800886a:	2120      	movs	r1, #32
 800886c:	4c0e      	ldr	r4, [pc, #56]	@ (80088a8 <OnTxDelayedTimerEvent+0x48>)
 800886e:	0092      	lsls	r2, r2, #2
 8008870:	58a3      	ldr	r3, [r4, r2]
    switch( ScheduleTx( true ) )
 8008872:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008874:	438b      	bics	r3, r1
 8008876:	50a3      	str	r3, [r4, r2]
    switch( ScheduleTx( true ) )
 8008878:	f7ff fa4a 	bl	8007d10 <ScheduleTx>
 800887c:	2800      	cmp	r0, #0
 800887e:	d010      	beq.n	80088a2 <OnTxDelayedTimerEvent+0x42>
 8008880:	280b      	cmp	r0, #11
 8008882:	d00e      	beq.n	80088a2 <OnTxDelayedTimerEvent+0x42>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8008884:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008886:	4b09      	ldr	r3, [pc, #36]	@ (80088ac <OnTxDelayedTimerEvent+0x4c>)
 8008888:	781a      	ldrb	r2, [r3, #0]
 800888a:	4b09      	ldr	r3, [pc, #36]	@ (80088b0 <OnTxDelayedTimerEvent+0x50>)
 800888c:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800888e:	4b09      	ldr	r3, [pc, #36]	@ (80088b4 <OnTxDelayedTimerEvent+0x54>)
 8008890:	5ce2      	ldrb	r2, [r4, r3]
 8008892:	4b09      	ldr	r3, [pc, #36]	@ (80088b8 <OnTxDelayedTimerEvent+0x58>)
 8008894:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8008896:	4b09      	ldr	r3, [pc, #36]	@ (80088bc <OnTxDelayedTimerEvent+0x5c>)
 8008898:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800889a:	f001 ffa3 	bl	800a7e4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800889e:	f7ff ffb1 	bl	8008804 <StopRetransmission.isra.0>
}
 80088a2:	bd10      	pop	{r4, pc}
 80088a4:	20001080 	.word	0x20001080
 80088a8:	20000d18 	.word	0x20000d18
 80088ac:	200007b9 	.word	0x200007b9
 80088b0:	0000043a 	.word	0x0000043a
 80088b4:	00000412 	.word	0x00000412
 80088b8:	0000043d 	.word	0x0000043d
 80088bc:	00000439 	.word	0x00000439

080088c0 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80088c0:	22d0      	movs	r2, #208	@ 0xd0
 80088c2:	4b06      	ldr	r3, [pc, #24]	@ (80088dc <LoRaMacIsBusy+0x1c>)
 80088c4:	0092      	lsls	r2, r2, #2
 80088c6:	589a      	ldr	r2, [r3, r2]
    return true;
 80088c8:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80088ca:	2a00      	cmp	r2, #0
 80088cc:	d105      	bne.n	80088da <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80088ce:	4a04      	ldr	r2, [pc, #16]	@ (80088e0 <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80088d0:	5c98      	ldrb	r0, [r3, r2]
 80088d2:	3801      	subs	r0, #1
 80088d4:	1e43      	subs	r3, r0, #1
 80088d6:	4198      	sbcs	r0, r3
 80088d8:	b2c0      	uxtb	r0, r0
}
 80088da:	4770      	bx	lr
 80088dc:	20000d18 	.word	0x20000d18
 80088e0:	00000482 	.word	0x00000482

080088e4 <LoRaMacProcess>:
{
 80088e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088e6:	b0a9      	sub	sp, #164	@ 0xa4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088e8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80088ec:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 80088ee:	2100      	movs	r1, #0
    events = LoRaMacRadioEvents;
 80088f0:	4edb      	ldr	r6, [pc, #876]	@ (8008c60 <LoRaMacProcess+0x37c>)
 80088f2:	6833      	ldr	r3, [r6, #0]
    LoRaMacRadioEvents.Value = 0;
 80088f4:	6031      	str	r1, [r6, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f6:	f382 8810 	msr	PRIMASK, r2
    if( events.Value != 0 )
 80088fa:	428b      	cmp	r3, r1
 80088fc:	d100      	bne.n	8008900 <LoRaMacProcess+0x1c>
 80088fe:	e0e1      	b.n	8008ac4 <LoRaMacProcess+0x1e0>
        if( events.Events.TxDone == 1 )
 8008900:	b2da      	uxtb	r2, r3
 8008902:	9205      	str	r2, [sp, #20]
 8008904:	06db      	lsls	r3, r3, #27
 8008906:	d56e      	bpl.n	80089e6 <LoRaMacProcess+0x102>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008908:	4bd6      	ldr	r3, [pc, #856]	@ (8008c64 <LoRaMacProcess+0x380>)
 800890a:	4cd7      	ldr	r4, [pc, #860]	@ (8008c68 <LoRaMacProcess+0x384>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b02      	cmp	r3, #2
 8008910:	d002      	beq.n	8008918 <LoRaMacProcess+0x34>
        Radio.Sleep( );
 8008912:	4bd6      	ldr	r3, [pc, #856]	@ (8008c6c <LoRaMacProcess+0x388>)
 8008914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008916:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8008918:	23ec      	movs	r3, #236	@ 0xec
 800891a:	4fd5      	ldr	r7, [pc, #852]	@ (8008c70 <LoRaMacProcess+0x38c>)
 800891c:	4dd5      	ldr	r5, [pc, #852]	@ (8008c74 <LoRaMacProcess+0x390>)
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	58e9      	ldr	r1, [r5, r3]
 8008922:	0038      	movs	r0, r7
 8008924:	f005 fd1e 	bl	800e364 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8008928:	0038      	movs	r0, r7
 800892a:	f005 fcdd 	bl	800e2e8 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800892e:	23ed      	movs	r3, #237	@ 0xed
 8008930:	4fd1      	ldr	r7, [pc, #836]	@ (8008c78 <LoRaMacProcess+0x394>)
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	58e9      	ldr	r1, [r5, r3]
 8008936:	0038      	movs	r0, r7
 8008938:	f005 fd14 	bl	800e364 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800893c:	0038      	movs	r0, r7
 800893e:	f005 fcd3 	bl	800e2e8 <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8008942:	0023      	movs	r3, r4
 8008944:	33fc      	adds	r3, #252	@ 0xfc
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	4fcc      	ldr	r7, [pc, #816]	@ (8008c7c <LoRaMacProcess+0x398>)
 800894a:	2b02      	cmp	r3, #2
 800894c:	d002      	beq.n	8008954 <LoRaMacProcess+0x70>
 800894e:	5deb      	ldrb	r3, [r5, r7]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d013      	beq.n	800897c <LoRaMacProcess+0x98>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8008954:	2316      	movs	r3, #22
 8008956:	a912      	add	r1, sp, #72	@ 0x48
 8008958:	700b      	strb	r3, [r1, #0]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800895a:	0023      	movs	r3, r4
 800895c:	3340      	adds	r3, #64	@ 0x40
 800895e:	7818      	ldrb	r0, [r3, #0]
 8008960:	f002 fbe5 	bl	800b12e <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008964:	23ed      	movs	r3, #237	@ 0xed
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	58e9      	ldr	r1, [r5, r3]
 800896a:	4dc5      	ldr	r5, [pc, #788]	@ (8008c80 <LoRaMacProcess+0x39c>)
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800896c:	9010      	str	r0, [sp, #64]	@ 0x40
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800896e:	1809      	adds	r1, r1, r0
 8008970:	0028      	movs	r0, r5
 8008972:	f005 fcf7 	bl	800e364 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8008976:	0028      	movs	r0, r5
 8008978:	f005 fcb6 	bl	800e2e8 <UTIL_TIMER_Start>
    txDone.Channel = MacCtx.Channel;
 800897c:	2058      	movs	r0, #88	@ 0x58
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800897e:	6973      	ldr	r3, [r6, #20]
    txDone.Channel = MacCtx.Channel;
 8008980:	4ac0      	ldr	r2, [pc, #768]	@ (8008c84 <LoRaMacProcess+0x3a0>)
 8008982:	4ebc      	ldr	r6, [pc, #752]	@ (8008c74 <LoRaMacProcess+0x390>)
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8008984:	62e3      	str	r3, [r4, #44]	@ 0x2c
    txDone.Channel = MacCtx.Channel;
 8008986:	5cb2      	ldrb	r2, [r6, r2]
 8008988:	a906      	add	r1, sp, #24
 800898a:	1809      	adds	r1, r1, r0
 800898c:	700a      	strb	r2, [r1, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800898e:	a80e      	add	r0, sp, #56	@ 0x38
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008990:	931d      	str	r3, [sp, #116]	@ 0x74
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008992:	f005 fb8f 	bl	800e0b4 <SysTimeGetMcuTime>
 8008996:	0023      	movs	r3, r4
 8008998:	3309      	adds	r3, #9
 800899a:	33ff      	adds	r3, #255	@ 0xff
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	ad08      	add	r5, sp, #32
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	2382      	movs	r3, #130	@ 0x82
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80089a8:	0028      	movs	r0, r5
 80089aa:	58e3      	ldr	r3, [r4, r3]
 80089ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80089ae:	f005 fb1d 	bl	800dfec <SysTimeSub>
 80089b2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80089b4:	cd06      	ldmia	r5!, {r1, r2}
 80089b6:	c306      	stmia	r3!, {r1, r2}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80089b8:	2383      	movs	r3, #131	@ 0x83
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	58f3      	ldr	r3, [r6, r3]
 80089be:	2159      	movs	r1, #89	@ 0x59
 80089c0:	931e      	str	r3, [sp, #120]	@ 0x78
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80089c2:	0023      	movs	r3, r4
 80089c4:	33ff      	adds	r3, #255	@ 0xff
 80089c6:	7c5b      	ldrb	r3, [r3, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80089c8:	3440      	adds	r4, #64	@ 0x40
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80089ca:	1e5a      	subs	r2, r3, #1
 80089cc:	4193      	sbcs	r3, r2
 80089ce:	aa06      	add	r2, sp, #24
 80089d0:	1852      	adds	r2, r2, r1
 80089d2:	7013      	strb	r3, [r2, #0]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80089d4:	7820      	ldrb	r0, [r4, #0]
 80089d6:	a91c      	add	r1, sp, #112	@ 0x70
 80089d8:	f002 fbb5 	bl	800b146 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 80089dc:	5df3      	ldrb	r3, [r6, r7]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <LoRaMacProcess+0x102>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80089e2:	4aa9      	ldr	r2, [pc, #676]	@ (8008c88 <LoRaMacProcess+0x3a4>)
 80089e4:	54b3      	strb	r3, [r6, r2]
        if( events.Events.RxDone == 1 )
 80089e6:	9b05      	ldr	r3, [sp, #20]
 80089e8:	071b      	lsls	r3, r3, #28
 80089ea:	d53f      	bpl.n	8008a6c <LoRaMacProcess+0x188>
    uint8_t *payload = RxDoneParams.Payload;
 80089ec:	4b9c      	ldr	r3, [pc, #624]	@ (8008c60 <LoRaMacProcess+0x37c>)
    MacCtx.McpsConfirm.AckReceived = false;
 80089ee:	4ca1      	ldr	r4, [pc, #644]	@ (8008c74 <LoRaMacProcess+0x390>)
    uint8_t *payload = RxDoneParams.Payload;
 80089f0:	689a      	ldr	r2, [r3, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80089f2:	4f9d      	ldr	r7, [pc, #628]	@ (8008c68 <LoRaMacProcess+0x384>)
    uint8_t *payload = RxDoneParams.Payload;
 80089f4:	9203      	str	r2, [sp, #12]
    uint16_t size = RxDoneParams.Size;
 80089f6:	899a      	ldrh	r2, [r3, #12]
 80089f8:	9202      	str	r2, [sp, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80089fa:	220e      	movs	r2, #14
 80089fc:	5e9d      	ldrsh	r5, [r3, r2]
    int8_t snr = RxDoneParams.Snr;
 80089fe:	7c1b      	ldrb	r3, [r3, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008a00:	4aa2      	ldr	r2, [pc, #648]	@ (8008c8c <LoRaMacProcess+0x3a8>)
    int8_t snr = RxDoneParams.Snr;
 8008a02:	b25b      	sxtb	r3, r3
 8008a04:	9304      	str	r3, [sp, #16]
    uint32_t downLinkCounter = 0;
 8008a06:	2300      	movs	r3, #0
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008a08:	6812      	ldr	r2, [r2, #0]
    MacCtx.RxStatus.Snr = snr;
 8008a0a:	9904      	ldr	r1, [sp, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008a0c:	9207      	str	r2, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 8008a0e:	4aa0      	ldr	r2, [pc, #640]	@ (8008c90 <LoRaMacProcess+0x3ac>)
    uint32_t downLinkCounter = 0;
 8008a10:	930b      	str	r3, [sp, #44]	@ 0x2c
    MacCtx.McpsConfirm.AckReceived = false;
 8008a12:	54a3      	strb	r3, [r4, r2]
    MacCtx.RxStatus.Rssi = rssi;
 8008a14:	4a9f      	ldr	r2, [pc, #636]	@ (8008c94 <LoRaMacProcess+0x3b0>)
 8008a16:	52a5      	strh	r5, [r4, r2]
    MacCtx.RxStatus.Snr = snr;
 8008a18:	4a9f      	ldr	r2, [pc, #636]	@ (8008c98 <LoRaMacProcess+0x3b4>)
 8008a1a:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8008a1c:	3202      	adds	r2, #2
 8008a1e:	5ca2      	ldrb	r2, [r4, r2]
 8008a20:	499e      	ldr	r1, [pc, #632]	@ (8008c9c <LoRaMacProcess+0x3b8>)
 8008a22:	5462      	strb	r2, [r4, r1]
    MacCtx.McpsIndication.Multicast = 0;
 8008a24:	4a9e      	ldr	r2, [pc, #632]	@ (8008ca0 <LoRaMacProcess+0x3bc>)
 8008a26:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.FramePending = 0;
 8008a28:	4a9e      	ldr	r2, [pc, #632]	@ (8008ca4 <LoRaMacProcess+0x3c0>)
 8008a2a:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 8008a2c:	4a9e      	ldr	r2, [pc, #632]	@ (8008ca8 <LoRaMacProcess+0x3c4>)
 8008a2e:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 8008a30:	3204      	adds	r2, #4
 8008a32:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.AckReceived = false;
 8008a34:	4a9d      	ldr	r2, [pc, #628]	@ (8008cac <LoRaMacProcess+0x3c8>)
 8008a36:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008a38:	4a9d      	ldr	r2, [pc, #628]	@ (8008cb0 <LoRaMacProcess+0x3cc>)
 8008a3a:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008a3c:	4a9d      	ldr	r2, [pc, #628]	@ (8008cb4 <LoRaMacProcess+0x3d0>)
 8008a3e:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 8008a40:	3214      	adds	r2, #20
 8008a42:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008a44:	4a9c      	ldr	r2, [pc, #624]	@ (8008cb8 <LoRaMacProcess+0x3d4>)
 8008a46:	54a3      	strb	r3, [r4, r2]
    Radio.Sleep( );
 8008a48:	4b88      	ldr	r3, [pc, #544]	@ (8008c6c <LoRaMacProcess+0x388>)
 8008a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4c:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8008a4e:	488a      	ldr	r0, [pc, #552]	@ (8008c78 <LoRaMacProcess+0x394>)
 8008a50:	f005 fbf6 	bl	800e240 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008a54:	9902      	ldr	r1, [sp, #8]
 8008a56:	9803      	ldr	r0, [sp, #12]
 8008a58:	f001 fd0f 	bl	800a47a <LoRaMacClassBRxBeacon>
 8008a5c:	1e06      	subs	r6, r0, #0
 8008a5e:	d100      	bne.n	8008a62 <LoRaMacProcess+0x17e>
 8008a60:	e18c      	b.n	8008d7c <LoRaMacProcess+0x498>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008a62:	4b96      	ldr	r3, [pc, #600]	@ (8008cbc <LoRaMacProcess+0x3d8>)
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008a64:	9a04      	ldr	r2, [sp, #16]
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008a66:	52e5      	strh	r5, [r4, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008a68:	4b95      	ldr	r3, [pc, #596]	@ (8008cc0 <LoRaMacProcess+0x3dc>)
 8008a6a:	54e2      	strb	r2, [r4, r3]
        if( events.Events.TxTimeout == 1 )
 8008a6c:	9b05      	ldr	r3, [sp, #20]
 8008a6e:	075b      	lsls	r3, r3, #29
 8008a70:	d51a      	bpl.n	8008aa8 <LoRaMacProcess+0x1c4>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008a72:	4b7c      	ldr	r3, [pc, #496]	@ (8008c64 <LoRaMacProcess+0x380>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d002      	beq.n	8008a80 <LoRaMacProcess+0x19c>
        Radio.Sleep( );
 8008a7a:	4b7c      	ldr	r3, [pc, #496]	@ (8008c6c <LoRaMacProcess+0x388>)
 8008a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7e:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8008a80:	f7fe ff24 	bl	80078cc <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008a84:	2002      	movs	r0, #2
 8008a86:	4c7b      	ldr	r4, [pc, #492]	@ (8008c74 <LoRaMacProcess+0x390>)
 8008a88:	4b7f      	ldr	r3, [pc, #508]	@ (8008c88 <LoRaMacProcess+0x3a4>)
 8008a8a:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008a8c:	f001 feaa 	bl	800a7e4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008a90:	4b7a      	ldr	r3, [pc, #488]	@ (8008c7c <LoRaMacProcess+0x398>)
 8008a92:	5ce3      	ldrb	r3, [r4, r3]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <LoRaMacProcess+0x1ba>
        MacCtx.AckTimeoutRetry = true;
 8008a98:	2201      	movs	r2, #1
 8008a9a:	4b8a      	ldr	r3, [pc, #552]	@ (8008cc4 <LoRaMacProcess+0x3e0>)
 8008a9c:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008a9e:	2320      	movs	r3, #32
 8008aa0:	4989      	ldr	r1, [pc, #548]	@ (8008cc8 <LoRaMacProcess+0x3e4>)
 8008aa2:	5c62      	ldrb	r2, [r4, r1]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	5463      	strb	r3, [r4, r1]
        if( events.Events.RxError == 1 )
 8008aa8:	9b05      	ldr	r3, [sp, #20]
 8008aaa:	079b      	lsls	r3, r3, #30
 8008aac:	d503      	bpl.n	8008ab6 <LoRaMacProcess+0x1d2>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008aae:	2106      	movs	r1, #6
 8008ab0:	2005      	movs	r0, #5
 8008ab2:	f7fe ff7b 	bl	80079ac <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8008ab6:	9b05      	ldr	r3, [sp, #20]
 8008ab8:	07db      	lsls	r3, r3, #31
 8008aba:	d503      	bpl.n	8008ac4 <LoRaMacProcess+0x1e0>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008abc:	2104      	movs	r1, #4
 8008abe:	2003      	movs	r0, #3
 8008ac0:	f7fe ff74 	bl	80079ac <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8008ac4:	f001 fcf6 	bl	800a4b4 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8008ac8:	4c6a      	ldr	r4, [pc, #424]	@ (8008c74 <LoRaMacProcess+0x390>)
 8008aca:	4b7f      	ldr	r3, [pc, #508]	@ (8008cc8 <LoRaMacProcess+0x3e4>)
 8008acc:	5ce2      	ldrb	r2, [r4, r3]
 8008ace:	0693      	lsls	r3, r2, #26
 8008ad0:	d400      	bmi.n	8008ad4 <LoRaMacProcess+0x1f0>
 8008ad2:	e11d      	b.n	8008d10 <LoRaMacProcess+0x42c>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008ad4:	21d0      	movs	r1, #208	@ 0xd0
    MacCtx.AllowRequests = requestState;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	4d7c      	ldr	r5, [pc, #496]	@ (8008ccc <LoRaMacProcess+0x3e8>)
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008ada:	0089      	lsls	r1, r1, #2
    MacCtx.AllowRequests = requestState;
 8008adc:	5563      	strb	r3, [r4, r5]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008ade:	5863      	ldr	r3, [r4, r1]
 8008ae0:	0618      	lsls	r0, r3, #24
 8008ae2:	d502      	bpl.n	8008aea <LoRaMacProcess+0x206>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008ae4:	2082      	movs	r0, #130	@ 0x82
 8008ae6:	4383      	bics	r3, r0
 8008ae8:	5063      	str	r3, [r4, r1]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8008aea:	2305      	movs	r3, #5
 8008aec:	421a      	tst	r2, r3
 8008aee:	d100      	bne.n	8008af2 <LoRaMacProcess+0x20e>
 8008af0:	e382      	b.n	80091f8 <LoRaMacProcess+0x914>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008af2:	200c      	movs	r0, #12
 8008af4:	f001 fe94 	bl	800a820 <LoRaMacConfirmQueueIsCmdActive>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d100      	bne.n	8008afe <LoRaMacProcess+0x21a>
 8008afc:	e37c      	b.n	80091f8 <LoRaMacProcess+0x914>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8008afe:	4b72      	ldr	r3, [pc, #456]	@ (8008cc8 <LoRaMacProcess+0x3e4>)
 8008b00:	5ce3      	ldrb	r3, [r4, r3]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008b02:	07da      	lsls	r2, r3, #31
 8008b04:	d500      	bpl.n	8008b08 <LoRaMacProcess+0x224>
 8008b06:	e377      	b.n	80091f8 <LoRaMacProcess+0x914>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008b08:	075b      	lsls	r3, r3, #29
 8008b0a:	d400      	bmi.n	8008b0e <LoRaMacProcess+0x22a>
 8008b0c:	e38b      	b.n	8009226 <LoRaMacProcess+0x942>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008b0e:	22d0      	movs	r2, #208	@ 0xd0
 8008b10:	2102      	movs	r1, #2
 8008b12:	0092      	lsls	r2, r2, #2
 8008b14:	58a3      	ldr	r3, [r4, r2]
 8008b16:	438b      	bics	r3, r1
 8008b18:	50a3      	str	r3, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008b1a:	23d0      	movs	r3, #208	@ 0xd0
 8008b1c:	009b      	lsls	r3, r3, #2
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008b1e:	4a6a      	ldr	r2, [pc, #424]	@ (8008cc8 <LoRaMacProcess+0x3e4>)
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008b20:	58e3      	ldr	r3, [r4, r3]
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008b22:	5ca7      	ldrb	r7, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d000      	beq.n	8008b2a <LoRaMacProcess+0x246>
 8008b28:	e0f0      	b.n	8008d0c <LoRaMacProcess+0x428>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008b2a:	0039      	movs	r1, r7
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	4019      	ands	r1, r3
 8008b30:	421f      	tst	r7, r3
 8008b32:	d002      	beq.n	8008b3a <LoRaMacProcess+0x256>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8008b34:	0038      	movs	r0, r7
 8008b36:	4398      	bics	r0, r3
 8008b38:	54a0      	strb	r0, [r4, r2]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008b3a:	2204      	movs	r2, #4
 8008b3c:	4862      	ldr	r0, [pc, #392]	@ (8008cc8 <LoRaMacProcess+0x3e4>)
 8008b3e:	5c23      	ldrb	r3, [r4, r0]
 8008b40:	4213      	tst	r3, r2
 8008b42:	d001      	beq.n	8008b48 <LoRaMacProcess+0x264>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8008b44:	4393      	bics	r3, r2
 8008b46:	5423      	strb	r3, [r4, r0]
    MacCtx.AllowRequests = requestState;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	5563      	strb	r3, [r4, r5]
        if( reqEvents.Bits.McpsReq == 1 )
 8008b4c:	2900      	cmp	r1, #0
 8008b4e:	d005      	beq.n	8008b5c <LoRaMacProcess+0x278>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8008b50:	23d1      	movs	r3, #209	@ 0xd1
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	58e3      	ldr	r3, [r4, r3]
 8008b56:	485e      	ldr	r0, [pc, #376]	@ (8008cd0 <LoRaMacProcess+0x3ec>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8008b5c:	2604      	movs	r6, #4
 8008b5e:	4237      	tst	r7, r6
 8008b60:	d00a      	beq.n	8008b78 <LoRaMacProcess+0x294>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8008b62:	485c      	ldr	r0, [pc, #368]	@ (8008cd4 <LoRaMacProcess+0x3f0>)
 8008b64:	f001 fe68 	bl	800a838 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8008b68:	f001 fe94 	bl	800a894 <LoRaMacConfirmQueueGetCnt>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d003      	beq.n	8008b78 <LoRaMacProcess+0x294>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8008b70:	4a55      	ldr	r2, [pc, #340]	@ (8008cc8 <LoRaMacProcess+0x3e4>)
 8008b72:	5ca3      	ldrb	r3, [r4, r2]
 8008b74:	431e      	orrs	r6, r3
 8008b76:	54a6      	strb	r6, [r4, r2]
        LoRaMacClassBResumeBeaconing( );
 8008b78:	f001 fc8b 	bl	800a492 <LoRaMacClassBResumeBeaconing>
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008b7c:	26d0      	movs	r6, #208	@ 0xd0
        MacCtx.MacFlags.Bits.MacDone = 0;
 8008b7e:	2220      	movs	r2, #32
 8008b80:	4f51      	ldr	r7, [pc, #324]	@ (8008cc8 <LoRaMacProcess+0x3e4>)
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008b82:	00b6      	lsls	r6, r6, #2
        MacCtx.MacFlags.Bits.MacDone = 0;
 8008b84:	5de3      	ldrb	r3, [r4, r7]
 8008b86:	4393      	bics	r3, r2
 8008b88:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008b8a:	59a3      	ldr	r3, [r4, r6]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d000      	beq.n	8008b92 <LoRaMacProcess+0x2ae>
 8008b90:	e0bc      	b.n	8008d0c <LoRaMacProcess+0x428>
        bool isStickyMacCommandPending = false;
 8008b92:	3238      	adds	r2, #56	@ 0x38
 8008b94:	a906      	add	r1, sp, #24
 8008b96:	1889      	adds	r1, r1, r2
 8008b98:	700b      	strb	r3, [r1, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8008b9a:	a81c      	add	r0, sp, #112	@ 0x70
 8008b9c:	f001 fd6c 	bl	800a678 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8008ba0:	2258      	movs	r2, #88	@ 0x58
 8008ba2:	ab06      	add	r3, sp, #24
 8008ba4:	189b      	adds	r3, r3, r2
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <LoRaMacProcess+0x2d0>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008bac:	2310      	movs	r3, #16
 8008bae:	5de2      	ldrb	r2, [r4, r7]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacState != LORAMAC_IDLE )
 8008bb4:	59a6      	ldr	r6, [r4, r6]
 8008bb6:	2e00      	cmp	r6, #0
 8008bb8:	d000      	beq.n	8008bbc <LoRaMacProcess+0x2d8>
 8008bba:	e0a7      	b.n	8008d0c <LoRaMacProcess+0x428>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8008bbc:	4f2a      	ldr	r7, [pc, #168]	@ (8008c68 <LoRaMacProcess+0x384>)
 8008bbe:	2124      	movs	r1, #36	@ 0x24
 8008bc0:	0038      	movs	r0, r7
 8008bc2:	f003 fc9d 	bl	800c500 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc8:	4298      	cmp	r0, r3
 8008bca:	d001      	beq.n	8008bd0 <LoRaMacProcess+0x2ec>
        nvmData->Crypto.Crc32 = crc;
 8008bcc:	6278      	str	r0, [r7, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8008bce:	3601      	adds	r6, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8008bd0:	2114      	movs	r1, #20
 8008bd2:	4841      	ldr	r0, [pc, #260]	@ (8008cd8 <LoRaMacProcess+0x3f4>)
 8008bd4:	f003 fc94 	bl	800c500 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8008bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bda:	4298      	cmp	r0, r3
 8008bdc:	d002      	beq.n	8008be4 <LoRaMacProcess+0x300>
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8008bde:	2302      	movs	r3, #2
        nvmData->MacGroup1.Crc32 = crc;
 8008be0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8008be2:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8008be4:	21d4      	movs	r1, #212	@ 0xd4
 8008be6:	483d      	ldr	r0, [pc, #244]	@ (8008cdc <LoRaMacProcess+0x3f8>)
 8008be8:	f003 fc8a 	bl	800c500 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8008bec:	003b      	movs	r3, r7
 8008bee:	33fc      	adds	r3, #252	@ 0xfc
 8008bf0:	699a      	ldr	r2, [r3, #24]
 8008bf2:	4290      	cmp	r0, r2
 8008bf4:	d002      	beq.n	8008bfc <LoRaMacProcess+0x318>
        nvmData->MacGroup2.Crc32 = crc;
 8008bf6:	6198      	str	r0, [r3, #24]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8008bf8:	2304      	movs	r3, #4
 8008bfa:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8008bfc:	21bc      	movs	r1, #188	@ 0xbc
 8008bfe:	4838      	ldr	r0, [pc, #224]	@ (8008ce0 <LoRaMacProcess+0x3fc>)
 8008c00:	f003 fc7e 	bl	800c500 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8008c04:	23ea      	movs	r3, #234	@ 0xea
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	58fa      	ldr	r2, [r7, r3]
 8008c0a:	4290      	cmp	r0, r2
 8008c0c:	d003      	beq.n	8008c16 <LoRaMacProcess+0x332>
        nvmData->SecureElement.Crc32 = crc;
 8008c0e:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8008c10:	3bcd      	subs	r3, #205	@ 0xcd
 8008c12:	3bff      	subs	r3, #255	@ 0xff
 8008c14:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8008c16:	2128      	movs	r1, #40	@ 0x28
 8008c18:	4832      	ldr	r0, [pc, #200]	@ (8008ce4 <LoRaMacProcess+0x400>)
 8008c1a:	f003 fc71 	bl	800c500 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8008c1e:	2380      	movs	r3, #128	@ 0x80
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	58fa      	ldr	r2, [r7, r3]
 8008c24:	4290      	cmp	r0, r2
 8008c26:	d003      	beq.n	8008c30 <LoRaMacProcess+0x34c>
        nvmData->RegionGroup1.Crc32 = crc;
 8008c28:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8008c2a:	3bf1      	subs	r3, #241	@ 0xf1
 8008c2c:	3bff      	subs	r3, #255	@ 0xff
 8008c2e:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8008c30:	21de      	movs	r1, #222	@ 0xde
 8008c32:	482d      	ldr	r0, [pc, #180]	@ (8008ce8 <LoRaMacProcess+0x404>)
 8008c34:	0089      	lsls	r1, r1, #2
 8008c36:	f003 fc63 	bl	800c500 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8008c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8008cec <LoRaMacProcess+0x408>)
 8008c3c:	58fa      	ldr	r2, [r7, r3]
 8008c3e:	4290      	cmp	r0, r2
 8008c40:	d002      	beq.n	8008c48 <LoRaMacProcess+0x364>
        nvmData->RegionGroup2.Crc32 = crc;
 8008c42:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8008c44:	2320      	movs	r3, #32
 8008c46:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8008c48:	2114      	movs	r1, #20
 8008c4a:	4829      	ldr	r0, [pc, #164]	@ (8008cf0 <LoRaMacProcess+0x40c>)
 8008c4c:	f003 fc58 	bl	800c500 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8008c50:	4b28      	ldr	r3, [pc, #160]	@ (8008cf4 <LoRaMacProcess+0x410>)
 8008c52:	58fa      	ldr	r2, [r7, r3]
 8008c54:	4290      	cmp	r0, r2
 8008c56:	d04f      	beq.n	8008cf8 <LoRaMacProcess+0x414>
        nvmData->ClassB.Crc32 = crc;
 8008c58:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8008c5a:	2340      	movs	r3, #64	@ 0x40
 8008c5c:	431e      	orrs	r6, r3
 8008c5e:	e04b      	b.n	8008cf8 <LoRaMacProcess+0x414>
 8008c60:	20000768 	.word	0x20000768
 8008c64:	2000087c 	.word	0x2000087c
 8008c68:	20000780 	.word	0x20000780
 8008c6c:	0800edf8 	.word	0x0800edf8
 8008c70:	20001098 	.word	0x20001098
 8008c74:	20000d18 	.word	0x20000d18
 8008c78:	200010b0 	.word	0x200010b0
 8008c7c:	00000414 	.word	0x00000414
 8008c80:	20001110 	.word	0x20001110
 8008c84:	00000415 	.word	0x00000415
 8008c88:	00000439 	.word	0x00000439
 8008c8c:	2000084c 	.word	0x2000084c
 8008c90:	0000043c 	.word	0x0000043c
 8008c94:	0000047c 	.word	0x0000047c
 8008c98:	0000047e 	.word	0x0000047e
 8008c9c:	0000047f 	.word	0x0000047f
 8008ca0:	0000041e 	.word	0x0000041e
 8008ca4:	00000421 	.word	0x00000421
 8008ca8:	00000424 	.word	0x00000424
 8008cac:	0000042a 	.word	0x0000042a
 8008cb0:	0000042c 	.word	0x0000042c
 8008cb4:	0000041c 	.word	0x0000041c
 8008cb8:	00000434 	.word	0x00000434
 8008cbc:	00000472 	.word	0x00000472
 8008cc0:	00000474 	.word	0x00000474
 8008cc4:	00000413 	.word	0x00000413
 8008cc8:	00000481 	.word	0x00000481
 8008ccc:	00000482 	.word	0x00000482
 8008cd0:	20001150 	.word	0x20001150
 8008cd4:	20001164 	.word	0x20001164
 8008cd8:	200007a8 	.word	0x200007a8
 8008cdc:	200007c0 	.word	0x200007c0
 8008ce0:	20000898 	.word	0x20000898
 8008ce4:	20000958 	.word	0x20000958
 8008ce8:	20000984 	.word	0x20000984
 8008cec:	0000057c 	.word	0x0000057c
 8008cf0:	20000d00 	.word	0x20000d00
 8008cf4:	00000594 	.word	0x00000594
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008cf8:	23d2      	movs	r3, #210	@ 0xd2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	58e3      	ldr	r3, [r4, r3]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d004      	beq.n	8008d0c <LoRaMacProcess+0x428>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8008d02:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <LoRaMacProcess+0x428>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8008d08:	0030      	movs	r0, r6
 8008d0a:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8008d10:	2208      	movs	r2, #8
 8008d12:	49a2      	ldr	r1, [pc, #648]	@ (8008f9c <LoRaMacProcess+0x6b8>)
 8008d14:	5c63      	ldrb	r3, [r4, r1]
 8008d16:	4213      	tst	r3, r2
 8008d18:	d008      	beq.n	8008d2c <LoRaMacProcess+0x448>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8008d1a:	4393      	bics	r3, r2
 8008d1c:	5463      	strb	r3, [r4, r1]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8008d1e:	23d1      	movs	r3, #209	@ 0xd1
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	58e3      	ldr	r3, [r4, r3]
 8008d24:	499e      	ldr	r1, [pc, #632]	@ (8008fa0 <LoRaMacProcess+0x6bc>)
 8008d26:	489f      	ldr	r0, [pc, #636]	@ (8008fa4 <LoRaMacProcess+0x6c0>)
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8008d2c:	2510      	movs	r5, #16
 8008d2e:	4e9b      	ldr	r6, [pc, #620]	@ (8008f9c <LoRaMacProcess+0x6b8>)
 8008d30:	5da3      	ldrb	r3, [r4, r6]
 8008d32:	422b      	tst	r3, r5
 8008d34:	d00b      	beq.n	8008d4e <LoRaMacProcess+0x46a>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8008d36:	2307      	movs	r3, #7
 8008d38:	a81c      	add	r0, sp, #112	@ 0x70
 8008d3a:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8008d3c:	23d1      	movs	r3, #209	@ 0xd1
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	58e3      	ldr	r3, [r4, r3]
 8008d42:	4997      	ldr	r1, [pc, #604]	@ (8008fa0 <LoRaMacProcess+0x6bc>)
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8008d48:	5da3      	ldrb	r3, [r4, r6]
 8008d4a:	43ab      	bics	r3, r5
 8008d4c:	55a3      	strb	r3, [r4, r6]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008d4e:	2202      	movs	r2, #2
 8008d50:	4992      	ldr	r1, [pc, #584]	@ (8008f9c <LoRaMacProcess+0x6b8>)
 8008d52:	5c63      	ldrb	r3, [r4, r1]
 8008d54:	4213      	tst	r3, r2
 8008d56:	d008      	beq.n	8008d6a <LoRaMacProcess+0x486>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8008d58:	4393      	bics	r3, r2
 8008d5a:	5463      	strb	r3, [r4, r1]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8008d5c:	23d1      	movs	r3, #209	@ 0xd1
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	58e3      	ldr	r3, [r4, r3]
 8008d62:	498f      	ldr	r1, [pc, #572]	@ (8008fa0 <LoRaMacProcess+0x6bc>)
 8008d64:	4890      	ldr	r0, [pc, #576]	@ (8008fa8 <LoRaMacProcess+0x6c4>)
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8008d6a:	2390      	movs	r3, #144	@ 0x90
 8008d6c:	00db      	lsls	r3, r3, #3
 8008d6e:	5ce3      	ldrb	r3, [r4, r3]
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d101      	bne.n	8008d78 <LoRaMacProcess+0x494>
        OpenContinuousRxCWindow( );
 8008d74:	f7ff f976 	bl	8008064 <OpenContinuousRxCWindow>
}
 8008d78:	b029      	add	sp, #164	@ 0xa4
 8008d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008d7c:	003b      	movs	r3, r7
 8008d7e:	33fc      	adds	r3, #252	@ 0xfc
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d10c      	bne.n	8008da0 <LoRaMacProcess+0x4bc>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008d86:	f001 fb7c 	bl	800a482 <LoRaMacClassBIsPingExpected>
 8008d8a:	1e05      	subs	r5, r0, #0
 8008d8c:	d01a      	beq.n	8008dc4 <LoRaMacProcess+0x4e0>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008d8e:	0030      	movs	r0, r6
 8008d90:	f001 fb6c 	bl	800a46c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008d94:	0030      	movs	r0, r6
 8008d96:	f001 fb6e 	bl	800a476 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008d9a:	2304      	movs	r3, #4
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008d9c:	4a83      	ldr	r2, [pc, #524]	@ (8008fac <LoRaMacProcess+0x6c8>)
 8008d9e:	54a3      	strb	r3, [r4, r2]
    macHdr.Value = payload[pktHeaderLen++];
 8008da0:	9b03      	ldr	r3, [sp, #12]
 8008da2:	781b      	ldrb	r3, [r3, #0]
    switch( macHdr.Bits.MType )
 8008da4:	0958      	lsrs	r0, r3, #5
 8008da6:	3801      	subs	r0, #1
    macHdr.Value = payload[pktHeaderLen++];
 8008da8:	9306      	str	r3, [sp, #24]
    switch( macHdr.Bits.MType )
 8008daa:	4b81      	ldr	r3, [pc, #516]	@ (8008fb0 <LoRaMacProcess+0x6cc>)
 8008dac:	2806      	cmp	r0, #6
 8008dae:	d900      	bls.n	8008db2 <LoRaMacProcess+0x4ce>
 8008db0:	e216      	b.n	80091e0 <LoRaMacProcess+0x8fc>
 8008db2:	f7f7 f9cf 	bl	8000154 <__gnu_thumb1_case_uhi>
 8008db6:	0013      	.short	0x0013
 8008db8:	00990215 	.word	0x00990215
 8008dbc:	00960215 	.word	0x00960215
 8008dc0:	02040215 	.word	0x02040215
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008dc4:	f001 fb5f 	bl	800a486 <LoRaMacClassBIsMulticastExpected>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d0e9      	beq.n	8008da0 <LoRaMacProcess+0x4bc>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008dcc:	0028      	movs	r0, r5
 8008dce:	f001 fb4e 	bl	800a46e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008dd2:	0028      	movs	r0, r5
 8008dd4:	f001 fb50 	bl	800a478 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008dd8:	2305      	movs	r3, #5
 8008dda:	e7df      	b.n	8008d9c <LoRaMacProcess+0x4b8>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8008ddc:	9b02      	ldr	r3, [sp, #8]
 8008dde:	2b10      	cmp	r3, #16
 8008de0:	d806      	bhi.n	8008df0 <LoRaMacProcess+0x50c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008de2:	2101      	movs	r1, #1
 8008de4:	4b72      	ldr	r3, [pc, #456]	@ (8008fb0 <LoRaMacProcess+0x6cc>)
 8008de6:	4a73      	ldr	r2, [pc, #460]	@ (8008fb4 <LoRaMacProcess+0x6d0>)
 8008de8:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8008dea:	f7fe fdc1 	bl	8007970 <PrepareRxDoneAbort>
                return;
 8008dee:	e63d      	b.n	8008a6c <LoRaMacProcess+0x188>
            macMsgJoinAccept.Buffer = payload;
 8008df0:	9b03      	ldr	r3, [sp, #12]
 8008df2:	ae12      	add	r6, sp, #72	@ 0x48
 8008df4:	9312      	str	r3, [sp, #72]	@ 0x48
            macMsgJoinAccept.BufSize = size;
 8008df6:	466b      	mov	r3, sp
 8008df8:	7a1d      	ldrb	r5, [r3, #8]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008dfa:	003b      	movs	r3, r7
            macMsgJoinAccept.BufSize = size;
 8008dfc:	7135      	strb	r5, [r6, #4]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008dfe:	33ff      	adds	r3, #255	@ 0xff
 8008e00:	7c5b      	ldrb	r3, [r3, #17]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1ed      	bne.n	8008de2 <LoRaMacProcess+0x4fe>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8008e06:	f7fe f819 	bl	8006e3c <SecureElementGetJoinEui>
 8008e0a:	0032      	movs	r2, r6
 8008e0c:	0001      	movs	r1, r0
 8008e0e:	20ff      	movs	r0, #255	@ 0xff
 8008e10:	f001 ffd0 	bl	800adb4 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d15c      	bne.n	8008ed2 <LoRaMacProcess+0x5ee>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008e18:	003a      	movs	r2, r7
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008e1a:	7ab3      	ldrb	r3, [r6, #10]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008e1c:	7af1      	ldrb	r1, [r6, #11]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008e1e:	021b      	lsls	r3, r3, #8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008e20:	0409      	lsls	r1, r1, #16
 8008e22:	430b      	orrs	r3, r1
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008e24:	7a71      	ldrb	r1, [r6, #9]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008e26:	32c8      	adds	r2, #200	@ 0xc8
 8008e28:	430b      	orrs	r3, r1
 8008e2a:	6013      	str	r3, [r2, #0]
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008e2c:	003b      	movs	r3, r7
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008e2e:	0039      	movs	r1, r7
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008e30:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008e32:	33cc      	adds	r3, #204	@ 0xcc
 8008e34:	601a      	str	r2, [r3, #0]
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008e36:	7c33      	ldrb	r3, [r6, #16]
 8008e38:	3161      	adds	r1, #97	@ 0x61
 8008e3a:	065a      	lsls	r2, r3, #25
 8008e3c:	0f52      	lsrs	r2, r2, #29
 8008e3e:	700a      	strb	r2, [r1, #0]
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008e40:	003a      	movs	r2, r7
 8008e42:	071b      	lsls	r3, r3, #28
 8008e44:	0f1b      	lsrs	r3, r3, #28
 8008e46:	3268      	adds	r2, #104	@ 0x68
 8008e48:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008e4a:	003a      	movs	r2, r7
 8008e4c:	3270      	adds	r2, #112	@ 0x70
 8008e4e:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8008e50:	7c72      	ldrb	r2, [r6, #17]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8008e52:	2a00      	cmp	r2, #0
 8008e54:	d100      	bne.n	8008e58 <LoRaMacProcess+0x574>
 8008e56:	3201      	adds	r2, #1
 8008e58:	23fa      	movs	r3, #250	@ 0xfa
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4353      	muls	r3, r2
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008e5e:	22fa      	movs	r2, #250	@ 0xfa
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8008e60:	2600      	movs	r6, #0
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008e62:	0092      	lsls	r2, r2, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8008e64:	653b      	str	r3, [r7, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008e66:	189b      	adds	r3, r3, r2
 8008e68:	657b      	str	r3, [r7, #84]	@ 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8008e6a:	4b53      	ldr	r3, [pc, #332]	@ (8008fb8 <LoRaMacProcess+0x6d4>)
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008e6c:	aa06      	add	r2, sp, #24
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8008e6e:	73de      	strb	r6, [r3, #15]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008e70:	2342      	movs	r3, #66	@ 0x42
 8008e72:	189b      	adds	r3, r3, r2
 8008e74:	9310      	str	r3, [sp, #64]	@ 0x40
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008e76:	003b      	movs	r3, r7
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008e78:	a910      	add	r1, sp, #64	@ 0x40
                applyCFList.Size = size - 17;
 8008e7a:	3d11      	subs	r5, #17
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008e7c:	3340      	adds	r3, #64	@ 0x40
                applyCFList.Size = size - 17;
 8008e7e:	710d      	strb	r5, [r1, #4]
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008e80:	7818      	ldrb	r0, [r3, #0]
 8008e82:	f002 f97a 	bl	800b17a <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008e86:	2302      	movs	r3, #2
 8008e88:	4a4b      	ldr	r2, [pc, #300]	@ (8008fb8 <LoRaMacProcess+0x6d4>)
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008e8a:	2001      	movs	r0, #1
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008e8c:	7453      	strb	r3, [r2, #17]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008e8e:	f001 fcc7 	bl	800a820 <LoRaMacConfirmQueueIsCmdActive>
 8008e92:	42b0      	cmp	r0, r6
 8008e94:	d003      	beq.n	8008e9e <LoRaMacProcess+0x5ba>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8008e96:	2101      	movs	r1, #1
 8008e98:	0030      	movs	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008e9a:	f001 fc79 	bl	800a790 <LoRaMacConfirmQueueSetStatus>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8008e9e:	2308      	movs	r3, #8
 8008ea0:	493e      	ldr	r1, [pc, #248]	@ (8008f9c <LoRaMacProcess+0x6b8>)
 8008ea2:	5c62      	ldrb	r2, [r4, r1]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	5463      	strb	r3, [r4, r1]
    if( MacCtx.NodeAckRequested == true )
 8008ea8:	4c41      	ldr	r4, [pc, #260]	@ (8008fb0 <LoRaMacProcess+0x6cc>)
 8008eaa:	4b44      	ldr	r3, [pc, #272]	@ (8008fbc <LoRaMacProcess+0x6d8>)
 8008eac:	5ce3      	ldrb	r3, [r4, r3]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d100      	bne.n	8008eb4 <LoRaMacProcess+0x5d0>
 8008eb2:	e19b      	b.n	80091ec <LoRaMacProcess+0x908>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008eb4:	4b42      	ldr	r3, [pc, #264]	@ (8008fc0 <LoRaMacProcess+0x6dc>)
 8008eb6:	5ce3      	ldrb	r3, [r4, r3]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <LoRaMacProcess+0x5de>
            OnAckTimeoutTimerEvent( NULL );
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	f7fe fd2b 	bl	8007918 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008ec2:	2320      	movs	r3, #32
 8008ec4:	4935      	ldr	r1, [pc, #212]	@ (8008f9c <LoRaMacProcess+0x6b8>)
 8008ec6:	5c62      	ldrb	r2, [r4, r1]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 8008ecc:	f7fe fcfe 	bl	80078cc <UpdateRxSlotIdleState>
 8008ed0:	e5cc      	b.n	8008a6c <LoRaMacProcess+0x188>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008ed2:	2001      	movs	r0, #1
 8008ed4:	f001 fca4 	bl	800a820 <LoRaMacConfirmQueueIsCmdActive>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d0e0      	beq.n	8008e9e <LoRaMacProcess+0x5ba>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008edc:	2101      	movs	r1, #1
 8008ede:	2007      	movs	r0, #7
 8008ee0:	e7db      	b.n	8008e9a <LoRaMacProcess+0x5b6>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	4937      	ldr	r1, [pc, #220]	@ (8008fc4 <LoRaMacProcess+0x6e0>)
 8008ee6:	545a      	strb	r2, [r3, r1]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008ee8:	4a37      	ldr	r2, [pc, #220]	@ (8008fc8 <LoRaMacProcess+0x6e4>)
 8008eea:	a90c      	add	r1, sp, #48	@ 0x30
 8008eec:	7812      	ldrb	r2, [r2, #0]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008eee:	4c30      	ldr	r4, [pc, #192]	@ (8008fb0 <LoRaMacProcess+0x6cc>)
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008ef0:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008ef2:	2284      	movs	r2, #132	@ 0x84
 8008ef4:	00d2      	lsls	r2, r2, #3
 8008ef6:	5ca2      	ldrb	r2, [r4, r2]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008ef8:	4b34      	ldr	r3, [pc, #208]	@ (8008fcc <LoRaMacProcess+0x6e8>)
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008efa:	704a      	strb	r2, [r1, #1]
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008efc:	001a      	movs	r2, r3
 8008efe:	3280      	adds	r2, #128	@ 0x80
 8008f00:	7812      	ldrb	r2, [r2, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008f02:	3340      	adds	r3, #64	@ 0x40
 8008f04:	320d      	adds	r2, #13
 8008f06:	700a      	strb	r2, [r1, #0]
 8008f08:	7818      	ldrb	r0, [r3, #0]
 8008f0a:	f002 f910 	bl	800b12e <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008f0e:	9a02      	ldr	r2, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008f10:	900a      	str	r0, [sp, #40]	@ 0x28
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008f12:	3a0d      	subs	r2, #13
 8008f14:	1c13      	adds	r3, r2, #0
 8008f16:	0412      	lsls	r2, r2, #16
 8008f18:	d500      	bpl.n	8008f1c <LoRaMacProcess+0x638>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f1e:	b21b      	sxth	r3, r3
 8008f20:	b212      	sxth	r2, r2
 8008f22:	4293      	cmp	r3, r2
 8008f24:	dd00      	ble.n	8008f28 <LoRaMacProcess+0x644>
 8008f26:	e75c      	b.n	8008de2 <LoRaMacProcess+0x4fe>
 8008f28:	9b02      	ldr	r3, [sp, #8]
 8008f2a:	2b0b      	cmp	r3, #11
 8008f2c:	d800      	bhi.n	8008f30 <LoRaMacProcess+0x64c>
 8008f2e:	e758      	b.n	8008de2 <LoRaMacProcess+0x4fe>
            macMsgData.BufSize = size;
 8008f30:	225c      	movs	r2, #92	@ 0x5c
            macMsgData.Buffer = payload;
 8008f32:	9b03      	ldr	r3, [sp, #12]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008f34:	a81c      	add	r0, sp, #112	@ 0x70
            macMsgData.Buffer = payload;
 8008f36:	931c      	str	r3, [sp, #112]	@ 0x70
            macMsgData.BufSize = size;
 8008f38:	ab06      	add	r3, sp, #24
 8008f3a:	189b      	adds	r3, r3, r2
 8008f3c:	9a02      	ldr	r2, [sp, #8]
 8008f3e:	701a      	strb	r2, [r3, #0]
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008f40:	22ff      	movs	r2, #255	@ 0xff
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008f42:	4b23      	ldr	r3, [pc, #140]	@ (8008fd0 <LoRaMacProcess+0x6ec>)
 8008f44:	9325      	str	r3, [sp, #148]	@ 0x94
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008f46:	ab26      	add	r3, sp, #152	@ 0x98
 8008f48:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008f4a:	f001 ffed 	bl	800af28 <LoRaMacParserData>
 8008f4e:	1e06      	subs	r6, r0, #0
 8008f50:	d000      	beq.n	8008f54 <LoRaMacProcess+0x670>
 8008f52:	e746      	b.n	8008de2 <LoRaMacProcess+0x4fe>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008f54:	2386      	movs	r3, #134	@ 0x86
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8008f56:	2264      	movs	r2, #100	@ 0x64
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008f58:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8008f5a:	00db      	lsls	r3, r3, #3
 8008f5c:	50e0      	str	r0, [r4, r3]
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8008f5e:	ab06      	add	r3, sp, #24
 8008f60:	189b      	adds	r3, r3, r2
 8008f62:	781a      	ldrb	r2, [r3, #0]
 8008f64:	230f      	movs	r3, #15
 8008f66:	0011      	movs	r1, r2
 8008f68:	4019      	ands	r1, r3
 8008f6a:	421a      	tst	r2, r3
 8008f6c:	d005      	beq.n	8008f7a <LoRaMacProcess+0x696>
 8008f6e:	334a      	adds	r3, #74	@ 0x4a
 8008f70:	ac06      	add	r4, sp, #24
 8008f72:	191b      	adds	r3, r3, r4
 8008f74:	7fdb      	ldrb	r3, [r3, #31]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d12c      	bne.n	8008fd4 <LoRaMacProcess+0x6f0>
    else if( macMsg->FRMPayloadSize == 0 )
 8008f7a:	ab26      	add	r3, sp, #152	@ 0x98
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d100      	bne.n	8008f84 <LoRaMacProcess+0x6a0>
 8008f82:	e08c      	b.n	800909e <LoRaMacProcess+0x7ba>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8008f84:	2900      	cmp	r1, #0
 8008f86:	d000      	beq.n	8008f8a <LoRaMacProcess+0x6a6>
 8008f88:	e72b      	b.n	8008de2 <LoRaMacProcess+0x4fe>
 8008f8a:	2359      	movs	r3, #89	@ 0x59
 8008f8c:	a906      	add	r1, sp, #24
 8008f8e:	185b      	adds	r3, r3, r1
 8008f90:	7fdb      	ldrb	r3, [r3, #31]
        *fType = FRAME_TYPE_C;
 8008f92:	1e59      	subs	r1, r3, #1
 8008f94:	418b      	sbcs	r3, r1
 8008f96:	3302      	adds	r3, #2
        *fType = FRAME_TYPE_B;
 8008f98:	9302      	str	r3, [sp, #8]
 8008f9a:	e01c      	b.n	8008fd6 <LoRaMacProcess+0x6f2>
 8008f9c:	00000481 	.word	0x00000481
 8008fa0:	20001194 	.word	0x20001194
 8008fa4:	20001178 	.word	0x20001178
 8008fa8:	20001134 	.word	0x20001134
 8008fac:	0000047f 	.word	0x0000047f
 8008fb0:	20000d18 	.word	0x20000d18
 8008fb4:	0000041d 	.word	0x0000041d
 8008fb8:	2000087f 	.word	0x2000087f
 8008fbc:	00000414 	.word	0x00000414
 8008fc0:	0000043c 	.word	0x0000043c
 8008fc4:	0000041c 	.word	0x0000041c
 8008fc8:	200007f5 	.word	0x200007f5
 8008fcc:	20000780 	.word	0x20000780
 8008fd0:	20000f50 	.word	0x20000f50
        *fType = FRAME_TYPE_A;
 8008fd4:	9602      	str	r6, [sp, #8]
            downLinkCounter = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	930b      	str	r3, [sp, #44]	@ 0x2c
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008fda:	4bae      	ldr	r3, [pc, #696]	@ (8009294 <LoRaMacProcess+0x9b0>)
 8008fdc:	49ae      	ldr	r1, [pc, #696]	@ (8009298 <LoRaMacProcess+0x9b4>)
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008fde:	001c      	movs	r4, r3
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008fe0:	6809      	ldr	r1, [r1, #0]
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008fe2:	34d2      	adds	r4, #210	@ 0xd2
 8008fe4:	2501      	movs	r5, #1
 8008fe6:	7824      	ldrb	r4, [r4, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008fe8:	4288      	cmp	r0, r1
 8008fea:	d11b      	bne.n	8009024 <LoRaMacProcess+0x740>
 8008fec:	2c00      	cmp	r4, #0
 8008fee:	d019      	beq.n	8009024 <LoRaMacProcess+0x740>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	30d3      	adds	r0, #211	@ 0xd3
 8008ff4:	7805      	ldrb	r5, [r0, #0]
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	30f0      	adds	r0, #240	@ 0xf0
 8008ffa:	6800      	ldr	r0, [r0, #0]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008ffc:	33fc      	adds	r3, #252	@ 0xfc
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008ffe:	6800      	ldr	r0, [r0, #0]
 8009000:	900b      	str	r0, [sp, #44]	@ 0x2c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b02      	cmp	r3, #2
 8009006:	d103      	bne.n	8009010 <LoRaMacProcess+0x72c>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009008:	2003      	movs	r0, #3
 800900a:	4ba4      	ldr	r3, [pc, #656]	@ (800929c <LoRaMacProcess+0x9b8>)
 800900c:	4ca4      	ldr	r4, [pc, #656]	@ (80092a0 <LoRaMacProcess+0x9bc>)
 800900e:	5518      	strb	r0, [r3, r4]
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8009010:	9b02      	ldr	r3, [sp, #8]
 8009012:	2b03      	cmp	r3, #3
 8009014:	d000      	beq.n	8009018 <LoRaMacProcess+0x734>
 8009016:	e6e4      	b.n	8008de2 <LoRaMacProcess+0x4fe>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8009018:	335d      	adds	r3, #93	@ 0x5d
 800901a:	421a      	tst	r2, r3
 800901c:	d000      	beq.n	8009020 <LoRaMacProcess+0x73c>
 800901e:	e6e0      	b.n	8008de2 <LoRaMacProcess+0x4fe>
 8009020:	2601      	movs	r6, #1
 8009022:	9107      	str	r1, [sp, #28]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8009024:	2315      	movs	r3, #21
 8009026:	a90c      	add	r1, sp, #48	@ 0x30
 8009028:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800902a:	4b9e      	ldr	r3, [pc, #632]	@ (80092a4 <LoRaMacProcess+0x9c0>)
 800902c:	4c99      	ldr	r4, [pc, #612]	@ (8009294 <LoRaMacProcess+0x9b0>)
 800902e:	7818      	ldrb	r0, [r3, #0]
 8009030:	f002 f87d 	bl	800b12e <RegionGetPhyParam>
 8009034:	34ff      	adds	r4, #255	@ 0xff
 8009036:	7be3      	ldrb	r3, [r4, #15]
 8009038:	900a      	str	r0, [sp, #40]	@ 0x28
    switch( addrID )
 800903a:	2d00      	cmp	r5, #0
 800903c:	d031      	beq.n	80090a2 <LoRaMacProcess+0x7be>
 800903e:	2d01      	cmp	r5, #1
 8009040:	d134      	bne.n	80090ac <LoRaMacProcess+0x7c8>
                *fCntID = FCNT_DOWN;
 8009042:	2403      	movs	r4, #3
            if( lrWanVersion.Fields.Minor == 1 )
 8009044:	2b01      	cmp	r3, #1
 8009046:	d105      	bne.n	8009054 <LoRaMacProcess+0x770>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8009048:	9b02      	ldr	r3, [sp, #8]
 800904a:	3406      	adds	r4, #6
 800904c:	40dc      	lsrs	r4, r3
 800904e:	402c      	ands	r4, r5
 8009050:	3401      	adds	r4, #1
 8009052:	b2e4      	uxtb	r4, r4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8009054:	af1c      	add	r7, sp, #112	@ 0x70
 8009056:	b281      	uxth	r1, r0
 8009058:	89fa      	ldrh	r2, [r7, #14]
 800905a:	0020      	movs	r0, r4
 800905c:	ab0b      	add	r3, sp, #44	@ 0x2c
 800905e:	f001 fd39 	bl	800aad4 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009062:	2800      	cmp	r0, #0
 8009064:	d027      	beq.n	80090b6 <LoRaMacProcess+0x7d2>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8009066:	4b8d      	ldr	r3, [pc, #564]	@ (800929c <LoRaMacProcess+0x9b8>)
 8009068:	2807      	cmp	r0, #7
 800906a:	d11c      	bne.n	80090a6 <LoRaMacProcess+0x7c2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800906c:	2208      	movs	r2, #8
 800906e:	498e      	ldr	r1, [pc, #568]	@ (80092a8 <LoRaMacProcess+0x9c4>)
 8009070:	545a      	strb	r2, [r3, r1]
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8009072:	4a8e      	ldr	r2, [pc, #568]	@ (80092ac <LoRaMacProcess+0x9c8>)
 8009074:	4b87      	ldr	r3, [pc, #540]	@ (8009294 <LoRaMacProcess+0x9b0>)
 8009076:	7bd2      	ldrb	r2, [r2, #15]
 8009078:	2a00      	cmp	r2, #0
 800907a:	d10b      	bne.n	8009094 <LoRaMacProcess+0x7b0>
 800907c:	9906      	ldr	r1, [sp, #24]
 800907e:	321f      	adds	r2, #31
 8009080:	4391      	bics	r1, r2
 8009082:	29a0      	cmp	r1, #160	@ 0xa0
 8009084:	d106      	bne.n	8009094 <LoRaMacProcess+0x7b0>
 8009086:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009088:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800908a:	4291      	cmp	r1, r2
 800908c:	d102      	bne.n	8009094 <LoRaMacProcess+0x7b0>
                        Nvm.MacGroup1.SrvAckRequested = true;
 800908e:	2201      	movs	r2, #1
 8009090:	333a      	adds	r3, #58	@ 0x3a
 8009092:	701a      	strb	r2, [r3, #0]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009094:	4b81      	ldr	r3, [pc, #516]	@ (800929c <LoRaMacProcess+0x9b8>)
 8009096:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009098:	4985      	ldr	r1, [pc, #532]	@ (80092b0 <LoRaMacProcess+0x9cc>)
 800909a:	505a      	str	r2, [r3, r1]
                PrepareRxDoneAbort( );
 800909c:	e6a5      	b.n	8008dea <LoRaMacProcess+0x506>
        *fType = FRAME_TYPE_B;
 800909e:	2301      	movs	r3, #1
 80090a0:	e77a      	b.n	8008f98 <LoRaMacProcess+0x6b4>
    switch( addrID )
 80090a2:	2404      	movs	r4, #4
 80090a4:	e7d6      	b.n	8009054 <LoRaMacProcess+0x770>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80090a6:	220a      	movs	r2, #10
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 80090a8:	2808      	cmp	r0, #8
 80090aa:	d001      	beq.n	80090b0 <LoRaMacProcess+0x7cc>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80090ac:	2201      	movs	r2, #1
 80090ae:	4b7b      	ldr	r3, [pc, #492]	@ (800929c <LoRaMacProcess+0x9b8>)
 80090b0:	497d      	ldr	r1, [pc, #500]	@ (80092a8 <LoRaMacProcess+0x9c4>)
 80090b2:	545a      	strb	r2, [r3, r1]
 80090b4:	e7ee      	b.n	8009094 <LoRaMacProcess+0x7b0>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80090b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090b8:	0022      	movs	r2, r4
 80090ba:	0028      	movs	r0, r5
 80090bc:	9907      	ldr	r1, [sp, #28]
 80090be:	9700      	str	r7, [sp, #0]
 80090c0:	f001 fde0 	bl	800ac84 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80090c4:	4b75      	ldr	r3, [pc, #468]	@ (800929c <LoRaMacProcess+0x9b8>)
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d006      	beq.n	80090d8 <LoRaMacProcess+0x7f4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80090ca:	3802      	subs	r0, #2
 80090cc:	1e42      	subs	r2, r0, #1
 80090ce:	4190      	sbcs	r0, r2
 80090d0:	4a75      	ldr	r2, [pc, #468]	@ (80092a8 <LoRaMacProcess+0x9c4>)
 80090d2:	300b      	adds	r0, #11
 80090d4:	5498      	strb	r0, [r3, r2]
 80090d6:	e688      	b.n	8008dea <LoRaMacProcess+0x506>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80090d8:	4a73      	ldr	r2, [pc, #460]	@ (80092a8 <LoRaMacProcess+0x9c4>)
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80090da:	4c76      	ldr	r4, [pc, #472]	@ (80092b4 <LoRaMacProcess+0x9d0>)
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80090dc:	5498      	strb	r0, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 80090de:	4a76      	ldr	r2, [pc, #472]	@ (80092b8 <LoRaMacProcess+0x9d4>)
 80090e0:	549e      	strb	r6, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80090e2:	7b3a      	ldrb	r2, [r7, #12]
 80090e4:	06d1      	lsls	r1, r2, #27
 80090e6:	0fc9      	lsrs	r1, r1, #31
 80090e8:	5519      	strb	r1, [r3, r4]
            MacCtx.McpsIndication.Buffer = NULL;
 80090ea:	4974      	ldr	r1, [pc, #464]	@ (80092bc <LoRaMacProcess+0x9d8>)
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80090ec:	4c70      	ldr	r4, [pc, #448]	@ (80092b0 <LoRaMacProcess+0x9cc>)
            MacCtx.McpsIndication.Buffer = NULL;
 80090ee:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 80090f0:	3104      	adds	r1, #4
 80090f2:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80090f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80090f6:	0692      	lsls	r2, r2, #26
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80090f8:	5119      	str	r1, [r3, r4]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80090fa:	4971      	ldr	r1, [pc, #452]	@ (80092c0 <LoRaMacProcess+0x9dc>)
 80090fc:	0fd2      	lsrs	r2, r2, #31
 80090fe:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009100:	4970      	ldr	r1, [pc, #448]	@ (80092c4 <LoRaMacProcess+0x9e0>)
 8009102:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009104:	4970      	ldr	r1, [pc, #448]	@ (80092c8 <LoRaMacProcess+0x9e4>)
 8009106:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009108:	4a65      	ldr	r2, [pc, #404]	@ (80092a0 <LoRaMacProcess+0x9bc>)
 800910a:	5c99      	ldrb	r1, [r3, r2]
 800910c:	2901      	cmp	r1, #1
 800910e:	d801      	bhi.n	8009114 <LoRaMacProcess+0x830>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8009110:	4b60      	ldr	r3, [pc, #384]	@ (8009294 <LoRaMacProcess+0x9b0>)
 8009112:	6298      	str	r0, [r3, #40]	@ 0x28
            if( multicast == 1 )
 8009114:	ad1c      	add	r5, sp, #112	@ 0x70
 8009116:	2e01      	cmp	r6, #1
 8009118:	d043      	beq.n	80091a2 <LoRaMacProcess+0x8be>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800911a:	231f      	movs	r3, #31
 800911c:	9a06      	ldr	r2, [sp, #24]
 800911e:	439a      	bics	r2, r3
 8009120:	4b5c      	ldr	r3, [pc, #368]	@ (8009294 <LoRaMacProcess+0x9b0>)
 8009122:	2aa0      	cmp	r2, #160	@ 0xa0
 8009124:	d139      	bne.n	800919a <LoRaMacProcess+0x8b6>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8009126:	001a      	movs	r2, r3
 8009128:	2001      	movs	r0, #1
 800912a:	323a      	adds	r2, #58	@ 0x3a
 800912c:	7010      	strb	r0, [r2, #0]
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800912e:	001a      	movs	r2, r3
 8009130:	32ff      	adds	r2, #255	@ 0xff
 8009132:	7bd2      	ldrb	r2, [r2, #15]
 8009134:	2a00      	cmp	r2, #0
 8009136:	d101      	bne.n	800913c <LoRaMacProcess+0x858>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8009138:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 800913a:	635a      	str	r2, [r3, #52]	@ 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800913c:	2601      	movs	r6, #1
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800913e:	4c57      	ldr	r4, [pc, #348]	@ (800929c <LoRaMacProcess+0x9b8>)
 8009140:	4b62      	ldr	r3, [pc, #392]	@ (80092cc <LoRaMacProcess+0x9e8>)
 8009142:	54e6      	strb	r6, [r4, r3]
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8009144:	331c      	adds	r3, #28
 8009146:	5ce2      	ldrb	r2, [r4, r3]
 8009148:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800914a:	2901      	cmp	r1, #1
 800914c:	d805      	bhi.n	800915a <LoRaMacProcess+0x876>
        if( request == MCPS_CONFIRMED )
 800914e:	2a01      	cmp	r2, #1
 8009150:	d101      	bne.n	8009156 <LoRaMacProcess+0x872>
            if( fCtrl.Bits.Ack == 1 )
 8009152:	069b      	lsls	r3, r3, #26
 8009154:	d501      	bpl.n	800915a <LoRaMacProcess+0x876>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8009156:	f001 fa3d 	bl	800a5d4 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 800915a:	2759      	movs	r7, #89	@ 0x59
 800915c:	ab06      	add	r3, sp, #24
 800915e:	18ff      	adds	r7, r7, r3
 8009160:	9b02      	ldr	r3, [sp, #8]
 8009162:	4e5b      	ldr	r6, [pc, #364]	@ (80092d0 <LoRaMacProcess+0x9ec>)
 8009164:	2b02      	cmp	r3, #2
 8009166:	d01e      	beq.n	80091a6 <LoRaMacProcess+0x8c2>
 8009168:	2b03      	cmp	r3, #3
 800916a:	d008      	beq.n	800917e <LoRaMacProcess+0x89a>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800916c:	7b29      	ldrb	r1, [r5, #12]
 800916e:	9a04      	ldr	r2, [sp, #16]
 8009170:	0709      	lsls	r1, r1, #28
 8009172:	0f09      	lsrs	r1, r1, #28
 8009174:	a820      	add	r0, sp, #128	@ 0x80
            switch( fType )
 8009176:	2b01      	cmp	r3, #1
 8009178:	d019      	beq.n	80091ae <LoRaMacProcess+0x8ca>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800917a:	f7ff f8a3 	bl	80082c4 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800917e:	7ffb      	ldrb	r3, [r7, #31]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009180:	4a4e      	ldr	r2, [pc, #312]	@ (80092bc <LoRaMacProcess+0x9d8>)
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009182:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009184:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8009186:	50a3      	str	r3, [r4, r2]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009188:	ab26      	add	r3, sp, #152	@ 0x98
 800918a:	781a      	ldrb	r2, [r3, #0]
 800918c:	2385      	movs	r3, #133	@ 0x85
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 8009192:	2201      	movs	r2, #1
 8009194:	4b4f      	ldr	r3, [pc, #316]	@ (80092d4 <LoRaMacProcess+0x9f0>)
 8009196:	54e2      	strb	r2, [r4, r3]
                    break;
 8009198:	e00d      	b.n	80091b6 <LoRaMacProcess+0x8d2>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800919a:	2200      	movs	r2, #0
 800919c:	333a      	adds	r3, #58	@ 0x3a
 800919e:	701a      	strb	r2, [r3, #0]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80091a0:	e7cd      	b.n	800913e <LoRaMacProcess+0x85a>
 80091a2:	2602      	movs	r6, #2
 80091a4:	e7cb      	b.n	800913e <LoRaMacProcess+0x85a>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80091a6:	ab26      	add	r3, sp, #152	@ 0x98
 80091a8:	7819      	ldrb	r1, [r3, #0]
 80091aa:	9a04      	ldr	r2, [sp, #16]
 80091ac:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80091ae:	f7ff f889 	bl	80082c4 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80091b2:	7ffb      	ldrb	r3, [r7, #31]
 80091b4:	55a3      	strb	r3, [r4, r6]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80091b6:	4948      	ldr	r1, [pc, #288]	@ (80092d8 <LoRaMacProcess+0x9f4>)
 80091b8:	2302      	movs	r3, #2
 80091ba:	5c62      	ldrb	r2, [r4, r1]
 80091bc:	e672      	b.n	8008ea4 <LoRaMacProcess+0x5c0>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80091be:	9f02      	ldr	r7, [sp, #8]
 80091c0:	4e46      	ldr	r6, [pc, #280]	@ (80092dc <LoRaMacProcess+0x9f8>)
 80091c2:	9903      	ldr	r1, [sp, #12]
 80091c4:	3f01      	subs	r7, #1
 80091c6:	b2ba      	uxth	r2, r7
 80091c8:	0030      	movs	r0, r6
 80091ca:	3101      	adds	r1, #1
 80091cc:	f003 f976 	bl	800c4bc <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80091d0:	2303      	movs	r3, #3
 80091d2:	4a3e      	ldr	r2, [pc, #248]	@ (80092cc <LoRaMacProcess+0x9e8>)
 80091d4:	52a3      	strh	r3, [r4, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80091d6:	4b39      	ldr	r3, [pc, #228]	@ (80092bc <LoRaMacProcess+0x9d8>)
 80091d8:	50e6      	str	r6, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80091da:	3304      	adds	r3, #4
 80091dc:	54e7      	strb	r7, [r4, r3]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80091de:	e7ea      	b.n	80091b6 <LoRaMacProcess+0x8d2>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80091e0:	2101      	movs	r1, #1
 80091e2:	4a31      	ldr	r2, [pc, #196]	@ (80092a8 <LoRaMacProcess+0x9c4>)
 80091e4:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 80091e6:	f7fe fbc3 	bl	8007970 <PrepareRxDoneAbort>
            break;
 80091ea:	e65d      	b.n	8008ea8 <LoRaMacProcess+0x5c4>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80091ec:	4b3c      	ldr	r3, [pc, #240]	@ (80092e0 <LoRaMacProcess+0x9fc>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d000      	beq.n	80091f6 <LoRaMacProcess+0x912>
 80091f4:	e665      	b.n	8008ec2 <LoRaMacProcess+0x5de>
 80091f6:	e661      	b.n	8008ebc <LoRaMacProcess+0x5d8>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80091f8:	4b37      	ldr	r3, [pc, #220]	@ (80092d8 <LoRaMacProcess+0x9f4>)
 80091fa:	5ce3      	ldrb	r3, [r4, r3]
 80091fc:	075b      	lsls	r3, r3, #29
 80091fe:	d512      	bpl.n	8009226 <LoRaMacProcess+0x942>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009200:	2001      	movs	r0, #1
 8009202:	26d0      	movs	r6, #208	@ 0xd0
 8009204:	f001 fb0c 	bl	800a820 <LoRaMacConfirmQueueIsCmdActive>
 8009208:	00b6      	lsls	r6, r6, #2
 800920a:	2800      	cmp	r0, #0
 800920c:	d036      	beq.n	800927c <LoRaMacProcess+0x998>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800920e:	2001      	movs	r0, #1
 8009210:	f001 fad4 	bl	800a7bc <LoRaMacConfirmQueueGetStatus>
 8009214:	2800      	cmp	r0, #0
 8009216:	d102      	bne.n	800921e <LoRaMacProcess+0x93a>
                MacCtx.ChannelsNbTransCounter = 0;
 8009218:	2382      	movs	r3, #130	@ 0x82
 800921a:	00db      	lsls	r3, r3, #3
 800921c:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800921e:	2202      	movs	r2, #2
 8009220:	59a3      	ldr	r3, [r4, r6]
 8009222:	4393      	bics	r3, r2
 8009224:	51a3      	str	r3, [r4, r6]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009226:	4b2c      	ldr	r3, [pc, #176]	@ (80092d8 <LoRaMacProcess+0x9f4>)
 8009228:	5ce2      	ldrb	r2, [r4, r3]
 800922a:	07d3      	lsls	r3, r2, #31
 800922c:	d400      	bmi.n	8009230 <LoRaMacProcess+0x94c>
 800922e:	e474      	b.n	8008b1a <LoRaMacProcess+0x236>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8009230:	2387      	movs	r3, #135	@ 0x87
 8009232:	00db      	lsls	r3, r3, #3
 8009234:	5ce3      	ldrb	r3, [r4, r3]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <LoRaMacProcess+0x95a>
 800923a:	2b03      	cmp	r3, #3
 800923c:	d156      	bne.n	80092ec <LoRaMacProcess+0xa08>
    if( MacCtx.ChannelsNbTransCounter >=
 800923e:	2082      	movs	r0, #130	@ 0x82
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8009240:	4928      	ldr	r1, [pc, #160]	@ (80092e4 <LoRaMacProcess+0xa00>)
    if( MacCtx.ChannelsNbTransCounter >=
 8009242:	00c0      	lsls	r0, r0, #3
 8009244:	5c20      	ldrb	r0, [r4, r0]
 8009246:	7809      	ldrb	r1, [r1, #0]
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8009248:	4b12      	ldr	r3, [pc, #72]	@ (8009294 <LoRaMacProcess+0x9b0>)
    if( MacCtx.ChannelsNbTransCounter >=
 800924a:	4288      	cmp	r0, r1
 800924c:	d20a      	bcs.n	8009264 <LoRaMacProcess+0x980>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800924e:	0792      	lsls	r2, r2, #30
 8009250:	d400      	bmi.n	8009254 <LoRaMacProcess+0x970>
 8009252:	e07d      	b.n	8009350 <LoRaMacProcess+0xa6c>
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009254:	33fc      	adds	r3, #252	@ 0xfc
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <LoRaMacProcess+0x980>
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800925c:	4b10      	ldr	r3, [pc, #64]	@ (80092a0 <LoRaMacProcess+0x9bc>)
 800925e:	5ce3      	ldrb	r3, [r4, r3]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d175      	bne.n	8009350 <LoRaMacProcess+0xa6c>
            TimerStop( &MacCtx.TxDelayedTimer );
 8009264:	4820      	ldr	r0, [pc, #128]	@ (80092e8 <LoRaMacProcess+0xa04>)
 8009266:	f004 ffeb 	bl	800e240 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800926a:	22d0      	movs	r2, #208	@ 0xd0
 800926c:	2120      	movs	r1, #32
 800926e:	0092      	lsls	r2, r2, #2
 8009270:	58a3      	ldr	r3, [r4, r2]
 8009272:	438b      	bics	r3, r1
 8009274:	50a3      	str	r3, [r4, r2]
            StopRetransmission( );
 8009276:	f7ff fac5 	bl	8008804 <StopRetransmission.isra.0>
 800927a:	e44e      	b.n	8008b1a <LoRaMacProcess+0x236>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800927c:	2005      	movs	r0, #5
 800927e:	f001 facf 	bl	800a820 <LoRaMacConfirmQueueIsCmdActive>
 8009282:	2800      	cmp	r0, #0
 8009284:	d1cb      	bne.n	800921e <LoRaMacProcess+0x93a>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8009286:	2006      	movs	r0, #6
 8009288:	f001 faca 	bl	800a820 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800928c:	2800      	cmp	r0, #0
 800928e:	d1c6      	bne.n	800921e <LoRaMacProcess+0x93a>
 8009290:	e7c9      	b.n	8009226 <LoRaMacProcess+0x942>
 8009292:	46c0      	nop			@ (mov r8, r8)
 8009294:	20000780 	.word	0x20000780
 8009298:	20000854 	.word	0x20000854
 800929c:	20000d18 	.word	0x20000d18
 80092a0:	0000047f 	.word	0x0000047f
 80092a4:	200007c0 	.word	0x200007c0
 80092a8:	0000041d 	.word	0x0000041d
 80092ac:	2000087f 	.word	0x2000087f
 80092b0:	0000042c 	.word	0x0000042c
 80092b4:	00000421 	.word	0x00000421
 80092b8:	0000041e 	.word	0x0000041e
 80092bc:	00000424 	.word	0x00000424
 80092c0:	0000042a 	.word	0x0000042a
 80092c4:	00000439 	.word	0x00000439
 80092c8:	0000043c 	.word	0x0000043c
 80092cc:	0000041c 	.word	0x0000041c
 80092d0:	0000041f 	.word	0x0000041f
 80092d4:	00000429 	.word	0x00000429
 80092d8:	00000481 	.word	0x00000481
 80092dc:	20000f50 	.word	0x20000f50
 80092e0:	2000087c 	.word	0x2000087c
 80092e4:	200007e0 	.word	0x200007e0
 80092e8:	20001080 	.word	0x20001080
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d12f      	bne.n	8009350 <LoRaMacProcess+0xa6c>
            if( MacCtx.AckTimeoutRetry == true )
 80092f0:	4b2a      	ldr	r3, [pc, #168]	@ (800939c <LoRaMacProcess+0xab8>)
 80092f2:	5ce1      	ldrb	r1, [r4, r3]
 80092f4:	2900      	cmp	r1, #0
 80092f6:	d101      	bne.n	80092fc <LoRaMacProcess+0xa18>
 80092f8:	f7ff fc0f 	bl	8008b1a <LoRaMacProcess+0x236>
    if( MacCtx.AckTimeoutRetriesCounter >=
 80092fc:	4e28      	ldr	r6, [pc, #160]	@ (80093a0 <LoRaMacProcess+0xabc>)
        MacCtx.AckTimeoutRetries )
 80092fe:	4829      	ldr	r0, [pc, #164]	@ (80093a4 <LoRaMacProcess+0xac0>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009300:	5da3      	ldrb	r3, [r4, r6]
        MacCtx.AckTimeoutRetries )
 8009302:	5c20      	ldrb	r0, [r4, r0]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009304:	4283      	cmp	r3, r0
 8009306:	d204      	bcs.n	8009312 <LoRaMacProcess+0xa2e>
    return false;
 8009308:	2100      	movs	r1, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800930a:	0792      	lsls	r2, r2, #30
 800930c:	d501      	bpl.n	8009312 <LoRaMacProcess+0xa2e>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800930e:	4a26      	ldr	r2, [pc, #152]	@ (80093a8 <LoRaMacProcess+0xac4>)
 8009310:	5ca1      	ldrb	r1, [r4, r2]
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009312:	4f26      	ldr	r7, [pc, #152]	@ (80093ac <LoRaMacProcess+0xac8>)
 8009314:	4a26      	ldr	r2, [pc, #152]	@ (80093b0 <LoRaMacProcess+0xacc>)
 8009316:	7bff      	ldrb	r7, [r7, #15]
 8009318:	2f00      	cmp	r7, #0
 800931a:	d13c      	bne.n	8009396 <LoRaMacProcess+0xab2>
                    if( stopRetransmission == false )
 800931c:	2900      	cmp	r1, #0
 800931e:	d123      	bne.n	8009368 <LoRaMacProcess+0xa84>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8009320:	4283      	cmp	r3, r0
 8009322:	d215      	bcs.n	8009350 <LoRaMacProcess+0xa6c>
        MacCtx.AckTimeoutRetriesCounter++;
 8009324:	3301      	adds	r3, #1
 8009326:	b2db      	uxtb	r3, r3
 8009328:	55a3      	strb	r3, [r4, r6]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800932a:	07db      	lsls	r3, r3, #31
 800932c:	d510      	bpl.n	8009350 <LoRaMacProcess+0xa6c>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800932e:	2322      	movs	r3, #34	@ 0x22
 8009330:	a91c      	add	r1, sp, #112	@ 0x70
 8009332:	700b      	strb	r3, [r1, #0]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009334:	0013      	movs	r3, r2
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009336:	0016      	movs	r6, r2
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009338:	3374      	adds	r3, #116	@ 0x74
 800933a:	781b      	ldrb	r3, [r3, #0]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800933c:	3639      	adds	r6, #57	@ 0x39
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800933e:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009340:	7833      	ldrb	r3, [r6, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009342:	3240      	adds	r2, #64	@ 0x40
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009344:	704b      	strb	r3, [r1, #1]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009346:	7810      	ldrb	r0, [r2, #0]
 8009348:	f001 fef1 	bl	800b12e <RegionGetPhyParam>
 800934c:	9012      	str	r0, [sp, #72]	@ 0x48
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 800934e:	7030      	strb	r0, [r6, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009350:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 8009352:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009354:	4917      	ldr	r1, [pc, #92]	@ (80093b4 <LoRaMacProcess+0xad0>)
 8009356:	5c63      	ldrb	r3, [r4, r1]
 8009358:	4393      	bics	r3, r2
 800935a:	5463      	strb	r3, [r4, r1]
            MacCtx.AckTimeoutRetry = false;
 800935c:	4b0f      	ldr	r3, [pc, #60]	@ (800939c <LoRaMacProcess+0xab8>)
 800935e:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 8009360:	f7ff fa7e 	bl	8008860 <OnTxDelayedTimerEvent>
 8009364:	f7ff fbd9 	bl	8008b1a <LoRaMacProcess+0x236>
    if( MacCtx.McpsConfirm.AckReceived == false )
 8009368:	4b0f      	ldr	r3, [pc, #60]	@ (80093a8 <LoRaMacProcess+0xac4>)
 800936a:	5ce7      	ldrb	r7, [r4, r3]
 800936c:	2f00      	cmp	r7, #0
 800936e:	d10e      	bne.n	800938e <LoRaMacProcess+0xaaa>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8009370:	2302      	movs	r3, #2
 8009372:	a91c      	add	r1, sp, #112	@ 0x70
 8009374:	720b      	strb	r3, [r1, #8]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8009376:	4b10      	ldr	r3, [pc, #64]	@ (80093b8 <LoRaMacProcess+0xad4>)
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009378:	3240      	adds	r2, #64	@ 0x40
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800937a:	931c      	str	r3, [sp, #112]	@ 0x70
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800937c:	4b0f      	ldr	r3, [pc, #60]	@ (80093bc <LoRaMacProcess+0xad8>)
 800937e:	604b      	str	r3, [r1, #4]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009380:	7810      	ldrb	r0, [r2, #0]
 8009382:	f001 fee7 	bl	800b154 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8009386:	4b0e      	ldr	r3, [pc, #56]	@ (80093c0 <LoRaMacProcess+0xadc>)
 8009388:	54e7      	strb	r7, [r4, r3]
        MacCtx.McpsConfirm.AckReceived = false;
 800938a:	4b07      	ldr	r3, [pc, #28]	@ (80093a8 <LoRaMacProcess+0xac4>)
 800938c:	54e7      	strb	r7, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800938e:	5da2      	ldrb	r2, [r4, r6]
 8009390:	4b0c      	ldr	r3, [pc, #48]	@ (80093c4 <LoRaMacProcess+0xae0>)
 8009392:	54e2      	strb	r2, [r4, r3]
}
 8009394:	e766      	b.n	8009264 <LoRaMacProcess+0x980>
        if( stopRetransmission == true )
 8009396:	2900      	cmp	r1, #0
 8009398:	d0da      	beq.n	8009350 <LoRaMacProcess+0xa6c>
 800939a:	e763      	b.n	8009264 <LoRaMacProcess+0x980>
 800939c:	00000413 	.word	0x00000413
 80093a0:	00000412 	.word	0x00000412
 80093a4:	00000411 	.word	0x00000411
 80093a8:	0000043c 	.word	0x0000043c
 80093ac:	2000087f 	.word	0x2000087f
 80093b0:	20000780 	.word	0x20000780
 80093b4:	00000481 	.word	0x00000481
 80093b8:	20000958 	.word	0x20000958
 80093bc:	20000984 	.word	0x20000984
 80093c0:	00000414 	.word	0x00000414
 80093c4:	0000043d 	.word	0x0000043d

080093c8 <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80093c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ca:	b08f      	sub	sp, #60	@ 0x3c
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80093cc:	2503      	movs	r5, #3
{
 80093ce:	9003      	str	r0, [sp, #12]
 80093d0:	9104      	str	r1, [sp, #16]
 80093d2:	9205      	str	r2, [sp, #20]
    if( ( primitives == NULL ) ||
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d100      	bne.n	80093da <LoRaMacInitialization+0x12>
 80093d8:	e15e      	b.n	8009698 <LoRaMacInitialization+0x2d0>
 80093da:	2900      	cmp	r1, #0
 80093dc:	d100      	bne.n	80093e0 <LoRaMacInitialization+0x18>
 80093de:	e15b      	b.n	8009698 <LoRaMacInitialization+0x2d0>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80093e0:	6803      	ldr	r3, [r0, #0]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d100      	bne.n	80093e8 <LoRaMacInitialization+0x20>
 80093e6:	e157      	b.n	8009698 <LoRaMacInitialization+0x2d0>
 80093e8:	6843      	ldr	r3, [r0, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d100      	bne.n	80093f0 <LoRaMacInitialization+0x28>
 80093ee:	e153      	b.n	8009698 <LoRaMacInitialization+0x2d0>
        ( primitives->MacMcpsIndication == NULL ) ||
 80093f0:	6883      	ldr	r3, [r0, #8]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d100      	bne.n	80093f8 <LoRaMacInitialization+0x30>
 80093f6:	e14f      	b.n	8009698 <LoRaMacInitialization+0x2d0>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80093f8:	68c3      	ldr	r3, [r0, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d100      	bne.n	8009400 <LoRaMacInitialization+0x38>
 80093fe:	e14b      	b.n	8009698 <LoRaMacInitialization+0x2d0>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8009400:	0010      	movs	r0, r2
 8009402:	f001 fe8f 	bl	800b124 <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8009406:	3506      	adds	r5, #6
    if( RegionIsActive( region ) == false )
 8009408:	2800      	cmp	r0, #0
 800940a:	d100      	bne.n	800940e <LoRaMacInitialization+0x46>
 800940c:	e144      	b.n	8009698 <LoRaMacInitialization+0x2d0>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800940e:	9803      	ldr	r0, [sp, #12]
 8009410:	f001 f972 	bl	800a6f8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8009414:	22b3      	movs	r2, #179	@ 0xb3
 8009416:	4cb0      	ldr	r4, [pc, #704]	@ (80096d8 <LoRaMacInitialization+0x310>)
 8009418:	2100      	movs	r1, #0
 800941a:	0020      	movs	r0, r4
 800941c:	00d2      	lsls	r2, r2, #3
 800941e:	f003 f863 	bl	800c4e8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8009422:	22a1      	movs	r2, #161	@ 0xa1
 8009424:	4fad      	ldr	r7, [pc, #692]	@ (80096dc <LoRaMacInitialization+0x314>)
 8009426:	2100      	movs	r1, #0
 8009428:	0038      	movs	r0, r7
 800942a:	00d2      	lsls	r2, r2, #3
 800942c:	f003 f85c 	bl	800c4e8 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009430:	2201      	movs	r2, #1
    MacCtx.AckTimeoutRetries = 1;
    Nvm.MacGroup2.Region = region;
 8009432:	0026      	movs	r6, r4
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009434:	4baa      	ldr	r3, [pc, #680]	@ (80096e0 <LoRaMacInitialization+0x318>)
    Nvm.MacGroup2.Region = region;
 8009436:	3640      	adds	r6, #64	@ 0x40
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009438:	54fa      	strb	r2, [r7, r3]
    MacCtx.AckTimeoutRetries = 1;
 800943a:	4baa      	ldr	r3, [pc, #680]	@ (80096e4 <LoRaMacInitialization+0x31c>)
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800943c:	2500      	movs	r5, #0
    MacCtx.AckTimeoutRetries = 1;
 800943e:	54fa      	strb	r2, [r7, r3]
    Nvm.MacGroup2.Region = region;
 8009440:	9b05      	ldr	r3, [sp, #20]
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8009442:	0021      	movs	r1, r4
    Nvm.MacGroup2.Region = region;
 8009444:	7033      	strb	r3, [r6, #0]
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8009446:	0023      	movs	r3, r4

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8009448:	4aa7      	ldr	r2, [pc, #668]	@ (80096e8 <LoRaMacInitialization+0x320>)
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800944a:	33fc      	adds	r3, #252	@ 0xfc
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800944c:	611a      	str	r2, [r3, #16]
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800944e:	701d      	strb	r5, [r3, #0]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009450:	230f      	movs	r3, #15
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8009452:	3180      	adds	r1, #128	@ 0x80
 8009454:	700d      	strb	r5, [r1, #0]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009456:	ad09      	add	r5, sp, #36	@ 0x24
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009458:	0029      	movs	r1, r5
 800945a:	9805      	ldr	r0, [sp, #20]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800945c:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800945e:	f001 fe66 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8009462:	1e43      	subs	r3, r0, #1
 8009464:	4198      	sbcs	r0, r3
 8009466:	0023      	movs	r3, r4

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009468:	210a      	movs	r1, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800946a:	33ff      	adds	r3, #255	@ 0xff
    getPhy.Attribute = PHY_DEF_TX_POWER;
 800946c:	7029      	strb	r1, [r5, #0]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800946e:	7058      	strb	r0, [r3, #1]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009470:	0029      	movs	r1, r5
 8009472:	7830      	ldrb	r0, [r6, #0]
 8009474:	f001 fe5b 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8009478:	0023      	movs	r3, r4
 800947a:	33c4      	adds	r3, #196	@ 0xc4
 800947c:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_TX_DR;
 800947e:	2006      	movs	r0, #6
 8009480:	7028      	strb	r0, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009482:	0029      	movs	r1, r5
 8009484:	7830      	ldrb	r0, [r6, #0]
 8009486:	f001 fe52 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800948a:	0023      	movs	r3, r4
 800948c:	33c5      	adds	r3, #197	@ 0xc5
 800948e:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009490:	2310      	movs	r3, #16
 8009492:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009494:	0029      	movs	r1, r5
 8009496:	7830      	ldrb	r0, [r6, #0]
 8009498:	f001 fe49 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800949c:	4b93      	ldr	r3, [pc, #588]	@ (80096ec <LoRaMacInitialization+0x324>)

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800949e:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80094a0:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80094a2:	2311      	movs	r3, #17
 80094a4:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094a6:	7830      	ldrb	r0, [r6, #0]
 80094a8:	f001 fe41 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80094ac:	4b90      	ldr	r3, [pc, #576]	@ (80096f0 <LoRaMacInitialization+0x328>)

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094ae:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80094b0:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80094b2:	2312      	movs	r3, #18
 80094b4:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094b6:	7830      	ldrb	r0, [r6, #0]
 80094b8:	f001 fe39 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80094bc:	4b8d      	ldr	r3, [pc, #564]	@ (80096f4 <LoRaMacInitialization+0x32c>)

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094be:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80094c0:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80094c2:	2313      	movs	r3, #19
 80094c4:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094c6:	7830      	ldrb	r0, [r6, #0]
 80094c8:	f001 fe31 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80094cc:	4b8a      	ldr	r3, [pc, #552]	@ (80096f8 <LoRaMacInitialization+0x330>)

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094ce:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80094d0:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80094d2:	2314      	movs	r3, #20
 80094d4:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094d6:	7830      	ldrb	r0, [r6, #0]
 80094d8:	f001 fe29 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80094dc:	4b87      	ldr	r3, [pc, #540]	@ (80096fc <LoRaMacInitialization+0x334>)

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094de:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80094e0:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80094e2:	2317      	movs	r3, #23
 80094e4:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094e6:	7830      	ldrb	r0, [r6, #0]
 80094e8:	f001 fe21 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80094ec:	0023      	movs	r3, r4
 80094ee:	33a1      	adds	r3, #161	@ 0xa1
 80094f0:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80094f2:	2318      	movs	r3, #24
 80094f4:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094f6:	0029      	movs	r1, r5
 80094f8:	7830      	ldrb	r0, [r6, #0]
 80094fa:	f001 fe18 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80094fe:	0023      	movs	r3, r4
 8009500:	33a4      	adds	r3, #164	@ 0xa4
 8009502:	6018      	str	r0, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8009504:	0023      	movs	r3, r4
 8009506:	33ac      	adds	r3, #172	@ 0xac
 8009508:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800950a:	2319      	movs	r3, #25
 800950c:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800950e:	0029      	movs	r1, r5
 8009510:	7830      	ldrb	r0, [r6, #0]
 8009512:	f001 fe0c 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009516:	0023      	movs	r3, r4
 8009518:	b2c0      	uxtb	r0, r0
 800951a:	33a8      	adds	r3, #168	@ 0xa8
 800951c:	7018      	strb	r0, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800951e:	0023      	movs	r3, r4
 8009520:	33b0      	adds	r3, #176	@ 0xb0
 8009522:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8009524:	231e      	movs	r3, #30
 8009526:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009528:	0029      	movs	r1, r5
 800952a:	7830      	ldrb	r0, [r6, #0]
 800952c:	f001 fdff 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8009530:	0023      	movs	r3, r4
 8009532:	33b4      	adds	r3, #180	@ 0xb4
 8009534:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009536:	231f      	movs	r3, #31
 8009538:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800953a:	0029      	movs	r1, r5
 800953c:	7830      	ldrb	r0, [r6, #0]
 800953e:	f001 fdf6 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8009542:	0023      	movs	r3, r4
 8009544:	33b5      	adds	r3, #181	@ 0xb5
 8009546:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009548:	2320      	movs	r3, #32
 800954a:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800954c:	0029      	movs	r1, r5
 800954e:	7830      	ldrb	r0, [r6, #0]
 8009550:	f001 fded 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009554:	0023      	movs	r3, r4
 8009556:	33b8      	adds	r3, #184	@ 0xb8
 8009558:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800955a:	2321      	movs	r3, #33	@ 0x21
 800955c:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800955e:	0029      	movs	r1, r5
 8009560:	7830      	ldrb	r0, [r6, #0]
 8009562:	f001 fde4 	bl	800b12e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8009566:	0023      	movs	r3, r4
 8009568:	33bc      	adds	r3, #188	@ 0xbc
 800956a:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800956c:	230b      	movs	r3, #11
 800956e:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009570:	0029      	movs	r1, r5
 8009572:	7830      	ldrb	r0, [r6, #0]
 8009574:	f001 fddb 	bl	800b12e <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 8009578:	23fd      	movs	r3, #253	@ 0xfd
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	52f8      	strh	r0, [r7, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800957e:	230c      	movs	r3, #12
 8009580:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009582:	0029      	movs	r1, r5
 8009584:	7830      	ldrb	r0, [r6, #0]
 8009586:	f001 fdd2 	bl	800b12e <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 800958a:	4b5d      	ldr	r3, [pc, #372]	@ (8009700 <LoRaMacInitialization+0x338>)

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800958c:	2201      	movs	r2, #1
    MacCtx.AdrAckDelay = phyParam.Value;
 800958e:	52f8      	strh	r0, [r7, r3]
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8009590:	0023      	movs	r3, r4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8009592:	210a      	movs	r1, #10
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8009594:	33a0      	adds	r3, #160	@ 0xa0
 8009596:	701a      	strb	r2, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8009598:	4b5a      	ldr	r3, [pc, #360]	@ (8009704 <LoRaMacInitialization+0x33c>)
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800959a:	9008      	str	r0, [sp, #32]
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800959c:	67d9      	str	r1, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800959e:	0023      	movs	r3, r4
 80095a0:	2006      	movs	r0, #6
 80095a2:	3388      	adds	r3, #136	@ 0x88
 80095a4:	7018      	strb	r0, [r3, #0]

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80095a6:	0023      	movs	r3, r4
 80095a8:	3348      	adds	r3, #72	@ 0x48
 80095aa:	7018      	strb	r0, [r3, #0]
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80095ac:	4b4f      	ldr	r3, [pc, #316]	@ (80096ec <LoRaMacInitialization+0x324>)
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80095ae:	2500      	movs	r5, #0
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80095b0:	681b      	ldr	r3, [r3, #0]
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80095b2:	6461      	str	r1, [r4, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80095b4:	64e3      	str	r3, [r4, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80095b6:	4b4e      	ldr	r3, [pc, #312]	@ (80096f0 <LoRaMacInitialization+0x328>)
    params.Type = INIT_TYPE_DEFAULTS;
 80095b8:	a90b      	add	r1, sp, #44	@ 0x2c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80095ba:	681b      	ldr	r3, [r3, #0]
    params.Type = INIT_TYPE_DEFAULTS;
 80095bc:	720d      	strb	r5, [r1, #8]
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80095be:	6523      	str	r3, [r4, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80095c0:	4b4c      	ldr	r3, [pc, #304]	@ (80096f4 <LoRaMacInitialization+0x32c>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6563      	str	r3, [r4, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80095c6:	4b4c      	ldr	r3, [pc, #304]	@ (80096f8 <LoRaMacInitialization+0x330>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	65a3      	str	r3, [r4, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80095cc:	4b4b      	ldr	r3, [pc, #300]	@ (80096fc <LoRaMacInitialization+0x334>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	65e3      	str	r3, [r4, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80095d2:	0023      	movs	r3, r4
 80095d4:	3360      	adds	r3, #96	@ 0x60
 80095d6:	701a      	strb	r2, [r3, #0]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80095d8:	4b4b      	ldr	r3, [pc, #300]	@ (8009708 <LoRaMacInitialization+0x340>)
 80095da:	930b      	str	r3, [sp, #44]	@ 0x2c
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80095dc:	4b4b      	ldr	r3, [pc, #300]	@ (800970c <LoRaMacInitialization+0x344>)
 80095de:	604b      	str	r3, [r1, #4]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80095e0:	7830      	ldrb	r0, [r6, #0]
 80095e2:	f001 fdb7 	bl	800b154 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 80095e6:	23d2      	movs	r3, #210	@ 0xd2
 80095e8:	9904      	ldr	r1, [sp, #16]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	50f9      	str	r1, [r7, r3]
    ResetMacParameters( );
 80095ee:	f7fe fadd 	bl	8007bac <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80095f2:	0023      	movs	r3, r4
 80095f4:	2201      	movs	r2, #1
 80095f6:	33fd      	adds	r3, #253	@ 0xfd
 80095f8:	701a      	strb	r2, [r3, #0]

    MacCtx.MacPrimitives = primitives;
 80095fa:	23d1      	movs	r3, #209	@ 0xd1
 80095fc:	9903      	ldr	r1, [sp, #12]
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	50f9      	str	r1, [r7, r3]
    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
    Nvm.MacGroup1.AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8009602:	2101      	movs	r1, #1
    MacCtx.MacFlags.Value = 0;
 8009604:	4b42      	ldr	r3, [pc, #264]	@ (8009710 <LoRaMacInitialization+0x348>)
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8009606:	62e5      	str	r5, [r4, #44]	@ 0x2c
    MacCtx.MacFlags.Value = 0;
 8009608:	54fd      	strb	r5, [r7, r3]
    MacCtx.MacState = LORAMAC_STOPPED;
 800960a:	3b42      	subs	r3, #66	@ 0x42
 800960c:	3bff      	subs	r3, #255	@ 0xff
 800960e:	50fa      	str	r2, [r7, r3]
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009610:	6325      	str	r5, [r4, #48]	@ 0x30
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8009612:	002a      	movs	r2, r5
 8009614:	4b3f      	ldr	r3, [pc, #252]	@ (8009714 <LoRaMacInitialization+0x34c>)
 8009616:	9500      	str	r5, [sp, #0]
 8009618:	4249      	negs	r1, r1
 800961a:	483f      	ldr	r0, [pc, #252]	@ (8009718 <LoRaMacInitialization+0x350>)
 800961c:	f004 fdb2 	bl	800e184 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8009620:	2101      	movs	r1, #1
 8009622:	002a      	movs	r2, r5
 8009624:	4b3d      	ldr	r3, [pc, #244]	@ (800971c <LoRaMacInitialization+0x354>)
 8009626:	9500      	str	r5, [sp, #0]
 8009628:	4249      	negs	r1, r1
 800962a:	483d      	ldr	r0, [pc, #244]	@ (8009720 <LoRaMacInitialization+0x358>)
 800962c:	f004 fdaa 	bl	800e184 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8009630:	2101      	movs	r1, #1
 8009632:	002a      	movs	r2, r5
 8009634:	4b3b      	ldr	r3, [pc, #236]	@ (8009724 <LoRaMacInitialization+0x35c>)
 8009636:	9500      	str	r5, [sp, #0]
 8009638:	4249      	negs	r1, r1
 800963a:	483b      	ldr	r0, [pc, #236]	@ (8009728 <LoRaMacInitialization+0x360>)
 800963c:	f004 fda2 	bl	800e184 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8009640:	2101      	movs	r1, #1
 8009642:	002a      	movs	r2, r5
 8009644:	4249      	negs	r1, r1
 8009646:	4b39      	ldr	r3, [pc, #228]	@ (800972c <LoRaMacInitialization+0x364>)
 8009648:	9500      	str	r5, [sp, #0]
 800964a:	4839      	ldr	r0, [pc, #228]	@ (8009730 <LoRaMacInitialization+0x368>)

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800964c:	ad06      	add	r5, sp, #24
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800964e:	f004 fd99 	bl	800e184 <UTIL_TIMER_Create>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8009652:	0028      	movs	r0, r5
 8009654:	f004 fd2e 	bl	800e0b4 <SysTimeGetMcuTime>
 8009658:	1d63      	adds	r3, r4, #5
 800965a:	33ff      	adds	r3, #255	@ 0xff
 800965c:	cd06      	ldmia	r5!, {r1, r2}
 800965e:	c306      	stmia	r3!, {r1, r2}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8009660:	22d3      	movs	r2, #211	@ 0xd3
 8009662:	4b34      	ldr	r3, [pc, #208]	@ (8009734 <LoRaMacInitialization+0x36c>)
 8009664:	0092      	lsls	r2, r2, #2
 8009666:	50bb      	str	r3, [r7, r2]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8009668:	4b33      	ldr	r3, [pc, #204]	@ (8009738 <LoRaMacInitialization+0x370>)
 800966a:	3208      	adds	r2, #8
 800966c:	50bb      	str	r3, [r7, r2]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800966e:	4b33      	ldr	r3, [pc, #204]	@ (800973c <LoRaMacInitialization+0x374>)
 8009670:	3208      	adds	r2, #8
 8009672:	50bb      	str	r3, [r7, r2]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8009674:	4b32      	ldr	r3, [pc, #200]	@ (8009740 <LoRaMacInitialization+0x378>)
 8009676:	3a0c      	subs	r2, #12
 8009678:	50bb      	str	r3, [r7, r2]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 800967a:	4e32      	ldr	r6, [pc, #200]	@ (8009744 <LoRaMacInitialization+0x37c>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800967c:	4b32      	ldr	r3, [pc, #200]	@ (8009748 <LoRaMacInitialization+0x380>)
 800967e:	3208      	adds	r2, #8
 8009680:	50bb      	str	r3, [r7, r2]
    Radio.Init( &MacCtx.RadioEvents );
 8009682:	4832      	ldr	r0, [pc, #200]	@ (800974c <LoRaMacInitialization+0x384>)
 8009684:	6833      	ldr	r3, [r6, #0]
 8009686:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8009688:	9b04      	ldr	r3, [sp, #16]
 800968a:	4831      	ldr	r0, [pc, #196]	@ (8009750 <LoRaMacInitialization+0x388>)
 800968c:	6899      	ldr	r1, [r3, #8]
 800968e:	f7fd fa5b 	bl	8006b48 <SecureElementInit>
 8009692:	2800      	cmp	r0, #0
 8009694:	d003      	beq.n	800969e <LoRaMacInitialization+0x2d6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009696:	2511      	movs	r5, #17
    Radio.Sleep( );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 8009698:	0028      	movs	r0, r5
 800969a:	b00f      	add	sp, #60	@ 0x3c
 800969c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800969e:	0020      	movs	r0, r4
 80096a0:	f001 f9e4 	bl	800aa6c <LoRaMacCryptoInit>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d1f6      	bne.n	8009696 <LoRaMacInitialization+0x2ce>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80096a8:	f000 ff06 	bl	800a4b8 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80096ac:	2513      	movs	r5, #19
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d1f2      	bne.n	8009698 <LoRaMacInitialization+0x2d0>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80096b2:	4828      	ldr	r0, [pc, #160]	@ (8009754 <LoRaMacInitialization+0x38c>)
 80096b4:	f001 fa4c 	bl	800ab50 <LoRaMacCryptoSetMulticastReference>
 80096b8:	1e05      	subs	r5, r0, #0
 80096ba:	d1ec      	bne.n	8009696 <LoRaMacInitialization+0x2ce>
    srand1( Radio.Random( ) );
 80096bc:	6973      	ldr	r3, [r6, #20]
 80096be:	4798      	blx	r3
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80096c0:	34fd      	adds	r4, #253	@ 0xfd
    srand1( Radio.Random( ) );
 80096c2:	f002 fed9 	bl	800c478 <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80096c6:	7820      	ldrb	r0, [r4, #0]
 80096c8:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 80096ca:	4798      	blx	r3
    Radio.Sleep( );
 80096cc:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80096ce:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 80096d0:	2201      	movs	r2, #1
 80096d2:	4b21      	ldr	r3, [pc, #132]	@ (8009758 <LoRaMacInitialization+0x390>)
 80096d4:	54fa      	strb	r2, [r7, r3]
    return LORAMAC_STATUS_OK;
 80096d6:	e7df      	b.n	8009698 <LoRaMacInitialization+0x2d0>
 80096d8:	20000780 	.word	0x20000780
 80096dc:	20000d18 	.word	0x20000d18
 80096e0:	00000412 	.word	0x00000412
 80096e4:	00000411 	.word	0x00000411
 80096e8:	01000300 	.word	0x01000300
 80096ec:	2000080c 	.word	0x2000080c
 80096f0:	20000810 	.word	0x20000810
 80096f4:	20000814 	.word	0x20000814
 80096f8:	20000818 	.word	0x20000818
 80096fc:	2000081c 	.word	0x2000081c
 8009700:	000003f6 	.word	0x000003f6
 8009704:	20000788 	.word	0x20000788
 8009708:	20000958 	.word	0x20000958
 800970c:	20000984 	.word	0x20000984
 8009710:	00000481 	.word	0x00000481
 8009714:	08008861 	.word	0x08008861
 8009718:	20001080 	.word	0x20001080
 800971c:	08008201 	.word	0x08008201
 8009720:	20001098 	.word	0x20001098
 8009724:	08008261 	.word	0x08008261
 8009728:	200010b0 	.word	0x200010b0
 800972c:	08007919 	.word	0x08007919
 8009730:	20001110 	.word	0x20001110
 8009734:	08007b59 	.word	0x08007b59
 8009738:	08007b09 	.word	0x08007b09
 800973c:	080078a1 	.word	0x080078a1
 8009740:	08007acd 	.word	0x08007acd
 8009744:	0800edf8 	.word	0x0800edf8
 8009748:	08007a91 	.word	0x08007a91
 800974c:	20001064 	.word	0x20001064
 8009750:	20000898 	.word	0x20000898
 8009754:	20000850 	.word	0x20000850
 8009758:	00000482 	.word	0x00000482

0800975c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800975c:	22d0      	movs	r2, #208	@ 0xd0
 800975e:	2000      	movs	r0, #0
 8009760:	4b01      	ldr	r3, [pc, #4]	@ (8009768 <LoRaMacStart+0xc>)
 8009762:	0092      	lsls	r2, r2, #2
 8009764:	5098      	str	r0, [r3, r2]
    return LORAMAC_STATUS_OK;
}
 8009766:	4770      	bx	lr
 8009768:	20000d18 	.word	0x20000d18

0800976c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800976c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800976e:	000c      	movs	r4, r1
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009770:	4929      	ldr	r1, [pc, #164]	@ (8009818 <LoRaMacQueryTxPossible+0xac>)
{
 8009772:	b089      	sub	sp, #36	@ 0x24
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009774:	000b      	movs	r3, r1
 8009776:	466a      	mov	r2, sp
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009778:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800977a:	33c5      	adds	r3, #197	@ 0xc5
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800977c:	9601      	str	r6, [sp, #4]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800977e:	781b      	ldrb	r3, [r3, #0]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
    size_t macCmdsSize = 0;
 8009780:	2700      	movs	r7, #0
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009782:	7093      	strb	r3, [r2, #2]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009784:	000b      	movs	r3, r1
 8009786:	33c4      	adds	r3, #196	@ 0xc4
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	3203      	adds	r2, #3
 800978c:	7013      	strb	r3, [r2, #0]
{
 800978e:	0005      	movs	r5, r0

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009790:	2303      	movs	r3, #3
    size_t macCmdsSize = 0;
 8009792:	9702      	str	r7, [sp, #8]
    if( txInfo == NULL )
 8009794:	42bc      	cmp	r4, r7
 8009796:	d037      	beq.n	8009808 <LoRaMacQueryTxPossible+0x9c>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8009798:	000b      	movs	r3, r1
 800979a:	33fc      	adds	r3, #252	@ 0xfc
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	a803      	add	r0, sp, #12
 80097a0:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = false;
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80097a2:	000b      	movs	r3, r1
    adrNext.UpdateChanMask = false;
 80097a4:	7107      	strb	r7, [r0, #4]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80097a6:	33fe      	adds	r3, #254	@ 0xfe
 80097a8:	781b      	ldrb	r3, [r3, #0]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80097aa:	6086      	str	r6, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80097ac:	26fd      	movs	r6, #253	@ 0xfd
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80097ae:	7143      	strb	r3, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80097b0:	4b1a      	ldr	r3, [pc, #104]	@ (800981c <LoRaMacQueryTxPossible+0xb0>)
 80097b2:	00b6      	lsls	r6, r6, #2
 80097b4:	599b      	ldr	r3, [r3, r6]
 80097b6:	9306      	str	r3, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80097b8:	8f0b      	ldrh	r3, [r1, #56]	@ 0x38
 80097ba:	ba5b      	rev16	r3, r3
 80097bc:	8203      	strh	r3, [r0, #16]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80097be:	000b      	movs	r3, r1
 80097c0:	3374      	adds	r3, #116	@ 0x74
 80097c2:	781b      	ldrb	r3, [r3, #0]
    adrNext.Region = Nvm.MacGroup2.Region;
 80097c4:	3140      	adds	r1, #64	@ 0x40
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80097c6:	7483      	strb	r3, [r0, #18]
    adrNext.Region = Nvm.MacGroup2.Region;
 80097c8:	780b      	ldrb	r3, [r1, #0]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80097ca:	4669      	mov	r1, sp
    adrNext.Region = Nvm.MacGroup2.Region;
 80097cc:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80097ce:	3102      	adds	r1, #2
 80097d0:	ab01      	add	r3, sp, #4
 80097d2:	f000 fde1 	bl	800a398 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80097d6:	466b      	mov	r3, sp
 80097d8:	2002      	movs	r0, #2
 80097da:	5618      	ldrsb	r0, [r3, r0]
 80097dc:	f7fe f884 	bl	80078e8 <GetMaxAppPayloadWithoutFOptsLength>
 80097e0:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80097e2:	a802      	add	r0, sp, #8
 80097e4:	f000 ff0a 	bl	800a5fc <LoRaMacCommandsGetSizeSerializedCmds>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80097e8:	2313      	movs	r3, #19
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80097ea:	42b8      	cmp	r0, r7
 80097ec:	d10c      	bne.n	8009808 <LoRaMacQueryTxPossible+0x9c>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80097ee:	9a02      	ldr	r2, [sp, #8]
 80097f0:	2a0f      	cmp	r2, #15
 80097f2:	d80c      	bhi.n	800980e <LoRaMacQueryTxPossible+0xa2>
 80097f4:	7863      	ldrb	r3, [r4, #1]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d809      	bhi.n	800980e <LoRaMacQueryTxPossible+0xa2>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80097fa:	18ad      	adds	r5, r5, r2
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80097fc:	1a99      	subs	r1, r3, r2
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80097fe:	42ab      	cmp	r3, r5
 8009800:	419b      	sbcs	r3, r3
 8009802:	425b      	negs	r3, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8009804:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8009806:	00db      	lsls	r3, r3, #3
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 8009808:	0018      	movs	r0, r3
 800980a:	b009      	add	sp, #36	@ 0x24
 800980c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	7023      	strb	r3, [r4, #0]
           return LORAMAC_STATUS_LENGTH_ERROR;
 8009812:	3308      	adds	r3, #8
        return LORAMAC_STATUS_LENGTH_ERROR;
 8009814:	e7f8      	b.n	8009808 <LoRaMacQueryTxPossible+0x9c>
 8009816:	46c0      	nop			@ (mov r8, r8)
 8009818:	20000780 	.word	0x20000780
 800981c:	20000d18 	.word	0x20000d18

08009820 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8009820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009822:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009824:	2003      	movs	r0, #3
    if( mibGet == NULL )
 8009826:	2c00      	cmp	r4, #0
 8009828:	d01e      	beq.n	8009868 <LoRaMacMibGetRequestConfirm+0x48>
    }

    switch( mibGet->Type )
 800982a:	7820      	ldrb	r0, [r4, #0]
 800982c:	2828      	cmp	r0, #40	@ 0x28
 800982e:	d900      	bls.n	8009832 <LoRaMacMibGetRequestConfirm+0x12>
 8009830:	e07b      	b.n	800992a <LoRaMacMibGetRequestConfirm+0x10a>
 8009832:	f7f6 fc7b 	bl	800012c <__gnu_thumb1_case_uqi>
 8009836:	1b15      	.short	0x1b15
 8009838:	2725221e 	.word	0x2725221e
 800983c:	7a7a7a2b 	.word	0x7a7a7a2b
 8009840:	7a7a7a7a 	.word	0x7a7a7a7a
 8009844:	312f2d7a 	.word	0x312f2d7a
 8009848:	44413e39 	.word	0x44413e39
 800984c:	4e4c4649 	.word	0x4e4c4649
 8009850:	5a575451 	.word	0x5a575451
 8009854:	61635f5d 	.word	0x61635f5d
 8009858:	706a6865 	.word	0x706a6865
 800985c:	7a6e      	.short	0x7a6e
 800985e:	73          	.byte	0x73
 800985f:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8009860:	4b34      	ldr	r3, [pc, #208]	@ (8009934 <LoRaMacMibGetRequestConfirm+0x114>)
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009866:	2000      	movs	r0, #0
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8009868:	b004      	add	sp, #16
 800986a:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800986c:	4b32      	ldr	r3, [pc, #200]	@ (8009938 <LoRaMacMibGetRequestConfirm+0x118>)
 800986e:	7c5b      	ldrb	r3, [r3, #17]
 8009870:	e7f8      	b.n	8009864 <LoRaMacMibGetRequestConfirm+0x44>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8009872:	f7fd facd 	bl	8006e10 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8009876:	6060      	str	r0, [r4, #4]
            break;
 8009878:	e7f5      	b.n	8009866 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800987a:	f7fd fadf 	bl	8006e3c <SecureElementGetJoinEui>
 800987e:	e7fa      	b.n	8009876 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8009880:	4b2e      	ldr	r3, [pc, #184]	@ (800993c <LoRaMacMibGetRequestConfirm+0x11c>)
 8009882:	e7ee      	b.n	8009862 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8009884:	4b2e      	ldr	r3, [pc, #184]	@ (8009940 <LoRaMacMibGetRequestConfirm+0x120>)
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8009886:	681b      	ldr	r3, [r3, #0]
            mibGet->Param.Contexts = GetNvmData( );
 8009888:	6063      	str	r3, [r4, #4]
            break;
 800988a:	e7ec      	b.n	8009866 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800988c:	4b2d      	ldr	r3, [pc, #180]	@ (8009944 <LoRaMacMibGetRequestConfirm+0x124>)
 800988e:	e7fa      	b.n	8009886 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8009890:	4b2d      	ldr	r3, [pc, #180]	@ (8009948 <LoRaMacMibGetRequestConfirm+0x128>)
 8009892:	e7e6      	b.n	8009862 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009894:	4b2d      	ldr	r3, [pc, #180]	@ (800994c <LoRaMacMibGetRequestConfirm+0x12c>)
 8009896:	e7e4      	b.n	8009862 <LoRaMacMibGetRequestConfirm+0x42>
            getPhy.Attribute = PHY_CHANNELS;
 8009898:	231d      	movs	r3, #29
 800989a:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800989c:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800989e:	4b2c      	ldr	r3, [pc, #176]	@ (8009950 <LoRaMacMibGetRequestConfirm+0x130>)
 80098a0:	7818      	ldrb	r0, [r3, #0]
 80098a2:	f001 fc44 	bl	800b12e <RegionGetPhyParam>
 80098a6:	e7e6      	b.n	8009876 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80098a8:	4b2a      	ldr	r3, [pc, #168]	@ (8009954 <LoRaMacMibGetRequestConfirm+0x134>)
 80098aa:	3404      	adds	r4, #4
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80098ac:	cb06      	ldmia	r3!, {r1, r2}
 80098ae:	c406      	stmia	r4!, {r1, r2}
            break;
 80098b0:	e7d9      	b.n	8009866 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80098b2:	4b29      	ldr	r3, [pc, #164]	@ (8009958 <LoRaMacMibGetRequestConfirm+0x138>)
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80098b4:	3404      	adds	r4, #4
 80098b6:	e7f9      	b.n	80098ac <LoRaMacMibGetRequestConfirm+0x8c>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80098b8:	4b28      	ldr	r3, [pc, #160]	@ (800995c <LoRaMacMibGetRequestConfirm+0x13c>)
 80098ba:	3404      	adds	r4, #4
 80098bc:	e7f6      	b.n	80098ac <LoRaMacMibGetRequestConfirm+0x8c>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80098be:	4b28      	ldr	r3, [pc, #160]	@ (8009960 <LoRaMacMibGetRequestConfirm+0x140>)
 80098c0:	e7f8      	b.n	80098b4 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80098c2:	231b      	movs	r3, #27
 80098c4:	a902      	add	r1, sp, #8
 80098c6:	e7e9      	b.n	800989c <LoRaMacMibGetRequestConfirm+0x7c>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80098c8:	231a      	movs	r3, #26
 80098ca:	a902      	add	r1, sp, #8
 80098cc:	e7e6      	b.n	800989c <LoRaMacMibGetRequestConfirm+0x7c>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80098ce:	4b25      	ldr	r3, [pc, #148]	@ (8009964 <LoRaMacMibGetRequestConfirm+0x144>)
 80098d0:	e7c7      	b.n	8009862 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80098d2:	4b25      	ldr	r3, [pc, #148]	@ (8009968 <LoRaMacMibGetRequestConfirm+0x148>)
 80098d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098d6:	e7d7      	b.n	8009888 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80098d8:	4b23      	ldr	r3, [pc, #140]	@ (8009968 <LoRaMacMibGetRequestConfirm+0x148>)
 80098da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098dc:	e7d4      	b.n	8009888 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80098de:	4b22      	ldr	r3, [pc, #136]	@ (8009968 <LoRaMacMibGetRequestConfirm+0x148>)
 80098e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e2:	e7d1      	b.n	8009888 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80098e4:	4b20      	ldr	r3, [pc, #128]	@ (8009968 <LoRaMacMibGetRequestConfirm+0x148>)
 80098e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098e8:	e7ce      	b.n	8009888 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80098ea:	4b1f      	ldr	r3, [pc, #124]	@ (8009968 <LoRaMacMibGetRequestConfirm+0x148>)
 80098ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098ee:	e7cb      	b.n	8009888 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80098f0:	4b1e      	ldr	r3, [pc, #120]	@ (800996c <LoRaMacMibGetRequestConfirm+0x14c>)
 80098f2:	e7b6      	b.n	8009862 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80098f4:	4b1e      	ldr	r3, [pc, #120]	@ (8009970 <LoRaMacMibGetRequestConfirm+0x150>)
 80098f6:	e7b4      	b.n	8009862 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80098f8:	4b1e      	ldr	r3, [pc, #120]	@ (8009974 <LoRaMacMibGetRequestConfirm+0x154>)
 80098fa:	e7b2      	b.n	8009862 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80098fc:	4b1e      	ldr	r3, [pc, #120]	@ (8009978 <LoRaMacMibGetRequestConfirm+0x158>)
 80098fe:	e7b0      	b.n	8009862 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8009900:	4b19      	ldr	r3, [pc, #100]	@ (8009968 <LoRaMacMibGetRequestConfirm+0x148>)
 8009902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009904:	e7c0      	b.n	8009888 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8009906:	4b1d      	ldr	r3, [pc, #116]	@ (800997c <LoRaMacMibGetRequestConfirm+0x15c>)
 8009908:	e7ab      	b.n	8009862 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800990a:	4b17      	ldr	r3, [pc, #92]	@ (8009968 <LoRaMacMibGetRequestConfirm+0x148>)
 800990c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800990e:	6063      	str	r3, [r4, #4]
            break;
 8009910:	e7a9      	b.n	8009866 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.Contexts = GetNvmData( );
 8009912:	4b15      	ldr	r3, [pc, #84]	@ (8009968 <LoRaMacMibGetRequestConfirm+0x148>)
 8009914:	e7b8      	b.n	8009888 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009916:	4b1a      	ldr	r3, [pc, #104]	@ (8009980 <LoRaMacMibGetRequestConfirm+0x160>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	e7f8      	b.n	800990e <LoRaMacMibGetRequestConfirm+0xee>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800991c:	4b05      	ldr	r3, [pc, #20]	@ (8009934 <LoRaMacMibGetRequestConfirm+0x114>)
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8009922:	f001 fcc5 	bl	800b2b0 <RegionGetVersion>
 8009926:	60a0      	str	r0, [r4, #8]
            break;
 8009928:	e79d      	b.n	8009866 <LoRaMacMibGetRequestConfirm+0x46>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800992a:	0020      	movs	r0, r4
 800992c:	f000 fdb4 	bl	800a498 <LoRaMacClassBMibGetRequestConfirm>
            break;
 8009930:	e79a      	b.n	8009868 <LoRaMacMibGetRequestConfirm+0x48>
 8009932:	46c0      	nop			@ (mov r8, r8)
 8009934:	2000087c 	.word	0x2000087c
 8009938:	2000087f 	.word	0x2000087f
 800993c:	2000087e 	.word	0x2000087e
 8009940:	20000848 	.word	0x20000848
 8009944:	2000084c 	.word	0x2000084c
 8009948:	2000087d 	.word	0x2000087d
 800994c:	20000800 	.word	0x20000800
 8009950:	200007c0 	.word	0x200007c0
 8009954:	200007e4 	.word	0x200007e4
 8009958:	20000824 	.word	0x20000824
 800995c:	200007ec 	.word	0x200007ec
 8009960:	2000082c 	.word	0x2000082c
 8009964:	200007e0 	.word	0x200007e0
 8009968:	20000780 	.word	0x20000780
 800996c:	20000845 	.word	0x20000845
 8009970:	200007b9 	.word	0x200007b9
 8009974:	20000844 	.word	0x20000844
 8009978:	200007b8 	.word	0x200007b8
 800997c:	200007c8 	.word	0x200007c8
 8009980:	2000083c 	.word	0x2000083c

08009984 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8009984:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009986:	1e04      	subs	r4, r0, #0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8009988:	d101      	bne.n	800998e <LoRaMacMibSetRequestConfirm+0xa>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800998a:	2003      	movs	r0, #3
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
            break;
        }
    }
    return status;
}
 800998c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800998e:	23d0      	movs	r3, #208	@ 0xd0
 8009990:	4dbe      	ldr	r5, [pc, #760]	@ (8009c8c <LoRaMacMibSetRequestConfirm+0x308>)
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	58eb      	ldr	r3, [r5, r3]
        return LORAMAC_STATUS_BUSY;
 8009996:	2001      	movs	r0, #1
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8009998:	079a      	lsls	r2, r3, #30
 800999a:	d4f7      	bmi.n	800998c <LoRaMacMibSetRequestConfirm+0x8>
    switch( mibSet->Type )
 800999c:	7820      	ldrb	r0, [r4, #0]
 800999e:	2827      	cmp	r0, #39	@ 0x27
 80099a0:	d900      	bls.n	80099a4 <LoRaMacMibSetRequestConfirm+0x20>
 80099a2:	e217      	b.n	8009dd4 <LoRaMacMibSetRequestConfirm+0x450>
 80099a4:	f7f6 fbd6 	bl	8000154 <__gnu_thumb1_case_uhi>
 80099a8:	002c0028 	.word	0x002c0028
 80099ac:	00390033 	.word	0x00390033
 80099b0:	0041003d 	.word	0x0041003d
 80099b4:	00470045 	.word	0x00470045
 80099b8:	00560051 	.word	0x00560051
 80099bc:	0060005b 	.word	0x0060005b
 80099c0:	006a0065 	.word	0x006a0065
 80099c4:	0074006f 	.word	0x0074006f
 80099c8:	0216007d 	.word	0x0216007d
 80099cc:	009f007f 	.word	0x009f007f
 80099d0:	00dc00b5 	.word	0x00dc00b5
 80099d4:	00ef00fd 	.word	0x00ef00fd
 80099d8:	01090101 	.word	0x01090101
 80099dc:	0111010d 	.word	0x0111010d
 80099e0:	01190115 	.word	0x01190115
 80099e4:	012f011d 	.word	0x012f011d
 80099e8:	0141014f 	.word	0x0141014f
 80099ec:	0164015e 	.word	0x0164015e
 80099f0:	016d0169 	.word	0x016d0169
 80099f4:	020b0194 	.word	0x020b0194
            status = SwitchClass( mibSet->Param.Class );
 80099f8:	7920      	ldrb	r0, [r4, #4]
 80099fa:	f7fe fb69 	bl	80080d0 <SwitchClass>
            break;
 80099fe:	e7c5      	b.n	800998c <LoRaMacMibSetRequestConfirm+0x8>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8009a00:	7923      	ldrb	r3, [r4, #4]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d0c1      	beq.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8009a06:	4aa2      	ldr	r2, [pc, #648]	@ (8009c90 <LoRaMacMibSetRequestConfirm+0x30c>)
 8009a08:	7453      	strb	r3, [r2, #17]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	e7be      	b.n	800998c <LoRaMacMibSetRequestConfirm+0x8>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8009a0e:	6860      	ldr	r0, [r4, #4]
 8009a10:	f7fd f9f0 	bl	8006df4 <SecureElementSetDevEui>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d0f8      	beq.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
 8009a18:	e7b7      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
 8009a1a:	6860      	ldr	r0, [r4, #4]
 8009a1c:	f7fd f9fe 	bl	8006e1c <SecureElementSetJoinEui>
 8009a20:	e7f8      	b.n	8009a14 <LoRaMacMibSetRequestConfirm+0x90>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8009a22:	4b9c      	ldr	r3, [pc, #624]	@ (8009c94 <LoRaMacMibSetRequestConfirm+0x310>)
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8009a24:	7922      	ldrb	r2, [r4, #4]
 8009a26:	701a      	strb	r2, [r3, #0]
            break;
 8009a28:	e7ef      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8009a2a:	4b9b      	ldr	r3, [pc, #620]	@ (8009c98 <LoRaMacMibSetRequestConfirm+0x314>)
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8009a2c:	6862      	ldr	r2, [r4, #4]
 8009a2e:	601a      	str	r2, [r3, #0]
            break;
 8009a30:	e7eb      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8009a32:	4b9a      	ldr	r3, [pc, #616]	@ (8009c9c <LoRaMacMibSetRequestConfirm+0x318>)
 8009a34:	e7fa      	b.n	8009a2c <LoRaMacMibSetRequestConfirm+0xa8>
            if( mibSet->Param.AppKey != NULL )
 8009a36:	6861      	ldr	r1, [r4, #4]
 8009a38:	2900      	cmp	r1, #0
 8009a3a:	d0a6      	beq.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	f001 f99f 	bl	800ad80 <LoRaMacCryptoSetKey>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d0e1      	beq.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009a46:	2011      	movs	r0, #17
 8009a48:	e7a0      	b.n	800998c <LoRaMacMibSetRequestConfirm+0x8>
            if( mibSet->Param.NwkKey != NULL )
 8009a4a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8009a4c:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 8009a4e:	2900      	cmp	r1, #0
 8009a50:	d1f5      	bne.n	8009a3e <LoRaMacMibSetRequestConfirm+0xba>
 8009a52:	e79a      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
            if( mibSet->Param.NwkSKey != NULL )
 8009a54:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8009a56:	2002      	movs	r0, #2
            if( mibSet->Param.NwkSKey != NULL )
 8009a58:	2900      	cmp	r1, #0
 8009a5a:	d1f0      	bne.n	8009a3e <LoRaMacMibSetRequestConfirm+0xba>
 8009a5c:	e795      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
            if( mibSet->Param.AppSKey != NULL )
 8009a5e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8009a60:	2003      	movs	r0, #3
            if( mibSet->Param.AppSKey != NULL )
 8009a62:	2900      	cmp	r1, #0
 8009a64:	d1eb      	bne.n	8009a3e <LoRaMacMibSetRequestConfirm+0xba>
 8009a66:	e790      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
            if( mibSet->Param.McKEKey != NULL )
 8009a68:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8009a6a:	207f      	movs	r0, #127	@ 0x7f
            if( mibSet->Param.McKEKey != NULL )
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	d1e6      	bne.n	8009a3e <LoRaMacMibSetRequestConfirm+0xba>
 8009a70:	e78b      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
            if( mibSet->Param.McKey0 != NULL )
 8009a72:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8009a74:	2080      	movs	r0, #128	@ 0x80
            if( mibSet->Param.McKey0 != NULL )
 8009a76:	2900      	cmp	r1, #0
 8009a78:	d1e1      	bne.n	8009a3e <LoRaMacMibSetRequestConfirm+0xba>
 8009a7a:	e786      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
            if( mibSet->Param.McAppSKey0 != NULL )
 8009a7c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8009a7e:	2081      	movs	r0, #129	@ 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 8009a80:	2900      	cmp	r1, #0
 8009a82:	d1dc      	bne.n	8009a3e <LoRaMacMibSetRequestConfirm+0xba>
 8009a84:	e781      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009a86:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8009a88:	2082      	movs	r0, #130	@ 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009a8a:	2900      	cmp	r1, #0
 8009a8c:	d1d7      	bne.n	8009a3e <LoRaMacMibSetRequestConfirm+0xba>
 8009a8e:	e77c      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8009a90:	7920      	ldrb	r0, [r4, #4]
 8009a92:	4b83      	ldr	r3, [pc, #524]	@ (8009ca0 <LoRaMacMibSetRequestConfirm+0x31c>)
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009a94:	4c83      	ldr	r4, [pc, #524]	@ (8009ca4 <LoRaMacMibSetRequestConfirm+0x320>)
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8009a96:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009a98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009a9a:	4798      	blx	r3
            Radio.Sleep( );
 8009a9c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009a9e:	4798      	blx	r3
            break;
 8009aa0:	e7b3      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8009aa2:	4b81      	ldr	r3, [pc, #516]	@ (8009ca8 <LoRaMacMibSetRequestConfirm+0x324>)
 8009aa4:	e7be      	b.n	8009a24 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009aa6:	466a      	mov	r2, sp
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009aa8:	4d80      	ldr	r5, [pc, #512]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009aaa:	7a23      	ldrb	r3, [r4, #8]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8009aac:	002e      	movs	r6, r5
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009aae:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009ab0:	4b7f      	ldr	r3, [pc, #508]	@ (8009cb0 <LoRaMacMibSetRequestConfirm+0x32c>)
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8009ab2:	3640      	adds	r6, #64	@ 0x40
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009ab4:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8009ab6:	4669      	mov	r1, sp
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009ab8:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8009aba:	7830      	ldrb	r0, [r6, #0]
 8009abc:	2207      	movs	r2, #7
 8009abe:	f001 fb50 	bl	800b162 <RegionVerify>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d100      	bne.n	8009ac8 <LoRaMacMibSetRequestConfirm+0x144>
 8009ac6:	e760      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8009ac8:	6863      	ldr	r3, [r4, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8009aca:	2200      	movs	r2, #0
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8009acc:	9300      	str	r3, [sp, #0]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8009ace:	4669      	mov	r1, sp
 8009ad0:	7830      	ldrb	r0, [r6, #0]
 8009ad2:	f001 fb46 	bl	800b162 <RegionVerify>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d100      	bne.n	8009adc <LoRaMacMibSetRequestConfirm+0x158>
 8009ada:	e756      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8009adc:	3564      	adds	r5, #100	@ 0x64
 8009ade:	3404      	adds	r4, #4
 8009ae0:	cc06      	ldmia	r4!, {r1, r2}
 8009ae2:	c506      	stmia	r5!, {r1, r2}
 8009ae4:	e791      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009ae6:	466a      	mov	r2, sp
 8009ae8:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009aea:	4d70      	ldr	r5, [pc, #448]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009aec:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009aee:	4b70      	ldr	r3, [pc, #448]	@ (8009cb0 <LoRaMacMibSetRequestConfirm+0x32c>)
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009af0:	4669      	mov	r1, sp
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009af6:	002b      	movs	r3, r5
 8009af8:	3340      	adds	r3, #64	@ 0x40
 8009afa:	2207      	movs	r2, #7
 8009afc:	7818      	ldrb	r0, [r3, #0]
 8009afe:	f001 fb30 	bl	800b162 <RegionVerify>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8009b02:	35a4      	adds	r5, #164	@ 0xa4
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d100      	bne.n	8009b0a <LoRaMacMibSetRequestConfirm+0x186>
 8009b08:	e73f      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8009b0a:	3404      	adds	r4, #4
 8009b0c:	cc03      	ldmia	r4!, {r0, r1}
 8009b0e:	c503      	stmia	r5!, {r0, r1}
 8009b10:	e77b      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009b12:	466a      	mov	r2, sp
 8009b14:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b16:	4d65      	ldr	r5, [pc, #404]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009b18:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b1a:	4b65      	ldr	r3, [pc, #404]	@ (8009cb0 <LoRaMacMibSetRequestConfirm+0x32c>)
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009b1c:	4669      	mov	r1, sp
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009b22:	002b      	movs	r3, r5
 8009b24:	3340      	adds	r3, #64	@ 0x40
 8009b26:	2207      	movs	r2, #7
 8009b28:	7818      	ldrb	r0, [r3, #0]
 8009b2a:	f001 fb1a 	bl	800b162 <RegionVerify>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d100      	bne.n	8009b34 <LoRaMacMibSetRequestConfirm+0x1b0>
 8009b32:	e72a      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8009b34:	002b      	movs	r3, r5
 8009b36:	3404      	adds	r4, #4
 8009b38:	336c      	adds	r3, #108	@ 0x6c
 8009b3a:	cc06      	ldmia	r4!, {r1, r2}
 8009b3c:	c306      	stmia	r3!, {r1, r2}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8009b3e:	002b      	movs	r3, r5
 8009b40:	33fc      	adds	r3, #252	@ 0xfc
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d000      	beq.n	8009b4a <LoRaMacMibSetRequestConfirm+0x1c6>
 8009b48:	e75f      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
 8009b4a:	35ff      	adds	r5, #255	@ 0xff
 8009b4c:	7c6b      	ldrb	r3, [r5, #17]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d100      	bne.n	8009b54 <LoRaMacMibSetRequestConfirm+0x1d0>
 8009b52:	e75a      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
                    Radio.Sleep( );
 8009b54:	4b53      	ldr	r3, [pc, #332]	@ (8009ca4 <LoRaMacMibSetRequestConfirm+0x320>)
 8009b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b58:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 8009b5a:	f7fe fa83 	bl	8008064 <OpenContinuousRxCWindow>
 8009b5e:	e754      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009b60:	466a      	mov	r2, sp
 8009b62:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b64:	4d51      	ldr	r5, [pc, #324]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009b66:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b68:	4b51      	ldr	r3, [pc, #324]	@ (8009cb0 <LoRaMacMibSetRequestConfirm+0x32c>)
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009b6a:	4669      	mov	r1, sp
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009b70:	002b      	movs	r3, r5
 8009b72:	3340      	adds	r3, #64	@ 0x40
 8009b74:	2207      	movs	r2, #7
 8009b76:	7818      	ldrb	r0, [r3, #0]
 8009b78:	f001 faf3 	bl	800b162 <RegionVerify>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d100      	bne.n	8009b82 <LoRaMacMibSetRequestConfirm+0x1fe>
 8009b80:	e703      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8009b82:	35ac      	adds	r5, #172	@ 0xac
 8009b84:	e7c1      	b.n	8009b0a <LoRaMacMibSetRequestConfirm+0x186>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8009b86:	6863      	ldr	r3, [r4, #4]
 8009b88:	9300      	str	r3, [sp, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8009b8a:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8009b8c:	466a      	mov	r2, sp
 8009b8e:	7113      	strb	r3, [r2, #4]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8009b90:	4b48      	ldr	r3, [pc, #288]	@ (8009cb4 <LoRaMacMibSetRequestConfirm+0x330>)
 8009b92:	4669      	mov	r1, sp
 8009b94:	7818      	ldrb	r0, [r3, #0]
 8009b96:	f001 faf7 	bl	800b188 <RegionChanMaskSet>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d000      	beq.n	8009ba0 <LoRaMacMibSetRequestConfirm+0x21c>
 8009b9e:	e734      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
 8009ba0:	e6f3      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8009ba2:	6863      	ldr	r3, [r4, #4]
 8009ba4:	9300      	str	r3, [sp, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	e7f0      	b.n	8009b8c <LoRaMacMibSetRequestConfirm+0x208>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8009baa:	7923      	ldrb	r3, [r4, #4]
 8009bac:	1e5a      	subs	r2, r3, #1
 8009bae:	2a0e      	cmp	r2, #14
 8009bb0:	d900      	bls.n	8009bb4 <LoRaMacMibSetRequestConfirm+0x230>
 8009bb2:	e6ea      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8009bb4:	4a40      	ldr	r2, [pc, #256]	@ (8009cb8 <LoRaMacMibSetRequestConfirm+0x334>)
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8009bb6:	7013      	strb	r3, [r2, #0]
            break;
 8009bb8:	e727      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8009bba:	4b3c      	ldr	r3, [pc, #240]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
 8009bbc:	6862      	ldr	r2, [r4, #4]
 8009bbe:	64da      	str	r2, [r3, #76]	@ 0x4c
            break;
 8009bc0:	e723      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8009bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
 8009bc4:	6862      	ldr	r2, [r4, #4]
 8009bc6:	651a      	str	r2, [r3, #80]	@ 0x50
            break;
 8009bc8:	e71f      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8009bca:	4b38      	ldr	r3, [pc, #224]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
 8009bcc:	6862      	ldr	r2, [r4, #4]
 8009bce:	655a      	str	r2, [r3, #84]	@ 0x54
            break;
 8009bd0:	e71b      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8009bd2:	4b36      	ldr	r3, [pc, #216]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
 8009bd4:	6862      	ldr	r2, [r4, #4]
 8009bd6:	659a      	str	r2, [r3, #88]	@ 0x58
            break;
 8009bd8:	e717      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8009bda:	4b34      	ldr	r3, [pc, #208]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
 8009bdc:	6862      	ldr	r2, [r4, #4]
 8009bde:	65da      	str	r2, [r3, #92]	@ 0x5c
            break;
 8009be0:	e713      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009be2:	466a      	mov	r2, sp
 8009be4:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8009be6:	4669      	mov	r1, sp
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009be8:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8009bea:	4b32      	ldr	r3, [pc, #200]	@ (8009cb4 <LoRaMacMibSetRequestConfirm+0x330>)
 8009bec:	2206      	movs	r2, #6
 8009bee:	7818      	ldrb	r0, [r3, #0]
 8009bf0:	4c2e      	ldr	r4, [pc, #184]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
 8009bf2:	f001 fab6 	bl	800b162 <RegionVerify>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8009bf6:	34c5      	adds	r4, #197	@ 0xc5
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d100      	bne.n	8009bfe <LoRaMacMibSetRequestConfirm+0x27a>
 8009bfc:	e6c5      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8009bfe:	466b      	mov	r3, sp
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	7023      	strb	r3, [r4, #0]
 8009c04:	e701      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8009c06:	466a      	mov	r2, sp
 8009c08:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009c0a:	4c28      	ldr	r4, [pc, #160]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8009c0c:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8009cbc <LoRaMacMibSetRequestConfirm+0x338>)
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009c10:	4669      	mov	r1, sp
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	7093      	strb	r3, [r2, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009c16:	0023      	movs	r3, r4
 8009c18:	3340      	adds	r3, #64	@ 0x40
 8009c1a:	2205      	movs	r2, #5
 8009c1c:	7818      	ldrb	r0, [r3, #0]
 8009c1e:	f001 faa0 	bl	800b162 <RegionVerify>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009c22:	3439      	adds	r4, #57	@ 0x39
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d1ea      	bne.n	8009bfe <LoRaMacMibSetRequestConfirm+0x27a>
 8009c28:	e6af      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009c2a:	466a      	mov	r2, sp
 8009c2c:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009c2e:	4669      	mov	r1, sp
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009c30:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009c32:	4b20      	ldr	r3, [pc, #128]	@ (8009cb4 <LoRaMacMibSetRequestConfirm+0x330>)
 8009c34:	220a      	movs	r2, #10
 8009c36:	7818      	ldrb	r0, [r3, #0]
 8009c38:	4c1c      	ldr	r4, [pc, #112]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
 8009c3a:	f001 fa92 	bl	800b162 <RegionVerify>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8009c3e:	34c4      	adds	r4, #196	@ 0xc4
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d1dc      	bne.n	8009bfe <LoRaMacMibSetRequestConfirm+0x27a>
 8009c44:	e6a1      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009c46:	466a      	mov	r2, sp
 8009c48:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009c4a:	4669      	mov	r1, sp
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009c4c:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009c4e:	4b19      	ldr	r3, [pc, #100]	@ (8009cb4 <LoRaMacMibSetRequestConfirm+0x330>)
 8009c50:	2209      	movs	r2, #9
 8009c52:	7818      	ldrb	r0, [r3, #0]
 8009c54:	4c15      	ldr	r4, [pc, #84]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
 8009c56:	f001 fa84 	bl	800b162 <RegionVerify>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d100      	bne.n	8009c60 <LoRaMacMibSetRequestConfirm+0x2dc>
 8009c5e:	e694      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8009c60:	3438      	adds	r4, #56	@ 0x38
 8009c62:	e7cc      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0x27a>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8009c64:	6862      	ldr	r2, [r4, #4]
 8009c66:	4b11      	ldr	r3, [pc, #68]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
 8009c68:	4915      	ldr	r1, [pc, #84]	@ (8009cc0 <LoRaMacMibSetRequestConfirm+0x33c>)
 8009c6a:	645a      	str	r2, [r3, #68]	@ 0x44
 8009c6c:	67ca      	str	r2, [r1, #124]	@ 0x7c
            break;
 8009c6e:	e6cc      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8009c70:	4a14      	ldr	r2, [pc, #80]	@ (8009cc4 <LoRaMacMibSetRequestConfirm+0x340>)
 8009c72:	7923      	ldrb	r3, [r4, #4]
 8009c74:	7013      	strb	r3, [r2, #0]
 8009c76:	4a14      	ldr	r2, [pc, #80]	@ (8009cc8 <LoRaMacMibSetRequestConfirm+0x344>)
 8009c78:	e79d      	b.n	8009bb6 <LoRaMacMibSetRequestConfirm+0x232>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8009c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8009cac <LoRaMacMibSetRequestConfirm+0x328>)
 8009c7c:	6862      	ldr	r2, [r4, #4]
 8009c7e:	67da      	str	r2, [r3, #124]	@ 0x7c
            break;
 8009c80:	e6c3      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8009c82:	4b12      	ldr	r3, [pc, #72]	@ (8009ccc <LoRaMacMibSetRequestConfirm+0x348>)
 8009c84:	6862      	ldr	r2, [r4, #4]
 8009c86:	601a      	str	r2, [r3, #0]
            break;
 8009c88:	e6bf      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
 8009c8a:	46c0      	nop			@ (mov r8, r8)
 8009c8c:	20000d18 	.word	0x20000d18
 8009c90:	2000087f 	.word	0x2000087f
 8009c94:	2000087e 	.word	0x2000087e
 8009c98:	20000848 	.word	0x20000848
 8009c9c:	2000084c 	.word	0x2000084c
 8009ca0:	2000087d 	.word	0x2000087d
 8009ca4:	0800edf8 	.word	0x0800edf8
 8009ca8:	20000800 	.word	0x20000800
 8009cac:	20000780 	.word	0x20000780
 8009cb0:	200007f5 	.word	0x200007f5
 8009cb4:	200007c0 	.word	0x200007c0
 8009cb8:	200007e0 	.word	0x200007e0
 8009cbc:	200007f4 	.word	0x200007f4
 8009cc0:	20000788 	.word	0x20000788
 8009cc4:	20000808 	.word	0x20000808
 8009cc8:	200007c8 	.word	0x200007c8
 8009ccc:	2000083c 	.word	0x2000083c
            if( mibSet->Param.Contexts != 0 )
 8009cd0:	6864      	ldr	r4, [r4, #4]
 8009cd2:	2c00      	cmp	r4, #0
 8009cd4:	d100      	bne.n	8009cd8 <LoRaMacMibSetRequestConfirm+0x354>
 8009cd6:	e658      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
        return LORAMAC_STATUS_BUSY;
 8009cd8:	2001      	movs	r0, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8009cda:	4283      	cmp	r3, r0
 8009cdc:	d000      	beq.n	8009ce0 <LoRaMacMibSetRequestConfirm+0x35c>
 8009cde:	e655      	b.n	800998c <LoRaMacMibSetRequestConfirm+0x8>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8009ce0:	2124      	movs	r1, #36	@ 0x24
 8009ce2:	0020      	movs	r0, r4
 8009ce4:	f002 fc0c 	bl	800c500 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 8009ce8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009cea:	4298      	cmp	r0, r3
 8009cec:	d104      	bne.n	8009cf8 <LoRaMacMibSetRequestConfirm+0x374>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8009cee:	2228      	movs	r2, #40	@ 0x28
 8009cf0:	0021      	movs	r1, r4
 8009cf2:	483a      	ldr	r0, [pc, #232]	@ (8009ddc <LoRaMacMibSetRequestConfirm+0x458>)
 8009cf4:	f002 fbe2 	bl	800c4bc <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8009cf8:	0026      	movs	r6, r4
 8009cfa:	3628      	adds	r6, #40	@ 0x28
 8009cfc:	2114      	movs	r1, #20
 8009cfe:	0030      	movs	r0, r6
 8009d00:	f002 fbfe 	bl	800c500 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 8009d04:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009d06:	4298      	cmp	r0, r3
 8009d08:	d104      	bne.n	8009d14 <LoRaMacMibSetRequestConfirm+0x390>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8009d0a:	2218      	movs	r2, #24
 8009d0c:	0031      	movs	r1, r6
 8009d0e:	4834      	ldr	r0, [pc, #208]	@ (8009de0 <LoRaMacMibSetRequestConfirm+0x45c>)
 8009d10:	f002 fbd4 	bl	800c4bc <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8009d14:	0026      	movs	r6, r4
 8009d16:	3640      	adds	r6, #64	@ 0x40
 8009d18:	21d4      	movs	r1, #212	@ 0xd4
 8009d1a:	0030      	movs	r0, r6
 8009d1c:	f002 fbf0 	bl	800c500 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 8009d20:	0023      	movs	r3, r4
 8009d22:	33fc      	adds	r3, #252	@ 0xfc
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	4298      	cmp	r0, r3
 8009d28:	d115      	bne.n	8009d56 <LoRaMacMibSetRequestConfirm+0x3d2>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8009d2a:	22d8      	movs	r2, #216	@ 0xd8
 8009d2c:	0031      	movs	r1, r6
 8009d2e:	482d      	ldr	r0, [pc, #180]	@ (8009de4 <LoRaMacMibSetRequestConfirm+0x460>)
 8009d30:	f002 fbc4 	bl	800c4bc <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009d34:	4b2c      	ldr	r3, [pc, #176]	@ (8009de8 <LoRaMacMibSetRequestConfirm+0x464>)
 8009d36:	5cea      	ldrb	r2, [r5, r3]
 8009d38:	3b35      	subs	r3, #53	@ 0x35
 8009d3a:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009d3c:	22f9      	movs	r2, #249	@ 0xf9
 8009d3e:	4b27      	ldr	r3, [pc, #156]	@ (8009ddc <LoRaMacMibSetRequestConfirm+0x458>)
 8009d40:	0092      	lsls	r2, r2, #2
 8009d42:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009d44:	3375      	adds	r3, #117	@ 0x75
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009d46:	50a9      	str	r1, [r5, r2]
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009d48:	781a      	ldrb	r2, [r3, #0]
 8009d4a:	23fc      	movs	r3, #252	@ 0xfc
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009d50:	4b26      	ldr	r3, [pc, #152]	@ (8009dec <LoRaMacMibSetRequestConfirm+0x468>)
 8009d52:	4a27      	ldr	r2, [pc, #156]	@ (8009df0 <LoRaMacMibSetRequestConfirm+0x46c>)
 8009d54:	52ea      	strh	r2, [r5, r3]
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8009d56:	0025      	movs	r5, r4
 8009d58:	3519      	adds	r5, #25
 8009d5a:	35ff      	adds	r5, #255	@ 0xff
 8009d5c:	21bc      	movs	r1, #188	@ 0xbc
 8009d5e:	0028      	movs	r0, r5
 8009d60:	f002 fbce 	bl	800c500 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 8009d64:	23ea      	movs	r3, #234	@ 0xea
 8009d66:	005b      	lsls	r3, r3, #1
 8009d68:	58e3      	ldr	r3, [r4, r3]
 8009d6a:	4298      	cmp	r0, r3
 8009d6c:	d104      	bne.n	8009d78 <LoRaMacMibSetRequestConfirm+0x3f4>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8009d6e:	22c0      	movs	r2, #192	@ 0xc0
 8009d70:	0029      	movs	r1, r5
 8009d72:	4820      	ldr	r0, [pc, #128]	@ (8009df4 <LoRaMacMibSetRequestConfirm+0x470>)
 8009d74:	f002 fba2 	bl	800c4bc <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8009d78:	0025      	movs	r5, r4
 8009d7a:	35d9      	adds	r5, #217	@ 0xd9
 8009d7c:	35ff      	adds	r5, #255	@ 0xff
 8009d7e:	2128      	movs	r1, #40	@ 0x28
 8009d80:	0028      	movs	r0, r5
 8009d82:	f002 fbbd 	bl	800c500 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 8009d86:	2380      	movs	r3, #128	@ 0x80
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	58e3      	ldr	r3, [r4, r3]
 8009d8c:	4298      	cmp	r0, r3
 8009d8e:	d104      	bne.n	8009d9a <LoRaMacMibSetRequestConfirm+0x416>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 8009d90:	222c      	movs	r2, #44	@ 0x2c
 8009d92:	0029      	movs	r1, r5
 8009d94:	4818      	ldr	r0, [pc, #96]	@ (8009df8 <LoRaMacMibSetRequestConfirm+0x474>)
 8009d96:	f002 fb91 	bl	800c4bc <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8009d9a:	23b0      	movs	r3, #176	@ 0xb0
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	18e5      	adds	r5, r4, r3
 8009da0:	2114      	movs	r1, #20
 8009da2:	0028      	movs	r0, r5
 8009da4:	f002 fbac 	bl	800c500 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 8009da8:	4b14      	ldr	r3, [pc, #80]	@ (8009dfc <LoRaMacMibSetRequestConfirm+0x478>)
 8009daa:	58e3      	ldr	r3, [r4, r3]
 8009dac:	4298      	cmp	r0, r3
 8009dae:	d000      	beq.n	8009db2 <LoRaMacMibSetRequestConfirm+0x42e>
 8009db0:	e62b      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8009db2:	2218      	movs	r2, #24
 8009db4:	0029      	movs	r1, r5
 8009db6:	4812      	ldr	r0, [pc, #72]	@ (8009e00 <LoRaMacMibSetRequestConfirm+0x47c>)
 8009db8:	f002 fb80 	bl	800c4bc <memcpy1>
 8009dbc:	e625      	b.n	8009a0a <LoRaMacMibSetRequestConfirm+0x86>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8009dbe:	79a3      	ldrb	r3, [r4, #6]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d900      	bls.n	8009dc6 <LoRaMacMibSetRequestConfirm+0x442>
 8009dc4:	e5e1      	b.n	800998a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8009dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x480>)
 8009dc8:	6862      	ldr	r2, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8009dca:	6860      	ldr	r0, [r4, #4]
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8009dcc:	611a      	str	r2, [r3, #16]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8009dce:	f000 fe6b 	bl	800aaa8 <LoRaMacCryptoSetLrWanVersion>
 8009dd2:	e636      	b.n	8009a42 <LoRaMacMibSetRequestConfirm+0xbe>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8009dd4:	0020      	movs	r0, r4
 8009dd6:	f000 fb61 	bl	800a49c <LoRaMacMibClassBSetRequestConfirm>
            break;
 8009dda:	e5d7      	b.n	800998c <LoRaMacMibSetRequestConfirm+0x8>
 8009ddc:	20000780 	.word	0x20000780
 8009de0:	200007a8 	.word	0x200007a8
 8009de4:	200007c0 	.word	0x200007c0
 8009de8:	00000415 	.word	0x00000415
 8009dec:	000003f2 	.word	0x000003f2
 8009df0:	00000201 	.word	0x00000201
 8009df4:	20000898 	.word	0x20000898
 8009df8:	20000958 	.word	0x20000958
 8009dfc:	00000594 	.word	0x00000594
 8009e00:	20000d00 	.word	0x20000d00
 8009e04:	2000087c 	.word	0x2000087c

08009e08 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009e08:	2300      	movs	r3, #0
{
 8009e0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e0c:	b089      	sub	sp, #36	@ 0x24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009e0e:	aa02      	add	r2, sp, #8
{
 8009e10:	0006      	movs	r6, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009e12:	2503      	movs	r5, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009e14:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 8009e16:	4298      	cmp	r0, r3
 8009e18:	d004      	beq.n	8009e24 <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 8009e1a:	f7fe fd51 	bl	80088c0 <LoRaMacIsBusy>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d003      	beq.n	8009e2a <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8009e22:	2501      	movs	r5, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 8009e24:	0028      	movs	r0, r5
 8009e26:	b009      	add	sp, #36	@ 0x24
 8009e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8009e2a:	f000 fd39 	bl	800a8a0 <LoRaMacConfirmQueueIsFull>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d1f7      	bne.n	8009e22 <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009e32:	f000 fd2f 	bl	800a894 <LoRaMacConfirmQueueGetCnt>
 8009e36:	1e01      	subs	r1, r0, #0
 8009e38:	d103      	bne.n	8009e42 <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8009e3a:	2214      	movs	r2, #20
 8009e3c:	4866      	ldr	r0, [pc, #408]	@ (8009fd8 <LoRaMacMlmeRequest+0x1d0>)
 8009e3e:	f002 fb53 	bl	800c4e8 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009e42:	2201      	movs	r2, #1
 8009e44:	4c65      	ldr	r4, [pc, #404]	@ (8009fdc <LoRaMacMlmeRequest+0x1d4>)
 8009e46:	4b66      	ldr	r3, [pc, #408]	@ (8009fe0 <LoRaMacMlmeRequest+0x1d8>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009e48:	4866      	ldr	r0, [pc, #408]	@ (8009fe4 <LoRaMacMlmeRequest+0x1dc>)
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009e4a:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009e4c:	2304      	movs	r3, #4
 8009e4e:	5c21      	ldrb	r1, [r4, r0]
 8009e50:	430b      	orrs	r3, r1
    queueElement.RestrictCommonReadyToHandle = false;
 8009e52:	2100      	movs	r1, #0
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009e54:	5423      	strb	r3, [r4, r0]
    queueElement.Request = mlmeRequest->Type;
 8009e56:	7830      	ldrb	r0, [r6, #0]
 8009e58:	ab03      	add	r3, sp, #12
 8009e5a:	7018      	strb	r0, [r3, #0]
    switch( mlmeRequest->Type )
 8009e5c:	3801      	subs	r0, #1
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009e5e:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 8009e60:	70d9      	strb	r1, [r3, #3]
    switch( mlmeRequest->Type )
 8009e62:	280d      	cmp	r0, #13
 8009e64:	d900      	bls.n	8009e68 <LoRaMacMlmeRequest+0x60>
 8009e66:	e0b0      	b.n	8009fca <LoRaMacMlmeRequest+0x1c2>
 8009e68:	f7f6 f960 	bl	800012c <__gnu_thumb1_case_uqi>
 8009e6c:	5cafaf07 	.word	0x5cafaf07
 8009e70:	afaf8366 	.word	0xafaf8366
 8009e74:	a3af8baf 	.word	0xa3af8baf
 8009e78:	9f8f      	.short	0x9f8f
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8009e7a:	23d0      	movs	r3, #208	@ 0xd0
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	58e2      	ldr	r2, [r4, r3]
 8009e80:	2320      	movs	r3, #32
 8009e82:	0015      	movs	r5, r2
 8009e84:	401d      	ands	r5, r3
 8009e86:	421a      	tst	r2, r3
 8009e88:	d1cb      	bne.n	8009e22 <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 8009e8a:	f7fd fe8f 	bl	8007bac <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009e8e:	2104      	movs	r1, #4
 8009e90:	4b55      	ldr	r3, [pc, #340]	@ (8009fe8 <LoRaMacMlmeRequest+0x1e0>)
 8009e92:	5671      	ldrsb	r1, [r6, r1]
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	002a      	movs	r2, r5
 8009e98:	7818      	ldrb	r0, [r3, #0]
 8009e9a:	4f54      	ldr	r7, [pc, #336]	@ (8009fec <LoRaMacMlmeRequest+0x1e4>)
 8009e9c:	f001 f9da 	bl	800b254 <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009ea0:	2207      	movs	r2, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009ea2:	3739      	adds	r7, #57	@ 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009ea4:	ab03      	add	r3, sp, #12
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009ea6:	7038      	strb	r0, [r7, #0]
            SwitchClass( CLASS_A );
 8009ea8:	0028      	movs	r0, r5
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009eaa:	705a      	strb	r2, [r3, #1]
            SwitchClass( CLASS_A );
 8009eac:	f7fe f910 	bl	80080d0 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009eb0:	0023      	movs	r3, r4
 8009eb2:	33ff      	adds	r3, #255	@ 0xff
 8009eb4:	715d      	strb	r5, [r3, #5]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009eb6:	0023      	movs	r3, r4
 8009eb8:	4a4d      	ldr	r2, [pc, #308]	@ (8009ff0 <LoRaMacMlmeRequest+0x1e8>)
 8009eba:	33fc      	adds	r3, #252	@ 0xfc
 8009ebc:	60da      	str	r2, [r3, #12]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009ebe:	0023      	movs	r3, r4
 8009ec0:	22ff      	movs	r2, #255	@ 0xff
 8009ec2:	33fe      	adds	r3, #254	@ 0xfe
 8009ec4:	81da      	strh	r2, [r3, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8009ec6:	f7fc ffb9 	bl	8006e3c <SecureElementGetJoinEui>
 8009eca:	4b4a      	ldr	r3, [pc, #296]	@ (8009ff4 <LoRaMacMlmeRequest+0x1ec>)
 8009ecc:	0001      	movs	r1, r0
 8009ece:	2208      	movs	r2, #8
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	f002 faf3 	bl	800c4bc <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8009ed6:	f7fc ff9b 	bl	8006e10 <SecureElementGetDevEui>
 8009eda:	4b47      	ldr	r3, [pc, #284]	@ (8009ff8 <LoRaMacMlmeRequest+0x1f0>)
 8009edc:	0001      	movs	r1, r0
 8009ede:	2208      	movs	r2, #8
 8009ee0:	0018      	movs	r0, r3
 8009ee2:	f002 faeb 	bl	800c4bc <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 8009ee6:	0028      	movs	r0, r5
 8009ee8:	f7fd ff12 	bl	8007d10 <ScheduleTx>
 8009eec:	1e05      	subs	r5, r0, #0
            if( status != LORAMAC_STATUS_OK )
 8009eee:	d007      	beq.n	8009f00 <LoRaMacMlmeRequest+0xf8>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8009ef0:	2104      	movs	r1, #4
 8009ef2:	9b01      	ldr	r3, [sp, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	5671      	ldrsb	r1, [r6, r1]
 8009ef8:	7818      	ldrb	r0, [r3, #0]
 8009efa:	f001 f9ab 	bl	800b254 <RegionAlternateDr>
 8009efe:	7038      	strb	r0, [r7, #0]
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8009f00:	4b3e      	ldr	r3, [pc, #248]	@ (8009ffc <LoRaMacMlmeRequest+0x1f4>)
 8009f02:	58e3      	ldr	r3, [r4, r3]
 8009f04:	6133      	str	r3, [r6, #16]
    if( status != LORAMAC_STATUS_OK )
 8009f06:	2d00      	cmp	r5, #0
 8009f08:	d061      	beq.n	8009fce <LoRaMacMlmeRequest+0x1c6>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009f0a:	f000 fcc3 	bl	800a894 <LoRaMacConfirmQueueGetCnt>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d000      	beq.n	8009f14 <LoRaMacMlmeRequest+0x10c>
 8009f12:	e787      	b.n	8009e24 <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009f14:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 8009f16:	4b3a      	ldr	r3, [pc, #232]	@ (800a000 <LoRaMacMlmeRequest+0x1f8>)
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009f18:	4932      	ldr	r1, [pc, #200]	@ (8009fe4 <LoRaMacMlmeRequest+0x1dc>)
            MacCtx.NodeAckRequested = false;
 8009f1a:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009f1c:	5c63      	ldrb	r3, [r4, r1]
 8009f1e:	4393      	bics	r3, r2
 8009f20:	5463      	strb	r3, [r4, r1]
 8009f22:	e77f      	b.n	8009e24 <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009f24:	2200      	movs	r2, #0
 8009f26:	2002      	movs	r0, #2
 8009f28:	a902      	add	r1, sp, #8
 8009f2a:	f000 fad3 	bl	800a4d4 <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009f2e:	2513      	movs	r5, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d1e5      	bne.n	8009f00 <LoRaMacMlmeRequest+0xf8>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009f34:	2500      	movs	r5, #0
 8009f36:	e7e3      	b.n	8009f00 <LoRaMacMlmeRequest+0xf8>
    continuousWave.Channel = MacCtx.Channel;
 8009f38:	4b32      	ldr	r3, [pc, #200]	@ (800a004 <LoRaMacMlmeRequest+0x1fc>)
 8009f3a:	a904      	add	r1, sp, #16
 8009f3c:	5ce3      	ldrb	r3, [r4, r3]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009f3e:	4832      	ldr	r0, [pc, #200]	@ (800a008 <LoRaMacMlmeRequest+0x200>)
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009f40:	88b2      	ldrh	r2, [r6, #4]
    continuousWave.Channel = MacCtx.Channel;
 8009f42:	700b      	strb	r3, [r1, #0]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009f44:	7800      	ldrb	r0, [r0, #0]
 8009f46:	4b29      	ldr	r3, [pc, #164]	@ (8009fec <LoRaMacMlmeRequest+0x1e4>)
 8009f48:	7048      	strb	r0, [r1, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	3038      	adds	r0, #56	@ 0x38
 8009f4e:	7800      	ldrb	r0, [r0, #0]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8009f50:	3340      	adds	r3, #64	@ 0x40
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009f52:	7088      	strb	r0, [r1, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009f54:	6b98      	ldr	r0, [r3, #56]	@ 0x38
    continuousWave.Timeout = timeout;
 8009f56:	818a      	strh	r2, [r1, #12]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009f58:	6048      	str	r0, [r1, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009f5a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009f5c:	6088      	str	r0, [r1, #8]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8009f5e:	7818      	ldrb	r0, [r3, #0]
 8009f60:	f001 f992 	bl	800b288 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009f64:	22d0      	movs	r2, #208	@ 0xd0
 8009f66:	2302      	movs	r3, #2
 8009f68:	0092      	lsls	r2, r2, #2
 8009f6a:	58a1      	ldr	r1, [r4, r2]
 8009f6c:	430b      	orrs	r3, r1
 8009f6e:	50a3      	str	r3, [r4, r2]
            break;
 8009f70:	e7e0      	b.n	8009f34 <LoRaMacMlmeRequest+0x12c>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8009f72:	210c      	movs	r1, #12
 8009f74:	4b25      	ldr	r3, [pc, #148]	@ (800a00c <LoRaMacMlmeRequest+0x204>)
 8009f76:	88b2      	ldrh	r2, [r6, #4]
 8009f78:	5671      	ldrsb	r1, [r6, r1]
 8009f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f7c:	68b0      	ldr	r0, [r6, #8]
 8009f7e:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009f80:	e7f0      	b.n	8009f64 <LoRaMacMlmeRequest+0x15c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009f82:	2200      	movs	r2, #0
 8009f84:	200d      	movs	r0, #13
 8009f86:	a902      	add	r1, sp, #8
 8009f88:	e7cf      	b.n	8009f2a <LoRaMacMlmeRequest+0x122>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009f8a:	4b21      	ldr	r3, [pc, #132]	@ (800a010 <LoRaMacMlmeRequest+0x208>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009f8c:	2502      	movs	r5, #2
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1b5      	bne.n	8009f00 <LoRaMacMlmeRequest+0xf8>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8009f94:	7935      	ldrb	r5, [r6, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8009f96:	0768      	lsls	r0, r5, #29
 8009f98:	0f40      	lsrs	r0, r0, #29
 8009f9a:	f000 fa78 	bl	800a48e <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8009f9e:	ab02      	add	r3, sp, #8
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	0019      	movs	r1, r3
 8009fa4:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
 8009fa6:	701d      	strb	r5, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8009fa8:	e7bf      	b.n	8009f2a <LoRaMacMlmeRequest+0x122>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009faa:	2200      	movs	r2, #0
 8009fac:	2012      	movs	r0, #18
 8009fae:	a902      	add	r1, sp, #8
 8009fb0:	e7bb      	b.n	8009f2a <LoRaMacMlmeRequest+0x122>
            queueElement.RestrictCommonReadyToHandle = true;
 8009fb2:	70da      	strb	r2, [r3, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8009fb4:	f000 fa5c 	bl	800a470 <LoRaMacClassBIsAcquisitionInProgress>
                status = LORAMAC_STATUS_BUSY;
 8009fb8:	2501      	movs	r5, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8009fba:	1e07      	subs	r7, r0, #0
 8009fbc:	d1a0      	bne.n	8009f00 <LoRaMacMlmeRequest+0xf8>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8009fbe:	f000 fa54 	bl	800a46a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8009fc2:	0038      	movs	r0, r7
 8009fc4:	f000 fa56 	bl	800a474 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8009fc8:	e7b4      	b.n	8009f34 <LoRaMacMlmeRequest+0x12c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009fca:	2502      	movs	r5, #2
 8009fcc:	e798      	b.n	8009f00 <LoRaMacMlmeRequest+0xf8>
        LoRaMacConfirmQueueAdd( &queueElement );
 8009fce:	a803      	add	r0, sp, #12
 8009fd0:	f000 fba6 	bl	800a720 <LoRaMacConfirmQueueAdd>
 8009fd4:	e726      	b.n	8009e24 <LoRaMacMlmeRequest+0x1c>
 8009fd6:	46c0      	nop			@ (mov r8, r8)
 8009fd8:	20001164 	.word	0x20001164
 8009fdc:	20000d18 	.word	0x20000d18
 8009fe0:	0000044d 	.word	0x0000044d
 8009fe4:	00000481 	.word	0x00000481
 8009fe8:	200007c0 	.word	0x200007c0
 8009fec:	20000780 	.word	0x20000780
 8009ff0:	20000d1a 	.word	0x20000d1a
 8009ff4:	20000e26 	.word	0x20000e26
 8009ff8:	20000e2e 	.word	0x20000e2e
 8009ffc:	00000484 	.word	0x00000484
 800a000:	00000414 	.word	0x00000414
 800a004:	00000415 	.word	0x00000415
 800a008:	200007b9 	.word	0x200007b9
 800a00c:	0800edf8 	.word	0x0800edf8
 800a010:	2000087c 	.word	0x2000087c

0800a014 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800a014:	2300      	movs	r3, #0
 800a016:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a018:	b095      	sub	sp, #84	@ 0x54
 800a01a:	0007      	movs	r7, r0
 800a01c:	9107      	str	r1, [sp, #28]
 800a01e:	9300      	str	r3, [sp, #0]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800a020:	4298      	cmp	r0, r3
 800a022:	d103      	bne.n	800a02c <LoRaMacMcpsRequest+0x18>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a024:	2403      	movs	r4, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800a026:	0020      	movs	r0, r4
 800a028:	b015      	add	sp, #84	@ 0x54
 800a02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 800a02c:	f7fe fc48 	bl	80088c0 <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 800a030:	2401      	movs	r4, #1
    if( LoRaMacIsBusy( ) == true )
 800a032:	1e05      	subs	r5, r0, #0
 800a034:	d1f7      	bne.n	800a026 <LoRaMacMcpsRequest+0x12>
    macHdr.Value = 0;
 800a036:	466b      	mov	r3, sp
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800a038:	2214      	movs	r2, #20
    macHdr.Value = 0;
 800a03a:	7218      	strb	r0, [r3, #8]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800a03c:	0029      	movs	r1, r5
 800a03e:	48b6      	ldr	r0, [pc, #728]	@ (800a318 <LoRaMacMcpsRequest+0x304>)
 800a040:	f002 fa52 	bl	800c4e8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a044:	4bb5      	ldr	r3, [pc, #724]	@ (800a31c <LoRaMacMcpsRequest+0x308>)
 800a046:	4ab6      	ldr	r2, [pc, #728]	@ (800a320 <LoRaMacMcpsRequest+0x30c>)
 800a048:	549c      	strb	r4, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a04a:	4ab6      	ldr	r2, [pc, #728]	@ (800a324 <LoRaMacMcpsRequest+0x310>)
 800a04c:	549c      	strb	r4, [r3, r2]
    switch( mcpsRequest->Type )
 800a04e:	783a      	ldrb	r2, [r7, #0]
 800a050:	42a2      	cmp	r2, r4
 800a052:	d100      	bne.n	800a056 <LoRaMacMcpsRequest+0x42>
 800a054:	e0ab      	b.n	800a1ae <LoRaMacMcpsRequest+0x19a>
 800a056:	2a03      	cmp	r2, #3
 800a058:	d100      	bne.n	800a05c <LoRaMacMcpsRequest+0x48>
 800a05a:	e0b1      	b.n	800a1c0 <LoRaMacMcpsRequest+0x1ac>
 800a05c:	002e      	movs	r6, r5
 800a05e:	9501      	str	r5, [sp, #4]
 800a060:	9503      	str	r5, [sp, #12]
 800a062:	2a00      	cmp	r2, #0
 800a064:	d10d      	bne.n	800a082 <LoRaMacMcpsRequest+0x6e>
            MacCtx.AckTimeoutRetries = 1;
 800a066:	4ab0      	ldr	r2, [pc, #704]	@ (800a328 <LoRaMacMcpsRequest+0x314>)
 800a068:	549c      	strb	r4, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800a06a:	2340      	movs	r3, #64	@ 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a06c:	466a      	mov	r2, sp
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800a06e:	260e      	movs	r6, #14
            readyToSend = true;
 800a070:	2501      	movs	r5, #1
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a072:	7213      	strb	r3, [r2, #8]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800a074:	793b      	ldrb	r3, [r7, #4]
 800a076:	9303      	str	r3, [sp, #12]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	9301      	str	r3, [sp, #4]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800a07c:	89bb      	ldrh	r3, [r7, #12]
 800a07e:	9300      	str	r3, [sp, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800a080:	57be      	ldrsb	r6, [r7, r6]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800a082:	2402      	movs	r4, #2
 800a084:	ab08      	add	r3, sp, #32
 800a086:	751c      	strb	r4, [r3, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a088:	4ba8      	ldr	r3, [pc, #672]	@ (800a32c <LoRaMacMcpsRequest+0x318>)
 800a08a:	aa08      	add	r2, sp, #32
 800a08c:	9304      	str	r3, [sp, #16]
 800a08e:	4ba8      	ldr	r3, [pc, #672]	@ (800a330 <LoRaMacMcpsRequest+0x31c>)
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a090:	a90d      	add	r1, sp, #52	@ 0x34
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	7593      	strb	r3, [r2, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a096:	9b04      	ldr	r3, [sp, #16]
 800a098:	3340      	adds	r3, #64	@ 0x40
 800a09a:	7818      	ldrb	r0, [r3, #0]
 800a09c:	f001 f847 	bl	800b12e <RegionGetPhyParam>
    if( readyToSend == true )
 800a0a0:	2d00      	cmp	r5, #0
 800a0a2:	d100      	bne.n	800a0a6 <LoRaMacMcpsRequest+0x92>
 800a0a4:	e0fe      	b.n	800a2a4 <LoRaMacMcpsRequest+0x290>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800a0a6:	9b04      	ldr	r3, [sp, #16]
 800a0a8:	33fe      	adds	r3, #254	@ 0xfe
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d116      	bne.n	800a0de <LoRaMacMcpsRequest+0xca>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a0b0:	1c03      	adds	r3, r0, #0
 800a0b2:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 800a0b4:	ac09      	add	r4, sp, #36	@ 0x24
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a0b6:	42b0      	cmp	r0, r6
 800a0b8:	da00      	bge.n	800a0bc <LoRaMacMcpsRequest+0xa8>
 800a0ba:	1c33      	adds	r3, r6, #0
            verify.DatarateParams.Datarate = datarate;
 800a0bc:	7023      	strb	r3, [r4, #0]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a0be:	4b9c      	ldr	r3, [pc, #624]	@ (800a330 <LoRaMacMcpsRequest+0x31c>)
 800a0c0:	4d9a      	ldr	r5, [pc, #616]	@ (800a32c <LoRaMacMcpsRequest+0x318>)
 800a0c2:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a0c4:	2205      	movs	r2, #5
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a0c6:	70a3      	strb	r3, [r4, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a0c8:	002b      	movs	r3, r5
 800a0ca:	3340      	adds	r3, #64	@ 0x40
 800a0cc:	0021      	movs	r1, r4
 800a0ce:	7818      	ldrb	r0, [r3, #0]
 800a0d0:	f001 f847 	bl	800b162 <RegionVerify>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d0a5      	beq.n	800a024 <LoRaMacMcpsRequest+0x10>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a0d8:	7823      	ldrb	r3, [r4, #0]
 800a0da:	3539      	adds	r5, #57	@ 0x39
 800a0dc:	702b      	strb	r3, [r5, #0]
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a0de:	4b93      	ldr	r3, [pc, #588]	@ (800a32c <LoRaMacMcpsRequest+0x318>)
 800a0e0:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a0e2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a0e4:	9204      	str	r2, [sp, #16]
 800a0e6:	ba52      	rev16	r2, r2
 800a0e8:	4694      	mov	ip, r2
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a0ea:	001a      	movs	r2, r3
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a0ec:	910a      	str	r1, [sp, #40]	@ 0x28
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a0ee:	32ff      	adds	r2, #255	@ 0xff
 800a0f0:	7c50      	ldrb	r0, [r2, #17]
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d100      	bne.n	800a0f8 <LoRaMacMcpsRequest+0xe4>
 800a0f6:	e10a      	b.n	800a30e <LoRaMacMcpsRequest+0x2fa>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800a0f8:	7812      	ldrb	r2, [r2, #0]
 800a0fa:	2a00      	cmp	r2, #0
 800a0fc:	d100      	bne.n	800a100 <LoRaMacMcpsRequest+0xec>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a0fe:	631a      	str	r2, [r3, #48]	@ 0x30
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800a100:	001a      	movs	r2, r3
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a102:	001c      	movs	r4, r3
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800a104:	32fe      	adds	r2, #254	@ 0xfe
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a106:	34fc      	adds	r4, #252	@ 0xfc
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800a108:	7816      	ldrb	r6, [r2, #0]
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a10a:	7822      	ldrb	r2, [r4, #0]
    fCtrl.Value = 0;
 800a10c:	2500      	movs	r5, #0
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a10e:	3a01      	subs	r2, #1
 800a110:	4250      	negs	r0, r2
 800a112:	4142      	adcs	r2, r0
 800a114:	b2d2      	uxtb	r2, r2
 800a116:	9206      	str	r2, [sp, #24]
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800a118:	001a      	movs	r2, r3
 800a11a:	323a      	adds	r2, #58	@ 0x3a
 800a11c:	7812      	ldrb	r2, [r2, #0]
    adrNext.Version = Nvm.MacGroup2.Version;
 800a11e:	a80f      	add	r0, sp, #60	@ 0x3c
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800a120:	9205      	str	r2, [sp, #20]
    adrNext.Version = Nvm.MacGroup2.Version;
 800a122:	6922      	ldr	r2, [r4, #16]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a124:	4c7d      	ldr	r4, [pc, #500]	@ (800a31c <LoRaMacMcpsRequest+0x308>)
    adrNext.Version = Nvm.MacGroup2.Version;
 800a126:	920f      	str	r2, [sp, #60]	@ 0x3c
    adrNext.UpdateChanMask = true;
 800a128:	2201      	movs	r2, #1
 800a12a:	7102      	strb	r2, [r0, #4]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a12c:	22fd      	movs	r2, #253	@ 0xfd
 800a12e:	0092      	lsls	r2, r2, #2
 800a130:	58a2      	ldr	r2, [r4, r2]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800a132:	7146      	strb	r6, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a134:	9212      	str	r2, [sp, #72]	@ 0x48
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a136:	4662      	mov	r2, ip
 800a138:	8202      	strh	r2, [r0, #16]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a13a:	001a      	movs	r2, r3
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a13c:	6081      	str	r1, [r0, #8]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a13e:	3274      	adds	r2, #116	@ 0x74
 800a140:	7812      	ldrb	r2, [r2, #0]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a142:	3340      	adds	r3, #64	@ 0x40
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a144:	7482      	strb	r2, [r0, #18]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a146:	781b      	ldrb	r3, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800a148:	4a7a      	ldr	r2, [pc, #488]	@ (800a334 <LoRaMacMcpsRequest+0x320>)
 800a14a:	497b      	ldr	r1, [pc, #492]	@ (800a338 <LoRaMacMcpsRequest+0x324>)
    adrNext.Region = Nvm.MacGroup2.Region;
 800a14c:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800a14e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a150:	f000 f922 	bl	800a398 <LoRaMacAdrCalcNext>
 800a154:	9b05      	ldr	r3, [sp, #20]
 800a156:	0180      	lsls	r0, r0, #6
 800a158:	015a      	lsls	r2, r3, #5
 800a15a:	9b06      	ldr	r3, [sp, #24]
 800a15c:	01f6      	lsls	r6, r6, #7
 800a15e:	011b      	lsls	r3, r3, #4
 800a160:	4313      	orrs	r3, r2
 800a162:	4303      	orrs	r3, r0
 800a164:	4333      	orrs	r3, r6
 800a166:	9305      	str	r3, [sp, #20]
    MacCtx.NodeAckRequested = false;
 800a168:	4b74      	ldr	r3, [pc, #464]	@ (800a33c <LoRaMacMcpsRequest+0x328>)
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800a16a:	9901      	ldr	r1, [sp, #4]
    MacCtx.NodeAckRequested = false;
 800a16c:	54e5      	strb	r5, [r4, r3]
        fBufferSize = 0;
 800a16e:	9b01      	ldr	r3, [sp, #4]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800a170:	4873      	ldr	r0, [pc, #460]	@ (800a340 <LoRaMacMcpsRequest+0x32c>)
        fBufferSize = 0;
 800a172:	1e5a      	subs	r2, r3, #1
 800a174:	4193      	sbcs	r3, r2
 800a176:	9a00      	ldr	r2, [sp, #0]
 800a178:	425b      	negs	r3, r3
 800a17a:	401a      	ands	r2, r3
 800a17c:	9200      	str	r2, [sp, #0]
    MacCtx.PktBufferLen = 0;
 800a17e:	8025      	strh	r5, [r4, #0]
    uint32_t fCntUp = 0;
 800a180:	950b      	str	r5, [sp, #44]	@ 0x2c
    size_t macCmdsSize = 0;
 800a182:	950c      	str	r5, [sp, #48]	@ 0x30
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800a184:	f002 f99a 	bl	800c4bc <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800a188:	466b      	mov	r3, sp
 800a18a:	781a      	ldrb	r2, [r3, #0]
 800a18c:	4b6d      	ldr	r3, [pc, #436]	@ (800a344 <LoRaMacMcpsRequest+0x330>)
 800a18e:	54e2      	strb	r2, [r4, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800a190:	466b      	mov	r3, sp
 800a192:	7a19      	ldrb	r1, [r3, #8]
    switch( macHdr->Bits.MType )
 800a194:	9b02      	ldr	r3, [sp, #8]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800a196:	70a1      	strb	r1, [r4, #2]
    switch( macHdr->Bits.MType )
 800a198:	061b      	lsls	r3, r3, #24
 800a19a:	0f5b      	lsrs	r3, r3, #29
 800a19c:	2b04      	cmp	r3, #4
 800a19e:	d01e      	beq.n	800a1de <LoRaMacMcpsRequest+0x1ca>
 800a1a0:	2b07      	cmp	r3, #7
 800a1a2:	d100      	bne.n	800a1a6 <LoRaMacMcpsRequest+0x192>
 800a1a4:	e0a1      	b.n	800a2ea <LoRaMacMcpsRequest+0x2d6>
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d01c      	beq.n	800a1e4 <LoRaMacMcpsRequest+0x1d0>
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800a1aa:	2402      	movs	r4, #2
 800a1ac:	e086      	b.n	800a2bc <LoRaMacMcpsRequest+0x2a8>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800a1ae:	7bf9      	ldrb	r1, [r7, #15]
 800a1b0:	1c0a      	adds	r2, r1, #0
 800a1b2:	2908      	cmp	r1, #8
 800a1b4:	d900      	bls.n	800a1b8 <LoRaMacMcpsRequest+0x1a4>
 800a1b6:	2208      	movs	r2, #8
 800a1b8:	495b      	ldr	r1, [pc, #364]	@ (800a328 <LoRaMacMcpsRequest+0x314>)
 800a1ba:	545a      	strb	r2, [r3, r1]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a1bc:	2380      	movs	r3, #128	@ 0x80
 800a1be:	e755      	b.n	800a06c <LoRaMacMcpsRequest+0x58>
            MacCtx.AckTimeoutRetries = 1;
 800a1c0:	4a59      	ldr	r2, [pc, #356]	@ (800a328 <LoRaMacMcpsRequest+0x314>)
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800a1c2:	260a      	movs	r6, #10
            MacCtx.AckTimeoutRetries = 1;
 800a1c4:	549c      	strb	r4, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800a1c6:	23e0      	movs	r3, #224	@ 0xe0
 800a1c8:	466a      	mov	r2, sp
 800a1ca:	7213      	strb	r3, [r2, #8]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800a1cc:	687b      	ldr	r3, [r7, #4]
            readyToSend = true;
 800a1ce:	0025      	movs	r5, r4
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800a1d0:	9301      	str	r3, [sp, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800a1d2:	893b      	ldrh	r3, [r7, #8]
 800a1d4:	9300      	str	r3, [sp, #0]
    uint8_t fPort = 0;
 800a1d6:	2300      	movs	r3, #0
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800a1d8:	57be      	ldrsb	r6, [r7, r6]
    uint8_t fPort = 0;
 800a1da:	9303      	str	r3, [sp, #12]
            break;
 800a1dc:	e751      	b.n	800a082 <LoRaMacMcpsRequest+0x6e>
            MacCtx.NodeAckRequested = true;
 800a1de:	2001      	movs	r0, #1
 800a1e0:	4b56      	ldr	r3, [pc, #344]	@ (800a33c <LoRaMacMcpsRequest+0x328>)
 800a1e2:	54e0      	strb	r0, [r4, r3]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800a1e4:	0025      	movs	r5, r4
 800a1e6:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800a1e8:	0026      	movs	r6, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800a1ea:	35ff      	adds	r5, #255	@ 0xff
 800a1ec:	716b      	strb	r3, [r5, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800a1ee:	4b56      	ldr	r3, [pc, #344]	@ (800a348 <LoRaMacMcpsRequest+0x334>)
 800a1f0:	36fc      	adds	r6, #252	@ 0xfc
 800a1f2:	60f3      	str	r3, [r6, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a1f4:	23ff      	movs	r3, #255	@ 0xff
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800a1f6:	73a9      	strb	r1, [r5, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800a1f8:	9903      	ldr	r1, [sp, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a1fa:	736b      	strb	r3, [r5, #13]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800a1fc:	3329      	adds	r3, #41	@ 0x29
 800a1fe:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800a200:	4b4a      	ldr	r3, [pc, #296]	@ (800a32c <LoRaMacMcpsRequest+0x318>)
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a202:	a80b      	add	r0, sp, #44	@ 0x2c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	4b51      	ldr	r3, [pc, #324]	@ (800a34c <LoRaMacMcpsRequest+0x338>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6173      	str	r3, [r6, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a20c:	9b05      	ldr	r3, [sp, #20]
 800a20e:	756b      	strb	r3, [r5, #21]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800a210:	2398      	movs	r3, #152	@ 0x98
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800a216:	4b4a      	ldr	r3, [pc, #296]	@ (800a340 <LoRaMacMcpsRequest+0x32c>)
 800a218:	6333      	str	r3, [r6, #48]	@ 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a21a:	f000 fc4d 	bl	800aab8 <LoRaMacCryptoGetFCntUp>
 800a21e:	2800      	cmp	r0, #0
 800a220:	d173      	bne.n	800a30a <LoRaMacMcpsRequest+0x2f6>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800a222:	0022      	movs	r2, r4
 800a224:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a226:	32fe      	adds	r2, #254	@ 0xfe
 800a228:	8313      	strh	r3, [r2, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 800a22a:	4a49      	ldr	r2, [pc, #292]	@ (800a350 <LoRaMacMcpsRequest+0x33c>)
 800a22c:	52a0      	strh	r0, [r4, r2]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800a22e:	4a49      	ldr	r2, [pc, #292]	@ (800a354 <LoRaMacMcpsRequest+0x340>)
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a230:	a80c      	add	r0, sp, #48	@ 0x30
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800a232:	50a3      	str	r3, [r4, r2]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a234:	f000 f9e2 	bl	800a5fc <LoRaMacCommandsGetSizeSerializedCmds>
 800a238:	2800      	cmp	r0, #0
 800a23a:	d13e      	bne.n	800a2ba <LoRaMacMcpsRequest+0x2a6>
            if( macCmdsSize > 0 )
 800a23c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d018      	beq.n	800a274 <LoRaMacMcpsRequest+0x260>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800a242:	2039      	movs	r0, #57	@ 0x39
 800a244:	9b00      	ldr	r3, [sp, #0]
 800a246:	5618      	ldrsb	r0, [r3, r0]
 800a248:	f7fd fb4e 	bl	80078e8 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a24c:	4b3d      	ldr	r3, [pc, #244]	@ (800a344 <LoRaMacMcpsRequest+0x330>)
 800a24e:	5ce3      	ldrb	r3, [r4, r3]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d03a      	beq.n	800a2ca <LoRaMacMcpsRequest+0x2b6>
 800a254:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a256:	2b0f      	cmp	r3, #15
 800a258:	d829      	bhi.n	800a2ae <LoRaMacMcpsRequest+0x29a>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800a25a:	200f      	movs	r0, #15
 800a25c:	4a3e      	ldr	r2, [pc, #248]	@ (800a358 <LoRaMacMcpsRequest+0x344>)
 800a25e:	a90c      	add	r1, sp, #48	@ 0x30
 800a260:	f000 f9d8 	bl	800a614 <LoRaMacCommandsSerializeCmds>
 800a264:	2800      	cmp	r0, #0
 800a266:	d128      	bne.n	800a2ba <LoRaMacMcpsRequest+0x2a6>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800a268:	220f      	movs	r2, #15
 800a26a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a26c:	4013      	ands	r3, r2
 800a26e:	9a05      	ldr	r2, [sp, #20]
 800a270:	431a      	orrs	r2, r3
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a272:	756a      	strb	r2, [r5, #21]
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800a274:	9807      	ldr	r0, [sp, #28]
 800a276:	f7fd fd4b 	bl	8007d10 <ScheduleTx>
 800a27a:	1e04      	subs	r4, r0, #0
    if( status != LORAMAC_STATUS_OK )
 800a27c:	d11e      	bne.n	800a2bc <LoRaMacMcpsRequest+0x2a8>
        Nvm.MacGroup1.SrvAckRequested = false;
 800a27e:	4a37      	ldr	r2, [pc, #220]	@ (800a35c <LoRaMacMcpsRequest+0x348>)
 800a280:	4b2a      	ldr	r3, [pc, #168]	@ (800a32c <LoRaMacMcpsRequest+0x318>)
 800a282:	7010      	strb	r0, [r2, #0]
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800a284:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a286:	629a      	str	r2, [r3, #40]	@ 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800a288:	f000 f994 	bl	800a5b4 <LoRaMacCommandsRemoveNoneStickyCmds>
 800a28c:	1e04      	subs	r4, r0, #0
 800a28e:	d140      	bne.n	800a312 <LoRaMacMcpsRequest+0x2fe>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800a290:	2287      	movs	r2, #135	@ 0x87
 800a292:	4b22      	ldr	r3, [pc, #136]	@ (800a31c <LoRaMacMcpsRequest+0x308>)
 800a294:	7839      	ldrb	r1, [r7, #0]
 800a296:	00d2      	lsls	r2, r2, #3
 800a298:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800a29a:	2201      	movs	r2, #1
 800a29c:	4930      	ldr	r1, [pc, #192]	@ (800a360 <LoRaMacMcpsRequest+0x34c>)
 800a29e:	5c58      	ldrb	r0, [r3, r1]
 800a2a0:	4302      	orrs	r2, r0
            MacCtx.NodeAckRequested = false;
 800a2a2:	545a      	strb	r2, [r3, r1]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800a2a4:	4b1d      	ldr	r3, [pc, #116]	@ (800a31c <LoRaMacMcpsRequest+0x308>)
 800a2a6:	4a2f      	ldr	r2, [pc, #188]	@ (800a364 <LoRaMacMcpsRequest+0x350>)
 800a2a8:	589b      	ldr	r3, [r3, r2]
 800a2aa:	613b      	str	r3, [r7, #16]
    return status;
 800a2ac:	e6bb      	b.n	800a026 <LoRaMacMcpsRequest+0x12>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a2ae:	4a2e      	ldr	r2, [pc, #184]	@ (800a368 <LoRaMacMcpsRequest+0x354>)
 800a2b0:	a90c      	add	r1, sp, #48	@ 0x30
 800a2b2:	f000 f9af 	bl	800a614 <LoRaMacCommandsSerializeCmds>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d0dc      	beq.n	800a274 <LoRaMacMcpsRequest+0x260>
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800a2ba:	2413      	movs	r4, #19
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800a2bc:	4b1b      	ldr	r3, [pc, #108]	@ (800a32c <LoRaMacMcpsRequest+0x318>)
 800a2be:	9a04      	ldr	r2, [sp, #16]
 800a2c0:	871a      	strh	r2, [r3, #56]	@ 0x38
            MacCtx.NodeAckRequested = false;
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	4b15      	ldr	r3, [pc, #84]	@ (800a31c <LoRaMacMcpsRequest+0x308>)
 800a2c6:	491d      	ldr	r1, [pc, #116]	@ (800a33c <LoRaMacMcpsRequest+0x328>)
 800a2c8:	e7eb      	b.n	800a2a2 <LoRaMacMcpsRequest+0x28e>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a2ca:	4d27      	ldr	r5, [pc, #156]	@ (800a368 <LoRaMacMcpsRequest+0x354>)
 800a2cc:	a90c      	add	r1, sp, #48	@ 0x30
 800a2ce:	002a      	movs	r2, r5
 800a2d0:	f000 f9a0 	bl	800a614 <LoRaMacCommandsSerializeCmds>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d1f0      	bne.n	800a2ba <LoRaMacMcpsRequest+0x2a6>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800a2d8:	2394      	movs	r3, #148	@ 0x94
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a2da:	2298      	movs	r2, #152	@ 0x98
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a2e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2e2:	0052      	lsls	r2, r2, #1
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800a2e4:	6335      	str	r5, [r6, #48]	@ 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a2e6:	54a3      	strb	r3, [r4, r2]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800a2e8:	e7c4      	b.n	800a274 <LoRaMacMcpsRequest+0x260>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800a2ea:	9b01      	ldr	r3, [sp, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d0c1      	beq.n	800a274 <LoRaMacMcpsRequest+0x260>
 800a2f0:	2a00      	cmp	r2, #0
 800a2f2:	d0bf      	beq.n	800a274 <LoRaMacMcpsRequest+0x260>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800a2f4:	466b      	mov	r3, sp
 800a2f6:	481d      	ldr	r0, [pc, #116]	@ (800a36c <LoRaMacMcpsRequest+0x358>)
 800a2f8:	781a      	ldrb	r2, [r3, #0]
 800a2fa:	9901      	ldr	r1, [sp, #4]
 800a2fc:	f002 f8de 	bl	800c4bc <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800a300:	4b10      	ldr	r3, [pc, #64]	@ (800a344 <LoRaMacMcpsRequest+0x330>)
 800a302:	5ce3      	ldrb	r3, [r4, r3]
 800a304:	3301      	adds	r3, #1
 800a306:	8023      	strh	r3, [r4, #0]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800a308:	e7b4      	b.n	800a274 <LoRaMacMcpsRequest+0x260>
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800a30a:	2412      	movs	r4, #18
 800a30c:	e7d6      	b.n	800a2bc <LoRaMacMcpsRequest+0x2a8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800a30e:	2407      	movs	r4, #7
 800a310:	e7d7      	b.n	800a2c2 <LoRaMacMcpsRequest+0x2ae>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a312:	2413      	movs	r4, #19
 800a314:	e7d5      	b.n	800a2c2 <LoRaMacMcpsRequest+0x2ae>
 800a316:	46c0      	nop			@ (mov r8, r8)
 800a318:	20001150 	.word	0x20001150
 800a31c:	20000d18 	.word	0x20000d18
 800a320:	00000439 	.word	0x00000439
 800a324:	00000412 	.word	0x00000412
 800a328:	00000411 	.word	0x00000411
 800a32c:	20000780 	.word	0x20000780
 800a330:	200007f4 	.word	0x200007f4
 800a334:	200007b8 	.word	0x200007b8
 800a338:	200007b9 	.word	0x200007b9
 800a33c:	00000414 	.word	0x00000414
 800a340:	20000e50 	.word	0x20000e50
 800a344:	00000237 	.word	0x00000237
 800a348:	20000d1a 	.word	0x20000d1a
 800a34c:	2000084c 	.word	0x2000084c
 800a350:	0000043c 	.word	0x0000043c
 800a354:	00000444 	.word	0x00000444
 800a358:	20000e30 	.word	0x20000e30
 800a35c:	200007ba 	.word	0x200007ba
 800a360:	00000481 	.word	0x00000481
 800a364:	00000484 	.word	0x00000484
 800a368:	200011a0 	.word	0x200011a0
 800a36c:	20000d1b 	.word	0x20000d1b

0800a370 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800a370:	b537      	push	{r0, r1, r2, r4, r5, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800a372:	4b07      	ldr	r3, [pc, #28]	@ (800a390 <LoRaMacTestSetDutyCycleOn+0x20>)
    verify.DutyCycle = enable;
 800a374:	a901      	add	r1, sp, #4
 800a376:	7008      	strb	r0, [r1, #0]
{
 800a378:	0004      	movs	r4, r0
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800a37a:	220f      	movs	r2, #15
 800a37c:	7818      	ldrb	r0, [r3, #0]
 800a37e:	4d05      	ldr	r5, [pc, #20]	@ (800a394 <LoRaMacTestSetDutyCycleOn+0x24>)
 800a380:	f000 feef 	bl	800b162 <RegionVerify>
 800a384:	2800      	cmp	r0, #0
 800a386:	d001      	beq.n	800a38c <LoRaMacTestSetDutyCycleOn+0x1c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800a388:	35ff      	adds	r5, #255	@ 0xff
 800a38a:	706c      	strb	r4, [r5, #1]
    }
}
 800a38c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800a38e:	46c0      	nop			@ (mov r8, r8)
 800a390:	200007c0 	.word	0x200007c0
 800a394:	20000780 	.word	0x20000780

0800a398 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800a398:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800a39a:	2500      	movs	r5, #0
{
 800a39c:	b08d      	sub	sp, #52	@ 0x34
 800a39e:	9104      	str	r1, [sp, #16]
 800a3a0:	9205      	str	r2, [sp, #20]
 800a3a2:	001e      	movs	r6, r3
    if( adrNext->Version.Fields.Minor == 0 )
 800a3a4:	7883      	ldrb	r3, [r0, #2]
{
 800a3a6:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 800a3a8:	42ab      	cmp	r3, r5
 800a3aa:	d12a      	bne.n	800a402 <LoRaMacAdrCalcNext+0x6a>
    int8_t datarate = adrNext->Datarate;
 800a3ac:	2310      	movs	r3, #16
 800a3ae:	56c3      	ldrsb	r3, [r0, r3]
 800a3b0:	9301      	str	r3, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800a3b2:	2311      	movs	r3, #17
 800a3b4:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 800a3b6:	9f01      	ldr	r7, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800a3b8:	9303      	str	r3, [sp, #12]
    *adrAckCounter = adrNext->AdrAckCounter;
 800a3ba:	6883      	ldr	r3, [r0, #8]
 800a3bc:	6033      	str	r3, [r6, #0]
    if( adrNext->AdrEnabled == true )
 800a3be:	7945      	ldrb	r5, [r0, #5]
 800a3c0:	2d00      	cmp	r5, #0
 800a3c2:	d019      	beq.n	800a3f8 <LoRaMacAdrCalcNext+0x60>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	aa06      	add	r2, sp, #24
 800a3c8:	7113      	strb	r3, [r2, #4]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a3ca:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a3cc:	a907      	add	r1, sp, #28
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a3ce:	7193      	strb	r3, [r2, #6]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a3d0:	7cc0      	ldrb	r0, [r0, #19]
 800a3d2:	f000 feac 	bl	800b12e <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800a3d6:	b243      	sxtb	r3, r0
 800a3d8:	9302      	str	r3, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800a3da:	466b      	mov	r3, sp
 800a3dc:	9a02      	ldr	r2, [sp, #8]
 800a3de:	791f      	ldrb	r7, [r3, #4]
 800a3e0:	9b01      	ldr	r3, [sp, #4]
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	da01      	bge.n	800a3ea <LoRaMacAdrCalcNext+0x52>
 800a3e6:	466b      	mov	r3, sp
 800a3e8:	7a1f      	ldrb	r7, [r3, #8]
        if( datarate == minTxDatarate )
 800a3ea:	9b01      	ldr	r3, [sp, #4]
 800a3ec:	9a02      	ldr	r2, [sp, #8]
 800a3ee:	2500      	movs	r5, #0
        datarate = MAX( datarate, minTxDatarate );
 800a3f0:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	dc08      	bgt.n	800a408 <LoRaMacAdrCalcNext+0x70>
            *adrAckCounter = 0;
 800a3f6:	6035      	str	r5, [r6, #0]
    *drOut = datarate;
 800a3f8:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 800a3fa:	9a03      	ldr	r2, [sp, #12]
    *drOut = datarate;
 800a3fc:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 800a3fe:	9b05      	ldr	r3, [sp, #20]
 800a400:	701a      	strb	r2, [r3, #0]
}
 800a402:	0028      	movs	r0, r5
 800a404:	b00d      	add	sp, #52	@ 0x34
 800a406:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a408:	89a1      	ldrh	r1, [r4, #12]
 800a40a:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a40c:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a40e:	428a      	cmp	r2, r1
 800a410:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a412:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a414:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a416:	429a      	cmp	r2, r3
 800a418:	d3ee      	bcc.n	800a3f8 <LoRaMacAdrCalcNext+0x60>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800a41a:	2308      	movs	r3, #8
 800a41c:	ae07      	add	r6, sp, #28
 800a41e:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a420:	0031      	movs	r1, r6
 800a422:	7ce0      	ldrb	r0, [r4, #19]
 800a424:	f000 fe83 	bl	800b12e <RegionGetPhyParam>
                txPower = phyParam.Value;
 800a428:	b243      	sxtb	r3, r0
 800a42a:	9303      	str	r3, [sp, #12]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800a42c:	89e1      	ldrh	r1, [r4, #14]
 800a42e:	68a0      	ldr	r0, [r4, #8]
 800a430:	f7f5 ff20 	bl	8000274 <__aeabi_uidivmod>
 800a434:	2901      	cmp	r1, #1
 800a436:	d1df      	bne.n	800a3f8 <LoRaMacAdrCalcNext+0x60>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a438:	2322      	movs	r3, #34	@ 0x22
                    getPhy.Datarate = datarate;
 800a43a:	7077      	strb	r7, [r6, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a43c:	7033      	strb	r3, [r6, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a43e:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a440:	0031      	movs	r1, r6
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a442:	70b3      	strb	r3, [r6, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a444:	7ce0      	ldrb	r0, [r4, #19]
 800a446:	f000 fe72 	bl	800b12e <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 800a44a:	9b02      	ldr	r3, [sp, #8]
                    datarate = phyParam.Value;
 800a44c:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 800a44e:	42bb      	cmp	r3, r7
 800a450:	d1d2      	bne.n	800a3f8 <LoRaMacAdrCalcNext+0x60>
                        if( adrNext->UpdateChanMask == true )
 800a452:	7923      	ldrb	r3, [r4, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d005      	beq.n	800a464 <LoRaMacAdrCalcNext+0xcc>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a458:	2302      	movs	r3, #2
 800a45a:	a909      	add	r1, sp, #36	@ 0x24
 800a45c:	720b      	strb	r3, [r1, #8]
                            RegionInitDefaults( adrNext->Region, &params );
 800a45e:	7ce0      	ldrb	r0, [r4, #19]
 800a460:	f000 fe78 	bl	800b154 <RegionInitDefaults>
                        adrAckReq = false;
 800a464:	2500      	movs	r5, #0
 800a466:	e7c7      	b.n	800a3f8 <LoRaMacAdrCalcNext+0x60>

0800a468 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a468:	4770      	bx	lr

0800a46a <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a46a:	4770      	bx	lr

0800a46c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
 800a46c:	4770      	bx	lr

0800a46e <LoRaMacClassBSetMulticastSlotState>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
 800a46e:	4770      	bx	lr

0800a470 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a470:	2000      	movs	r0, #0
 800a472:	4770      	bx	lr

0800a474 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a474:	4770      	bx	lr

0800a476 <LoRaMacClassBPingSlotTimerEvent>:
        TimerStart( &Ctx.BeaconTimer );
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
 800a476:	4770      	bx	lr

0800a478 <LoRaMacClassBMulticastSlotTimerEvent>:
        }
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
 800a478:	4770      	bx	lr

0800a47a <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a47a:	2000      	movs	r0, #0
 800a47c:	4770      	bx	lr

0800a47e <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
 800a47e:	2000      	movs	r0, #0
 800a480:	4770      	bx	lr

0800a482 <LoRaMacClassBIsPingExpected>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsPingExpected( void )
 800a482:	2000      	movs	r0, #0
 800a484:	4770      	bx	lr

0800a486 <LoRaMacClassBIsMulticastExpected>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsMulticastExpected( void )
 800a486:	2000      	movs	r0, #0
 800a488:	4770      	bx	lr

0800a48a <LoRaMacClassBIsBeaconModeActive>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
 800a48a:	2000      	movs	r0, #0
 800a48c:	4770      	bx	lr

0800a48e <LoRaMacClassBSetPingSlotInfo>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
 800a48e:	4770      	bx	lr

0800a490 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a490:	4770      	bx	lr

0800a492 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
 800a492:	4770      	bx	lr

0800a494 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a494:	2002      	movs	r0, #2
 800a496:	4770      	bx	lr

0800a498 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a498:	2002      	movs	r0, #2
 800a49a:	4770      	bx	lr

0800a49c <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
 800a49c:	2002      	movs	r0, #2
 800a49e:	4770      	bx	lr

0800a4a0 <LoRaMacClassBPingSlotInfoAns>:
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBPingSlotInfoAns( void )
 800a4a0:	4770      	bx	lr

0800a4a2 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	4770      	bx	lr

0800a4a6 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a4a6:	4770      	bx	lr

0800a4a8 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
 800a4a8:	4770      	bx	lr

0800a4aa <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	4770      	bx	lr

0800a4ae <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	4770      	bx	lr

0800a4b2 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
 800a4b2:	4770      	bx	lr

0800a4b4 <LoRaMacClassBProcess>:
        multicastChannel->PingPeriod = CalcPingPeriod( multicastChannel->PingNb );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
 800a4b4:	4770      	bx	lr
	...

0800a4b8 <LoRaMacCommandsInit>:
            return false;
    }
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800a4b8:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800a4ba:	4c05      	ldr	r4, [pc, #20]	@ (800a4d0 <LoRaMacCommandsInit+0x18>)
 800a4bc:	22fc      	movs	r2, #252	@ 0xfc
 800a4be:	0020      	movs	r0, r4
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	f002 f811 	bl	800c4e8 <memset1>
    list->First = NULL;
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	6020      	str	r0, [r4, #0]
    list->Last = NULL;
 800a4ca:	6060      	str	r0, [r4, #4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a4cc:	bd10      	pop	{r4, pc}
 800a4ce:	46c0      	nop			@ (mov r8, r8)
 800a4d0:	20001220 	.word	0x20001220

0800a4d4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800a4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( payload == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a4d6:	2701      	movs	r7, #1
{
 800a4d8:	9000      	str	r0, [sp, #0]
 800a4da:	9201      	str	r2, [sp, #4]
    if( payload == NULL )
 800a4dc:	2900      	cmp	r1, #0
 800a4de:	d031      	beq.n	800a544 <LoRaMacCommandsAddCmd+0x70>
 800a4e0:	230f      	movs	r3, #15
 800a4e2:	4c1d      	ldr	r4, [pc, #116]	@ (800a558 <LoRaMacCommandsAddCmd+0x84>)
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a4e4:	0020      	movs	r0, r4
    if( payload == NULL )
 800a4e6:	0022      	movs	r2, r4
 800a4e8:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 800a4ea:	7817      	ldrb	r7, [r2, #0]
 800a4ec:	2f00      	cmp	r7, #0
 800a4ee:	d12b      	bne.n	800a548 <LoRaMacCommandsAddCmd+0x74>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a4f0:	3201      	adds	r2, #1
 800a4f2:	4282      	cmp	r2, r0
 800a4f4:	d1f9      	bne.n	800a4ea <LoRaMacCommandsAddCmd+0x16>
    if( list->First == NULL )
 800a4f6:	4d19      	ldr	r5, [pc, #100]	@ (800a55c <LoRaMacCommandsAddCmd+0x88>)
 800a4f8:	682b      	ldr	r3, [r5, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d100      	bne.n	800a500 <LoRaMacCommandsAddCmd+0x2c>
        list->First = element;
 800a4fe:	602c      	str	r4, [r5, #0]
    if( list->Last )
 800a500:	686b      	ldr	r3, [r5, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d000      	beq.n	800a508 <LoRaMacCommandsAddCmd+0x34>
        list->Last->Next = element;
 800a506:	601c      	str	r4, [r3, #0]
    element->Next = NULL;
 800a508:	2600      	movs	r6, #0
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800a50a:	9b00      	ldr	r3, [sp, #0]
    element->Next = NULL;
 800a50c:	6026      	str	r6, [r4, #0]
    list->Last = element;
 800a50e:	606c      	str	r4, [r5, #4]
    newCmd->CID = cid;
 800a510:	7123      	strb	r3, [r4, #4]
    newCmd->PayloadSize = payloadSize;
 800a512:	9b01      	ldr	r3, [sp, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a514:	1d60      	adds	r0, r4, #5
    newCmd->PayloadSize = payloadSize;
 800a516:	60a3      	str	r3, [r4, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a518:	466b      	mov	r3, sp
 800a51a:	889a      	ldrh	r2, [r3, #4]
 800a51c:	f001 ffce 	bl	800c4bc <memcpy1>
    switch( cid )
 800a520:	9a00      	ldr	r2, [sp, #0]
            return true;
 800a522:	2301      	movs	r3, #1
    switch( cid )
 800a524:	2a05      	cmp	r2, #5
 800a526:	d006      	beq.n	800a536 <LoRaMacCommandsAddCmd+0x62>
 800a528:	0013      	movs	r3, r2
 800a52a:	2202      	movs	r2, #2
 800a52c:	3b08      	subs	r3, #8
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	429a      	cmp	r2, r3
 800a532:	4176      	adcs	r6, r6
 800a534:	b2f3      	uxtb	r3, r6
    newCmd->IsSticky = IsSticky( cid );

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a536:	35f8      	adds	r5, #248	@ 0xf8
    newCmd->IsSticky = IsSticky( cid );
 800a538:	7323      	strb	r3, [r4, #12]
    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a53a:	682b      	ldr	r3, [r5, #0]
 800a53c:	9a01      	ldr	r2, [sp, #4]
 800a53e:	3301      	adds	r3, #1
 800a540:	189b      	adds	r3, r3, r2
 800a542:	602b      	str	r3, [r5, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a544:	0038      	movs	r0, r7
 800a546:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800a548:	3b01      	subs	r3, #1
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	0004      	movs	r4, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1c8      	bne.n	800a4e4 <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800a552:	2702      	movs	r7, #2
 800a554:	e7f6      	b.n	800a544 <LoRaMacCommandsAddCmd+0x70>
 800a556:	46c0      	nop			@ (mov r8, r8)
 800a558:	20001228 	.word	0x20001228
 800a55c:	20001220 	.word	0x20001220

0800a560 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800a560:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a562:	2401      	movs	r4, #1
    if( macCmd == NULL )
 800a564:	2800      	cmp	r0, #0
 800a566:	d021      	beq.n	800a5ac <LoRaMacCommandsRemoveCmd+0x4c>
    curElement = list->First;
 800a568:	4b11      	ldr	r3, [pc, #68]	@ (800a5b0 <LoRaMacCommandsRemoveCmd+0x50>)
 800a56a:	681a      	ldr	r2, [r3, #0]
    if( element != curElement )
 800a56c:	4290      	cmp	r0, r2
 800a56e:	d104      	bne.n	800a57a <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 800a570:	6802      	ldr	r2, [r0, #0]
 800a572:	601a      	str	r2, [r3, #0]
            curElement = curElement->Next;
 800a574:	2200      	movs	r2, #0
 800a576:	e005      	b.n	800a584 <LoRaMacCommandsRemoveCmd+0x24>
 800a578:	000a      	movs	r2, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800a57a:	2a00      	cmp	r2, #0
 800a57c:	d0fa      	beq.n	800a574 <LoRaMacCommandsRemoveCmd+0x14>
 800a57e:	6811      	ldr	r1, [r2, #0]
 800a580:	4288      	cmp	r0, r1
 800a582:	d1f9      	bne.n	800a578 <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 800a584:	6859      	ldr	r1, [r3, #4]
 800a586:	4288      	cmp	r0, r1
 800a588:	d100      	bne.n	800a58c <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800a58a:	605a      	str	r2, [r3, #4]
    if( PrevElement != NULL )
 800a58c:	2a00      	cmp	r2, #0
 800a58e:	d001      	beq.n	800a594 <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 800a590:	6801      	ldr	r1, [r0, #0]
 800a592:	6011      	str	r1, [r2, #0]
    element->Next = NULL;
 800a594:	2400      	movs	r4, #0
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a596:	33f8      	adds	r3, #248	@ 0xf8
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	6881      	ldr	r1, [r0, #8]
 800a59c:	3a01      	subs	r2, #1
 800a59e:	1a52      	subs	r2, r2, r1
    element->Next = NULL;
 800a5a0:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a5a2:	0021      	movs	r1, r4
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a5a4:	601a      	str	r2, [r3, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a5a6:	2210      	movs	r2, #16
 800a5a8:	f001 ff9e 	bl	800c4e8 <memset1>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a5ac:	0020      	movs	r0, r4
 800a5ae:	bd10      	pop	{r4, pc}
 800a5b0:	20001220 	.word	0x20001220

0800a5b4 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800a5b4:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a5b6:	4b06      	ldr	r3, [pc, #24]	@ (800a5d0 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>)
 800a5b8:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d100      	bne.n	800a5c0 <LoRaMacCommandsRemoveNoneStickyCmds+0xc>
            curElement = curElement->Next;
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a5be:	bd10      	pop	{r4, pc}
        if( curElement->IsSticky == false )
 800a5c0:	7b03      	ldrb	r3, [r0, #12]
            nexElement = curElement->Next;
 800a5c2:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == false )
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d101      	bne.n	800a5cc <LoRaMacCommandsRemoveNoneStickyCmds+0x18>
            LoRaMacCommandsRemoveCmd( curElement );
 800a5c8:	f7ff ffca 	bl	800a560 <LoRaMacCommandsRemoveCmd>
{
 800a5cc:	0020      	movs	r0, r4
 800a5ce:	e7f4      	b.n	800a5ba <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800a5d0:	20001220 	.word	0x20001220

0800a5d4 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800a5d4:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a5d6:	4b08      	ldr	r3, [pc, #32]	@ (800a5f8 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800a5d8:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	d100      	bne.n	800a5e0 <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a5de:	bd10      	pop	{r4, pc}
        if( IsSticky( curElement->CID ) == true )
 800a5e0:	7903      	ldrb	r3, [r0, #4]
        nexElement = curElement->Next;
 800a5e2:	6804      	ldr	r4, [r0, #0]
    switch( cid )
 800a5e4:	2b05      	cmp	r3, #5
 800a5e6:	d002      	beq.n	800a5ee <LoRaMacCommandsRemoveStickyAnsCmds+0x1a>
 800a5e8:	3b08      	subs	r3, #8
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d801      	bhi.n	800a5f2 <LoRaMacCommandsRemoveStickyAnsCmds+0x1e>
            LoRaMacCommandsRemoveCmd( curElement );
 800a5ee:	f7ff ffb7 	bl	800a560 <LoRaMacCommandsRemoveCmd>
{
 800a5f2:	0020      	movs	r0, r4
 800a5f4:	e7f1      	b.n	800a5da <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 800a5f6:	46c0      	nop			@ (mov r8, r8)
 800a5f8:	20001220 	.word	0x20001220

0800a5fc <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800a5fc:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a5fe:	2001      	movs	r0, #1
    if( size == NULL )
 800a600:	2b00      	cmp	r3, #0
 800a602:	d003      	beq.n	800a60c <LoRaMacCommandsGetSizeSerializedCmds+0x10>
    }
    *size = CommandsCtx.SerializedCmdsSize;
    return LORAMAC_COMMANDS_SUCCESS;
 800a604:	2000      	movs	r0, #0
    *size = CommandsCtx.SerializedCmdsSize;
 800a606:	4a02      	ldr	r2, [pc, #8]	@ (800a610 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800a608:	6812      	ldr	r2, [r2, #0]
 800a60a:	601a      	str	r2, [r3, #0]
}
 800a60c:	4770      	bx	lr
 800a60e:	46c0      	nop			@ (mov r8, r8)
 800a610:	20001318 	.word	0x20001318

0800a614 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800a614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a616:	000f      	movs	r7, r1
 800a618:	9001      	str	r0, [sp, #4]
 800a61a:	0016      	movs	r6, r2
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a61c:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800a61e:	2a00      	cmp	r2, #0
 800a620:	d00a      	beq.n	800a638 <LoRaMacCommandsSerializeCmds+0x24>
 800a622:	2900      	cmp	r1, #0
 800a624:	d008      	beq.n	800a638 <LoRaMacCommandsSerializeCmds+0x24>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800a626:	4b13      	ldr	r3, [pc, #76]	@ (800a674 <LoRaMacCommandsSerializeCmds+0x60>)
 800a628:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800a62a:	2300      	movs	r3, #0
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800a62c:	2c00      	cmp	r4, #0
 800a62e:	d104      	bne.n	800a63a <LoRaMacCommandsSerializeCmds+0x26>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800a630:	0038      	movs	r0, r7
 800a632:	f7ff ffe3 	bl	800a5fc <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800a636:	0020      	movs	r0, r4
}
 800a638:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800a63a:	9a01      	ldr	r2, [sp, #4]
 800a63c:	1ad1      	subs	r1, r2, r3
 800a63e:	68a2      	ldr	r2, [r4, #8]
 800a640:	3201      	adds	r2, #1
 800a642:	4291      	cmp	r1, r2
 800a644:	d313      	bcc.n	800a66e <LoRaMacCommandsSerializeCmds+0x5a>
            buffer[itr++] = curElement->CID;
 800a646:	7922      	ldrb	r2, [r4, #4]
 800a648:	1c5d      	adds	r5, r3, #1
 800a64a:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a64c:	68a2      	ldr	r2, [r4, #8]
            buffer[itr++] = curElement->CID;
 800a64e:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a650:	1d61      	adds	r1, r4, #5
 800a652:	b292      	uxth	r2, r2
 800a654:	1970      	adds	r0, r6, r5
 800a656:	f001 ff31 	bl	800c4bc <memcpy1>
            itr += curElement->PayloadSize;
 800a65a:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800a65c:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 800a65e:	18eb      	adds	r3, r5, r3
 800a660:	b2db      	uxtb	r3, r3
        curElement = curElement->Next;
 800a662:	e7e3      	b.n	800a62c <LoRaMacCommandsSerializeCmds+0x18>
        nextElement = curElement->Next;
 800a664:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800a666:	0020      	movs	r0, r4
 800a668:	f7ff ff7a 	bl	800a560 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800a66c:	002c      	movs	r4, r5
    while( curElement != NULL )
 800a66e:	2c00      	cmp	r4, #0
 800a670:	d1f8      	bne.n	800a664 <LoRaMacCommandsSerializeCmds+0x50>
 800a672:	e7dd      	b.n	800a630 <LoRaMacCommandsSerializeCmds+0x1c>
 800a674:	20001220 	.word	0x20001220

0800a678 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800a678:	0003      	movs	r3, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a67a:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00b      	beq.n	800a698 <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;

    *cmdsPending = false;
 800a680:	2100      	movs	r1, #0
    curElement = CommandsCtx.MacCommandList.First;
 800a682:	4a07      	ldr	r2, [pc, #28]	@ (800a6a0 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800a684:	6812      	ldr	r2, [r2, #0]
    *cmdsPending = false;
 800a686:	7019      	strb	r1, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a688:	2a00      	cmp	r2, #0
 800a68a:	d004      	beq.n	800a696 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800a68c:	7b11      	ldrb	r1, [r2, #12]
 800a68e:	2900      	cmp	r1, #0
 800a690:	d003      	beq.n	800a69a <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800a692:	2201      	movs	r2, #1
 800a694:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800a696:	2000      	movs	r0, #0
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a698:	4770      	bx	lr
        curElement = curElement->Next;
 800a69a:	6812      	ldr	r2, [r2, #0]
 800a69c:	e7f4      	b.n	800a688 <LoRaMacCommandsStickyCmdsPending+0x10>
 800a69e:	46c0      	nop			@ (mov r8, r8)
 800a6a0:	20001220 	.word	0x20001220

0800a6a4 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800a6a4:	3802      	subs	r0, #2
 800a6a6:	b2c3      	uxtb	r3, r0
{
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	2b11      	cmp	r3, #17
 800a6ac:	d801      	bhi.n	800a6b2 <LoRaMacCommandsGetCmdSize+0xe>
 800a6ae:	4a01      	ldr	r2, [pc, #4]	@ (800a6b4 <LoRaMacCommandsGetCmdSize+0x10>)
 800a6b0:	5cd0      	ldrb	r0, [r2, r3]
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800a6b2:	4770      	bx	lr
 800a6b4:	0800ec2d 	.word	0x0800ec2d

0800a6b8 <GetElement.isra.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800a6b8:	b570      	push	{r4, r5, r6, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f0 <GetElement.isra.0+0x38>)
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800a6bc:	0004      	movs	r4, r0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a6be:	7fda      	ldrb	r2, [r3, #31]
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800a6c0:	0008      	movs	r0, r1
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a6c2:	490c      	ldr	r1, [pc, #48]	@ (800a6f4 <GetElement.isra.0+0x3c>)
    if( count == 0 )
 800a6c4:	2a00      	cmp	r2, #0
 800a6c6:	d011      	beq.n	800a6ec <GetElement.isra.0+0x34>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a6c8:	000d      	movs	r5, r1
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a6ca:	2300      	movs	r3, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a6cc:	351c      	adds	r5, #28
    {
        if( element->Request == request )
 800a6ce:	7806      	ldrb	r6, [r0, #0]
 800a6d0:	42a6      	cmp	r6, r4
 800a6d2:	d007      	beq.n	800a6e4 <GetElement.isra.0+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a6d4:	42a8      	cmp	r0, r5
 800a6d6:	d006      	beq.n	800a6e6 <GetElement.isra.0+0x2e>
        bufferPointer++;
 800a6d8:	3004      	adds	r0, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a6da:	3301      	adds	r3, #1
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d1f5      	bne.n	800a6ce <GetElement.isra.0+0x16>
        return NULL;
 800a6e2:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 800a6e4:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a6e6:	0008      	movs	r0, r1
 800a6e8:	300c      	adds	r0, #12
 800a6ea:	e7f6      	b.n	800a6da <GetElement.isra.0+0x22>
        return NULL;
 800a6ec:	0010      	movs	r0, r2
 800a6ee:	e7f9      	b.n	800a6e4 <GetElement.isra.0+0x2c>
 800a6f0:	2000131d 	.word	0x2000131d
 800a6f4:	2000131c 	.word	0x2000131c

0800a6f8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800a6f8:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800a6fa:	4c08      	ldr	r4, [pc, #32]	@ (800a71c <LoRaMacConfirmQueueInit+0x24>)

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a6fc:	2200      	movs	r2, #0
    ConfirmQueueCtx.Primitives = primitives;
 800a6fe:	6020      	str	r0, [r4, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a700:	0020      	movs	r0, r4
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a702:	1c63      	adds	r3, r4, #1
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a704:	300c      	adds	r0, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a706:	77da      	strb	r2, [r3, #31]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a708:	21ff      	movs	r1, #255	@ 0xff
 800a70a:	3214      	adds	r2, #20
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a70c:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a70e:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a710:	f001 feea 	bl	800c4e8 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	3402      	adds	r4, #2
 800a718:	77e3      	strb	r3, [r4, #31]
}
 800a71a:	bd10      	pop	{r4, pc}
 800a71c:	2000131c 	.word	0x2000131c

0800a720 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800a720:	b530      	push	{r4, r5, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a722:	4d0e      	ldr	r5, [pc, #56]	@ (800a75c <LoRaMacConfirmQueueAdd+0x3c>)
{
 800a724:	0002      	movs	r2, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a726:	7fec      	ldrb	r4, [r5, #31]
    {
        // Protect the buffer against overwrites
        return false;
 800a728:	2000      	movs	r0, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a72a:	490d      	ldr	r1, [pc, #52]	@ (800a760 <LoRaMacConfirmQueueAdd+0x40>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a72c:	2c04      	cmp	r4, #4
 800a72e:	d813      	bhi.n	800a758 <LoRaMacConfirmQueueAdd+0x38>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a730:	7810      	ldrb	r0, [r2, #0]
 800a732:	688b      	ldr	r3, [r1, #8]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a734:	3401      	adds	r4, #1
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a736:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800a738:	7850      	ldrb	r0, [r2, #1]
 800a73a:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a73c:	78d2      	ldrb	r2, [r2, #3]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a73e:	0008      	movs	r0, r1
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a740:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800a742:	2200      	movs	r2, #0
 800a744:	709a      	strb	r2, [r3, #2]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a746:	000a      	movs	r2, r1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a748:	301c      	adds	r0, #28
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a74a:	77ec      	strb	r4, [r5, #31]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a74c:	320c      	adds	r2, #12
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a74e:	4283      	cmp	r3, r0
 800a750:	d000      	beq.n	800a754 <LoRaMacConfirmQueueAdd+0x34>
        bufferPointer++;
 800a752:	1d1a      	adds	r2, r3, #4
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );

    return true;
 800a754:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800a756:	608a      	str	r2, [r1, #8]
}
 800a758:	bd30      	pop	{r4, r5, pc}
 800a75a:	46c0      	nop			@ (mov r8, r8)
 800a75c:	2000131d 	.word	0x2000131d
 800a760:	2000131c 	.word	0x2000131c

0800a764 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a764:	4908      	ldr	r1, [pc, #32]	@ (800a788 <LoRaMacConfirmQueueRemoveFirst+0x24>)
 800a766:	4a09      	ldr	r2, [pc, #36]	@ (800a78c <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800a768:	7fcb      	ldrb	r3, [r1, #31]
    {
        return false;
 800a76a:	1e18      	subs	r0, r3, #0
    if( count == 0 )
 800a76c:	d00b      	beq.n	800a786 <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a76e:	3b01      	subs	r3, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a770:	0010      	movs	r0, r2
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a772:	77cb      	strb	r3, [r1, #31]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a774:	0013      	movs	r3, r2
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a776:	6851      	ldr	r1, [r2, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a778:	301c      	adds	r0, #28
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a77a:	330c      	adds	r3, #12
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a77c:	4281      	cmp	r1, r0
 800a77e:	d000      	beq.n	800a782 <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer++;
 800a780:	1d0b      	adds	r3, r1, #4

    return true;
 800a782:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a784:	6053      	str	r3, [r2, #4]
}
 800a786:	4770      	bx	lr
 800a788:	2000131d 	.word	0x2000131d
 800a78c:	2000131c 	.word	0x2000131c

0800a790 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800a790:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a792:	4a08      	ldr	r2, [pc, #32]	@ (800a7b4 <LoRaMacConfirmQueueSetStatus+0x24>)
{
 800a794:	0004      	movs	r4, r0
    if( count == 0 )
 800a796:	7fd2      	ldrb	r2, [r2, #31]
{
 800a798:	0008      	movs	r0, r1
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a79a:	4b07      	ldr	r3, [pc, #28]	@ (800a7b8 <LoRaMacConfirmQueueSetStatus+0x28>)
    if( count == 0 )
 800a79c:	2a00      	cmp	r2, #0
 800a79e:	d007      	beq.n	800a7b0 <LoRaMacConfirmQueueSetStatus+0x20>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a7a0:	6859      	ldr	r1, [r3, #4]
 800a7a2:	f7ff ff89 	bl	800a6b8 <GetElement.isra.0>
        if( element != NULL )
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d002      	beq.n	800a7b0 <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 800a7aa:	2301      	movs	r3, #1
            element->Status = status;
 800a7ac:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800a7ae:	7083      	strb	r3, [r0, #2]
        }
    }
}
 800a7b0:	bd10      	pop	{r4, pc}
 800a7b2:	46c0      	nop			@ (mov r8, r8)
 800a7b4:	2000131d 	.word	0x2000131d
 800a7b8:	2000131c 	.word	0x2000131c

0800a7bc <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800a7bc:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a7be:	4a07      	ldr	r2, [pc, #28]	@ (800a7dc <LoRaMacConfirmQueueGetStatus+0x20>)
 800a7c0:	4b07      	ldr	r3, [pc, #28]	@ (800a7e0 <LoRaMacConfirmQueueGetStatus+0x24>)
    if( count == 0 )
 800a7c2:	7fd1      	ldrb	r1, [r2, #31]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a7c4:	2201      	movs	r2, #1
    if( count == 0 )
 800a7c6:	2900      	cmp	r1, #0
 800a7c8:	d006      	beq.n	800a7d8 <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a7ca:	6859      	ldr	r1, [r3, #4]
 800a7cc:	f7ff ff74 	bl	800a6b8 <GetElement.isra.0>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a7d0:	2201      	movs	r2, #1
        if( element != NULL )
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d000      	beq.n	800a7d8 <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 800a7d6:	7842      	ldrb	r2, [r0, #1]
}
 800a7d8:	0010      	movs	r0, r2
 800a7da:	bd10      	pop	{r4, pc}
 800a7dc:	2000131d 	.word	0x2000131d
 800a7e0:	2000131c 	.word	0x2000131c

0800a7e4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800a7e4:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a7e6:	4a0d      	ldr	r2, [pc, #52]	@ (800a81c <LoRaMacConfirmQueueSetStatusCmn+0x38>)

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800a7e8:	1c91      	adds	r1, r2, #2
 800a7ea:	77c8      	strb	r0, [r1, #31]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a7ec:	1c51      	adds	r1, r2, #1
    if( count == 0 )
 800a7ee:	7fc9      	ldrb	r1, [r1, #31]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a7f0:	6853      	ldr	r3, [r2, #4]
    if( count == 0 )
 800a7f2:	2900      	cmp	r1, #0
 800a7f4:	d00d      	beq.n	800a812 <LoRaMacConfirmQueueSetStatusCmn+0x2e>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a7f6:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800a7f8:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a7fa:	6891      	ldr	r1, [r2, #8]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a7fc:	341c      	adds	r4, #28
            if( element->RestrictCommonReadyToHandle == false )
 800a7fe:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 800a800:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800a802:	2e00      	cmp	r6, #0
 800a804:	d100      	bne.n	800a808 <LoRaMacConfirmQueueSetStatusCmn+0x24>
                element->ReadyToHandle = true;
 800a806:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a808:	42a3      	cmp	r3, r4
 800a80a:	d003      	beq.n	800a814 <LoRaMacConfirmQueueSetStatusCmn+0x30>
        bufferPointer++;
 800a80c:	3304      	adds	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a80e:	4299      	cmp	r1, r3
 800a810:	d1f5      	bne.n	800a7fe <LoRaMacConfirmQueueSetStatusCmn+0x1a>
    }
}
 800a812:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a814:	0013      	movs	r3, r2
 800a816:	330c      	adds	r3, #12
 800a818:	e7f9      	b.n	800a80e <LoRaMacConfirmQueueSetStatusCmn+0x2a>
 800a81a:	46c0      	nop			@ (mov r8, r8)
 800a81c:	2000131c 	.word	0x2000131c

0800a820 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a820:	4b04      	ldr	r3, [pc, #16]	@ (800a834 <LoRaMacConfirmQueueIsCmdActive+0x14>)
{
 800a822:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a824:	6859      	ldr	r1, [r3, #4]
 800a826:	f7ff ff47 	bl	800a6b8 <GetElement.isra.0>
 800a82a:	1e43      	subs	r3, r0, #1
 800a82c:	4198      	sbcs	r0, r3
    {
        return true;
    }
    return false;
}
 800a82e:	b2c0      	uxtb	r0, r0
 800a830:	bd10      	pop	{r4, pc}
 800a832:	46c0      	nop			@ (mov r8, r8)
 800a834:	2000131c 	.word	0x2000131c

0800a838 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800a838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a83a:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800a83c:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a83e:	4b13      	ldr	r3, [pc, #76]	@ (800a88c <LoRaMacConfirmQueueHandleCb+0x54>)
{
 800a840:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a842:	7fdb      	ldrb	r3, [r3, #31]
 800a844:	4f12      	ldr	r7, [pc, #72]	@ (800a890 <LoRaMacConfirmQueueHandleCb+0x58>)
 800a846:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 800a848:	9b01      	ldr	r3, [sp, #4]
 800a84a:	429c      	cmp	r4, r3
 800a84c:	d101      	bne.n	800a852 <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800a84e:	b005      	add	sp, #20
 800a850:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	7819      	ldrb	r1, [r3, #0]
 800a856:	7029      	strb	r1, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800a858:	785a      	ldrb	r2, [r3, #1]
 800a85a:	706a      	strb	r2, [r5, #1]
        if( readyToHandle == true )
 800a85c:	7898      	ldrb	r0, [r3, #2]
 800a85e:	2800      	cmp	r0, #0
 800a860:	d008      	beq.n	800a874 <LoRaMacConfirmQueueHandleCb+0x3c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	0028      	movs	r0, r5
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800a86a:	f7ff ff7b 	bl	800a764 <LoRaMacConfirmQueueRemoveFirst>
    for( uint8_t i = 0; i < nbElements; i++ )
 800a86e:	3401      	adds	r4, #1
 800a870:	b2e4      	uxtb	r4, r4
 800a872:	e7e9      	b.n	800a848 <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800a874:	ae03      	add	r6, sp, #12
 800a876:	7031      	strb	r1, [r6, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800a878:	7072      	strb	r2, [r6, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800a87a:	78db      	ldrb	r3, [r3, #3]
 800a87c:	70f3      	strb	r3, [r6, #3]
        LoRaMacConfirmQueueRemoveFirst( );
 800a87e:	f7ff ff71 	bl	800a764 <LoRaMacConfirmQueueRemoveFirst>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800a882:	0030      	movs	r0, r6
 800a884:	f7ff ff4c 	bl	800a720 <LoRaMacConfirmQueueAdd>
 800a888:	e7f1      	b.n	800a86e <LoRaMacConfirmQueueHandleCb+0x36>
 800a88a:	46c0      	nop			@ (mov r8, r8)
 800a88c:	2000131d 	.word	0x2000131d
 800a890:	2000131c 	.word	0x2000131c

0800a894 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a894:	4b01      	ldr	r3, [pc, #4]	@ (800a89c <LoRaMacConfirmQueueGetCnt+0x8>)
 800a896:	7fd8      	ldrb	r0, [r3, #31]
}
 800a898:	4770      	bx	lr
 800a89a:	46c0      	nop			@ (mov r8, r8)
 800a89c:	2000131d 	.word	0x2000131d

0800a8a0 <LoRaMacConfirmQueueIsFull>:
    }
    else
    {
        return false;
    }
}
 800a8a0:	2004      	movs	r0, #4
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a8a2:	4b03      	ldr	r3, [pc, #12]	@ (800a8b0 <LoRaMacConfirmQueueIsFull+0x10>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a8a4:	7fdb      	ldrb	r3, [r3, #31]
}
 800a8a6:	4298      	cmp	r0, r3
 800a8a8:	4180      	sbcs	r0, r0
 800a8aa:	4240      	negs	r0, r0
 800a8ac:	4770      	bx	lr
 800a8ae:	46c0      	nop			@ (mov r8, r8)
 800a8b0:	2000131d 	.word	0x2000131d

0800a8b4 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 800a8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	000c      	movs	r4, r1
 800a8ba:	0007      	movs	r7, r0
 800a8bc:	0016      	movs	r6, r2
    uint8_t compBase[16] = { 0 };
 800a8be:	2100      	movs	r1, #0
 800a8c0:	2210      	movs	r2, #16
 800a8c2:	4668      	mov	r0, sp
{
 800a8c4:	001d      	movs	r5, r3
    uint8_t compBase[16] = { 0 };
 800a8c6:	f003 fedf 	bl	800e688 <memset>

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 800a8ca:	466a      	mov	r2, sp
 800a8cc:	1e7b      	subs	r3, r7, #1
 800a8ce:	7013      	strb	r3, [r2, #0]
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800a8d0:	7054      	strb	r4, [r2, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800a8d2:	0a23      	lsrs	r3, r4, #8
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800a8d4:	8096      	strh	r6, [r2, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800a8d6:	71d5      	strb	r5, [r2, #7]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800a8d8:	0c24      	lsrs	r4, r4, #16
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800a8da:	0c36      	lsrs	r6, r6, #16
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800a8dc:	0a2d      	lsrs	r5, r5, #8
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800a8de:	7093      	strb	r3, [r2, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800a8e0:	70d4      	strb	r4, [r2, #3]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800a8e2:	7196      	strb	r6, [r2, #6]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800a8e4:	7215      	strb	r5, [r2, #8]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	003a      	movs	r2, r7
 800a8ea:	4668      	mov	r0, sp
 800a8ec:	f7fc fa15 	bl	8006d1a <SecureElementDeriveAndStoreKey>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d000      	beq.n	800a8f6 <DeriveSessionKey10x+0x42>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a8f4:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a8f6:	b005      	add	sp, #20
 800a8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8fa <PayloadEncrypt>:
{
 800a8fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8fc:	b08b      	sub	sp, #44	@ 0x2c
 800a8fe:	9000      	str	r0, [sp, #0]
 800a900:	001e      	movs	r6, r3
 800a902:	ab10      	add	r3, sp, #64	@ 0x40
 800a904:	781f      	ldrb	r7, [r3, #0]
    if( buffer == 0 )
 800a906:	9b00      	ldr	r3, [sp, #0]
{
 800a908:	000c      	movs	r4, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a90a:	200a      	movs	r0, #10
{
 800a90c:	9201      	str	r2, [sp, #4]
    if( buffer == 0 )
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d022      	beq.n	800a958 <PayloadEncrypt+0x5e>
    uint8_t aBlock[16] = { 0 };
 800a912:	ad06      	add	r5, sp, #24
    uint8_t sBlock[16] = { 0 };
 800a914:	2210      	movs	r2, #16
 800a916:	2100      	movs	r1, #0
 800a918:	a802      	add	r0, sp, #8
 800a91a:	f003 feb5 	bl	800e688 <memset>
    uint8_t aBlock[16] = { 0 };
 800a91e:	2210      	movs	r2, #16
 800a920:	2100      	movs	r1, #0
 800a922:	0028      	movs	r0, r5
 800a924:	f003 feb0 	bl	800e688 <memset>
    aBlock[0] = 0x01;
 800a928:	2201      	movs	r2, #1
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800a92a:	0c33      	lsrs	r3, r6, #16
    aBlock[6] = address & 0xFF;
 800a92c:	80ee      	strh	r6, [r5, #6]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a92e:	0e36      	lsrs	r6, r6, #24
    aBlock[5] = dir;
 800a930:	716f      	strb	r7, [r5, #5]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a932:	726e      	strb	r6, [r5, #9]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a934:	2710      	movs	r7, #16
    uint16_t ctr = 1;
 800a936:	0016      	movs	r6, r2
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800a938:	722b      	strb	r3, [r5, #8]
    aBlock[10] = frameCounter & 0xFF;
 800a93a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
    aBlock[0] = 0x01;
 800a93c:	702a      	strb	r2, [r5, #0]
    aBlock[10] = frameCounter & 0xFF;
 800a93e:	816b      	strh	r3, [r5, #10]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800a940:	0c1b      	lsrs	r3, r3, #16
 800a942:	732b      	strb	r3, [r5, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a944:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a946:	0e1b      	lsrs	r3, r3, #24
 800a948:	736b      	strb	r3, [r5, #13]
    while( size > 0 )
 800a94a:	b2f3      	uxtb	r3, r6
 800a94c:	011d      	lsls	r5, r3, #4
 800a94e:	3d10      	subs	r5, #16
 800a950:	b2ed      	uxtb	r5, r5
 800a952:	2c00      	cmp	r4, #0
 800a954:	dc02      	bgt.n	800a95c <PayloadEncrypt+0x62>
    return LORAMAC_CRYPTO_SUCCESS;
 800a956:	2000      	movs	r0, #0
}
 800a958:	b00b      	add	sp, #44	@ 0x2c
 800a95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 800a95c:	a806      	add	r0, sp, #24
 800a95e:	73c3      	strb	r3, [r0, #15]
        ctr++;
 800a960:	3601      	adds	r6, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a962:	2110      	movs	r1, #16
 800a964:	9a01      	ldr	r2, [sp, #4]
 800a966:	ab02      	add	r3, sp, #8
        ctr++;
 800a968:	b2b6      	uxth	r6, r6
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a96a:	f7fc f966 	bl	8006c3a <SecureElementAesEncrypt>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d113      	bne.n	800a99a <PayloadEncrypt+0xa0>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a972:	1c21      	adds	r1, r4, #0
 800a974:	2c10      	cmp	r4, #16
 800a976:	dd00      	ble.n	800a97a <PayloadEncrypt+0x80>
 800a978:	1c39      	adds	r1, r7, #0
 800a97a:	9b00      	ldr	r3, [sp, #0]
 800a97c:	b209      	sxth	r1, r1
 800a97e:	195d      	adds	r5, r3, r5
 800a980:	2300      	movs	r3, #0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a982:	a802      	add	r0, sp, #8
 800a984:	782a      	ldrb	r2, [r5, #0]
 800a986:	5c18      	ldrb	r0, [r3, r0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a988:	3301      	adds	r3, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a98a:	4042      	eors	r2, r0
 800a98c:	702a      	strb	r2, [r5, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a98e:	3501      	adds	r5, #1
 800a990:	4299      	cmp	r1, r3
 800a992:	dcf6      	bgt.n	800a982 <PayloadEncrypt+0x88>
        size -= 16;
 800a994:	3c10      	subs	r4, #16
 800a996:	b224      	sxth	r4, r4
        bufferIndex += 16;
 800a998:	e7d7      	b.n	800a94a <PayloadEncrypt+0x50>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a99a:	200f      	movs	r0, #15
 800a99c:	e7dc      	b.n	800a958 <PayloadEncrypt+0x5e>

0800a99e <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 800a99e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800a9a0:	2210      	movs	r2, #16
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	4668      	mov	r0, sp
 800a9a6:	f003 fe6f 	bl	800e688 <memset>

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800a9aa:	227f      	movs	r2, #127	@ 0x7f
 800a9ac:	2104      	movs	r1, #4
 800a9ae:	4668      	mov	r0, sp
 800a9b0:	f7fc f9b3 	bl	8006d1a <SecureElementDeriveAndStoreKey>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	d000      	beq.n	800a9ba <LoRaMacCryptoDeriveMcKEKey.part.0+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a9b8:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a9ba:	b005      	add	sp, #20
 800a9bc:	bd00      	pop	{pc}
	...

0800a9c0 <GetLastFcntDown.constprop.0>:
    switch( fCntID )
 800a9c0:	3801      	subs	r0, #1
 800a9c2:	2305      	movs	r3, #5
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
 800a9c4:	b500      	push	{lr}
    switch( fCntID )
 800a9c6:	2803      	cmp	r0, #3
 800a9c8:	d809      	bhi.n	800a9de <GetLastFcntDown.constprop.0+0x1e>
 800a9ca:	4b09      	ldr	r3, [pc, #36]	@ (800a9f0 <GetLastFcntDown.constprop.0+0x30>)
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800a9cc:	681b      	ldr	r3, [r3, #0]
    switch( fCntID )
 800a9ce:	f7f5 fbad 	bl	800012c <__gnu_thumb1_case_uqi>
 800a9d2:	0802      	.short	0x0802
 800a9d4:	0c0a      	.short	0x0c0a
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800a9d6:	691a      	ldr	r2, [r3, #16]
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800a9d8:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a9da:	621a      	str	r2, [r3, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	0018      	movs	r0, r3
 800a9e0:	bd00      	pop	{pc}
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800a9e2:	695a      	ldr	r2, [r3, #20]
 800a9e4:	e7f8      	b.n	800a9d8 <GetLastFcntDown.constprop.0+0x18>
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800a9e6:	699a      	ldr	r2, [r3, #24]
 800a9e8:	e7f6      	b.n	800a9d8 <GetLastFcntDown.constprop.0+0x18>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800a9ea:	69db      	ldr	r3, [r3, #28]
 800a9ec:	600b      	str	r3, [r1, #0]
            break;
 800a9ee:	e7f5      	b.n	800a9dc <GetLastFcntDown.constprop.0+0x1c>
 800a9f0:	20001340 	.word	0x20001340

0800a9f4 <VerifyCmacB0.constprop.0.isra.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800a9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9f6:	b0c7      	sub	sp, #284	@ 0x11c
 800a9f8:	0007      	movs	r7, r0
 800a9fa:	000c      	movs	r4, r1
 800a9fc:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a9fe:	200a      	movs	r0, #10
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800aa00:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 800aa02:	2f00      	cmp	r7, #0
 800aa04:	d02f      	beq.n	800aa66 <VerifyCmacB0.constprop.0.isra.0+0x72>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800aa06:	2680      	movs	r6, #128	@ 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800aa08:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800aa0a:	0076      	lsls	r6, r6, #1
 800aa0c:	42b1      	cmp	r1, r6
 800aa0e:	d82a      	bhi.n	800aa66 <VerifyCmacB0.constprop.0.isra.0+0x72>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800aa10:	2288      	movs	r2, #136	@ 0x88
 800aa12:	2100      	movs	r1, #0
 800aa14:	0052      	lsls	r2, r2, #1
 800aa16:	a802      	add	r0, sp, #8
 800aa18:	f001 fd66 	bl	800c4e8 <memset1>
    b0[0] = 0x49;
 800aa1c:	2349      	movs	r3, #73	@ 0x49
 800aa1e:	9302      	str	r3, [sp, #8]
    b0[4] = 0x00;
 800aa20:	ab02      	add	r3, sp, #8
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800aa22:	aa02      	add	r2, sp, #8
    b0[4] = 0x00;
 800aa24:	809e      	strh	r6, [r3, #4]
    b0[6] = devAddr & 0xFF;
 800aa26:	80dd      	strh	r5, [r3, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800aa28:	0c2b      	lsrs	r3, r5, #16
 800aa2a:	7213      	strb	r3, [r2, #8]
    b0[10] = fCnt & 0xFF;
 800aa2c:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800aa2e:	0e2d      	lsrs	r5, r5, #24
    b0[10] = fCnt & 0xFF;
 800aa30:	8153      	strh	r3, [r2, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800aa32:	0c1b      	lsrs	r3, r3, #16
 800aa34:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800aa36:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
    b0[15] = msgLen & 0xFF;
 800aa38:	73d4      	strb	r4, [r2, #15]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800aa3a:	0e1e      	lsrs	r6, r3, #24
    b0[14] = 0x00;
 800aa3c:	2300      	movs	r3, #0
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800aa3e:	0039      	movs	r1, r7
    b0[14] = 0x00;
 800aa40:	7393      	strb	r3, [r2, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800aa42:	7255      	strb	r5, [r2, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800aa44:	7356      	strb	r6, [r2, #13]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800aa46:	a806      	add	r0, sp, #24
 800aa48:	0022      	movs	r2, r4
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800aa4a:	3410      	adds	r4, #16
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800aa4c:	f001 fd36 	bl	800c4bc <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800aa50:	9b01      	ldr	r3, [sp, #4]
 800aa52:	9a4d      	ldr	r2, [sp, #308]	@ 0x134
 800aa54:	b2a1      	uxth	r1, r4
 800aa56:	a802      	add	r0, sp, #8
 800aa58:	f7fc f8d7 	bl	8006c0a <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d002      	beq.n	800aa66 <VerifyCmacB0.constprop.0.isra.0+0x72>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800aa60:	2801      	cmp	r0, #1
 800aa62:	d000      	beq.n	800aa66 <VerifyCmacB0.constprop.0.isra.0+0x72>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800aa64:	200f      	movs	r0, #15
}
 800aa66:	b047      	add	sp, #284	@ 0x11c
 800aa68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800aa6c <LoRaMacCryptoInit>:
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800aa6c:	2309      	movs	r3, #9
{
 800aa6e:	b510      	push	{r4, lr}
    if( nvm == NULL )
 800aa70:	2800      	cmp	r0, #0
 800aa72:	d012      	beq.n	800aa9a <LoRaMacCryptoInit+0x2e>
    CryptoNvm = nvm;
 800aa74:	4c0a      	ldr	r4, [pc, #40]	@ (800aaa0 <LoRaMacCryptoInit+0x34>)
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800aa76:	2228      	movs	r2, #40	@ 0x28
 800aa78:	2100      	movs	r1, #0
    CryptoNvm = nvm;
 800aa7a:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800aa7c:	f001 fd34 	bl	800c4e8 <memset1>
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800aa80:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800aa82:	4a08      	ldr	r2, [pc, #32]	@ (800aaa4 <LoRaMacCryptoInit+0x38>)
    CryptoNvm->FCntList.FCntUp = 0;
 800aa84:	2000      	movs	r0, #0
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800aa86:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa88:	2201      	movs	r2, #1
 800aa8a:	4252      	negs	r2, r2
    CryptoNvm->FCntList.FCntUp = 0;
 800aa8c:	60d8      	str	r0, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa8e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa90:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa92:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800aa94:	621a      	str	r2, [r3, #32]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800aa96:	61da      	str	r2, [r3, #28]
    return LORAMAC_CRYPTO_SUCCESS;
 800aa98:	0003      	movs	r3, r0
}
 800aa9a:	0018      	movs	r0, r3
 800aa9c:	bd10      	pop	{r4, pc}
 800aa9e:	46c0      	nop			@ (mov r8, r8)
 800aaa0:	20001340 	.word	0x20001340
 800aaa4:	01010100 	.word	0x01010100

0800aaa8 <LoRaMacCryptoSetLrWanVersion>:
    CryptoNvm->LrWanVersion = version;
 800aaa8:	4b02      	ldr	r3, [pc, #8]	@ (800aab4 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6018      	str	r0, [r3, #0]
}
 800aaae:	2000      	movs	r0, #0
 800aab0:	4770      	bx	lr
 800aab2:	46c0      	nop			@ (mov r8, r8)
 800aab4:	20001340 	.word	0x20001340

0800aab8 <LoRaMacCryptoGetFCntUp>:
{
 800aab8:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aaba:	200a      	movs	r0, #10
    if( currentUp == NULL )
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d005      	beq.n	800aacc <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800aac0:	2000      	movs	r0, #0
    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800aac2:	4a03      	ldr	r2, [pc, #12]	@ (800aad0 <LoRaMacCryptoGetFCntUp+0x18>)
 800aac4:	6812      	ldr	r2, [r2, #0]
 800aac6:	68d2      	ldr	r2, [r2, #12]
 800aac8:	3201      	adds	r2, #1
 800aaca:	601a      	str	r2, [r3, #0]
}
 800aacc:	4770      	bx	lr
 800aace:	46c0      	nop			@ (mov r8, r8)
 800aad0:	20001340 	.word	0x20001340

0800aad4 <LoRaMacCryptoGetFCntDown>:
{
 800aad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aad6:	001f      	movs	r7, r3
    uint32_t lastDown = 0;
 800aad8:	2300      	movs	r3, #0
{
 800aada:	b085      	sub	sp, #20
 800aadc:	0015      	movs	r5, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aade:	240a      	movs	r4, #10
{
 800aae0:	9101      	str	r1, [sp, #4]
    uint32_t lastDown = 0;
 800aae2:	9303      	str	r3, [sp, #12]
    if( currentDown == NULL )
 800aae4:	429f      	cmp	r7, r3
 800aae6:	d027      	beq.n	800ab38 <LoRaMacCryptoGetFCntDown+0x64>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800aae8:	a903      	add	r1, sp, #12
 800aaea:	f7ff ff69 	bl	800a9c0 <GetLastFcntDown.constprop.0>
 800aaee:	1e04      	subs	r4, r0, #0
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800aaf0:	d122      	bne.n	800ab38 <LoRaMacCryptoGetFCntDown+0x64>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800aaf2:	9e03      	ldr	r6, [sp, #12]
 800aaf4:	1c73      	adds	r3, r6, #1
 800aaf6:	d004      	beq.n	800ab02 <LoRaMacCryptoGetFCntDown+0x2e>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800aaf8:	b2b3      	uxth	r3, r6
 800aafa:	1aeb      	subs	r3, r5, r3
        if( fCntDiff > 0 )
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	dd17      	ble.n	800ab30 <LoRaMacCryptoGetFCntDown+0x5c>
            *currentDown = lastDown + fCntDiff;
 800ab00:	18f5      	adds	r5, r6, r3
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800ab02:	4b12      	ldr	r3, [pc, #72]	@ (800ab4c <LoRaMacCryptoGetFCntDown+0x78>)
        *currentDown = frameFcnt;
 800ab04:	603d      	str	r5, [r7, #0]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	789f      	ldrb	r7, [r3, #2]
 800ab0a:	2f00      	cmp	r7, #0
 800ab0c:	d114      	bne.n	800ab38 <LoRaMacCryptoGetFCntDown+0x64>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800ab0e:	002a      	movs	r2, r5
 800ab10:	003b      	movs	r3, r7
 800ab12:	0030      	movs	r0, r6
 800ab14:	0039      	movs	r1, r7
 800ab16:	1a12      	subs	r2, r2, r0
 800ab18:	418b      	sbcs	r3, r1
 800ab1a:	2401      	movs	r4, #1
 800ab1c:	429f      	cmp	r7, r3
 800ab1e:	dc03      	bgt.n	800ab28 <LoRaMacCryptoGetFCntDown+0x54>
 800ab20:	d103      	bne.n	800ab2a <LoRaMacCryptoGetFCntDown+0x56>
 800ab22:	9901      	ldr	r1, [sp, #4]
 800ab24:	4291      	cmp	r1, r2
 800ab26:	d900      	bls.n	800ab2a <LoRaMacCryptoGetFCntDown+0x56>
 800ab28:	2400      	movs	r4, #0
 800ab2a:	00e4      	lsls	r4, r4, #3
 800ab2c:	b2e4      	uxtb	r4, r4
 800ab2e:	e003      	b.n	800ab38 <LoRaMacCryptoGetFCntDown+0x64>
        else if( fCntDiff == 0 )
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d104      	bne.n	800ab3e <LoRaMacCryptoGetFCntDown+0x6a>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800ab34:	2407      	movs	r4, #7
            *currentDown = lastDown;
 800ab36:	603e      	str	r6, [r7, #0]
}
 800ab38:	0020      	movs	r0, r4
 800ab3a:	b005      	add	sp, #20
 800ab3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800ab3e:	2280      	movs	r2, #128	@ 0x80
 800ab40:	0c33      	lsrs	r3, r6, #16
 800ab42:	041b      	lsls	r3, r3, #16
 800ab44:	0252      	lsls	r2, r2, #9
 800ab46:	189b      	adds	r3, r3, r2
 800ab48:	18ed      	adds	r5, r5, r3
 800ab4a:	e7da      	b.n	800ab02 <LoRaMacCryptoGetFCntDown+0x2e>
 800ab4c:	20001340 	.word	0x20001340

0800ab50 <LoRaMacCryptoSetMulticastReference>:
{
 800ab50:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab52:	200a      	movs	r0, #10
    if( multicastList == NULL )
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d004      	beq.n	800ab62 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800ab58:	2000      	movs	r0, #0
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800ab5a:	4a02      	ldr	r2, [pc, #8]	@ (800ab64 <LoRaMacCryptoSetMulticastReference+0x14>)
 800ab5c:	6812      	ldr	r2, [r2, #0]
 800ab5e:	321c      	adds	r2, #28
 800ab60:	621a      	str	r2, [r3, #32]
}
 800ab62:	4770      	bx	lr
 800ab64:	20001340 	.word	0x20001340

0800ab68 <LoRaMacCryptoPrepareJoinRequest>:
{
 800ab68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab6a:	0004      	movs	r4, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab6c:	200a      	movs	r0, #10
    if( macMsg == 0 )
 800ab6e:	2c00      	cmp	r4, #0
 800ab70:	d010      	beq.n	800ab94 <LoRaMacCryptoPrepareJoinRequest+0x2c>
    uint32_t devNonce = 0;
 800ab72:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 800ab74:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 800ab76:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800ab78:	f7fc f92e 	bl	8006dd8 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800ab7c:	4a0f      	ldr	r2, [pc, #60]	@ (800abbc <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800ab7e:	9b03      	ldr	r3, [sp, #12]
 800ab80:	6812      	ldr	r2, [r2, #0]
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	8093      	strh	r3, [r2, #4]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ab86:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800ab88:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ab8a:	f000 fa27 	bl	800afdc <LoRaMacSerializerJoinRequest>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d002      	beq.n	800ab98 <LoRaMacCryptoPrepareJoinRequest+0x30>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ab92:	2011      	movs	r0, #17
}
 800ab94:	b004      	add	sp, #16
 800ab96:	bd10      	pop	{r4, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800ab98:	0023      	movs	r3, r4
 800ab9a:	3318      	adds	r3, #24
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	2213      	movs	r2, #19
 800aba0:	2301      	movs	r3, #1
 800aba2:	6821      	ldr	r1, [r4, #0]
 800aba4:	f7fc f826 	bl	8006bf4 <SecureElementComputeAesCmac>
 800aba8:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800abaa:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1f1      	bne.n	800ab94 <LoRaMacCryptoPrepareJoinRequest+0x2c>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800abb0:	0020      	movs	r0, r4
 800abb2:	f000 fa13 	bl	800afdc <LoRaMacSerializerJoinRequest>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d0ec      	beq.n	800ab94 <LoRaMacCryptoPrepareJoinRequest+0x2c>
 800abba:	e7ea      	b.n	800ab92 <LoRaMacCryptoPrepareJoinRequest+0x2a>
 800abbc:	20001340 	.word	0x20001340

0800abc0 <LoRaMacCryptoSecureMessage>:
{
 800abc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abc2:	0005      	movs	r5, r0
 800abc4:	001c      	movs	r4, r3
 800abc6:	b089      	sub	sp, #36	@ 0x24
    if( macMsg == NULL )
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d102      	bne.n	800abd2 <LoRaMacCryptoSecureMessage+0x12>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800abcc:	200a      	movs	r0, #10
}
 800abce:	b009      	add	sp, #36	@ 0x24
 800abd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800abd2:	4b2b      	ldr	r3, [pc, #172]	@ (800ac80 <LoRaMacCryptoSecureMessage+0xc0>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800abd4:	2006      	movs	r0, #6
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	42ab      	cmp	r3, r5
 800abdc:	d8f7      	bhi.n	800abce <LoRaMacCryptoSecureMessage+0xe>
    if( macMsg->FPort == 0 )
 800abde:	1c62      	adds	r2, r4, #1
 800abe0:	7fd2      	ldrb	r2, [r2, #31]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800abe2:	1e51      	subs	r1, r2, #1
 800abe4:	418a      	sbcs	r2, r1
 800abe6:	3202      	adds	r2, #2
    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800abe8:	42ab      	cmp	r3, r5
 800abea:	d306      	bcc.n	800abfa <LoRaMacCryptoSecureMessage+0x3a>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800abec:	0020      	movs	r0, r4
 800abee:	f000 fa2a 	bl	800b046 <LoRaMacSerializerData>
 800abf2:	1e03      	subs	r3, r0, #0
 800abf4:	d00e      	beq.n	800ac14 <LoRaMacCryptoSecureMessage+0x54>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800abf6:	2011      	movs	r0, #17
 800abf8:	e7e9      	b.n	800abce <LoRaMacCryptoSecureMessage+0xe>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800abfa:	0023      	movs	r3, r4
 800abfc:	3328      	adds	r3, #40	@ 0x28
 800abfe:	7819      	ldrb	r1, [r3, #0]
 800ac00:	2300      	movs	r3, #0
 800ac02:	9501      	str	r5, [sp, #4]
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	68a3      	ldr	r3, [r4, #8]
 800ac08:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ac0a:	f7ff fe76 	bl	800a8fa <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d0ec      	beq.n	800abec <LoRaMacCryptoSecureMessage+0x2c>
 800ac12:	e7dc      	b.n	800abce <LoRaMacCryptoSecureMessage+0xe>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ac14:	7926      	ldrb	r6, [r4, #4]
 800ac16:	8920      	ldrh	r0, [r4, #8]
 800ac18:	3e04      	subs	r6, #4
 800ac1a:	6821      	ldr	r1, [r4, #0]
 800ac1c:	b2b2      	uxth	r2, r6
 800ac1e:	68a7      	ldr	r7, [r4, #8]
 800ac20:	9202      	str	r2, [sp, #8]
 800ac22:	9003      	str	r0, [sp, #12]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800ac24:	2900      	cmp	r1, #0
 800ac26:	d0d1      	beq.n	800abcc <LoRaMacCryptoSecureMessage+0xc>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ac28:	2080      	movs	r0, #128	@ 0x80
 800ac2a:	0040      	lsls	r0, r0, #1
 800ac2c:	4684      	mov	ip, r0
            return retval;
 800ac2e:	38f2      	subs	r0, #242	@ 0xf2
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ac30:	4562      	cmp	r2, ip
 800ac32:	d8cc      	bhi.n	800abce <LoRaMacCryptoSecureMessage+0xe>
    b0[0] = 0x49;
 800ac34:	303b      	adds	r0, #59	@ 0x3b
 800ac36:	9004      	str	r0, [sp, #16]
    b0[4] = 0x00;
 800ac38:	a804      	add	r0, sp, #16
 800ac3a:	8083      	strh	r3, [r0, #4]
    b0[14] = 0x00;
 800ac3c:	7383      	strb	r3, [r0, #14]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ac3e:	0023      	movs	r3, r4
    b0[6] = devAddr & 0xFF;
 800ac40:	9a03      	ldr	r2, [sp, #12]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ac42:	332c      	adds	r3, #44	@ 0x2c
    b0[6] = devAddr & 0xFF;
 800ac44:	80c2      	strh	r2, [r0, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800ac46:	0c3a      	lsrs	r2, r7, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800ac48:	0e3f      	lsrs	r7, r7, #24
 800ac4a:	7247      	strb	r7, [r0, #9]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800ac4c:	0c2f      	lsrs	r7, r5, #16
 800ac4e:	7307      	strb	r7, [r0, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800ac50:	0e2f      	lsrs	r7, r5, #24
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800ac52:	7202      	strb	r2, [r0, #8]
    b0[10] = fCnt & 0xFF;
 800ac54:	8145      	strh	r5, [r0, #10]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800ac56:	7347      	strb	r7, [r0, #13]
    b0[15] = msgLen & 0xFF;
 800ac58:	73c6      	strb	r6, [r0, #15]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800ac5a:	9a02      	ldr	r2, [sp, #8]
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	2302      	movs	r3, #2
 800ac60:	f7fb ffc8 	bl	8006bf4 <SecureElementComputeAesCmac>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d001      	beq.n	800ac6c <LoRaMacCryptoSecureMessage+0xac>
            return retval;
 800ac68:	200f      	movs	r0, #15
 800ac6a:	e7b0      	b.n	800abce <LoRaMacCryptoSecureMessage+0xe>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ac6c:	0020      	movs	r0, r4
 800ac6e:	f000 f9ea 	bl	800b046 <LoRaMacSerializerData>
 800ac72:	2800      	cmp	r0, #0
 800ac74:	d1bf      	bne.n	800abf6 <LoRaMacCryptoSecureMessage+0x36>
    CryptoNvm->FCntList.FCntUp = fCntUp;
 800ac76:	4b02      	ldr	r3, [pc, #8]	@ (800ac80 <LoRaMacCryptoSecureMessage+0xc0>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	60dd      	str	r5, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
 800ac7c:	e7a7      	b.n	800abce <LoRaMacCryptoSecureMessage+0xe>
 800ac7e:	46c0      	nop			@ (mov r8, r8)
 800ac80:	20001340 	.word	0x20001340

0800ac84 <LoRaMacCryptoUnsecureMessage>:
{
 800ac84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac86:	b087      	sub	sp, #28
 800ac88:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800ac8a:	001c      	movs	r4, r3
 800ac8c:	0007      	movs	r7, r0
 800ac8e:	000e      	movs	r6, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ac90:	230a      	movs	r3, #10
{
 800ac92:	9203      	str	r2, [sp, #12]
    if( macMsg == 0 )
 800ac94:	2d00      	cmp	r5, #0
 800ac96:	d008      	beq.n	800acaa <LoRaMacCryptoUnsecureMessage+0x26>
    uint32_t lastDown = 0;
 800ac98:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800ac9a:	0010      	movs	r0, r2
 800ac9c:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
 800ac9e:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800aca0:	f7ff fe8e 	bl	800a9c0 <GetLastFcntDown.constprop.0>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d003      	beq.n	800acb0 <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800aca8:	2306      	movs	r3, #6
}
 800acaa:	0018      	movs	r0, r3
 800acac:	b007      	add	sp, #28
 800acae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( currentDown > lastDown ) ||
 800acb0:	9b05      	ldr	r3, [sp, #20]
 800acb2:	429c      	cmp	r4, r3
 800acb4:	d801      	bhi.n	800acba <LoRaMacCryptoUnsecureMessage+0x36>
 800acb6:	3301      	adds	r3, #1
 800acb8:	d1f6      	bne.n	800aca8 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800acba:	0028      	movs	r0, r5
 800acbc:	f000 f934 	bl	800af28 <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800acc0:	2310      	movs	r3, #16
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d1f1      	bne.n	800acaa <LoRaMacCryptoUnsecureMessage+0x26>
        if( KeyAddrList[i].AddrID == addrID )
 800acc6:	4a20      	ldr	r2, [pc, #128]	@ (800ad48 <LoRaMacCryptoUnsecureMessage+0xc4>)
 800acc8:	7813      	ldrb	r3, [r2, #0]
 800acca:	42bb      	cmp	r3, r7
 800accc:	d004      	beq.n	800acd8 <LoRaMacCryptoUnsecureMessage+0x54>
 800acce:	7911      	ldrb	r1, [r2, #4]
        return retval;
 800acd0:	230c      	movs	r3, #12
        if( KeyAddrList[i].AddrID == addrID )
 800acd2:	42b9      	cmp	r1, r7
 800acd4:	d1e9      	bne.n	800acaa <LoRaMacCryptoUnsecureMessage+0x26>
 800acd6:	3001      	adds	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 800acd8:	68a9      	ldr	r1, [r5, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800acda:	2302      	movs	r3, #2
    if( address != macMsg->FHDR.DevAddr )
 800acdc:	42b1      	cmp	r1, r6
 800acde:	d1e4      	bne.n	800acaa <LoRaMacCryptoUnsecureMessage+0x26>
    payloadDecryptionKeyID = curItem->AppSkey;
 800ace0:	4098      	lsls	r0, r3
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800ace2:	7929      	ldrb	r1, [r5, #4]
 800ace4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
    payloadDecryptionKeyID = curItem->AppSkey;
 800ace6:	1812      	adds	r2, r2, r0
 800ace8:	7857      	ldrb	r7, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800acea:	3904      	subs	r1, #4
 800acec:	7892      	ldrb	r2, [r2, #2]
 800acee:	9301      	str	r3, [sp, #4]
 800acf0:	9400      	str	r4, [sp, #0]
 800acf2:	0033      	movs	r3, r6
 800acf4:	6828      	ldr	r0, [r5, #0]
 800acf6:	b289      	uxth	r1, r1
 800acf8:	f7ff fe7c 	bl	800a9f4 <VerifyCmacB0.constprop.0.isra.0>
 800acfc:	1e03      	subs	r3, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800acfe:	d1d4      	bne.n	800acaa <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 800ad00:	1c6b      	adds	r3, r5, #1
 800ad02:	7fdb      	ldrb	r3, [r3, #31]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d100      	bne.n	800ad0a <LoRaMacCryptoUnsecureMessage+0x86>
        payloadDecryptionKeyID = NWK_S_KEY;
 800ad08:	2702      	movs	r7, #2
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800ad0a:	002b      	movs	r3, r5
 800ad0c:	3328      	adds	r3, #40	@ 0x28
 800ad0e:	7819      	ldrb	r1, [r3, #0]
 800ad10:	2301      	movs	r3, #1
 800ad12:	9401      	str	r4, [sp, #4]
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	003a      	movs	r2, r7
 800ad18:	0033      	movs	r3, r6
 800ad1a:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800ad1c:	f7ff fded 	bl	800a8fa <PayloadEncrypt>
 800ad20:	1e03      	subs	r3, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad22:	d1c2      	bne.n	800acaa <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 800ad24:	9803      	ldr	r0, [sp, #12]
 800ad26:	3801      	subs	r0, #1
 800ad28:	2803      	cmp	r0, #3
 800ad2a:	d8be      	bhi.n	800acaa <LoRaMacCryptoUnsecureMessage+0x26>
 800ad2c:	4a07      	ldr	r2, [pc, #28]	@ (800ad4c <LoRaMacCryptoUnsecureMessage+0xc8>)
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800ad2e:	6812      	ldr	r2, [r2, #0]
    switch( fCntID )
 800ad30:	f7f5 f9fc 	bl	800012c <__gnu_thumb1_case_uqi>
 800ad34:	08060402 	.word	0x08060402
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800ad38:	6114      	str	r4, [r2, #16]
            break;
 800ad3a:	e7b6      	b.n	800acaa <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800ad3c:	6154      	str	r4, [r2, #20]
            break;
 800ad3e:	e7b4      	b.n	800acaa <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.FCntDown = currentDown;
 800ad40:	6194      	str	r4, [r2, #24]
            break;
 800ad42:	e7b2      	b.n	800acaa <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800ad44:	61d4      	str	r4, [r2, #28]
            break;
 800ad46:	e7b0      	b.n	800acaa <LoRaMacCryptoUnsecureMessage+0x26>
 800ad48:	200000d8 	.word	0x200000d8
 800ad4c:	20001340 	.word	0x20001340

0800ad50 <LoRaMacCryptoDeriveMcRootKey>:
{
 800ad50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad52:	0004      	movs	r4, r0
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ad54:	200b      	movs	r0, #11
    if( keyID != APP_KEY )
 800ad56:	2900      	cmp	r1, #0
 800ad58:	d110      	bne.n	800ad7c <LoRaMacCryptoDeriveMcRootKey+0x2c>
    uint8_t compBase[16] = { 0 };
 800ad5a:	2210      	movs	r2, #16
 800ad5c:	4668      	mov	r0, sp
 800ad5e:	f003 fc93 	bl	800e688 <memset>
    if( versionMinor == 1 )
 800ad62:	2c01      	cmp	r4, #1
 800ad64:	d102      	bne.n	800ad6c <LoRaMacCryptoDeriveMcRootKey+0x1c>
        compBase[0] = 0x20;
 800ad66:	2320      	movs	r3, #32
 800ad68:	466a      	mov	r2, sp
 800ad6a:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ad6c:	2204      	movs	r2, #4
 800ad6e:	2100      	movs	r1, #0
 800ad70:	4668      	mov	r0, sp
 800ad72:	f7fb ffd2 	bl	8006d1a <SecureElementDeriveAndStoreKey>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d000      	beq.n	800ad7c <LoRaMacCryptoDeriveMcRootKey+0x2c>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ad7a:	200f      	movs	r0, #15
}
 800ad7c:	b004      	add	sp, #16
 800ad7e:	bd10      	pop	{r4, pc}

0800ad80 <LoRaMacCryptoSetKey>:
{
 800ad80:	b570      	push	{r4, r5, r6, lr}
 800ad82:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800ad84:	f7fb ffc0 	bl	8006d08 <SecureElementSetKey>
 800ad88:	1e04      	subs	r4, r0, #0
 800ad8a:	d002      	beq.n	800ad92 <LoRaMacCryptoSetKey+0x12>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ad8c:	240f      	movs	r4, #15
}
 800ad8e:	0020      	movs	r0, r4
 800ad90:	bd70      	pop	{r4, r5, r6, pc}
    if( keyID == APP_KEY )
 800ad92:	2d00      	cmp	r5, #0
 800ad94:	d1fb      	bne.n	800ad8e <LoRaMacCryptoSetKey+0xe>
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800ad96:	4b06      	ldr	r3, [pc, #24]	@ (800adb0 <LoRaMacCryptoSetKey+0x30>)
 800ad98:	0021      	movs	r1, r4
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	7898      	ldrb	r0, [r3, #2]
 800ad9e:	f7ff ffd7 	bl	800ad50 <LoRaMacCryptoDeriveMcRootKey>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d1f2      	bne.n	800ad8c <LoRaMacCryptoSetKey+0xc>
    if( keyID != MC_ROOT_KEY )
 800ada6:	f7ff fdfa 	bl	800a99e <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800adaa:	2800      	cmp	r0, #0
 800adac:	d0ef      	beq.n	800ad8e <LoRaMacCryptoSetKey+0xe>
 800adae:	e7ed      	b.n	800ad8c <LoRaMacCryptoSetKey+0xc>
 800adb0:	20001340 	.word	0x20001340

0800adb4 <LoRaMacCryptoHandleJoinAccept>:
{
 800adb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adb6:	b093      	sub	sp, #76	@ 0x4c
 800adb8:	9007      	str	r0, [sp, #28]
 800adba:	0014      	movs	r4, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800adbc:	200a      	movs	r0, #10
{
 800adbe:	9106      	str	r1, [sp, #24]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800adc0:	2a00      	cmp	r2, #0
 800adc2:	d061      	beq.n	800ae88 <LoRaMacCryptoHandleJoinAccept+0xd4>
 800adc4:	2900      	cmp	r1, #0
 800adc6:	d05f      	beq.n	800ae88 <LoRaMacCryptoHandleJoinAccept+0xd4>
    uint8_t versionMinor         = 0;
 800adc8:	2513      	movs	r5, #19
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800adca:	ae09      	add	r6, sp, #36	@ 0x24
 800adcc:	2221      	movs	r2, #33	@ 0x21
 800adce:	2100      	movs	r1, #0
 800add0:	0030      	movs	r0, r6
 800add2:	f003 fc59 	bl	800e688 <memset>
    uint8_t versionMinor         = 0;
 800add6:	ab04      	add	r3, sp, #16
 800add8:	18ed      	adds	r5, r5, r3
 800adda:	2300      	movs	r3, #0
    uint16_t nonce               = CryptoNvm->DevNonce;
 800addc:	4f2b      	ldr	r7, [pc, #172]	@ (800ae8c <LoRaMacCryptoHandleJoinAccept+0xd8>)
    uint8_t versionMinor         = 0;
 800adde:	702b      	strb	r3, [r5, #0]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800ade0:	683b      	ldr	r3, [r7, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800ade2:	9906      	ldr	r1, [sp, #24]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800ade4:	889b      	ldrh	r3, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800ade6:	9502      	str	r5, [sp, #8]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800ade8:	9305      	str	r3, [sp, #20]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800adea:	9601      	str	r6, [sp, #4]
 800adec:	7923      	ldrb	r3, [r4, #4]
 800adee:	9a05      	ldr	r2, [sp, #20]
 800adf0:	9300      	str	r3, [sp, #0]
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	9807      	ldr	r0, [sp, #28]
 800adf6:	f7fb ffaf 	bl	8006d58 <SecureElementProcessJoinAccept>
 800adfa:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800adfc:	200f      	movs	r0, #15
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d142      	bne.n	800ae88 <LoRaMacCryptoHandleJoinAccept+0xd4>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800ae02:	0031      	movs	r1, r6
 800ae04:	7922      	ldrb	r2, [r4, #4]
 800ae06:	6820      	ldr	r0, [r4, #0]
 800ae08:	f001 fb58 	bl	800c4bc <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ae0c:	0020      	movs	r0, r4
 800ae0e:	f000 f83f 	bl	800ae90 <LoRaMacParserJoinAccept>
 800ae12:	0001      	movs	r1, r0
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ae14:	2010      	movs	r0, #16
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ae16:	2900      	cmp	r1, #0
 800ae18:	d136      	bne.n	800ae88 <LoRaMacCryptoHandleJoinAccept+0xd4>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800ae1a:	7a22      	ldrb	r2, [r4, #8]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800ae1c:	79e6      	ldrb	r6, [r4, #7]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800ae1e:	4082      	lsls	r2, r0
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800ae20:	79a3      	ldrb	r3, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800ae22:	0236      	lsls	r6, r6, #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800ae24:	4316      	orrs	r6, r2
 800ae26:	431e      	orrs	r6, r3
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800ae28:	683b      	ldr	r3, [r7, #0]
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800ae2a:	380d      	subs	r0, #13
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800ae2c:	689a      	ldr	r2, [r3, #8]
 800ae2e:	42b2      	cmp	r2, r6
 800ae30:	d02a      	beq.n	800ae88 <LoRaMacCryptoHandleJoinAccept+0xd4>
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800ae32:	7828      	ldrb	r0, [r5, #0]
        CryptoNvm->JoinNonce = currentJoinNonce;
 800ae34:	609e      	str	r6, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800ae36:	f7ff ff8b 	bl	800ad50 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d124      	bne.n	800ae88 <LoRaMacCryptoHandleJoinAccept+0xd4>
    if( keyID != MC_ROOT_KEY )
 800ae3e:	f7ff fdae 	bl	800a99e <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d120      	bne.n	800ae88 <LoRaMacCryptoHandleJoinAccept+0xd4>
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800ae46:	7aa3      	ldrb	r3, [r4, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ae48:	7ae2      	ldrb	r2, [r4, #11]
        netID = ( uint32_t )macMsg->NetID[0];
 800ae4a:	7a61      	ldrb	r1, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ae4c:	0412      	lsls	r2, r2, #16
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800ae4e:	021b      	lsls	r3, r3, #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ae50:	4313      	orrs	r3, r2
 800ae52:	430b      	orrs	r3, r1
 800ae54:	001c      	movs	r4, r3
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800ae56:	0031      	movs	r1, r6
 800ae58:	0022      	movs	r2, r4
 800ae5a:	9b05      	ldr	r3, [sp, #20]
 800ae5c:	3003      	adds	r0, #3
 800ae5e:	f7ff fd29 	bl	800a8b4 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d110      	bne.n	800ae88 <LoRaMacCryptoHandleJoinAccept+0xd4>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800ae66:	0022      	movs	r2, r4
 800ae68:	0031      	movs	r1, r6
 800ae6a:	9b05      	ldr	r3, [sp, #20]
 800ae6c:	3002      	adds	r0, #2
 800ae6e:	f7ff fd21 	bl	800a8b4 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d108      	bne.n	800ae88 <LoRaMacCryptoHandleJoinAccept+0xd4>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	782a      	ldrb	r2, [r5, #0]
    CryptoNvm->FCntList.FCntUp = 0;
 800ae7a:	60d8      	str	r0, [r3, #12]
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800ae7c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ae7e:	2201      	movs	r2, #1
 800ae80:	4252      	negs	r2, r2
 800ae82:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ae84:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ae86:	615a      	str	r2, [r3, #20]
}
 800ae88:	b013      	add	sp, #76	@ 0x4c
 800ae8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae8c:	20001340 	.word	0x20001340

0800ae90 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800ae90:	b510      	push	{r4, lr}
 800ae92:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800ae94:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ae96:	2c00      	cmp	r4, #0
 800ae98:	d040      	beq.n	800af1c <LoRaMacParserJoinAccept+0x8c>
 800ae9a:	6821      	ldr	r1, [r4, #0]
 800ae9c:	2900      	cmp	r1, #0
 800ae9e:	d03d      	beq.n	800af1c <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800aea0:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800aea2:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800aea4:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800aea6:	3101      	adds	r1, #1
 800aea8:	1da0      	adds	r0, r4, #6
 800aeaa:	f001 fb07 	bl	800c4bc <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800aeae:	0020      	movs	r0, r4
 800aeb0:	6821      	ldr	r1, [r4, #0]
 800aeb2:	2203      	movs	r2, #3
 800aeb4:	3104      	adds	r1, #4
 800aeb6:	3009      	adds	r0, #9
 800aeb8:	f001 fb00 	bl	800c4bc <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800aebc:	6821      	ldr	r1, [r4, #0]
 800aebe:	79cb      	ldrb	r3, [r1, #7]
 800aec0:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800aec2:	7a0a      	ldrb	r2, [r1, #8]
 800aec4:	0212      	lsls	r2, r2, #8
 800aec6:	431a      	orrs	r2, r3
 800aec8:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800aeca:	7a4b      	ldrb	r3, [r1, #9]
 800aecc:	041b      	lsls	r3, r3, #16
 800aece:	4313      	orrs	r3, r2
 800aed0:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800aed2:	7a8a      	ldrb	r2, [r1, #10]
 800aed4:	0612      	lsls	r2, r2, #24
 800aed6:	4313      	orrs	r3, r2
 800aed8:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800aeda:	7acb      	ldrb	r3, [r1, #11]
 800aedc:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800aede:	7b0b      	ldrb	r3, [r1, #12]
 800aee0:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800aee2:	7923      	ldrb	r3, [r4, #4]
 800aee4:	2b21      	cmp	r3, #33	@ 0x21
 800aee6:	d11a      	bne.n	800af1e <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800aee8:	0020      	movs	r0, r4
 800aeea:	2210      	movs	r2, #16
 800aeec:	310d      	adds	r1, #13
 800aeee:	3012      	adds	r0, #18
 800aef0:	f001 fae4 	bl	800c4bc <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800aef4:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800aef6:	6820      	ldr	r0, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800aef8:	1c59      	adds	r1, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800aefa:	5cc2      	ldrb	r2, [r0, r3]
 800aefc:	6262      	str	r2, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800aefe:	5c41      	ldrb	r1, [r0, r1]
 800af00:	0209      	lsls	r1, r1, #8
 800af02:	4311      	orrs	r1, r2
 800af04:	6261      	str	r1, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800af06:	1c9a      	adds	r2, r3, #2
 800af08:	5c82      	ldrb	r2, [r0, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800af0a:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800af0c:	0412      	lsls	r2, r2, #16
 800af0e:	430a      	orrs	r2, r1
 800af10:	6262      	str	r2, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800af12:	5cc3      	ldrb	r3, [r0, r3]

    return LORAMAC_PARSER_SUCCESS;
 800af14:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800af16:	061b      	lsls	r3, r3, #24
 800af18:	4313      	orrs	r3, r2
 800af1a:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800af1c:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_FAIL;
 800af1e:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800af20:	2b11      	cmp	r3, #17
 800af22:	dcfb      	bgt.n	800af1c <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800af24:	230d      	movs	r3, #13
 800af26:	e7e6      	b.n	800aef6 <LoRaMacParserJoinAccept+0x66>

0800af28 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800af2c:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800af2e:	2c00      	cmp	r4, #0
 800af30:	d053      	beq.n	800afda <LoRaMacParserData+0xb2>
 800af32:	6821      	ldr	r1, [r4, #0]
 800af34:	2900      	cmp	r1, #0
 800af36:	d050      	beq.n	800afda <LoRaMacParserData+0xb2>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800af38:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800af3a:	0020      	movs	r0, r4
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800af3c:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800af3e:	784b      	ldrb	r3, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800af40:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800af42:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800af44:	788a      	ldrb	r2, [r1, #2]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800af46:	1c65      	adds	r5, r4, #1
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800af48:	0212      	lsls	r2, r2, #8
 800af4a:	431a      	orrs	r2, r3
 800af4c:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800af4e:	78cb      	ldrb	r3, [r1, #3]
 800af50:	041b      	lsls	r3, r3, #16
 800af52:	4313      	orrs	r3, r2
 800af54:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800af56:	790a      	ldrb	r2, [r1, #4]
 800af58:	0612      	lsls	r2, r2, #24
 800af5a:	4313      	orrs	r3, r2
 800af5c:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800af5e:	794b      	ldrb	r3, [r1, #5]
 800af60:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800af62:	798b      	ldrb	r3, [r1, #6]
 800af64:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800af66:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800af68:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800af6a:	0212      	lsls	r2, r2, #8
 800af6c:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800af6e:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800af70:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800af72:	0712      	lsls	r2, r2, #28
 800af74:	0f12      	lsrs	r2, r2, #28
 800af76:	f001 faa1 	bl	800c4bc <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800af7a:	7b23      	ldrb	r3, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 800af7c:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 800af7e:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800af80:	071b      	lsls	r3, r3, #28
 800af82:	0f1b      	lsrs	r3, r3, #28
 800af84:	001e      	movs	r6, r3
    macMsg->FRMPayloadSize = 0;
 800af86:	3028      	adds	r0, #40	@ 0x28
    macMsg->FPort = 0;
 800af88:	77ea      	strb	r2, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 800af8a:	7002      	strb	r2, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800af8c:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800af8e:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800af90:	1b91      	subs	r1, r2, r6
 800af92:	2904      	cmp	r1, #4
 800af94:	dd0b      	ble.n	800afae <LoRaMacParserData+0x86>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800af96:	6821      	ldr	r1, [r4, #0]
 800af98:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800af9a:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800af9c:	5d8e      	ldrb	r6, [r1, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800af9e:	1ad2      	subs	r2, r2, r3
 800afa0:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800afa2:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800afa4:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800afa6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800afa8:	18c9      	adds	r1, r1, r3
 800afaa:	f001 fa87 	bl	800c4bc <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 800afae:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800afb0:	7922      	ldrb	r2, [r4, #4]
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	189b      	adds	r3, r3, r2
 800afb6:	1f1a      	subs	r2, r3, #4
 800afb8:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800afba:	1ed9      	subs	r1, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800afbc:	62e2      	str	r2, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800afbe:	7809      	ldrb	r1, [r1, #0]
 800afc0:	0209      	lsls	r1, r1, #8
 800afc2:	4311      	orrs	r1, r2
 800afc4:	62e1      	str	r1, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800afc6:	1e9a      	subs	r2, r3, #2
 800afc8:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800afca:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800afcc:	0412      	lsls	r2, r2, #16
 800afce:	430a      	orrs	r2, r1
 800afd0:	62e2      	str	r2, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	061b      	lsls	r3, r3, #24
 800afd6:	4313      	orrs	r3, r2
 800afd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 800afda:	bd70      	pop	{r4, r5, r6, pc}

0800afdc <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800afdc:	b510      	push	{r4, lr}
 800afde:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800afe0:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800afe2:	2c00      	cmp	r4, #0
 800afe4:	d02e      	beq.n	800b044 <LoRaMacSerializerJoinRequest+0x68>
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d02b      	beq.n	800b044 <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800afec:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800afee:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800aff0:	2a16      	cmp	r2, #22
 800aff2:	d927      	bls.n	800b044 <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800aff4:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800aff6:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800aff8:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800affa:	6820      	ldr	r0, [r4, #0]
 800affc:	2208      	movs	r2, #8
 800affe:	3001      	adds	r0, #1
 800b000:	f001 fa65 	bl	800c4ce <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800b004:	0021      	movs	r1, r4
 800b006:	6820      	ldr	r0, [r4, #0]
 800b008:	2208      	movs	r2, #8
 800b00a:	3009      	adds	r0, #9
 800b00c:	310e      	adds	r1, #14
 800b00e:	f001 fa5e 	bl	800c4ce <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	8ae2      	ldrh	r2, [r4, #22]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800b016:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800b018:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800b01a:	8ae3      	ldrh	r3, [r4, #22]
 800b01c:	6822      	ldr	r2, [r4, #0]
 800b01e:	0a1b      	lsrs	r3, r3, #8
 800b020:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	69a2      	ldr	r2, [r4, #24]
 800b026:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b028:	69a3      	ldr	r3, [r4, #24]
 800b02a:	6822      	ldr	r2, [r4, #0]
 800b02c:	0a1b      	lsrs	r3, r3, #8
 800b02e:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b030:	69a3      	ldr	r3, [r4, #24]
 800b032:	6822      	ldr	r2, [r4, #0]
 800b034:	0c1b      	lsrs	r3, r3, #16
 800b036:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b038:	69a3      	ldr	r3, [r4, #24]
 800b03a:	6822      	ldr	r2, [r4, #0]
 800b03c:	0e1b      	lsrs	r3, r3, #24
 800b03e:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 800b040:	2317      	movs	r3, #23
 800b042:	7123      	strb	r3, [r4, #4]
}
 800b044:	bd10      	pop	{r4, pc}

0800b046 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800b046:	b570      	push	{r4, r5, r6, lr}
 800b048:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b04a:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b04c:	2c00      	cmp	r4, #0
 800b04e:	d068      	beq.n	800b122 <LoRaMacSerializerData+0xdc>
 800b050:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b052:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b054:	2900      	cmp	r1, #0
 800b056:	d064      	beq.n	800b122 <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 800b058:	0025      	movs	r5, r4
 800b05a:	3528      	adds	r5, #40	@ 0x28
 800b05c:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b05e:	7b22      	ldrb	r2, [r4, #12]
 800b060:	0003      	movs	r3, r0
 800b062:	1e5e      	subs	r6, r3, #1
 800b064:	41b3      	sbcs	r3, r6
 800b066:	0712      	lsls	r2, r2, #28
 800b068:	0f12      	lsrs	r2, r2, #28
 800b06a:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800b06c:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b06e:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800b070:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 800b072:	7922      	ldrb	r2, [r4, #4]
 800b074:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800b076:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 800b078:	429a      	cmp	r2, r3
 800b07a:	d352      	bcc.n	800b122 <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800b07c:	7963      	ldrb	r3, [r4, #5]
 800b07e:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b080:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	68a2      	ldr	r2, [r4, #8]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b086:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800b088:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800b08a:	68a3      	ldr	r3, [r4, #8]
 800b08c:	6822      	ldr	r2, [r4, #0]
 800b08e:	0a1b      	lsrs	r3, r3, #8
 800b090:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800b092:	68a3      	ldr	r3, [r4, #8]
 800b094:	6822      	ldr	r2, [r4, #0]
 800b096:	0c1b      	lsrs	r3, r3, #16
 800b098:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800b09a:	68a3      	ldr	r3, [r4, #8]
 800b09c:	6822      	ldr	r2, [r4, #0]
 800b09e:	0e1b      	lsrs	r3, r3, #24
 800b0a0:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800b0a2:	6823      	ldr	r3, [r4, #0]
 800b0a4:	7b22      	ldrb	r2, [r4, #12]
 800b0a6:	715a      	strb	r2, [r3, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800b0a8:	6823      	ldr	r3, [r4, #0]
 800b0aa:	89e2      	ldrh	r2, [r4, #14]
 800b0ac:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800b0ae:	89e3      	ldrh	r3, [r4, #14]
 800b0b0:	6822      	ldr	r2, [r4, #0]
 800b0b2:	0a1b      	lsrs	r3, r3, #8
 800b0b4:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b0b6:	7b22      	ldrb	r2, [r4, #12]
 800b0b8:	6820      	ldr	r0, [r4, #0]
 800b0ba:	0712      	lsls	r2, r2, #28
 800b0bc:	0f12      	lsrs	r2, r2, #28
 800b0be:	3008      	adds	r0, #8
 800b0c0:	f001 f9fc 	bl	800c4bc <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b0c4:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800b0c6:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b0c8:	071b      	lsls	r3, r3, #28
 800b0ca:	0f1b      	lsrs	r3, r3, #28
 800b0cc:	001e      	movs	r6, r3
 800b0ce:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 800b0d0:	2a00      	cmp	r2, #0
 800b0d2:	d005      	beq.n	800b0e0 <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800b0d4:	1c62      	adds	r2, r4, #1
 800b0d6:	7fd1      	ldrb	r1, [r2, #31]
 800b0d8:	6822      	ldr	r2, [r4, #0]
 800b0da:	3309      	adds	r3, #9
 800b0dc:	5591      	strb	r1, [r2, r6]
 800b0de:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800b0e0:	6820      	ldr	r0, [r4, #0]
 800b0e2:	782a      	ldrb	r2, [r5, #0]
 800b0e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b0e6:	1980      	adds	r0, r0, r6
 800b0e8:	f001 f9e8 	bl	800c4bc <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800b0ec:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b0ee:	6822      	ldr	r2, [r4, #0]
 800b0f0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800b0f2:	18f3      	adds	r3, r6, r3
 800b0f4:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b0f6:	54d1      	strb	r1, [r2, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b0f8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b0fa:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b0fc:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b0fe:	b292      	uxth	r2, r2
 800b100:	0a09      	lsrs	r1, r1, #8
 800b102:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b104:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b106:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b108:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b10a:	b292      	uxth	r2, r2
 800b10c:	0c09      	lsrs	r1, r1, #16
 800b10e:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b110:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b112:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b114:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b116:	b292      	uxth	r2, r2
 800b118:	0e09      	lsrs	r1, r1, #24
 800b11a:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800b11c:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b11e:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 800b120:	7123      	strb	r3, [r4, #4]
}
 800b122:	bd70      	pop	{r4, r5, r6, pc}

0800b124 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800b124:	3801      	subs	r0, #1
 800b126:	4243      	negs	r3, r0
 800b128:	4158      	adcs	r0, r3
        default:
        {
            return false;
        }
    }
}
 800b12a:	b2c0      	uxtb	r0, r0
 800b12c:	4770      	bx	lr

0800b12e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800b12e:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 800b130:	2801      	cmp	r0, #1
 800b132:	d105      	bne.n	800b140 <RegionGetPhyParam+0x12>
    {
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
 800b134:	0008      	movs	r0, r1
 800b136:	f000 f8f9 	bl	800b32c <RegionAU915GetPhyParam>
 800b13a:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800b13c:	9801      	ldr	r0, [sp, #4]
 800b13e:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 800b140:	2300      	movs	r3, #0
 800b142:	9301      	str	r3, [sp, #4]
 800b144:	e7fa      	b.n	800b13c <RegionGetPhyParam+0xe>

0800b146 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800b146:	b510      	push	{r4, lr}
    switch( region )
 800b148:	2801      	cmp	r0, #1
 800b14a:	d102      	bne.n	800b152 <RegionSetBandTxDone+0xc>
    {
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
 800b14c:	0008      	movs	r0, r1
 800b14e:	f000 f9af 	bl	800b4b0 <RegionAU915SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800b152:	bd10      	pop	{r4, pc}

0800b154 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800b154:	b510      	push	{r4, lr}
    switch( region )
 800b156:	2801      	cmp	r0, #1
 800b158:	d102      	bne.n	800b160 <RegionInitDefaults+0xc>
    {
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
 800b15a:	0008      	movs	r0, r1
 800b15c:	f000 f9c0 	bl	800b4e0 <RegionAU915InitDefaults>
        default:
        {
            break;
        }
    }
}
 800b160:	bd10      	pop	{r4, pc}

0800b162 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800b162:	b510      	push	{r4, lr}
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800b164:	2300      	movs	r3, #0
{
 800b166:	0004      	movs	r4, r0
 800b168:	0008      	movs	r0, r1
 800b16a:	0011      	movs	r1, r2
    switch( region )
 800b16c:	2c01      	cmp	r4, #1
 800b16e:	d102      	bne.n	800b176 <RegionVerify+0x14>
        AU915_VERIFY( );
 800b170:	f000 fa38 	bl	800b5e4 <RegionAU915Verify>
 800b174:	0003      	movs	r3, r0
        }
    }
}
 800b176:	0018      	movs	r0, r3
 800b178:	bd10      	pop	{r4, pc}

0800b17a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800b17a:	b510      	push	{r4, lr}
    switch( region )
 800b17c:	2801      	cmp	r0, #1
 800b17e:	d102      	bne.n	800b186 <RegionApplyCFList+0xc>
    {
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
 800b180:	0008      	movs	r0, r1
 800b182:	f000 fa5d 	bl	800b640 <RegionAU915ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800b186:	bd10      	pop	{r4, pc}

0800b188 <RegionChanMaskSet>:
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800b188:	2300      	movs	r3, #0
{
 800b18a:	b510      	push	{r4, lr}
    switch( region )
 800b18c:	2801      	cmp	r0, #1
 800b18e:	d103      	bne.n	800b198 <RegionChanMaskSet+0x10>
        AU915_CHAN_MASK_SET( );
 800b190:	0008      	movs	r0, r1
 800b192:	f000 fa83 	bl	800b69c <RegionAU915ChanMaskSet>
 800b196:	0003      	movs	r3, r0
        }
    }
}
 800b198:	0018      	movs	r0, r3
 800b19a:	bd10      	pop	{r4, pc}

0800b19c <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b19c:	b510      	push	{r4, lr}
 800b19e:	0004      	movs	r4, r0
 800b1a0:	0008      	movs	r0, r1
 800b1a2:	0011      	movs	r1, r2
 800b1a4:	001a      	movs	r2, r3
    switch( region )
 800b1a6:	2c01      	cmp	r4, #1
 800b1a8:	d102      	bne.n	800b1b0 <RegionComputeRxWindowParameters+0x14>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800b1aa:	9b02      	ldr	r3, [sp, #8]
 800b1ac:	f000 faac 	bl	800b708 <RegionAU915ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800b1b0:	bd10      	pop	{r4, pc}

0800b1b2 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b1b2:	b510      	push	{r4, lr}
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800b1b4:	2300      	movs	r3, #0
{
 800b1b6:	0004      	movs	r4, r0
 800b1b8:	0008      	movs	r0, r1
 800b1ba:	0011      	movs	r1, r2
    switch( region )
 800b1bc:	2c01      	cmp	r4, #1
 800b1be:	d102      	bne.n	800b1c6 <RegionRxConfig+0x14>
        AU915_RX_CONFIG( );
 800b1c0:	f000 fad0 	bl	800b764 <RegionAU915RxConfig>
 800b1c4:	0003      	movs	r3, r0
        }
    }
}
 800b1c6:	0018      	movs	r0, r3
 800b1c8:	bd10      	pop	{r4, pc}

0800b1ca <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b1ca:	b570      	push	{r4, r5, r6, lr}
 800b1cc:	0005      	movs	r5, r0
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800b1ce:	2400      	movs	r4, #0
{
 800b1d0:	0008      	movs	r0, r1
 800b1d2:	0011      	movs	r1, r2
 800b1d4:	001a      	movs	r2, r3
    switch( region )
 800b1d6:	2d01      	cmp	r5, #1
 800b1d8:	d102      	bne.n	800b1e0 <RegionTxConfig+0x16>
        AU915_TX_CONFIG( );
 800b1da:	f000 fb19 	bl	800b810 <RegionAU915TxConfig>
 800b1de:	0004      	movs	r4, r0
        }
    }
}
 800b1e0:	0020      	movs	r0, r4
 800b1e2:	bd70      	pop	{r4, r5, r6, pc}

0800b1e4 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800b1e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1e6:	0005      	movs	r5, r0
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800b1e8:	2400      	movs	r4, #0
{
 800b1ea:	0008      	movs	r0, r1
 800b1ec:	0011      	movs	r1, r2
 800b1ee:	001a      	movs	r2, r3
    switch( region )
 800b1f0:	2d01      	cmp	r5, #1
 800b1f2:	d105      	bne.n	800b200 <RegionLinkAdrReq+0x1c>
        AU915_LINK_ADR_REQ( );
 800b1f4:	9b07      	ldr	r3, [sp, #28]
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	9b06      	ldr	r3, [sp, #24]
 800b1fa:	f000 fb6f 	bl	800b8dc <RegionAU915LinkAdrReq>
 800b1fe:	0004      	movs	r4, r0
        }
    }
}
 800b200:	0020      	movs	r0, r4
 800b202:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800b204 <RegionRxParamSetupReq>:
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800b204:	2300      	movs	r3, #0
{
 800b206:	b510      	push	{r4, lr}
    switch( region )
 800b208:	2801      	cmp	r0, #1
 800b20a:	d103      	bne.n	800b214 <RegionRxParamSetupReq+0x10>
        AU915_RX_PARAM_SETUP_REQ( );
 800b20c:	0008      	movs	r0, r1
 800b20e:	f000 fc61 	bl	800bad4 <RegionAU915RxParamSetupReq>
 800b212:	0003      	movs	r3, r0
        }
    }
}
 800b214:	0018      	movs	r0, r3
 800b216:	bd10      	pop	{r4, pc}

0800b218 <RegionNewChannelReq>:
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800b218:	2300      	movs	r3, #0
{
 800b21a:	b510      	push	{r4, lr}
    switch( region )
 800b21c:	2801      	cmp	r0, #1
 800b21e:	d103      	bne.n	800b228 <RegionNewChannelReq+0x10>
        AU915_NEW_CHANNEL_REQ( );
 800b220:	0008      	movs	r0, r1
 800b222:	f000 fc7c 	bl	800bb1e <RegionAU915NewChannelReq>
 800b226:	0003      	movs	r3, r0
        }
    }
}
 800b228:	0018      	movs	r0, r3
 800b22a:	bd10      	pop	{r4, pc}

0800b22c <RegionTxParamSetupReq>:
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800b22c:	2300      	movs	r3, #0
{
 800b22e:	b510      	push	{r4, lr}
    switch( region )
 800b230:	2801      	cmp	r0, #1
 800b232:	d103      	bne.n	800b23c <RegionTxParamSetupReq+0x10>
        AU915_TX_PARAM_SETUP_REQ( );
 800b234:	0008      	movs	r0, r1
 800b236:	f000 fc75 	bl	800bb24 <RegionAU915TxParamSetupReq>
 800b23a:	0003      	movs	r3, r0
        }
    }
}
 800b23c:	0018      	movs	r0, r3
 800b23e:	bd10      	pop	{r4, pc}

0800b240 <RegionDlChannelReq>:
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800b240:	2300      	movs	r3, #0
{
 800b242:	b510      	push	{r4, lr}
    switch( region )
 800b244:	2801      	cmp	r0, #1
 800b246:	d103      	bne.n	800b250 <RegionDlChannelReq+0x10>
        AU915_DL_CHANNEL_REQ( );
 800b248:	0008      	movs	r0, r1
 800b24a:	f000 fc6d 	bl	800bb28 <RegionAU915DlChannelReq>
 800b24e:	0003      	movs	r3, r0
        }
    }
}
 800b250:	0018      	movs	r0, r3
 800b252:	bd10      	pop	{r4, pc}

0800b254 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800b254:	b510      	push	{r4, lr}
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800b256:	2300      	movs	r3, #0
{
 800b258:	0004      	movs	r4, r0
 800b25a:	0008      	movs	r0, r1
 800b25c:	0011      	movs	r1, r2
    switch( region )
 800b25e:	2c01      	cmp	r4, #1
 800b260:	d102      	bne.n	800b268 <RegionAlternateDr+0x14>
        AU915_ALTERNATE_DR( );
 800b262:	f000 fc65 	bl	800bb30 <RegionAU915AlternateDr>
 800b266:	0003      	movs	r3, r0
        }
    }
}
 800b268:	0018      	movs	r0, r3
 800b26a:	bd10      	pop	{r4, pc}

0800b26c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800b26c:	b570      	push	{r4, r5, r6, lr}
 800b26e:	0005      	movs	r5, r0
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800b270:	2409      	movs	r4, #9
{
 800b272:	0008      	movs	r0, r1
 800b274:	0011      	movs	r1, r2
 800b276:	001a      	movs	r2, r3
    switch( region )
 800b278:	2d01      	cmp	r5, #1
 800b27a:	d103      	bne.n	800b284 <RegionNextChannel+0x18>
        AU915_NEXT_CHANNEL( );
 800b27c:	9b04      	ldr	r3, [sp, #16]
 800b27e:	f000 fc6d 	bl	800bb5c <RegionAU915NextChannel>
 800b282:	0004      	movs	r4, r0
        }
    }
}
 800b284:	0020      	movs	r0, r4
 800b286:	bd70      	pop	{r4, r5, r6, pc}

0800b288 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800b288:	b510      	push	{r4, lr}
    switch( region )
 800b28a:	2801      	cmp	r0, #1
 800b28c:	d102      	bne.n	800b294 <RegionSetContinuousWave+0xc>
    {
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
 800b28e:	0008      	movs	r0, r1
 800b290:	f000 fd04 	bl	800bc9c <RegionAU915SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800b294:	bd10      	pop	{r4, pc}

0800b296 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800b296:	b570      	push	{r4, r5, r6, lr}
 800b298:	0005      	movs	r5, r0
 800b29a:	0008      	movs	r0, r1
 800b29c:	0011      	movs	r1, r2
 800b29e:	001a      	movs	r2, r3
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800b2a0:	b2cc      	uxtb	r4, r1
    switch( region )
 800b2a2:	2d01      	cmp	r5, #1
 800b2a4:	d102      	bne.n	800b2ac <RegionApplyDrOffset+0x16>
        AU915_APPLY_DR_OFFSET( );
 800b2a6:	f000 fd1f 	bl	800bce8 <RegionAU915ApplyDrOffset>
 800b2aa:	0004      	movs	r4, r0
        }
    }
}
 800b2ac:	0020      	movs	r0, r4
 800b2ae:	bd70      	pop	{r4, r5, r6, pc}

0800b2b0 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800b2b0:	4800      	ldr	r0, [pc, #0]	@ (800b2b4 <RegionGetVersion+0x4>)
 800b2b2:	4770      	bx	lr
 800b2b4:	01000300 	.word	0x01000300

0800b2b8 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800b2b8:	b530      	push	{r4, r5, lr}
 800b2ba:	000c      	movs	r4, r1
    int8_t phyDr = DataratesAU915[datarate];
 800b2bc:	490a      	ldr	r1, [pc, #40]	@ (800b2e8 <GetTimeOnAir+0x30>)
{
 800b2be:	b085      	sub	sp, #20
    int8_t phyDr = DataratesAU915[datarate];
 800b2c0:	560d      	ldrsb	r5, [r1, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAU915 );
 800b2c2:	3110      	adds	r1, #16
 800b2c4:	f001 f892 	bl	800c3ec <RegionCommonGetBandwidth>

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800b2c8:	2200      	movs	r2, #0
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAU915 );
 800b2ca:	0001      	movs	r1, r0
    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	4b07      	ldr	r3, [pc, #28]	@ (800b2ec <GetTimeOnAir+0x34>)
 800b2d0:	9201      	str	r2, [sp, #4]
 800b2d2:	b2e4      	uxtb	r4, r4
 800b2d4:	3208      	adds	r2, #8
 800b2d6:	9402      	str	r4, [sp, #8]
 800b2d8:	9200      	str	r2, [sp, #0]
 800b2da:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b2dc:	002a      	movs	r2, r5
 800b2de:	0003      	movs	r3, r0
 800b2e0:	9003      	str	r0, [sp, #12]
 800b2e2:	47a0      	blx	r4
}
 800b2e4:	b005      	add	sp, #20
 800b2e6:	bd30      	pop	{r4, r5, pc}
 800b2e8:	0800ec40 	.word	0x0800ec40
 800b2ec:	0800edf8 	.word	0x0800edf8

0800b2f0 <VerifyRfFreq>:
    if( Radio.CheckRfFrequency( freq ) == false )
 800b2f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b31c <VerifyRfFreq+0x2c>)
{
 800b2f2:	b510      	push	{r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800b2f4:	6a1b      	ldr	r3, [r3, #32]
{
 800b2f6:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800b2f8:	4798      	blx	r3
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d00c      	beq.n	800b318 <VerifyRfFreq+0x28>
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 800b2fe:	4b08      	ldr	r3, [pc, #32]	@ (800b320 <VerifyRfFreq+0x30>)
        return false;
 800b300:	2000      	movs	r0, #0
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 800b302:	18e4      	adds	r4, r4, r3
 800b304:	4b07      	ldr	r3, [pc, #28]	@ (800b324 <VerifyRfFreq+0x34>)
 800b306:	429c      	cmp	r4, r3
 800b308:	d806      	bhi.n	800b318 <VerifyRfFreq+0x28>
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 800b30a:	0020      	movs	r0, r4
 800b30c:	4906      	ldr	r1, [pc, #24]	@ (800b328 <VerifyRfFreq+0x38>)
 800b30e:	f7f4 ffb1 	bl	8000274 <__aeabi_uidivmod>
 800b312:	424b      	negs	r3, r1
 800b314:	4159      	adcs	r1, r3
 800b316:	b2c8      	uxtb	r0, r1
}
 800b318:	bd10      	pop	{r4, pc}
 800b31a:	46c0      	nop			@ (mov r8, r8)
 800b31c:	0800edf8 	.word	0x0800edf8
 800b320:	c8f78f60 	.word	0xc8f78f60
 800b324:	00401640 	.word	0x00401640
 800b328:	000927c0 	.word	0x000927c0

0800b32c <RegionAU915GetPhyParam>:
#endif /* REGION_AU915 */

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 800b32c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
 800b32e:	2200      	movs	r2, #0
{
 800b330:	0003      	movs	r3, r0

#if defined( REGION_AU915 )
    switch( getPhy->Attribute )
 800b332:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800b334:	9200      	str	r2, [sp, #0]
    switch( getPhy->Attribute )
 800b336:	3801      	subs	r0, #1
 800b338:	2838      	cmp	r0, #56	@ 0x38
 800b33a:	d828      	bhi.n	800b38e <RegionAU915GetPhyParam+0x62>
 800b33c:	f7f4 fef6 	bl	800012c <__gnu_thumb1_case_uqi>
 800b340:	2727221d 	.word	0x2727221d
 800b344:	27272527 	.word	0x27272527
 800b348:	43412727 	.word	0x43412727
 800b34c:	5a275045 	.word	0x5a275045
 800b350:	64625f5c 	.word	0x64625f5c
 800b354:	72276966 	.word	0x72276966
 800b358:	7e7a7420 	.word	0x7e7a7420
 800b35c:	85278380 	.word	0x85278380
 800b360:	27272a88 	.word	0x27272a88
 800b364:	27272727 	.word	0x27272727
 800b368:	27272727 	.word	0x27272727
 800b36c:	8a272727 	.word	0x8a272727
 800b370:	27202090 	.word	0x27202090
 800b374:	9620208a 	.word	0x9620208a
 800b378:	9a          	.byte	0x9a
 800b379:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 800b37a:	78db      	ldrb	r3, [r3, #3]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d104      	bne.n	800b38a <RegionAU915GetPhyParam+0x5e>
            phyParam.Value = AU915_RX_WND_2_FREQ;
            break;
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AU915_RX_WND_2_DR;
 800b380:	2308      	movs	r3, #8
 800b382:	e003      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
            if( getPhy->UplinkDwellTime == 0)
 800b384:	789b      	ldrb	r3, [r3, #2]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <RegionAU915GetPhyParam+0x62>
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 800b38a:	2302      	movs	r3, #2
 800b38c:	9300      	str	r3, [sp, #0]
            break;
        }
    }

#endif /* REGION_AU915 */
    return phyParam;
 800b38e:	9800      	ldr	r0, [sp, #0]
}
 800b390:	b005      	add	sp, #20
 800b392:	bd00      	pop	{pc}
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800b394:	785a      	ldrb	r2, [r3, #1]
 800b396:	a801      	add	r0, sp, #4
 800b398:	7002      	strb	r2, [r0, #0]
 800b39a:	2206      	movs	r2, #6
 800b39c:	7042      	strb	r2, [r0, #1]
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AU915_TX_MIN_DATARATE : AU915_DWELL_LIMIT_DATARATE ),
 800b39e:	789b      	ldrb	r3, [r3, #2]
 800b3a0:	1e5a      	subs	r2, r3, #1
 800b3a2:	4193      	sbcs	r3, r2
 800b3a4:	005b      	lsls	r3, r3, #1
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800b3a6:	7083      	strb	r3, [r0, #2]
 800b3a8:	2348      	movs	r3, #72	@ 0x48
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800b3aa:	22d8      	movs	r2, #216	@ 0xd8
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800b3ac:	70c3      	strb	r3, [r0, #3]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800b3ae:	4b34      	ldr	r3, [pc, #208]	@ (800b480 <RegionAU915GetPhyParam+0x154>)
 800b3b0:	0092      	lsls	r2, r2, #2
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	189a      	adds	r2, r3, r2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800b3b6:	6042      	str	r2, [r0, #4]
 800b3b8:	6083      	str	r3, [r0, #8]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800b3ba:	f000 fff5 	bl	800c3a8 <RegionCommonGetNextLowerTxDr>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAU915 );
 800b3be:	9000      	str	r0, [sp, #0]
            break;
 800b3c0:	e7e5      	b.n	800b38e <RegionAU915GetPhyParam+0x62>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800b3c2:	2340      	movs	r3, #64	@ 0x40
 800b3c4:	e7e2      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800b3c6:	2320      	movs	r3, #32
 800b3c8:	e7e0      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 800b3ca:	2201      	movs	r2, #1
            if( getPhy->UplinkDwellTime == 0 )
 800b3cc:	7899      	ldrb	r1, [r3, #2]
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 800b3ce:	569a      	ldrsb	r2, [r3, r2]
 800b3d0:	4b2c      	ldr	r3, [pc, #176]	@ (800b484 <RegionAU915GetPhyParam+0x158>)
            if( getPhy->UplinkDwellTime == 0 )
 800b3d2:	2900      	cmp	r1, #0
 800b3d4:	d102      	bne.n	800b3dc <RegionAU915GetPhyParam+0xb0>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 800b3d6:	3350      	adds	r3, #80	@ 0x50
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 800b3d8:	5cd3      	ldrb	r3, [r2, r3]
 800b3da:	e7d7      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 800b3dc:	335e      	adds	r3, #94	@ 0x5e
 800b3de:	e7fb      	b.n	800b3d8 <RegionAU915GetPhyParam+0xac>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 800b3e0:	2201      	movs	r2, #1
            if( getPhy->UplinkDwellTime == 0)
 800b3e2:	7899      	ldrb	r1, [r3, #2]
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 800b3e4:	569a      	ldrsb	r2, [r3, r2]
 800b3e6:	4b27      	ldr	r3, [pc, #156]	@ (800b484 <RegionAU915GetPhyParam+0x158>)
            if( getPhy->UplinkDwellTime == 0)
 800b3e8:	2900      	cmp	r1, #0
 800b3ea:	d101      	bne.n	800b3f0 <RegionAU915GetPhyParam+0xc4>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 800b3ec:	336c      	adds	r3, #108	@ 0x6c
 800b3ee:	e7f3      	b.n	800b3d8 <RegionAU915GetPhyParam+0xac>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 800b3f0:	337a      	adds	r3, #122	@ 0x7a
 800b3f2:	e7f1      	b.n	800b3d8 <RegionAU915GetPhyParam+0xac>
            phyParam.Value = AU915_MAX_RX_WINDOW;
 800b3f4:	4b24      	ldr	r3, [pc, #144]	@ (800b488 <RegionAU915GetPhyParam+0x15c>)
 800b3f6:	e7c9      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800b3f8:	23fa      	movs	r3, #250	@ 0xfa
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	e7c6      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800b3fe:	23fa      	movs	r3, #250	@ 0xfa
 800b400:	00db      	lsls	r3, r3, #3
 800b402:	e7c3      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800b404:	4b21      	ldr	r3, [pc, #132]	@ (800b48c <RegionAU915GetPhyParam+0x160>)
 800b406:	e7c1      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800b408:	4b21      	ldr	r3, [pc, #132]	@ (800b490 <RegionAU915GetPhyParam+0x164>)
 800b40a:	e7bf      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800b40c:	2380      	movs	r3, #128	@ 0x80
 800b40e:	01db      	lsls	r3, r3, #7
 800b410:	e7bc      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800b412:	21fa      	movs	r1, #250	@ 0xfa
 800b414:	481f      	ldr	r0, [pc, #124]	@ (800b494 <RegionAU915GetPhyParam+0x168>)
 800b416:	0089      	lsls	r1, r1, #2
 800b418:	f001 f834 	bl	800c484 <randr>
 800b41c:	23fa      	movs	r3, #250	@ 0xfa
 800b41e:	00db      	lsls	r3, r3, #3
 800b420:	18c0      	adds	r0, r0, r3
 800b422:	e7cc      	b.n	800b3be <RegionAU915GetPhyParam+0x92>
            phyParam.Value = AU915_RX_WND_2_FREQ;
 800b424:	4b1c      	ldr	r3, [pc, #112]	@ (800b498 <RegionAU915GetPhyParam+0x16c>)
 800b426:	e7b1      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800b428:	22d8      	movs	r2, #216	@ 0xd8
 800b42a:	4b15      	ldr	r3, [pc, #84]	@ (800b480 <RegionAU915GetPhyParam+0x154>)
 800b42c:	681b      	ldr	r3, [r3, #0]
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800b42e:	0092      	lsls	r2, r2, #2
 800b430:	189b      	adds	r3, r3, r2
 800b432:	e7ab      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
 800b434:	4b12      	ldr	r3, [pc, #72]	@ (800b480 <RegionAU915GetPhyParam+0x154>)
 800b436:	22db      	movs	r2, #219	@ 0xdb
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	e7f8      	b.n	800b42e <RegionAU915GetPhyParam+0x102>
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 800b43c:	2348      	movs	r3, #72	@ 0x48
 800b43e:	e7a5      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800b440:	4b0f      	ldr	r3, [pc, #60]	@ (800b480 <RegionAU915GetPhyParam+0x154>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	e7a2      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
            phyParam.Value = AU915_DEFAULT_UPLINK_DWELL_TIME;
 800b446:	2301      	movs	r3, #1
 800b448:	e7a0      	b.n	800b38c <RegionAU915GetPhyParam+0x60>
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 800b44a:	4b14      	ldr	r3, [pc, #80]	@ (800b49c <RegionAU915GetPhyParam+0x170>)
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 800b44c:	9300      	str	r3, [sp, #0]
            break;
 800b44e:	e79e      	b.n	800b38e <RegionAU915GetPhyParam+0x62>
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 800b450:	4b13      	ldr	r3, [pc, #76]	@ (800b4a0 <RegionAU915GetPhyParam+0x174>)
 800b452:	e7fb      	b.n	800b44c <RegionAU915GetPhyParam+0x120>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800b454:	7918      	ldrb	r0, [r3, #4]
 800b456:	4a13      	ldr	r2, [pc, #76]	@ (800b4a4 <RegionAU915GetPhyParam+0x178>)
 800b458:	490f      	ldr	r1, [pc, #60]	@ (800b498 <RegionAU915GetPhyParam+0x16c>)
 800b45a:	f000 fc9e 	bl	800bd9a <RegionBaseUSCalcDownlinkFrequency>
 800b45e:	e7ae      	b.n	800b3be <RegionAU915GetPhyParam+0x92>
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 800b460:	466a      	mov	r2, sp
 800b462:	4b11      	ldr	r3, [pc, #68]	@ (800b4a8 <RegionAU915GetPhyParam+0x17c>)
 800b464:	8013      	strh	r3, [r2, #0]
            phyParam.BeaconFormat.Rfu2Size = AU915_RFU2_SIZE;
 800b466:	2301      	movs	r3, #1
 800b468:	7093      	strb	r3, [r2, #2]
            break;
 800b46a:	e790      	b.n	800b38e <RegionAU915GetPhyParam+0x62>
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 800b46c:	785b      	ldrb	r3, [r3, #1]
 800b46e:	4a05      	ldr	r2, [pc, #20]	@ (800b484 <RegionAU915GetPhyParam+0x158>)
 800b470:	b25b      	sxtb	r3, r3
 800b472:	e7b1      	b.n	800b3d8 <RegionAU915GetPhyParam+0xac>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAU915 );
 800b474:	2001      	movs	r0, #1
 800b476:	490d      	ldr	r1, [pc, #52]	@ (800b4ac <RegionAU915GetPhyParam+0x180>)
 800b478:	5618      	ldrsb	r0, [r3, r0]
 800b47a:	f000 ffb7 	bl	800c3ec <RegionCommonGetBandwidth>
 800b47e:	e79e      	b.n	800b3be <RegionAU915GetPhyParam+0x92>
 800b480:	20001344 	.word	0x20001344
 800b484:	0800ec40 	.word	0x0800ec40
 800b488:	00000bb8 	.word	0x00000bb8
 800b48c:	00001388 	.word	0x00001388
 800b490:	00001770 	.word	0x00001770
 800b494:	fffffc18 	.word	0xfffffc18
 800b498:	370870a0 	.word	0x370870a0
 800b49c:	41f00000 	.word	0x41f00000
 800b4a0:	4009999a 	.word	0x4009999a
 800b4a4:	000927c0 	.word	0x000927c0
 800b4a8:	00000313 	.word	0x00000313
 800b4ac:	0800ec50 	.word	0x0800ec50

0800b4b0 <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800b4b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if defined( REGION_AU915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800b4b2:	7805      	ldrb	r5, [r0, #0]
{
 800b4b4:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800b4b6:	7842      	ldrb	r2, [r0, #1]
 800b4b8:	200c      	movs	r0, #12
 800b4ba:	4c08      	ldr	r4, [pc, #32]	@ (800b4dc <RegionAU915SetBandTxDone+0x2c>)
 800b4bc:	4368      	muls	r0, r5
 800b4be:	6823      	ldr	r3, [r4, #0]
 800b4c0:	181b      	adds	r3, r3, r0
 800b4c2:	7a58      	ldrb	r0, [r3, #9]
 800b4c4:	2318      	movs	r3, #24
 800b4c6:	4343      	muls	r3, r0
 800b4c8:	6860      	ldr	r0, [r4, #4]
 800b4ca:	18c0      	adds	r0, r0, r3
 800b4cc:	690b      	ldr	r3, [r1, #16]
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	68cb      	ldr	r3, [r1, #12]
 800b4d2:	6889      	ldr	r1, [r1, #8]
 800b4d4:	f000 fce4 	bl	800bea0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_AU915 */
}
 800b4d8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800b4da:	46c0      	nop			@ (mov r8, r8)
 800b4dc:	20001344 	.word	0x20001344

0800b4e0 <RegionAU915InitDefaults>:

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
 800b4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4e2:	b087      	sub	sp, #28
#if defined( REGION_AU915 )
    Band_t bands[AU915_MAX_NB_BANDS] =
 800b4e4:	4669      	mov	r1, sp
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	800b      	strh	r3, [r1, #0]
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	708b      	strb	r3, [r1, #2]
 800b4ee:	9301      	str	r3, [sp, #4]
 800b4f0:	9302      	str	r3, [sp, #8]
 800b4f2:	9303      	str	r3, [sp, #12]
 800b4f4:	9304      	str	r3, [sp, #16]
 800b4f6:	750b      	strb	r3, [r1, #20]
    {
        AU915_BAND0
    };

    switch( params->Type )
 800b4f8:	7a04      	ldrb	r4, [r0, #8]
{
 800b4fa:	0002      	movs	r2, r0
    switch( params->Type )
 800b4fc:	429c      	cmp	r4, r3
 800b4fe:	d004      	beq.n	800b50a <RegionAU915InitDefaults+0x2a>
 800b500:	3c01      	subs	r4, #1
 800b502:	2c01      	cmp	r4, #1
 800b504:	d946      	bls.n	800b594 <RegionAU915InitDefaults+0xb4>
        {
            break;
        }
    }
#endif /* REGION_AU915 */
}
 800b506:	b007      	add	sp, #28
 800b508:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800b50a:	6800      	ldr	r0, [r0, #0]
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d0fa      	beq.n	800b506 <RegionAU915InitDefaults+0x26>
 800b510:	6853      	ldr	r3, [r2, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d0f7      	beq.n	800b506 <RegionAU915InitDefaults+0x26>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800b516:	4d2c      	ldr	r5, [pc, #176]	@ (800b5c8 <RegionAU915InitDefaults+0xe8>)
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 800b518:	2218      	movs	r2, #24
 800b51a:	4669      	mov	r1, sp
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800b51c:	8484      	strh	r4, [r0, #36]	@ 0x24
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800b51e:	6068      	str	r0, [r5, #4]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800b520:	602b      	str	r3, [r5, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 800b522:	f000 ffcb 	bl	800c4bc <memcpy1>
                RegionNvmGroup2->Channels[i].Frequency = 915200000 + i * 200000;
 800b526:	6828      	ldr	r0, [r5, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800b528:	2650      	movs	r6, #80	@ 0x50
 800b52a:	0003      	movs	r3, r0
                RegionNvmGroup2->Channels[i].Frequency = 915200000 + i * 200000;
 800b52c:	4a27      	ldr	r2, [pc, #156]	@ (800b5cc <RegionAU915InitDefaults+0xec>)
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800b52e:	4928      	ldr	r1, [pc, #160]	@ (800b5d0 <RegionAU915InitDefaults+0xf0>)
 800b530:	4f28      	ldr	r7, [pc, #160]	@ (800b5d4 <RegionAU915InitDefaults+0xf4>)
                RegionNvmGroup2->Channels[i].Frequency = 915200000 + i * 200000;
 800b532:	601a      	str	r2, [r3, #0]
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800b534:	19d2      	adds	r2, r2, r7
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800b536:	721e      	strb	r6, [r3, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800b538:	725c      	strb	r4, [r3, #9]
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800b53a:	330c      	adds	r3, #12
 800b53c:	428a      	cmp	r2, r1
 800b53e:	d1f7      	bne.n	800b530 <RegionAU915InitDefaults+0x50>
 800b540:	23c0      	movs	r3, #192	@ 0xc0
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 800b542:	2666      	movs	r6, #102	@ 0x66
                RegionNvmGroup2->Channels[i].Band = 0;
 800b544:	2400      	movs	r4, #0
 800b546:	009b      	lsls	r3, r3, #2
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800b548:	4a23      	ldr	r2, [pc, #140]	@ (800b5d8 <RegionAU915InitDefaults+0xf8>)
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800b54a:	4924      	ldr	r1, [pc, #144]	@ (800b5dc <RegionAU915InitDefaults+0xfc>)
 800b54c:	18c3      	adds	r3, r0, r3
 800b54e:	4f24      	ldr	r7, [pc, #144]	@ (800b5e0 <RegionAU915InitDefaults+0x100>)
                RegionNvmGroup2->Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800b550:	601a      	str	r2, [r3, #0]
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800b552:	19d2      	adds	r2, r2, r7
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 800b554:	721e      	strb	r6, [r3, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800b556:	725c      	strb	r4, [r3, #9]
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800b558:	330c      	adds	r3, #12
 800b55a:	428a      	cmp	r2, r1
 800b55c:	d1f7      	bne.n	800b54e <RegionAU915InitDefaults+0x6e>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;  // Todos os canais 0-15
 800b55e:	2301      	movs	r3, #1
 800b560:	22db      	movs	r2, #219	@ 0xdb
 800b562:	425b      	negs	r3, r3
 800b564:	0092      	lsls	r2, r2, #2
 800b566:	5083      	str	r3, [r0, r2]
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;  // Todos os canais 32-47
 800b568:	3204      	adds	r2, #4
 800b56a:	5083      	str	r3, [r0, r2]
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;  // Canais 64-71 (500 kHz)
 800b56c:	23dd      	movs	r3, #221	@ 0xdd
 800b56e:	22ff      	movs	r2, #255	@ 0xff
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800b570:	24d8      	movs	r4, #216	@ 0xd8
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;  // Canais 64-71 (500 kHz)
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	50c2      	str	r2, [r0, r3]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800b576:	00a4      	lsls	r4, r4, #2
 800b578:	3b08      	subs	r3, #8
 800b57a:	18c1      	adds	r1, r0, r3
 800b57c:	3af9      	subs	r2, #249	@ 0xf9
 800b57e:	1900      	adds	r0, r0, r4
 800b580:	f000 fc80 	bl	800be84 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800b584:	6829      	ldr	r1, [r5, #0]
 800b586:	6868      	ldr	r0, [r5, #4]
 800b588:	2206      	movs	r2, #6
 800b58a:	1909      	adds	r1, r1, r4
 800b58c:	3018      	adds	r0, #24
 800b58e:	f000 fc79 	bl	800be84 <RegionCommonChanMaskCopy>
            break;
 800b592:	e7b8      	b.n	800b506 <RegionAU915InitDefaults+0x26>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800b594:	23db      	movs	r3, #219	@ 0xdb
 800b596:	25d8      	movs	r5, #216	@ 0xd8
 800b598:	4c0b      	ldr	r4, [pc, #44]	@ (800b5c8 <RegionAU915InitDefaults+0xe8>)
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	6820      	ldr	r0, [r4, #0]
 800b59e:	00ad      	lsls	r5, r5, #2
 800b5a0:	18c1      	adds	r1, r0, r3
 800b5a2:	2206      	movs	r2, #6
 800b5a4:	1940      	adds	r0, r0, r5
 800b5a6:	f000 fc6d 	bl	800be84 <RegionCommonChanMaskCopy>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b5aa:	6861      	ldr	r1, [r4, #4]
 800b5ac:	6822      	ldr	r2, [r4, #0]
 800b5ae:	000b      	movs	r3, r1
 800b5b0:	1952      	adds	r2, r2, r5
 800b5b2:	3318      	adds	r3, #24
 800b5b4:	3124      	adds	r1, #36	@ 0x24
 800b5b6:	881c      	ldrh	r4, [r3, #0]
 800b5b8:	8810      	ldrh	r0, [r2, #0]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800b5ba:	3202      	adds	r2, #2
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b5bc:	4020      	ands	r0, r4
 800b5be:	8018      	strh	r0, [r3, #0]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800b5c0:	3302      	adds	r3, #2
 800b5c2:	428b      	cmp	r3, r1
 800b5c4:	d1f7      	bne.n	800b5b6 <RegionAU915InitDefaults+0xd6>
 800b5c6:	e79e      	b.n	800b506 <RegionAU915InitDefaults+0x26>
 800b5c8:	20001344 	.word	0x20001344
 800b5cc:	368cd800 	.word	0x368cd800
 800b5d0:	37502800 	.word	0x37502800
 800b5d4:	00030d40 	.word	0x00030d40
 800b5d8:	36978660 	.word	0x36978660
 800b5dc:	375ad660 	.word	0x375ad660
 800b5e0:	00186a00 	.word	0x00186a00

0800b5e4 <RegionAU915Verify>:

bool RegionAU915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800b5e4:	0003      	movs	r3, r0
 800b5e6:	b510      	push	{r4, lr}
 800b5e8:	0008      	movs	r0, r1
#if defined( REGION_AU915 )
    switch( phyAttribute )
 800b5ea:	290a      	cmp	r1, #10
 800b5ec:	d825      	bhi.n	800b63a <RegionAU915Verify+0x56>
 800b5ee:	f7f4 fd9d 	bl	800012c <__gnu_thumb1_case_uqi>
 800b5f2:	2406      	.short	0x2406
 800b5f4:	0a242424 	.word	0x0a242424
 800b5f8:	1f24160a 	.word	0x1f24160a
 800b5fc:	1f          	.byte	0x1f
 800b5fd:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800b5fe:	6818      	ldr	r0, [r3, #0]
 800b600:	f7ff fe76 	bl	800b2f0 <VerifyRfFreq>
            return false;
    }
#else
    return false;
#endif /* REGION_AU915 */
}
 800b604:	bd10      	pop	{r4, pc}
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE );
 800b606:	2000      	movs	r0, #0
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800b608:	7899      	ldrb	r1, [r3, #2]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE );
 800b60a:	2206      	movs	r2, #6
 800b60c:	5618      	ldrsb	r0, [r3, r0]
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800b60e:	2900      	cmp	r1, #0
 800b610:	d10c      	bne.n	800b62c <RegionAU915Verify+0x48>
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 800b612:	f000 fbfa 	bl	800be0a <RegionCommonValueInRange>
 800b616:	1e43      	subs	r3, r0, #1
 800b618:	4198      	sbcs	r0, r3
 800b61a:	b2c0      	uxtb	r0, r0
 800b61c:	e7f2      	b.n	800b604 <RegionAU915Verify+0x20>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE );
 800b61e:	2000      	movs	r0, #0
 800b620:	5618      	ldrsb	r0, [r3, r0]
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800b622:	789b      	ldrb	r3, [r3, #2]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 800b624:	220d      	movs	r2, #13
 800b626:	2108      	movs	r1, #8
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d0f2      	beq.n	800b612 <RegionAU915Verify+0x2e>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_RX_MAX_DATARATE );
 800b62c:	2102      	movs	r1, #2
 800b62e:	e7f0      	b.n	800b612 <RegionAU915Verify+0x2e>
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 800b630:	2000      	movs	r0, #0
 800b632:	220e      	movs	r2, #14
 800b634:	2100      	movs	r1, #0
 800b636:	5618      	ldrsb	r0, [r3, r0]
 800b638:	e7eb      	b.n	800b612 <RegionAU915Verify+0x2e>
    switch( phyAttribute )
 800b63a:	2000      	movs	r0, #0
 800b63c:	e7e2      	b.n	800b604 <RegionAU915Verify+0x20>
	...

0800b640 <RegionAU915ApplyCFList>:

void RegionAU915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 800b640:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_AU915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800b642:	7903      	ldrb	r3, [r0, #4]
 800b644:	2b10      	cmp	r3, #16
 800b646:	d125      	bne.n	800b694 <RegionAU915ApplyCFList+0x54>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800b648:	6803      	ldr	r3, [r0, #0]
 800b64a:	7bda      	ldrb	r2, [r3, #15]
 800b64c:	2a01      	cmp	r2, #1
 800b64e:	d121      	bne.n	800b694 <RegionAU915ApplyCFList+0x54>
 800b650:	21d8      	movs	r1, #216	@ 0xd8
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800b652:	4a11      	ldr	r2, [pc, #68]	@ (800b698 <RegionAU915ApplyCFList+0x58>)
 800b654:	0089      	lsls	r1, r1, #2
 800b656:	6815      	ldr	r5, [r2, #0]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800b658:	27da      	movs	r7, #218	@ 0xda
 800b65a:	186c      	adds	r4, r5, r1
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800b65c:	2100      	movs	r1, #0
 800b65e:	6850      	ldr	r0, [r2, #4]
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800b660:	00bf      	lsls	r7, r7, #2
 800b662:	3018      	adds	r0, #24
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800b664:	781a      	ldrb	r2, [r3, #0]
 800b666:	8022      	strh	r2, [r4, #0]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800b668:	785e      	ldrb	r6, [r3, #1]
 800b66a:	0236      	lsls	r6, r6, #8
 800b66c:	4332      	orrs	r2, r6
 800b66e:	8022      	strh	r2, [r4, #0]
        if( chMaskItr == 4 )
 800b670:	2904      	cmp	r1, #4
 800b672:	d102      	bne.n	800b67a <RegionAU915ApplyCFList+0x3a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800b674:	26ff      	movs	r6, #255	@ 0xff
 800b676:	4032      	ands	r2, r6
 800b678:	53ea      	strh	r2, [r5, r7]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800b67a:	8802      	ldrh	r2, [r0, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800b67c:	3101      	adds	r1, #1
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800b67e:	4694      	mov	ip, r2
 800b680:	4666      	mov	r6, ip
 800b682:	8822      	ldrh	r2, [r4, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800b684:	b2c9      	uxtb	r1, r1
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800b686:	4032      	ands	r2, r6
 800b688:	8002      	strh	r2, [r0, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800b68a:	3302      	adds	r3, #2
 800b68c:	3402      	adds	r4, #2
 800b68e:	3002      	adds	r0, #2
 800b690:	2905      	cmp	r1, #5
 800b692:	d1e7      	bne.n	800b664 <RegionAU915ApplyCFList+0x24>
    }
#endif /* REGION_AU915 */
}
 800b694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b696:	46c0      	nop			@ (mov r8, r8)
 800b698:	20001344 	.word	0x20001344

0800b69c <RegionAU915ChanMaskSet>:

bool RegionAU915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800b69c:	b570      	push	{r4, r5, r6, lr}
#if defined( REGION_AU915 )
    switch( chanMaskSet->ChannelsMaskType )
 800b69e:	7905      	ldrb	r5, [r0, #4]
{
 800b6a0:	0003      	movs	r3, r0
    switch( chanMaskSet->ChannelsMaskType )
 800b6a2:	2d00      	cmp	r5, #0
 800b6a4:	d00c      	beq.n	800b6c0 <RegionAU915ChanMaskSet+0x24>
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	2d01      	cmp	r5, #1
 800b6aa:	d127      	bne.n	800b6fc <RegionAU915ChanMaskSet+0x60>
            }
            break;
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800b6ac:	4a14      	ldr	r2, [pc, #80]	@ (800b700 <RegionAU915ChanMaskSet+0x64>)
 800b6ae:	6819      	ldr	r1, [r3, #0]
 800b6b0:	6810      	ldr	r0, [r2, #0]
 800b6b2:	22db      	movs	r2, #219	@ 0xdb
 800b6b4:	0092      	lsls	r2, r2, #2
 800b6b6:	1880      	adds	r0, r0, r2
 800b6b8:	2206      	movs	r2, #6
 800b6ba:	f000 fbe3 	bl	800be84 <RegionCommonChanMaskCopy>
            break;
 800b6be:	e01c      	b.n	800b6fa <RegionAU915ChanMaskSet+0x5e>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800b6c0:	26d8      	movs	r6, #216	@ 0xd8
 800b6c2:	4c0f      	ldr	r4, [pc, #60]	@ (800b700 <RegionAU915ChanMaskSet+0x64>)
 800b6c4:	00b6      	lsls	r6, r6, #2
 800b6c6:	6820      	ldr	r0, [r4, #0]
 800b6c8:	6819      	ldr	r1, [r3, #0]
 800b6ca:	2206      	movs	r2, #6
 800b6cc:	1980      	adds	r0, r0, r6
 800b6ce:	f000 fbd9 	bl	800be84 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800b6d2:	22dd      	movs	r2, #221	@ 0xdd
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	0092      	lsls	r2, r2, #2
 800b6d8:	5c99      	ldrb	r1, [r3, r2]
 800b6da:	5299      	strh	r1, [r3, r2]
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800b6dc:	4a09      	ldr	r2, [pc, #36]	@ (800b704 <RegionAU915ChanMaskSet+0x68>)
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b6de:	6861      	ldr	r1, [r4, #4]
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800b6e0:	529d      	strh	r5, [r3, r2]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800b6e2:	000a      	movs	r2, r1
 800b6e4:	199b      	adds	r3, r3, r6
 800b6e6:	3218      	adds	r2, #24
 800b6e8:	3124      	adds	r1, #36	@ 0x24
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b6ea:	8814      	ldrh	r4, [r2, #0]
 800b6ec:	8818      	ldrh	r0, [r3, #0]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800b6ee:	3302      	adds	r3, #2
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b6f0:	4020      	ands	r0, r4
 800b6f2:	8010      	strh	r0, [r2, #0]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800b6f4:	3202      	adds	r2, #2
 800b6f6:	428a      	cmp	r2, r1
 800b6f8:	d1f7      	bne.n	800b6ea <RegionAU915ChanMaskSet+0x4e>
        }
        default:
            return false;
    }
    return true;
 800b6fa:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_AU915 */
}
 800b6fc:	bd70      	pop	{r4, r5, r6, pc}
 800b6fe:	46c0      	nop			@ (mov r8, r8)
 800b700:	20001344 	.word	0x20001344
 800b704:	00000376 	.word	0x00000376

0800b708 <RegionAU915ComputeRxWindowParameters>:

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b70a:	001c      	movs	r4, r3
 800b70c:	000e      	movs	r6, r1
 800b70e:	0017      	movs	r7, r2
#if defined( REGION_AU915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 800b710:	1c03      	adds	r3, r0, #0
 800b712:	280d      	cmp	r0, #13
 800b714:	dd00      	ble.n	800b718 <RegionAU915ComputeRxWindowParameters+0x10>
 800b716:	230d      	movs	r3, #13
 800b718:	7063      	strb	r3, [r4, #1]
 800b71a:	b258      	sxtb	r0, r3
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAU915 );
 800b71c:	490e      	ldr	r1, [pc, #56]	@ (800b758 <RegionAU915ComputeRxWindowParameters+0x50>)
 800b71e:	4d0f      	ldr	r5, [pc, #60]	@ (800b75c <RegionAU915ComputeRxWindowParameters+0x54>)
 800b720:	f000 fe64 	bl	800c3ec <RegionCommonGetBandwidth>

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 800b724:	2101      	movs	r1, #1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAU915 );
 800b726:	70a0      	strb	r0, [r4, #2]
    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 800b728:	5661      	ldrsb	r1, [r4, r1]
 800b72a:	008a      	lsls	r2, r1, #2
 800b72c:	18aa      	adds	r2, r5, r2
 800b72e:	5c68      	ldrb	r0, [r5, r1]
 800b730:	6911      	ldr	r1, [r2, #16]
 800b732:	f000 fd4b 	bl	800c1cc <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b736:	4b0a      	ldr	r3, [pc, #40]	@ (800b760 <RegionAU915ComputeRxWindowParameters+0x58>)
    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 800b738:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b73a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b73c:	4798      	blx	r3
 800b73e:	0022      	movs	r2, r4
 800b740:	3408      	adds	r4, #8
 800b742:	320c      	adds	r2, #12
 800b744:	0003      	movs	r3, r0
 800b746:	0031      	movs	r1, r6
 800b748:	0028      	movs	r0, r5
 800b74a:	9201      	str	r2, [sp, #4]
 800b74c:	9400      	str	r4, [sp, #0]
 800b74e:	003a      	movs	r2, r7
 800b750:	f000 fd46 	bl	800c1e0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AU915 */
}
 800b754:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b756:	46c0      	nop			@ (mov r8, r8)
 800b758:	0800ec50 	.word	0x0800ec50
 800b75c:	0800ec40 	.word	0x0800ec40
 800b760:	0800edf8 	.word	0x0800edf8

0800b764 <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b764:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_AU915 )
    int8_t dr = rxConfig->Datarate;
 800b766:	2601      	movs	r6, #1
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800b768:	6843      	ldr	r3, [r0, #4]
{
 800b76a:	b08f      	sub	sp, #60	@ 0x3c

    if( Radio.GetStatus( ) != RF_IDLE )
 800b76c:	4f24      	ldr	r7, [pc, #144]	@ (800b800 <RegionAU915RxConfig+0x9c>)
{
 800b76e:	910d      	str	r1, [sp, #52]	@ 0x34
    int8_t dr = rxConfig->Datarate;
 800b770:	5786      	ldrsb	r6, [r0, r6]
    uint32_t frequency = rxConfig->Frequency;
 800b772:	930b      	str	r3, [sp, #44]	@ 0x2c
    if( Radio.GetStatus( ) != RF_IDLE )
 800b774:	687b      	ldr	r3, [r7, #4]
{
 800b776:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800b778:	4798      	blx	r3
    {
        return false;
 800b77a:	2300      	movs	r3, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800b77c:	4298      	cmp	r0, r3
 800b77e:	d138      	bne.n	800b7f2 <RegionAU915RxConfig+0x8e>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800b780:	7ce3      	ldrb	r3, [r4, #19]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d107      	bne.n	800b796 <RegionAU915RxConfig+0x32>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 800b786:	2207      	movs	r2, #7
 800b788:	7823      	ldrb	r3, [r4, #0]
 800b78a:	4d1e      	ldr	r5, [pc, #120]	@ (800b804 <RegionAU915RxConfig+0xa0>)
 800b78c:	4013      	ands	r3, r2
 800b78e:	435d      	muls	r5, r3
 800b790:	4b1d      	ldr	r3, [pc, #116]	@ (800b808 <RegionAU915RxConfig+0xa4>)
 800b792:	18eb      	adds	r3, r5, r3
 800b794:	930b      	str	r3, [sp, #44]	@ 0x2c
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 800b796:	4d1d      	ldr	r5, [pc, #116]	@ (800b80c <RegionAU915RxConfig+0xa8>)

    Radio.SetChannel( frequency );
 800b798:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    phyDr = DataratesAU915[dr];
 800b79a:	57ab      	ldrsb	r3, [r5, r6]
 800b79c:	930c      	str	r3, [sp, #48]	@ 0x30
    Radio.SetChannel( frequency );
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	2001      	movs	r0, #1
 800b7a6:	7ca3      	ldrb	r3, [r4, #18]
 800b7a8:	78a1      	ldrb	r1, [r4, #2]
 800b7aa:	9207      	str	r2, [sp, #28]
 800b7ac:	9206      	str	r2, [sp, #24]
 800b7ae:	9205      	str	r2, [sp, #20]
 800b7b0:	9204      	str	r2, [sp, #16]
 800b7b2:	9203      	str	r2, [sp, #12]
 800b7b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7b6:	9008      	str	r0, [sp, #32]
 800b7b8:	68a3      	ldr	r3, [r4, #8]
 800b7ba:	69bf      	ldr	r7, [r7, #24]
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	9302      	str	r3, [sp, #8]
 800b7c0:	2308      	movs	r3, #8
 800b7c2:	9200      	str	r2, [sp, #0]
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b7c8:	0003      	movs	r3, r0
 800b7ca:	47b8      	blx	r7

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800b7cc:	7c63      	ldrb	r3, [r4, #17]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d012      	beq.n	800b7f8 <RegionAU915RxConfig+0x94>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 800b7d2:	356c      	adds	r5, #108	@ 0x6c
 800b7d4:	5da9      	ldrb	r1, [r5, r6]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800b7d6:	4b0a      	ldr	r3, [pc, #40]	@ (800b800 <RegionAU915RxConfig+0x9c>)
 800b7d8:	310d      	adds	r1, #13
 800b7da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7dc:	2001      	movs	r0, #1
 800b7de:	b2c9      	uxtb	r1, r1
 800b7e0:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800b7e2:	0032      	movs	r2, r6
 800b7e4:	7ce0      	ldrb	r0, [r4, #19]
 800b7e6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b7e8:	f000 fe10 	bl	800c40c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800b7ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7ee:	701e      	strb	r6, [r3, #0]
    return true;
 800b7f0:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AU915 */
}
 800b7f2:	0018      	movs	r0, r3
 800b7f4:	b00f      	add	sp, #60	@ 0x3c
 800b7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 800b7f8:	002b      	movs	r3, r5
 800b7fa:	3350      	adds	r3, #80	@ 0x50
 800b7fc:	5d99      	ldrb	r1, [r3, r6]
 800b7fe:	e7ea      	b.n	800b7d6 <RegionAU915RxConfig+0x72>
 800b800:	0800edf8 	.word	0x0800edf8
 800b804:	000927c0 	.word	0x000927c0
 800b808:	370870a0 	.word	0x370870a0
 800b80c:	0800ec40 	.word	0x0800ec40

0800b810 <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b810:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_AU915 )
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b812:	260c      	movs	r6, #12
{
 800b814:	b091      	sub	sp, #68	@ 0x44
 800b816:	910d      	str	r1, [sp, #52]	@ 0x34
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b818:	7801      	ldrb	r1, [r0, #0]
 800b81a:	4f2d      	ldr	r7, [pc, #180]	@ (800b8d0 <RegionAU915TxConfig+0xc0>)
 800b81c:	4371      	muls	r1, r6
{
 800b81e:	920e      	str	r2, [sp, #56]	@ 0x38
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b820:	683a      	ldr	r2, [r7, #0]
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800b822:	2301      	movs	r3, #1
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b824:	1852      	adds	r2, r2, r1
 800b826:	7a51      	ldrb	r1, [r2, #9]
 800b828:	2218      	movs	r2, #24
{
 800b82a:	0004      	movs	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b82c:	434a      	muls	r2, r1
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800b82e:	56c3      	ldrsb	r3, [r0, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b830:	2102      	movs	r1, #2
 800b832:	2002      	movs	r0, #2
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800b834:	4d27      	ldr	r5, [pc, #156]	@ (800b8d4 <RegionAU915TxConfig+0xc4>)
 800b836:	56eb      	ldrsb	r3, [r5, r3]
 800b838:	930c      	str	r3, [sp, #48]	@ 0x30
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	5620      	ldrsb	r0, [r4, r0]
 800b83e:	189b      	adds	r3, r3, r2
 800b840:	5659      	ldrsb	r1, [r3, r1]
 800b842:	f000 fdcc 	bl	800c3de <RegionCommonLimitTxPower>
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAU915 );
 800b846:	0029      	movs	r1, r5
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b848:	900b      	str	r0, [sp, #44]	@ 0x2c
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAU915 );
 800b84a:	2001      	movs	r0, #1
 800b84c:	3110      	adds	r1, #16
 800b84e:	5620      	ldrsb	r0, [r4, r0]
 800b850:	f000 fdcc 	bl	800c3ec <RegionCommonGetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800b854:	68a2      	ldr	r2, [r4, #8]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAU915 );
 800b856:	0005      	movs	r5, r0
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800b858:	6861      	ldr	r1, [r4, #4]
 800b85a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b85c:	f000 fcee 	bl	800c23c <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b860:	7823      	ldrb	r3, [r4, #0]
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	4373      	muls	r3, r6
 800b866:	4e1c      	ldr	r6, [pc, #112]	@ (800b8d8 <RegionAU915TxConfig+0xc8>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800b868:	900f      	str	r0, [sp, #60]	@ 0x3c
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b86a:	68f2      	ldr	r2, [r6, #12]
 800b86c:	5858      	ldr	r0, [r3, r1]
 800b86e:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800b870:	23fa      	movs	r3, #250	@ 0xfa
 800b872:	011b      	lsls	r3, r3, #4
 800b874:	9308      	str	r3, [sp, #32]
 800b876:	2308      	movs	r3, #8
 800b878:	9302      	str	r3, [sp, #8]
 800b87a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b87c:	2200      	movs	r2, #0
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	69f3      	ldr	r3, [r6, #28]
 800b882:	2101      	movs	r1, #1
 800b884:	469c      	mov	ip, r3
 800b886:	9207      	str	r2, [sp, #28]
 800b888:	002b      	movs	r3, r5
 800b88a:	9206      	str	r2, [sp, #24]
 800b88c:	4665      	mov	r5, ip
 800b88e:	9205      	str	r2, [sp, #20]
 800b890:	9104      	str	r1, [sp, #16]
 800b892:	9203      	str	r2, [sp, #12]
 800b894:	9101      	str	r1, [sp, #4]
 800b896:	2001      	movs	r0, #1
 800b898:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b89a:	47a8      	blx	r5
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800b89c:	200c      	movs	r0, #12
 800b89e:	2101      	movs	r1, #1
 800b8a0:	7823      	ldrb	r3, [r4, #0]
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	4343      	muls	r3, r0
 800b8a6:	5661      	ldrsb	r1, [r4, r1]
 800b8a8:	5898      	ldr	r0, [r3, r2]
 800b8aa:	f000 fdd9 	bl	800c460 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800b8ae:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800b8b0:	7b21      	ldrb	r1, [r4, #12]
 800b8b2:	2001      	movs	r0, #1
 800b8b4:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800b8b6:	2001      	movs	r0, #1
 800b8b8:	89a1      	ldrh	r1, [r4, #12]
 800b8ba:	5620      	ldrsb	r0, [r4, r0]
 800b8bc:	f7ff fcfc 	bl	800b2b8 <GetTimeOnAir>
 800b8c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38

    *txPower = txPowerLimited;
 800b8c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800b8c4:	6018      	str	r0, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_AU915 */
}
 800b8c6:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 800b8c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8ca:	701a      	strb	r2, [r3, #0]
}
 800b8cc:	b011      	add	sp, #68	@ 0x44
 800b8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8d0:	20001344 	.word	0x20001344
 800b8d4:	0800ec40 	.word	0x0800ec40
 800b8d8:	0800edf8 	.word	0x0800edf8

0800b8dc <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800b8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8de:	b097      	sub	sp, #92	@ 0x5c
 800b8e0:	9103      	str	r1, [sp, #12]
 800b8e2:	9204      	str	r2, [sp, #16]
    uint8_t status = 0x07;
#if defined( REGION_AU915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	2206      	movs	r2, #6
{
 800b8e8:	0004      	movs	r4, r0
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800b8ea:	a809      	add	r0, sp, #36	@ 0x24
{
 800b8ec:	9305      	str	r3, [sp, #20]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800b8ee:	f002 fecb 	bl	800e688 <memset>
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800b8f2:	220c      	movs	r2, #12
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	a80b      	add	r0, sp, #44	@ 0x2c
 800b8f8:	f002 fec6 	bl	800e688 <memset>
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, 6 );
 800b8fc:	4b70      	ldr	r3, [pc, #448]	@ (800bac0 <RegionAU915LinkAdrReq+0x1e4>)
 800b8fe:	2206      	movs	r2, #6
 800b900:	6819      	ldr	r1, [r3, #0]
 800b902:	23d8      	movs	r3, #216	@ 0xd8
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	18c9      	adds	r1, r1, r3
 800b908:	a80b      	add	r0, sp, #44	@ 0x2c
 800b90a:	f000 fabb 	bl	800be84 <RegionCommonChanMaskCopy>
    uint8_t bytesProcessed = 0;
 800b90e:	2300      	movs	r3, #0
 800b910:	9301      	str	r3, [sp, #4]

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800b912:	7a23      	ldrb	r3, [r4, #8]
 800b914:	9a01      	ldr	r2, [sp, #4]
 800b916:	ad09      	add	r5, sp, #36	@ 0x24
 800b918:	4293      	cmp	r3, r2
 800b91a:	d907      	bls.n	800b92c <RegionAU915LinkAdrReq+0x50>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800b91c:	6860      	ldr	r0, [r4, #4]
 800b91e:	9b01      	ldr	r3, [sp, #4]
 800b920:	0029      	movs	r1, r5
 800b922:	18c0      	adds	r0, r0, r3
 800b924:	f000 fbf0 	bl	800c108 <RegionCommonParseLinkAdrReq>

        if( nextIndex == 0 )
 800b928:	2800      	cmp	r0, #0
 800b92a:	d10c      	bne.n	800b946 <RegionAU915LinkAdrReq+0x6a>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800b92c:	2301      	movs	r3, #1
 800b92e:	56eb      	ldrsb	r3, [r5, r3]
 800b930:	2b05      	cmp	r3, #5
 800b932:	dc5a      	bgt.n	800b9ea <RegionAU915LinkAdrReq+0x10e>
 800b934:	2204      	movs	r2, #4
 800b936:	2100      	movs	r1, #0
 800b938:	a80b      	add	r0, sp, #44	@ 0x2c
 800b93a:	f000 fa84 	bl	800be46 <RegionCommonCountChannels>
 800b93e:	2801      	cmp	r0, #1
 800b940:	d853      	bhi.n	800b9ea <RegionAU915LinkAdrReq+0x10e>
    {
        status &= 0xFE; // Channel mask KO
 800b942:	2506      	movs	r5, #6
 800b944:	e052      	b.n	800b9ec <RegionAU915LinkAdrReq+0x110>
        bytesProcessed += nextIndex;
 800b946:	9b01      	ldr	r3, [sp, #4]
 800b948:	1818      	adds	r0, r3, r0
 800b94a:	b2c3      	uxtb	r3, r0
 800b94c:	9301      	str	r3, [sp, #4]
        if( linkAdrParams.ChMaskCtrl == 6 )
 800b94e:	78e9      	ldrb	r1, [r5, #3]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800b950:	88aa      	ldrh	r2, [r5, #4]
 800b952:	ab0b      	add	r3, sp, #44	@ 0x2c
        if( linkAdrParams.ChMaskCtrl == 6 )
 800b954:	2906      	cmp	r1, #6
 800b956:	d107      	bne.n	800b968 <RegionAU915LinkAdrReq+0x8c>
            channelsMask[0] = 0xFFFF;
 800b958:	3907      	subs	r1, #7
 800b95a:	910b      	str	r1, [sp, #44]	@ 0x2c
            channelsMask[2] = 0xFFFF;
 800b95c:	910c      	str	r1, [sp, #48]	@ 0x30
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800b95e:	3101      	adds	r1, #1
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800b960:	31ff      	adds	r1, #255	@ 0xff
 800b962:	400a      	ands	r2, r1
 800b964:	811a      	strh	r2, [r3, #8]
 800b966:	e7d4      	b.n	800b912 <RegionAU915LinkAdrReq+0x36>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800b968:	2907      	cmp	r1, #7
 800b96a:	d103      	bne.n	800b974 <RegionAU915LinkAdrReq+0x98>
            channelsMask[0] = 0x0000;
 800b96c:	2100      	movs	r1, #0
 800b96e:	910b      	str	r1, [sp, #44]	@ 0x2c
            channelsMask[2] = 0x0000;
 800b970:	910c      	str	r1, [sp, #48]	@ 0x30
 800b972:	e7f5      	b.n	800b960 <RegionAU915LinkAdrReq+0x84>
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800b974:	2905      	cmp	r1, #5
 800b976:	d135      	bne.n	800b9e4 <RegionAU915LinkAdrReq+0x108>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800b978:	2500      	movs	r5, #0
            uint8_t cntChannelMask = 0;
 800b97a:	0028      	movs	r0, r5
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800b97c:	31fa      	adds	r1, #250	@ 0xfa
 800b97e:	400a      	ands	r2, r1
 800b980:	9202      	str	r2, [sp, #8]
 800b982:	2101      	movs	r1, #1
                    if( ( i % 2 ) == 0 )
 800b984:	2201      	movs	r2, #1
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800b986:	40a9      	lsls	r1, r5
 800b988:	9f02      	ldr	r7, [sp, #8]
                    if( ( i % 2 ) == 0 )
 800b98a:	402a      	ands	r2, r5
                        channelsMask[cntChannelMask] |= 0x00FF;
 800b98c:	0046      	lsls	r6, r0, #1
                    if( ( i % 2 ) == 0 )
 800b98e:	4694      	mov	ip, r2
                        channelsMask[cntChannelMask] |= 0x00FF;
 800b990:	5b9a      	ldrh	r2, [r3, r6]
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800b992:	4239      	tst	r1, r7
 800b994:	d015      	beq.n	800b9c2 <RegionAU915LinkAdrReq+0xe6>
                    if( ( i % 2 ) == 0 )
 800b996:	4667      	mov	r7, ip
 800b998:	b289      	uxth	r1, r1
 800b99a:	2f00      	cmp	r7, #0
 800b99c:	d109      	bne.n	800b9b2 <RegionAU915LinkAdrReq+0xd6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800b99e:	37ff      	adds	r7, #255	@ 0xff
 800b9a0:	433a      	orrs	r2, r7
 800b9a2:	539a      	strh	r2, [r3, r6]
                        channelsMask[4] |= ( bitMask << i );
 800b9a4:	891a      	ldrh	r2, [r3, #8]
 800b9a6:	430a      	orrs	r2, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800b9a8:	3501      	adds	r5, #1
                        channelsMask[4] |= ( bitMask << i );
 800b9aa:	811a      	strh	r2, [r3, #8]
            for( uint8_t i = 0; i <= 7; i++ )
 800b9ac:	2d08      	cmp	r5, #8
 800b9ae:	d1e8      	bne.n	800b982 <RegionAU915LinkAdrReq+0xa6>
 800b9b0:	e7af      	b.n	800b912 <RegionAU915LinkAdrReq+0x36>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800b9b2:	4f44      	ldr	r7, [pc, #272]	@ (800bac4 <RegionAU915LinkAdrReq+0x1e8>)
 800b9b4:	433a      	orrs	r2, r7
 800b9b6:	539a      	strh	r2, [r3, r6]
                        channelsMask[4] |= ( bitMask << i );
 800b9b8:	891a      	ldrh	r2, [r3, #8]
 800b9ba:	430a      	orrs	r2, r1
                        cntChannelMask++;
 800b9bc:	3001      	adds	r0, #1
 800b9be:	b2c0      	uxtb	r0, r0
 800b9c0:	e7f2      	b.n	800b9a8 <RegionAU915LinkAdrReq+0xcc>
                        channelsMask[4] &= ~( bitMask << i );
 800b9c2:	43c9      	mvns	r1, r1
                    if( ( i % 2 ) == 0 )
 800b9c4:	4667      	mov	r7, ip
 800b9c6:	b289      	uxth	r1, r1
 800b9c8:	2f00      	cmp	r7, #0
 800b9ca:	d105      	bne.n	800b9d8 <RegionAU915LinkAdrReq+0xfc>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800b9cc:	37ff      	adds	r7, #255	@ 0xff
 800b9ce:	43ba      	bics	r2, r7
 800b9d0:	539a      	strh	r2, [r3, r6]
                        channelsMask[4] &= ~( bitMask << i );
 800b9d2:	891a      	ldrh	r2, [r3, #8]
 800b9d4:	400a      	ands	r2, r1
 800b9d6:	e7e7      	b.n	800b9a8 <RegionAU915LinkAdrReq+0xcc>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800b9d8:	27ff      	movs	r7, #255	@ 0xff
 800b9da:	403a      	ands	r2, r7
 800b9dc:	539a      	strh	r2, [r3, r6]
                        channelsMask[4] &= ~( bitMask << i );
 800b9de:	891a      	ldrh	r2, [r3, #8]
 800b9e0:	400a      	ands	r2, r1
 800b9e2:	e7eb      	b.n	800b9bc <RegionAU915LinkAdrReq+0xe0>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800b9e4:	0049      	lsls	r1, r1, #1
 800b9e6:	525a      	strh	r2, [r3, r1]
 800b9e8:	e793      	b.n	800b912 <RegionAU915LinkAdrReq+0x36>
    uint8_t bytesProcessed = 0;
 800b9ea:	2507      	movs	r5, #7
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	aa06      	add	r2, sp, #24
 800b9f0:	7113      	strb	r3, [r2, #4]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800b9f2:	7a63      	ldrb	r3, [r4, #9]
    phyParam = RegionAU915GetPhyParam( &getPhy );
 800b9f4:	a807      	add	r0, sp, #28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800b9f6:	7193      	strb	r3, [r2, #6]
    phyParam = RegionAU915GetPhyParam( &getPhy );
 800b9f8:	f7ff fc98 	bl	800b32c <RegionAU915GetPhyParam>
 800b9fc:	0002      	movs	r2, r0
 800b9fe:	9006      	str	r0, [sp, #24]

    linkAdrVerifyParams.Status = status;
 800ba00:	a80e      	add	r0, sp, #56	@ 0x38
 800ba02:	7105      	strb	r5, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800ba04:	7aa3      	ldrb	r3, [r4, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
    linkAdrVerifyParams.ChannelsMask = channelsMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800ba06:	4d2e      	ldr	r5, [pc, #184]	@ (800bac0 <RegionAU915LinkAdrReq+0x1e4>)
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800ba08:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800ba0a:	ab09      	add	r3, sp, #36	@ 0x24
 800ba0c:	7859      	ldrb	r1, [r3, #1]
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 800ba0e:	2706      	movs	r7, #6
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800ba10:	7181      	strb	r1, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800ba12:	7899      	ldrb	r1, [r3, #2]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800ba14:	ae0b      	add	r6, sp, #44	@ 0x2c
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800ba16:	71c1      	strb	r1, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800ba18:	7819      	ldrb	r1, [r3, #0]
 800ba1a:	7201      	strb	r1, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800ba1c:	7ae1      	ldrb	r1, [r4, #11]
 800ba1e:	7241      	strb	r1, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800ba20:	7b21      	ldrb	r1, [r4, #12]
 800ba22:	7281      	strb	r1, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800ba24:	7b61      	ldrb	r1, [r4, #13]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800ba26:	7502      	strb	r2, [r0, #20]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800ba28:	682a      	ldr	r2, [r5, #0]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800ba2a:	72c1      	strb	r1, [r0, #11]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800ba2c:	6182      	str	r2, [r0, #24]
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 800ba2e:	220e      	movs	r2, #14
 800ba30:	8382      	strh	r2, [r0, #28]
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800ba32:	6822      	ldr	r2, [r4, #0]
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 800ba34:	2148      	movs	r1, #72	@ 0x48
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800ba36:	920e      	str	r2, [sp, #56]	@ 0x38

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800ba38:	220e      	movs	r2, #14
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 800ba3a:	7301      	strb	r1, [r0, #12]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800ba3c:	a906      	add	r1, sp, #24
 800ba3e:	1852      	adds	r2, r2, r1
 800ba40:	210d      	movs	r1, #13
 800ba42:	ac06      	add	r4, sp, #24
 800ba44:	1909      	adds	r1, r1, r4
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800ba46:	6106      	str	r6, [r0, #16]
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 800ba48:	7547      	strb	r7, [r0, #21]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800ba4a:	f000 fb78 	bl	800c13e <RegionCommonLinkAdrReqVerifyParams>
 800ba4e:	0004      	movs	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800ba50:	2807      	cmp	r0, #7
 800ba52:	d125      	bne.n	800baa0 <RegionAU915LinkAdrReq+0x1c4>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800ba54:	23d8      	movs	r3, #216	@ 0xd8
 800ba56:	6828      	ldr	r0, [r5, #0]
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	18c0      	adds	r0, r0, r3
 800ba5c:	003a      	movs	r2, r7
 800ba5e:	0031      	movs	r1, r6
 800ba60:	f000 fa10 	bl	800be84 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800ba64:	cd0c      	ldmia	r5!, {r2, r3}
 800ba66:	21d8      	movs	r1, #216	@ 0xd8
 800ba68:	0089      	lsls	r1, r1, #2
 800ba6a:	5a51      	ldrh	r1, [r2, r1]
 800ba6c:	8b18      	ldrh	r0, [r3, #24]
 800ba6e:	4001      	ands	r1, r0
 800ba70:	8319      	strh	r1, [r3, #24]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800ba72:	4915      	ldr	r1, [pc, #84]	@ (800bac8 <RegionAU915LinkAdrReq+0x1ec>)
 800ba74:	8b58      	ldrh	r0, [r3, #26]
 800ba76:	5a51      	ldrh	r1, [r2, r1]
 800ba78:	4001      	ands	r1, r0
 800ba7a:	8359      	strh	r1, [r3, #26]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800ba7c:	21d9      	movs	r1, #217	@ 0xd9
 800ba7e:	0089      	lsls	r1, r1, #2
 800ba80:	5a51      	ldrh	r1, [r2, r1]
 800ba82:	8b98      	ldrh	r0, [r3, #28]
 800ba84:	4001      	ands	r1, r0
 800ba86:	8399      	strh	r1, [r3, #28]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800ba88:	4910      	ldr	r1, [pc, #64]	@ (800bacc <RegionAU915LinkAdrReq+0x1f0>)
 800ba8a:	8bd8      	ldrh	r0, [r3, #30]
 800ba8c:	5a51      	ldrh	r1, [r2, r1]
 800ba8e:	4001      	ands	r1, r0
 800ba90:	83d9      	strh	r1, [r3, #30]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800ba92:	21da      	movs	r1, #218	@ 0xda
 800ba94:	0089      	lsls	r1, r1, #2
 800ba96:	5a51      	ldrh	r1, [r2, r1]
 800ba98:	8419      	strh	r1, [r3, #32]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800ba9a:	490d      	ldr	r1, [pc, #52]	@ (800bad0 <RegionAU915LinkAdrReq+0x1f4>)
 800ba9c:	5a52      	ldrh	r2, [r2, r1]
 800ba9e:	845a      	strh	r2, [r3, #34]	@ 0x22
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

#endif /* REGION_AU915 */
    return status;
}
 800baa0:	0020      	movs	r0, r4
    *drOut = linkAdrParams.Datarate;
 800baa2:	ab09      	add	r3, sp, #36	@ 0x24
 800baa4:	785a      	ldrb	r2, [r3, #1]
 800baa6:	9903      	ldr	r1, [sp, #12]
 800baa8:	700a      	strb	r2, [r1, #0]
    *txPowOut = linkAdrParams.TxPower;
 800baaa:	789a      	ldrb	r2, [r3, #2]
 800baac:	9904      	ldr	r1, [sp, #16]
    *nbRepOut = linkAdrParams.NbRep;
 800baae:	781b      	ldrb	r3, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 800bab0:	700a      	strb	r2, [r1, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800bab2:	9a05      	ldr	r2, [sp, #20]
 800bab4:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800bab6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800bab8:	9a01      	ldr	r2, [sp, #4]
 800baba:	701a      	strb	r2, [r3, #0]
}
 800babc:	b017      	add	sp, #92	@ 0x5c
 800babe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bac0:	20001344 	.word	0x20001344
 800bac4:	ffffff00 	.word	0xffffff00
 800bac8:	00000362 	.word	0x00000362
 800bacc:	00000366 	.word	0x00000366
 800bad0:	0000036a 	.word	0x0000036a

0800bad4 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800bad4:	b570      	push	{r4, r5, r6, lr}
 800bad6:	0005      	movs	r5, r0
    uint8_t status = 0x07;
#if defined( REGION_AU915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800bad8:	6840      	ldr	r0, [r0, #4]
 800bada:	f7ff fc09 	bl	800b2f0 <VerifyRfFreq>
 800bade:	3006      	adds	r0, #6
 800bae0:	b2c4      	uxtb	r4, r0
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 800bae2:	2000      	movs	r0, #0
 800bae4:	220d      	movs	r2, #13
 800bae6:	2108      	movs	r1, #8
 800bae8:	5628      	ldrsb	r0, [r5, r0]
 800baea:	f000 f98e 	bl	800be0a <RegionCommonValueInRange>
 800baee:	2800      	cmp	r0, #0
 800baf0:	d101      	bne.n	800baf6 <RegionAU915RxParamSetupReq+0x22>
    {
        status &= 0xFD; // Datarate KO
 800baf2:	2302      	movs	r3, #2
 800baf4:	439c      	bics	r4, r3
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 800baf6:	2300      	movs	r3, #0
 800baf8:	56eb      	ldrsb	r3, [r5, r3]
 800bafa:	2b07      	cmp	r3, #7
 800bafc:	d001      	beq.n	800bb02 <RegionAU915RxParamSetupReq+0x2e>
 800bafe:	2b0d      	cmp	r3, #13
 800bb00:	dd01      	ble.n	800bb06 <RegionAU915RxParamSetupReq+0x32>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 800bb02:	2302      	movs	r3, #2
 800bb04:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 800bb06:	2001      	movs	r0, #1
 800bb08:	2205      	movs	r2, #5
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	5628      	ldrsb	r0, [r5, r0]
 800bb0e:	f000 f97c 	bl	800be0a <RegionCommonValueInRange>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	d101      	bne.n	800bb1a <RegionAU915RxParamSetupReq+0x46>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800bb16:	2304      	movs	r3, #4
 800bb18:	439c      	bics	r4, r3
    }

#endif /* REGION_AU915 */
    return status;
}
 800bb1a:	0020      	movs	r0, r4
 800bb1c:	bd70      	pop	{r4, r5, r6, pc}

0800bb1e <RegionAU915NewChannelReq>:

int8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
 800bb1e:	2001      	movs	r0, #1
}
 800bb20:	4240      	negs	r0, r0
 800bb22:	4770      	bx	lr

0800bb24 <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 800bb24:	2000      	movs	r0, #0
 800bb26:	4770      	bx	lr

0800bb28 <RegionAU915DlChannelReq>:

int8_t RegionAU915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
 800bb28:	2001      	movs	r0, #1
 800bb2a:	4240      	negs	r0, r0
 800bb2c:	4770      	bx	lr
	...

0800bb30 <RegionAU915AlternateDr>:
#if defined( REGION_AU915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_2 and then one 500kHz DR_6 channel
    if( type == ALTERNATE_DR )
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800bb30:	4b09      	ldr	r3, [pc, #36]	@ (800bb58 <RegionAU915AlternateDr+0x28>)
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	3306      	adds	r3, #6
 800bb36:	7fd8      	ldrb	r0, [r3, #31]
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 800bb38:	1e42      	subs	r2, r0, #1
 800bb3a:	b2d2      	uxtb	r2, r2
    if( type == ALTERNATE_DR )
 800bb3c:	2900      	cmp	r1, #0
 800bb3e:	d101      	bne.n	800bb44 <RegionAU915AlternateDr+0x14>
        RegionNvmGroup1->JoinTrialsCounter++;
 800bb40:	3001      	adds	r0, #1
 800bb42:	b2c2      	uxtb	r2, r0
 800bb44:	77da      	strb	r2, [r3, #31]
 800bb46:	2339      	movs	r3, #57	@ 0x39
 800bb48:	4353      	muls	r3, r2
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800bb4a:	b2db      	uxtb	r3, r3
        // Use DR_6 every 9th times.
        currentDr = DR_6;
    }
    else
    {
        currentDr = DR_2;
 800bb4c:	2002      	movs	r0, #2
    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800bb4e:	2b1c      	cmp	r3, #28
 800bb50:	d800      	bhi.n	800bb54 <RegionAU915AlternateDr+0x24>
        currentDr = DR_6;
 800bb52:	3004      	adds	r0, #4
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_AU915 */
}
 800bb54:	4770      	bx	lr
 800bb56:	46c0      	nop			@ (mov r8, r8)
 800bb58:	20001344 	.word	0x20001344

0800bb5c <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800bb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb5e:	b0a7      	sub	sp, #156	@ 0x9c
 800bb60:	9303      	str	r3, [sp, #12]
#if defined( REGION_AU915 )
    uint8_t nbEnabledChannels = 0;
 800bb62:	230e      	movs	r3, #14
 800bb64:	2500      	movs	r5, #0
{
 800bb66:	9202      	str	r2, [sp, #8]
    uint8_t nbEnabledChannels = 0;
 800bb68:	aa02      	add	r2, sp, #8
 800bb6a:	189b      	adds	r3, r3, r2
 800bb6c:	701d      	strb	r5, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 800bb6e:	230f      	movs	r3, #15
{
 800bb70:	0004      	movs	r4, r0
    uint8_t nbRestrictedChannels = 0;
 800bb72:	189b      	adds	r3, r3, r2
{
 800bb74:	000f      	movs	r7, r1
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 800bb76:	2248      	movs	r2, #72	@ 0x48
 800bb78:	0029      	movs	r1, r5
 800bb7a:	a814      	add	r0, sp, #80	@ 0x50
    uint8_t nbRestrictedChannels = 0;
 800bb7c:	701d      	strb	r5, [r3, #0]
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 800bb7e:	f002 fd83 	bl	800e688 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800bb82:	4e45      	ldr	r6, [pc, #276]	@ (800bc98 <RegionAU915NextChannel+0x13c>)
 800bb84:	0029      	movs	r1, r5
 800bb86:	6870      	ldr	r0, [r6, #4]
 800bb88:	2204      	movs	r2, #4
 800bb8a:	3018      	adds	r0, #24
 800bb8c:	f000 f95b 	bl	800be46 <RegionCommonCountChannels>
 800bb90:	1e05      	subs	r5, r0, #0
 800bb92:	d10b      	bne.n	800bbac <RegionAU915NextChannel+0x50>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800bb94:	23d8      	movs	r3, #216	@ 0xd8
 800bb96:	6831      	ldr	r1, [r6, #0]
 800bb98:	6870      	ldr	r0, [r6, #4]
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	18c9      	adds	r1, r1, r3
 800bb9e:	2204      	movs	r2, #4
 800bba0:	3018      	adds	r0, #24
 800bba2:	f000 f96f 	bl	800be84 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800bba6:	6873      	ldr	r3, [r6, #4]
 800bba8:	3305      	adds	r3, #5
 800bbaa:	77dd      	strb	r5, [r3, #31]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 800bbac:	2308      	movs	r3, #8
 800bbae:	56e3      	ldrsb	r3, [r4, r3]
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800bbb0:	4a39      	ldr	r2, [pc, #228]	@ (800bc98 <RegionAU915NextChannel+0x13c>)
    if( nextChanParams->Datarate >= DR_6 )
 800bbb2:	469c      	mov	ip, r3
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800bbb4:	ca0a      	ldmia	r2!, {r1, r3}
    if( nextChanParams->Datarate >= DR_6 )
 800bbb6:	4662      	mov	r2, ip
 800bbb8:	2a05      	cmp	r2, #5
 800bbba:	dd07      	ble.n	800bbcc <RegionAU915NextChannel+0x70>
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800bbbc:	8c1a      	ldrh	r2, [r3, #32]
 800bbbe:	b2d2      	uxtb	r2, r2
 800bbc0:	2a00      	cmp	r2, #0
 800bbc2:	d103      	bne.n	800bbcc <RegionAU915NextChannel+0x70>
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800bbc4:	22da      	movs	r2, #218	@ 0xda
 800bbc6:	0092      	lsls	r2, r2, #2
 800bbc8:	5a8a      	ldrh	r2, [r1, r2]
 800bbca:	841a      	strh	r2, [r3, #32]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800bbcc:	7a62      	ldrb	r2, [r4, #9]
 800bbce:	ae06      	add	r6, sp, #24
 800bbd0:	7032      	strb	r2, [r6, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800bbd2:	4662      	mov	r2, ip
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800bbd4:	9309      	str	r3, [sp, #36]	@ 0x24
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800bbd6:	7072      	strb	r2, [r6, #1]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800bbd8:	001a      	movs	r2, r3
    countChannelsParams.MaxNbChannels = AU915_MAX_NB_CHANNELS;
 800bbda:	2348      	movs	r3, #72	@ 0x48
 800bbdc:	8233      	strh	r3, [r6, #16]
    countChannelsParams.JoinChannels = NULL;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	930b      	str	r3, [sp, #44]	@ 0x2c

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800bbe2:	6823      	ldr	r3, [r4, #0]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800bbe4:	3218      	adds	r2, #24
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800bbe6:	930c      	str	r3, [sp, #48]	@ 0x30
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800bbe8:	6863      	ldr	r3, [r4, #4]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800bbea:	9207      	str	r2, [sp, #28]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800bbec:	9108      	str	r1, [sp, #32]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800bbee:	930d      	str	r3, [sp, #52]	@ 0x34
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800bbf0:	7aa3      	ldrb	r3, [r4, #10]
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800bbf2:	ad0c      	add	r5, sp, #48	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800bbf4:	722b      	strb	r3, [r5, #8]
    identifyChannelsParam.MaxBands = AU915_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800bbf6:	0022      	movs	r2, r4
    identifyChannelsParam.MaxBands = AU915_MAX_NB_BANDS;
 800bbf8:	2301      	movs	r3, #1
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800bbfa:	320c      	adds	r2, #12
    identifyChannelsParam.MaxBands = AU915_MAX_NB_BANDS;
 800bbfc:	726b      	strb	r3, [r5, #9]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800bbfe:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bc00:	ca03      	ldmia	r2!, {r0, r1}
 800bc02:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800bc04:	7d23      	ldrb	r3, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800bc06:	4660      	mov	r0, ip
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800bc08:	752b      	strb	r3, [r5, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800bc0a:	8ae1      	ldrh	r1, [r4, #22]
 800bc0c:	f7ff fb54 	bl	800b2b8 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800bc10:	9b02      	ldr	r3, [sp, #8]
 800bc12:	aa02      	add	r2, sp, #8
 800bc14:	9301      	str	r3, [sp, #4]
 800bc16:	230f      	movs	r3, #15
 800bc18:	189b      	adds	r3, r3, r2
 800bc1a:	9300      	str	r3, [sp, #0]
 800bc1c:	230e      	movs	r3, #14
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800bc1e:	9012      	str	r0, [sp, #72]	@ 0x48
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800bc20:	189b      	adds	r3, r3, r2
 800bc22:	0028      	movs	r0, r5
 800bc24:	9903      	ldr	r1, [sp, #12]
 800bc26:	aa14      	add	r2, sp, #80	@ 0x50
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800bc28:	9613      	str	r6, [sp, #76]	@ 0x4c
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800bc2a:	f000 fb78 	bl	800c31e <RegionCommonIdentifyChannels>
 800bc2e:	1e05      	subs	r5, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800bc30:	d113      	bne.n	800bc5a <RegionAU915NextChannel+0xfe>
    {
        if( nextChanParams->Joined == true )
 800bc32:	7a63      	ldrb	r3, [r4, #9]
 800bc34:	4e18      	ldr	r6, [pc, #96]	@ (800bc98 <RegionAU915NextChannel+0x13c>)
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d012      	beq.n	800bc60 <RegionAU915NextChannel+0x104>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800bc3a:	ab02      	add	r3, sp, #8
 800bc3c:	7b99      	ldrb	r1, [r3, #14]
 800bc3e:	3901      	subs	r1, #1
 800bc40:	f000 fc20 	bl	800c484 <randr>
 800bc44:	2248      	movs	r2, #72	@ 0x48
 800bc46:	ab02      	add	r3, sp, #8
 800bc48:	189b      	adds	r3, r3, r2
 800bc4a:	5c1b      	ldrb	r3, [r3, r0]
                uint8_t i = 0;
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
                }
                *channel = 64 + i;
 800bc4c:	703b      	strb	r3, [r7, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS );
 800bc4e:	6870      	ldr	r0, [r6, #4]
 800bc50:	2248      	movs	r2, #72	@ 0x48
 800bc52:	7839      	ldrb	r1, [r7, #0]
 800bc54:	3018      	adds	r0, #24
 800bc56:	f000 f8e2 	bl	800be1e <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AU915 */
}
 800bc5a:	0028      	movs	r0, r5
 800bc5c:	b027      	add	sp, #156	@ 0x9c
 800bc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( nextChanParams->Datarate == DR_2 )
 800bc60:	2308      	movs	r3, #8
 800bc62:	56e3      	ldrsb	r3, [r4, r3]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800bc64:	6870      	ldr	r0, [r6, #4]
            if( nextChanParams->Datarate == DR_2 )
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d009      	beq.n	800bc7e <RegionAU915NextChannel+0x122>
                uint8_t i = 0;
 800bc6a:	002b      	movs	r3, r5
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800bc6c:	8c02      	ldrh	r2, [r0, #32]
 800bc6e:	b2d2      	uxtb	r2, r2
 800bc70:	0011      	movs	r1, r2
 800bc72:	2001      	movs	r0, #1
 800bc74:	4119      	asrs	r1, r3
 800bc76:	4201      	tst	r1, r0
 800bc78:	d00b      	beq.n	800bc92 <RegionAU915NextChannel+0x136>
                *channel = 64 + i;
 800bc7a:	3340      	adds	r3, #64	@ 0x40
 800bc7c:	e7e6      	b.n	800bc4c <RegionAU915NextChannel+0xf0>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800bc7e:	0001      	movs	r1, r0
 800bc80:	003a      	movs	r2, r7
 800bc82:	3124      	adds	r1, #36	@ 0x24
 800bc84:	3018      	adds	r0, #24
 800bc86:	f000 f841 	bl	800bd0c <RegionBaseUSComputeNext125kHzJoinChannel>
 800bc8a:	2803      	cmp	r0, #3
 800bc8c:	d1df      	bne.n	800bc4e <RegionAU915NextChannel+0xf2>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800bc8e:	0005      	movs	r5, r0
 800bc90:	e7e3      	b.n	800bc5a <RegionAU915NextChannel+0xfe>
                    i++;
 800bc92:	3301      	adds	r3, #1
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	e7eb      	b.n	800bc70 <RegionAU915NextChannel+0x114>
 800bc98:	20001344 	.word	0x20001344

0800bc9c <RegionAU915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionAU915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800bc9c:	b570      	push	{r4, r5, r6, lr}
#if defined( REGION_AU915 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800bc9e:	250c      	movs	r5, #12
 800bca0:	7801      	ldrb	r1, [r0, #0]
 800bca2:	4e0f      	ldr	r6, [pc, #60]	@ (800bce0 <RegionAU915SetContinuousWave+0x44>)
 800bca4:	4369      	muls	r1, r5
 800bca6:	6832      	ldr	r2, [r6, #0]
{
 800bca8:	0004      	movs	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800bcaa:	1852      	adds	r2, r2, r1
 800bcac:	7a51      	ldrb	r1, [r2, #9]
 800bcae:	2218      	movs	r2, #24
 800bcb0:	2002      	movs	r0, #2
 800bcb2:	434a      	muls	r2, r1
 800bcb4:	2102      	movs	r1, #2
 800bcb6:	6873      	ldr	r3, [r6, #4]
 800bcb8:	5620      	ldrsb	r0, [r4, r0]
 800bcba:	189b      	adds	r3, r3, r2
 800bcbc:	5659      	ldrsb	r1, [r3, r1]
 800bcbe:	f000 fb8e 	bl	800c3de <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800bcc2:	7822      	ldrb	r2, [r4, #0]
 800bcc4:	6833      	ldr	r3, [r6, #0]
 800bcc6:	4355      	muls	r5, r2

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800bcc8:	6861      	ldr	r1, [r4, #4]
 800bcca:	68a2      	ldr	r2, [r4, #8]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800bccc:	58ed      	ldr	r5, [r5, r3]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800bcce:	f000 fab5 	bl	800c23c <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800bcd2:	4b04      	ldr	r3, [pc, #16]	@ (800bce4 <RegionAU915SetContinuousWave+0x48>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800bcd4:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800bcd6:	89a2      	ldrh	r2, [r4, #12]
 800bcd8:	0028      	movs	r0, r5
 800bcda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcdc:	4798      	blx	r3
#endif /* REGION_AU915 */
}
 800bcde:	bd70      	pop	{r4, r5, r6, pc}
 800bce0:	20001344 	.word	0x20001344
 800bce4:	0800edf8 	.word	0x0800edf8

0800bce8 <RegionAU915ApplyDrOffset>:

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800bce8:	b510      	push	{r4, lr}
#if defined( REGION_AU915 )
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 800bcea:	2406      	movs	r4, #6
 800bcec:	4361      	muls	r1, r4
 800bcee:	4b06      	ldr	r3, [pc, #24]	@ (800bd08 <RegionAU915ApplyDrOffset+0x20>)
 800bcf0:	1859      	adds	r1, r3, r1
 800bcf2:	2308      	movs	r3, #8
 800bcf4:	1889      	adds	r1, r1, r2
 800bcf6:	56cb      	ldrsb	r3, [r1, r3]

    if( datarate < 0 )
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	da02      	bge.n	800bd02 <RegionAU915ApplyDrOffset+0x1a>
    {
        if( downlinkDwellTime == 0 )
 800bcfc:	1e43      	subs	r3, r0, #1
 800bcfe:	4198      	sbcs	r0, r3
 800bd00:	0043      	lsls	r3, r0, #1
        else
        {
            datarate = AU915_DWELL_LIMIT_DATARATE;
        }
    }
    return datarate;
 800bd02:	b2d8      	uxtb	r0, r3
#else
    return 0;
#endif /* REGION_AU915 */
}
 800bd04:	bd10      	pop	{r4, pc}
 800bd06:	46c0      	nop			@ (mov r8, r8)
 800bd08:	0800ecc0 	.word	0x0800ecc0

0800bd0c <RegionBaseUSComputeNext125kHzJoinChannel>:
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800bd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	9000      	str	r0, [sp, #0]
 800bd12:	9201      	str	r2, [sp, #4]
 800bd14:	000e      	movs	r6, r1
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800bd16:	2208      	movs	r2, #8
 800bd18:	2100      	movs	r1, #0
 800bd1a:	a802      	add	r0, sp, #8
 800bd1c:	f002 fcb4 	bl	800e688 <memset>
    uint8_t availableChannels = 0;
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800bd20:	9b00      	ldr	r3, [sp, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d102      	bne.n	800bd2c <RegionBaseUSComputeNext125kHzJoinChannel+0x20>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bd26:	2003      	movs	r0, #3
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
}
 800bd28:	b005      	add	sp, #20
 800bd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800bd2c:	2e00      	cmp	r6, #0
 800bd2e:	d0fa      	beq.n	800bd26 <RegionBaseUSComputeNext125kHzJoinChannel+0x1a>
 800bd30:	9b01      	ldr	r3, [sp, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0f7      	beq.n	800bd26 <RegionBaseUSComputeNext125kHzJoinChannel+0x1a>
        if( ( startIndex % 2 ) == 0 )
 800bd36:	2701      	movs	r7, #1
    startIndex = *groupsCurrentIndex;
 800bd38:	7834      	ldrb	r4, [r6, #0]
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800bd3a:	9a00      	ldr	r2, [sp, #0]
 800bd3c:	0863      	lsrs	r3, r4, #1
 800bd3e:	005b      	lsls	r3, r3, #1
 800bd40:	5a9b      	ldrh	r3, [r3, r2]
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800bd42:	0a1a      	lsrs	r2, r3, #8
        if( ( startIndex % 2 ) == 0 )
 800bd44:	423c      	tst	r4, r7
 800bd46:	d101      	bne.n	800bd4c <RegionBaseUSComputeNext125kHzJoinChannel+0x40>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800bd48:	22ff      	movs	r2, #255	@ 0xff
 800bd4a:	401a      	ands	r2, r3
{
 800bd4c:	2300      	movs	r3, #0
    *availableChannels = 0;
 800bd4e:	001d      	movs	r5, r3
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800bd50:	0011      	movs	r1, r2
 800bd52:	4119      	asrs	r1, r3
 800bd54:	4239      	tst	r1, r7
 800bd56:	d003      	beq.n	800bd60 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
            findAvailableChannelsIndex[*availableChannels] = i;
 800bd58:	a902      	add	r1, sp, #8
 800bd5a:	554b      	strb	r3, [r1, r5]
            ( *availableChannels )++;
 800bd5c:	3501      	adds	r5, #1
 800bd5e:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < 8; i++ )
 800bd60:	3301      	adds	r3, #1
 800bd62:	2b08      	cmp	r3, #8
 800bd64:	d1f4      	bne.n	800bd50 <RegionBaseUSComputeNext125kHzJoinChannel+0x44>
        if ( availableChannels > 0 )
 800bd66:	2d00      	cmp	r5, #0
 800bd68:	d009      	beq.n	800bd7e <RegionBaseUSComputeNext125kHzJoinChannel+0x72>
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	1e69      	subs	r1, r5, #1
 800bd6e:	f000 fb89 	bl	800c484 <randr>
 800bd72:	aa02      	add	r2, sp, #8
 800bd74:	5c12      	ldrb	r2, [r2, r0]
 800bd76:	00e3      	lsls	r3, r4, #3
 800bd78:	189b      	adds	r3, r3, r2
 800bd7a:	9a01      	ldr	r2, [sp, #4]
 800bd7c:	7013      	strb	r3, [r2, #0]
        startIndex++;
 800bd7e:	3401      	adds	r4, #1
 800bd80:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800bd82:	2c07      	cmp	r4, #7
 800bd84:	d900      	bls.n	800bd88 <RegionBaseUSComputeNext125kHzJoinChannel+0x7c>
            startIndex = 0;
 800bd86:	2400      	movs	r4, #0
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800bd88:	2d00      	cmp	r5, #0
 800bd8a:	d103      	bne.n	800bd94 <RegionBaseUSComputeNext125kHzJoinChannel+0x88>
 800bd8c:	7833      	ldrb	r3, [r6, #0]
 800bd8e:	42a3      	cmp	r3, r4
 800bd90:	d1d3      	bne.n	800bd3a <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
 800bd92:	e7c8      	b.n	800bd26 <RegionBaseUSComputeNext125kHzJoinChannel+0x1a>
        return LORAMAC_STATUS_OK;
 800bd94:	2000      	movs	r0, #0
        *groupsCurrentIndex = startIndex;
 800bd96:	7034      	strb	r4, [r6, #0]
        return LORAMAC_STATUS_OK;
 800bd98:	e7c6      	b.n	800bd28 <RegionBaseUSComputeNext125kHzJoinChannel+0x1c>

0800bd9a <RegionBaseUSCalcDownlinkFrequency>:

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 800bd9a:	4350      	muls	r0, r2
 800bd9c:	1840      	adds	r0, r0, r1
}
 800bd9e:	4770      	bx	lr

0800bda0 <RegionCommonChanVerifyDr>:
    }
    return nbActiveBits;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800bda0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bda2:	9101      	str	r1, [sp, #4]
 800bda4:	a908      	add	r1, sp, #32
 800bda6:	7809      	ldrb	r1, [r1, #0]
 800bda8:	9000      	str	r0, [sp, #0]
 800bdaa:	b249      	sxtb	r1, r1
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800bdac:	2000      	movs	r0, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	db28      	blt.n	800be04 <RegionCommonChanVerifyDr+0x64>
 800bdb2:	428a      	cmp	r2, r1
 800bdb4:	dc26      	bgt.n	800be04 <RegionCommonChanVerifyDr+0x64>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800bdb6:	2701      	movs	r7, #1
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800bdb8:	260f      	movs	r6, #15
 800bdba:	e01d      	b.n	800bdf8 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800bdbc:	9c01      	ldr	r4, [sp, #4]
 800bdbe:	0041      	lsls	r1, r0, #1
 800bdc0:	5b09      	ldrh	r1, [r1, r4]
 800bdc2:	2400      	movs	r4, #0
 800bdc4:	468c      	mov	ip, r1
 800bdc6:	210c      	movs	r1, #12
 800bdc8:	434b      	muls	r3, r1
 800bdca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bdcc:	18cd      	adds	r5, r1, r3
 800bdce:	4663      	mov	r3, ip
 800bdd0:	4123      	asrs	r3, r4
 800bdd2:	423b      	tst	r3, r7
 800bdd4:	d00a      	beq.n	800bdec <RegionCommonChanVerifyDr+0x4c>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800bdd6:	7a2b      	ldrb	r3, [r5, #8]
 800bdd8:	0719      	lsls	r1, r3, #28
 800bdda:	1709      	asrs	r1, r1, #28
    if( ( value >= min ) && ( value <= max ) )
 800bddc:	4031      	ands	r1, r6
 800bdde:	4291      	cmp	r1, r2
 800bde0:	dc04      	bgt.n	800bdec <RegionCommonChanVerifyDr+0x4c>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800bde2:	b25b      	sxtb	r3, r3
 800bde4:	111b      	asrs	r3, r3, #4
    if( ( value >= min ) && ( value <= max ) )
 800bde6:	4033      	ands	r3, r6
 800bde8:	4293      	cmp	r3, r2
 800bdea:	da0c      	bge.n	800be06 <RegionCommonChanVerifyDr+0x66>
        for( uint8_t j = 0; j < 16; j++ )
 800bdec:	3401      	adds	r4, #1
 800bdee:	350c      	adds	r5, #12
 800bdf0:	2c10      	cmp	r4, #16
 800bdf2:	d1ec      	bne.n	800bdce <RegionCommonChanVerifyDr+0x2e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	b2c0      	uxtb	r0, r0
 800bdf8:	0103      	lsls	r3, r0, #4
 800bdfa:	9900      	ldr	r1, [sp, #0]
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	4299      	cmp	r1, r3
 800be00:	d8dc      	bhi.n	800bdbc <RegionCommonChanVerifyDr+0x1c>
        return false;
 800be02:	2000      	movs	r0, #0
}
 800be04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                    return true;
 800be06:	2001      	movs	r0, #1
 800be08:	e7fc      	b.n	800be04 <RegionCommonChanVerifyDr+0x64>

0800be0a <RegionCommonValueInRange>:
{
 800be0a:	0003      	movs	r3, r0
    {
        return 1;
    }
    return 0;
 800be0c:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 800be0e:	428b      	cmp	r3, r1
 800be10:	db04      	blt.n	800be1c <RegionCommonValueInRange+0x12>
 800be12:	0fd8      	lsrs	r0, r3, #31
 800be14:	17d1      	asrs	r1, r2, #31
 800be16:	429a      	cmp	r2, r3
 800be18:	4148      	adcs	r0, r1
 800be1a:	b2c0      	uxtb	r0, r0
}
 800be1c:	4770      	bx	lr

0800be1e <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800be1e:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
 800be20:	090b      	lsrs	r3, r1, #4
{
 800be22:	0004      	movs	r4, r0

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800be24:	0915      	lsrs	r5, r2, #4
    {
        return false;
 800be26:	2000      	movs	r0, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800be28:	429d      	cmp	r5, r3
 800be2a:	d30b      	bcc.n	800be44 <RegionCommonChanDisable+0x26>
 800be2c:	4291      	cmp	r1, r2
 800be2e:	d209      	bcs.n	800be44 <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800be30:	220f      	movs	r2, #15
 800be32:	3001      	adds	r0, #1
 800be34:	4011      	ands	r1, r2
 800be36:	0002      	movs	r2, r0
 800be38:	408a      	lsls	r2, r1
 800be3a:	0011      	movs	r1, r2
 800be3c:	005b      	lsls	r3, r3, #1
 800be3e:	5ae2      	ldrh	r2, [r4, r3]
 800be40:	438a      	bics	r2, r1
 800be42:	52e2      	strh	r2, [r4, r3]

    return true;
}
 800be44:	bd30      	pop	{r4, r5, pc}

0800be46 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800be46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be48:	9201      	str	r2, [sp, #4]
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800be4a:	2800      	cmp	r0, #0
 800be4c:	d005      	beq.n	800be5a <RegionCommonCountChannels+0x14>
 800be4e:	004a      	lsls	r2, r1, #1
 800be50:	1883      	adds	r3, r0, r2
    uint8_t nbChannels = 0;
 800be52:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800be54:	9a01      	ldr	r2, [sp, #4]
 800be56:	4291      	cmp	r1, r2
 800be58:	d300      	bcc.n	800be5c <RegionCommonCountChannels+0x16>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800be5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800be5c:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 800be5e:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 800be60:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800be62:	2501      	movs	r5, #1
 800be64:	40a5      	lsls	r5, r4
 800be66:	002e      	movs	r6, r5
 800be68:	403e      	ands	r6, r7
 800be6a:	42b5      	cmp	r5, r6
 800be6c:	d101      	bne.n	800be72 <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 800be6e:	3201      	adds	r2, #1
 800be70:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 800be72:	3401      	adds	r4, #1
 800be74:	2c10      	cmp	r4, #16
 800be76:	d1f4      	bne.n	800be62 <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800be78:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800be7a:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800be7c:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800be7e:	b2c9      	uxtb	r1, r1
 800be80:	3302      	adds	r3, #2
 800be82:	e7e7      	b.n	800be54 <RegionCommonCountChannels+0xe>

0800be84 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800be84:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800be86:	2800      	cmp	r0, #0
 800be88:	d005      	beq.n	800be96 <RegionCommonChanMaskCopy+0x12>
 800be8a:	2900      	cmp	r1, #0
 800be8c:	d003      	beq.n	800be96 <RegionCommonChanMaskCopy+0x12>
 800be8e:	2300      	movs	r3, #0
 800be90:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800be92:	4293      	cmp	r3, r2
 800be94:	d100      	bne.n	800be98 <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800be96:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800be98:	5acc      	ldrh	r4, [r1, r3]
 800be9a:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 800be9c:	3302      	adds	r3, #2
 800be9e:	e7f8      	b.n	800be92 <RegionCommonChanMaskCopy+0xe>

0800bea0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800bea0:	b082      	sub	sp, #8
 800bea2:	b570      	push	{r4, r5, r6, lr}
 800bea4:	001d      	movs	r5, r3
 800bea6:	8804      	ldrh	r4, [r0, #0]
 800bea8:	9305      	str	r3, [sp, #20]
    if( joined == false )
 800beaa:	2a00      	cmp	r2, #0
 800beac:	d11c      	bne.n	800bee8 <RegionCommonSetBandTxDone+0x48>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800beae:	23e1      	movs	r3, #225	@ 0xe1
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800beb0:	3264      	adds	r2, #100	@ 0x64
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800beb2:	011b      	lsls	r3, r3, #4
 800beb4:	429d      	cmp	r5, r3
 800beb6:	d307      	bcc.n	800bec8 <RegionCommonSetBandTxDone+0x28>
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800beb8:	4a0e      	ldr	r2, [pc, #56]	@ (800bef4 <RegionCommonSetBandTxDone+0x54>)
 800beba:	4b0f      	ldr	r3, [pc, #60]	@ (800bef8 <RegionCommonSetBandTxDone+0x58>)
 800bebc:	42aa      	cmp	r2, r5
 800bebe:	4192      	sbcs	r2, r2
 800bec0:	401a      	ands	r2, r3
 800bec2:	23fa      	movs	r3, #250	@ 0xfa
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	18d2      	adds	r2, r2, r3
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800bec8:	1c23      	adds	r3, r4, #0
 800beca:	4294      	cmp	r4, r2
 800becc:	d200      	bcs.n	800bed0 <RegionCommonSetBandTxDone+0x30>
 800bece:	1c13      	adds	r3, r2, #0
 800bed0:	b29b      	uxth	r3, r3
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800bed2:	4359      	muls	r1, r3
 800bed4:	68c2      	ldr	r2, [r0, #12]
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
    }
    else
    {
        band->TimeCredits = 0;
 800bed6:	2300      	movs	r3, #0
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800bed8:	428a      	cmp	r2, r1
 800beda:	d900      	bls.n	800bede <RegionCommonSetBandTxDone+0x3e>
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800bedc:	1a53      	subs	r3, r2, r1
 800bede:	60c3      	str	r3, [r0, #12]
    }
}
 800bee0:	bc70      	pop	{r4, r5, r6}
 800bee2:	bc08      	pop	{r3}
 800bee4:	b002      	add	sp, #8
 800bee6:	4718      	bx	r3
    if( dutyCycle == 0 )
 800bee8:	1c23      	adds	r3, r4, #0
 800beea:	2c00      	cmp	r4, #0
 800beec:	d1f0      	bne.n	800bed0 <RegionCommonSetBandTxDone+0x30>
 800beee:	2301      	movs	r3, #1
 800bef0:	e7ee      	b.n	800bed0 <RegionCommonSetBandTxDone+0x30>
 800bef2:	46c0      	nop			@ (mov r8, r8)
 800bef4:	00009aaf 	.word	0x00009aaf
 800bef8:	00002328 	.word	0x00002328

0800befc <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800befc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800befe:	b093      	sub	sp, #76	@ 0x4c
 800bf00:	9306      	str	r3, [sp, #24]
 800bf02:	ab18      	add	r3, sp, #96	@ 0x60
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	0014      	movs	r4, r2
 800bf08:	000d      	movs	r5, r1
 800bf0a:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 800bf0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf0e:	9005      	str	r0, [sp, #20]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800bf10:	f002 f954 	bl	800e1bc <UTIL_TIMER_GetCurrentTime>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800bf14:	4b70      	ldr	r3, [pc, #448]	@ (800c0d8 <RegionCommonUpdateBandTimeOff+0x1dc>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800bf16:	9009      	str	r0, [sp, #36]	@ 0x24
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800bf18:	4970      	ldr	r1, [pc, #448]	@ (800c0dc <RegionCommonUpdateBandTimeOff+0x1e0>)
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800bf1a:	18f0      	adds	r0, r6, r3
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800bf1c:	f7f4 f924 	bl	8000168 <__udivsi3>
 800bf20:	4b6e      	ldr	r3, [pc, #440]	@ (800c0dc <RegionCommonUpdateBandTimeOff+0x1e0>)
 800bf22:	4343      	muls	r3, r0
 800bf24:	9307      	str	r3, [sp, #28]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800bf26:	9a07      	ldr	r2, [sp, #28]
 800bf28:	4b6d      	ldr	r3, [pc, #436]	@ (800c0e0 <RegionCommonUpdateBandTimeOff+0x1e4>)
 800bf2a:	4694      	mov	ip, r2
 800bf2c:	4463      	add	r3, ip
 800bf2e:	9308      	str	r3, [sp, #32]
 800bf30:	2318      	movs	r3, #24
 800bf32:	4363      	muls	r3, r4
 800bf34:	18eb      	adds	r3, r5, r3
 800bf36:	930a      	str	r3, [sp, #40]	@ 0x28
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	9303      	str	r3, [sp, #12]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	9304      	str	r3, [sp, #16]

    for( uint8_t i = 0; i < nbBands; i++ )
 800bf40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf42:	429d      	cmp	r5, r3
 800bf44:	d107      	bne.n	800bf56 <RegionCommonUpdateBandTimeOff+0x5a>
            }
        }
    }


    if( validBands == 0 )
 800bf46:	9b03      	ldr	r3, [sp, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d101      	bne.n	800bf50 <RegionCommonUpdateBandTimeOff+0x54>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	9304      	str	r3, [sp, #16]
    }
    return minTimeToWait;
}
 800bf50:	9804      	ldr	r0, [sp, #16]
 800bf52:	b013      	add	sp, #76	@ 0x4c
 800bf54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800bf56:	9619      	str	r6, [sp, #100]	@ 0x64
 800bf58:	ab19      	add	r3, sp, #100	@ 0x64
 800bf5a:	2204      	movs	r2, #4
 800bf5c:	5e9a      	ldrsh	r2, [r3, r2]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800bf5e:	ab0c      	add	r3, sp, #48	@ 0x30
 800bf60:	809a      	strh	r2, [r3, #4]
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800bf62:	0030      	movs	r0, r6
 800bf64:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800bf66:	960c      	str	r6, [sp, #48]	@ 0x30
 800bf68:	f002 f8b6 	bl	800e0d8 <SysTimeToMs>
    if( joined == false )
 800bf6c:	9b05      	ldr	r3, [sp, #20]
 800bf6e:	882c      	ldrh	r4, [r5, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d16f      	bne.n	800c054 <RegionCommonUpdateBandTimeOff+0x158>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800bf74:	23e1      	movs	r3, #225	@ 0xe1
 800bf76:	011b      	lsls	r3, r3, #4
 800bf78:	429e      	cmp	r6, r3
 800bf7a:	d318      	bcc.n	800bfae <RegionCommonUpdateBandTimeOff+0xb2>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800bf7c:	4b59      	ldr	r3, [pc, #356]	@ (800c0e4 <RegionCommonUpdateBandTimeOff+0x1e8>)
 800bf7e:	429e      	cmp	r6, r3
 800bf80:	d80d      	bhi.n	800bf9e <RegionCommonUpdateBandTimeOff+0xa2>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800bf82:	22fa      	movs	r2, #250	@ 0xfa
 800bf84:	1c23      	adds	r3, r4, #0
 800bf86:	0092      	lsls	r2, r2, #2
 800bf88:	4294      	cmp	r4, r2
 800bf8a:	d200      	bcs.n	800bf8e <RegionCommonUpdateBandTimeOff+0x92>
 800bf8c:	1c13      	adds	r3, r2, #0
 800bf8e:	b29c      	uxth	r4, r3
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800bf90:	23fa      	movs	r3, #250	@ 0xfa
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	429c      	cmp	r4, r3
 800bf96:	d108      	bne.n	800bfaa <RegionCommonUpdateBandTimeOff+0xae>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800bf98:	4f53      	ldr	r7, [pc, #332]	@ (800c0e8 <RegionCommonUpdateBandTimeOff+0x1ec>)
            band->LastMaxCreditAssignTime = elapsedTime;
 800bf9a:	60a8      	str	r0, [r5, #8]
 800bf9c:	e00c      	b.n	800bfb8 <RegionCommonUpdateBandTimeOff+0xbc>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800bf9e:	4a53      	ldr	r2, [pc, #332]	@ (800c0ec <RegionCommonUpdateBandTimeOff+0x1f0>)
 800bfa0:	1c23      	adds	r3, r4, #0
 800bfa2:	4294      	cmp	r4, r2
 800bfa4:	d200      	bcs.n	800bfa8 <RegionCommonUpdateBandTimeOff+0xac>
 800bfa6:	1c13      	adds	r3, r2, #0
 800bfa8:	b29c      	uxth	r4, r3
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800bfaa:	4f51      	ldr	r7, [pc, #324]	@ (800c0f0 <RegionCommonUpdateBandTimeOff+0x1f4>)
 800bfac:	e004      	b.n	800bfb8 <RegionCommonUpdateBandTimeOff+0xbc>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800bfae:	2c64      	cmp	r4, #100	@ 0x64
 800bfb0:	d8ee      	bhi.n	800bf90 <RegionCommonUpdateBandTimeOff+0x94>
            band->LastMaxCreditAssignTime = elapsedTime;
 800bfb2:	2464      	movs	r4, #100	@ 0x64
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800bfb4:	4f4f      	ldr	r7, [pc, #316]	@ (800c0f4 <RegionCommonUpdateBandTimeOff+0x1f8>)
            band->LastMaxCreditAssignTime = elapsedTime;
 800bfb6:	60a8      	str	r0, [r5, #8]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800bfb8:	68a9      	ldr	r1, [r5, #8]
 800bfba:	a810      	add	r0, sp, #64	@ 0x40
 800bfbc:	f002 f8aa 	bl	800e114 <SysTimeFromMs>
 800bfc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bfc2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bfc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bfca:	a80e      	add	r0, sp, #56	@ 0x38
 800bfcc:	f002 f80e 	bl	800dfec <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800bfd0:	9b06      	ldr	r3, [sp, #24]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800bfd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d102      	bne.n	800bfde <RegionCommonUpdateBandTimeOff+0xe2>
 800bfd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d005      	beq.n	800bfea <RegionCommonUpdateBandTimeOff+0xee>
 800bfde:	692b      	ldr	r3, [r5, #16]
 800bfe0:	42bb      	cmp	r3, r7
 800bfe2:	d102      	bne.n	800bfea <RegionCommonUpdateBandTimeOff+0xee>
            ( band->MaxTimeCredits != maxCredits ) ||
 800bfe4:	4b44      	ldr	r3, [pc, #272]	@ (800c0f8 <RegionCommonUpdateBandTimeOff+0x1fc>)
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d90d      	bls.n	800c006 <RegionCommonUpdateBandTimeOff+0x10a>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800bfea:	4b44      	ldr	r3, [pc, #272]	@ (800c0fc <RegionCommonUpdateBandTimeOff+0x200>)
            band->TimeCredits = maxCredits;
 800bfec:	60ef      	str	r7, [r5, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800bfee:	429e      	cmp	r6, r3
 800bff0:	d909      	bls.n	800c006 <RegionCommonUpdateBandTimeOff+0x10a>
                timeDiff.SubSeconds = 0;
 800bff2:	2200      	movs	r2, #0
 800bff4:	ab0e      	add	r3, sp, #56	@ 0x38
 800bff6:	809a      	strh	r2, [r3, #4]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800bff8:	9a08      	ldr	r2, [sp, #32]
 800bffa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bffc:	0010      	movs	r0, r2
 800bffe:	920e      	str	r2, [sp, #56]	@ 0x38
 800c000:	f002 f86a 	bl	800e0d8 <SysTimeToMs>
 800c004:	60a8      	str	r0, [r5, #8]
    if( band->LastBandUpdateTime == 0 )
 800c006:	6868      	ldr	r0, [r5, #4]
 800c008:	2800      	cmp	r0, #0
 800c00a:	d100      	bne.n	800c00e <RegionCommonUpdateBandTimeOff+0x112>
        band->TimeCredits = maxCredits;
 800c00c:	60ef      	str	r7, [r5, #12]
    if( joined == true )
 800c00e:	9b05      	ldr	r3, [sp, #20]
    band->MaxTimeCredits = maxCredits;
 800c010:	612f      	str	r7, [r5, #16]
    if( joined == true )
 800c012:	2b00      	cmp	r3, #0
 800c014:	d004      	beq.n	800c020 <RegionCommonUpdateBandTimeOff+0x124>
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800c016:	f002 f8db 	bl	800e1d0 <UTIL_TIMER_GetElapsedTime>
 800c01a:	68eb      	ldr	r3, [r5, #12]
 800c01c:	181b      	adds	r3, r3, r0
 800c01e:	60eb      	str	r3, [r5, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 800c020:	692a      	ldr	r2, [r5, #16]
 800c022:	68eb      	ldr	r3, [r5, #12]
 800c024:	4293      	cmp	r3, r2
 800c026:	d900      	bls.n	800c02a <RegionCommonUpdateBandTimeOff+0x12e>
        band->TimeCredits = band->MaxTimeCredits;
 800c028:	60ea      	str	r2, [r5, #12]
    band->LastBandUpdateTime = currentTime;
 800c02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800c02c:	68e9      	ldr	r1, [r5, #12]
    band->LastBandUpdateTime = currentTime;
 800c02e:	606b      	str	r3, [r5, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800c030:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c032:	4363      	muls	r3, r4
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800c034:	4299      	cmp	r1, r3
 800c036:	d805      	bhi.n	800c044 <RegionCommonUpdateBandTimeOff+0x148>
 800c038:	9806      	ldr	r0, [sp, #24]
 800c03a:	2800      	cmp	r0, #0
 800c03c:	d116      	bne.n	800c06c <RegionCommonUpdateBandTimeOff+0x170>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800c03e:	9805      	ldr	r0, [sp, #20]
 800c040:	2800      	cmp	r0, #0
 800c042:	d013      	beq.n	800c06c <RegionCommonUpdateBandTimeOff+0x170>
            bands[i].ReadyForTransmission = true;
 800c044:	2301      	movs	r3, #1
 800c046:	752b      	strb	r3, [r5, #20]
            validBands++;
 800c048:	9b03      	ldr	r3, [sp, #12]
 800c04a:	3301      	adds	r3, #1
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	9303      	str	r3, [sp, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 800c050:	3518      	adds	r5, #24
 800c052:	e775      	b.n	800bf40 <RegionCommonUpdateBandTimeOff+0x44>
        if( dutyCycleEnabled == false )
 800c054:	9b06      	ldr	r3, [sp, #24]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d101      	bne.n	800c05e <RegionCommonUpdateBandTimeOff+0x162>
            band->TimeCredits = maxCredits;
 800c05a:	4b26      	ldr	r3, [pc, #152]	@ (800c0f4 <RegionCommonUpdateBandTimeOff+0x1f8>)
 800c05c:	60eb      	str	r3, [r5, #12]
 800c05e:	1c23      	adds	r3, r4, #0
 800c060:	2c00      	cmp	r4, #0
 800c062:	d100      	bne.n	800c066 <RegionCommonUpdateBandTimeOff+0x16a>
 800c064:	2301      	movs	r3, #1
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c066:	4f23      	ldr	r7, [pc, #140]	@ (800c0f4 <RegionCommonUpdateBandTimeOff+0x1f8>)
 800c068:	b29c      	uxth	r4, r3
 800c06a:	e7cc      	b.n	800c006 <RegionCommonUpdateBandTimeOff+0x10a>
            bands[i].ReadyForTransmission = false;
 800c06c:	2000      	movs	r0, #0
 800c06e:	7528      	strb	r0, [r5, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 800c070:	4293      	cmp	r3, r2
 800c072:	d208      	bcs.n	800c086 <RegionCommonUpdateBandTimeOff+0x18a>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800c074:	9a04      	ldr	r2, [sp, #16]
 800c076:	1a5b      	subs	r3, r3, r1
 800c078:	429a      	cmp	r2, r3
 800c07a:	d900      	bls.n	800c07e <RegionCommonUpdateBandTimeOff+0x182>
 800c07c:	9304      	str	r3, [sp, #16]
                validBands++;
 800c07e:	9b03      	ldr	r3, [sp, #12]
 800c080:	3301      	adds	r3, #1
 800c082:	b2db      	uxtb	r3, r3
 800c084:	9303      	str	r3, [sp, #12]
            if( joined == false )
 800c086:	9b05      	ldr	r3, [sp, #20]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d1e1      	bne.n	800c050 <RegionCommonUpdateBandTimeOff+0x154>
                SysTime_t backoffTimeRange = {
 800c08c:	9a05      	ldr	r2, [sp, #20]
 800c08e:	ab0e      	add	r3, sp, #56	@ 0x38
 800c090:	809a      	strh	r2, [r3, #4]
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c092:	4b13      	ldr	r3, [pc, #76]	@ (800c0e0 <RegionCommonUpdateBandTimeOff+0x1e4>)
 800c094:	2c64      	cmp	r4, #100	@ 0x64
 800c096:	d01c      	beq.n	800c0d2 <RegionCommonUpdateBandTimeOff+0x1d6>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800c098:	4a19      	ldr	r2, [pc, #100]	@ (800c100 <RegionCommonUpdateBandTimeOff+0x204>)
 800c09a:	18a1      	adds	r1, r4, r2
 800c09c:	1e4a      	subs	r2, r1, #1
 800c09e:	4191      	sbcs	r1, r2
 800c0a0:	4a0e      	ldr	r2, [pc, #56]	@ (800c0dc <RegionCommonUpdateBandTimeOff+0x1e0>)
 800c0a2:	4249      	negs	r1, r1
 800c0a4:	4011      	ands	r1, r2
 800c0a6:	4a17      	ldr	r2, [pc, #92]	@ (800c104 <RegionCommonUpdateBandTimeOff+0x208>)
 800c0a8:	1889      	adds	r1, r1, r2
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c0aa:	429e      	cmp	r6, r3
 800c0ac:	d903      	bls.n	800c0b6 <RegionCommonUpdateBandTimeOff+0x1ba>
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800c0ae:	9b07      	ldr	r3, [sp, #28]
 800c0b0:	4a0a      	ldr	r2, [pc, #40]	@ (800c0dc <RegionCommonUpdateBandTimeOff+0x1e0>)
 800c0b2:	189b      	adds	r3, r3, r2
 800c0b4:	18c9      	adds	r1, r1, r3
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800c0b6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800c0b8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	a80e      	add	r0, sp, #56	@ 0x38
 800c0be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0c0:	910e      	str	r1, [sp, #56]	@ 0x38
 800c0c2:	f001 ff93 	bl	800dfec <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800c0c6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800c0c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c0ca:	f002 f805 	bl	800e0d8 <SysTimeToMs>
 800c0ce:	9004      	str	r0, [sp, #16]
 800c0d0:	e7be      	b.n	800c050 <RegionCommonUpdateBandTimeOff+0x154>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800c0d2:	21e1      	movs	r1, #225	@ 0xe1
 800c0d4:	0109      	lsls	r1, r1, #4
 800c0d6:	e7e8      	b.n	800c0aa <RegionCommonUpdateBandTimeOff+0x1ae>
 800c0d8:	fffe13d0 	.word	0xfffe13d0
 800c0dc:	00015180 	.word	0x00015180
 800c0e0:	0001ec30 	.word	0x0001ec30
 800c0e4:	00009aaf 	.word	0x00009aaf
 800c0e8:	0112a880 	.word	0x0112a880
 800c0ec:	00002710 	.word	0x00002710
 800c0f0:	02932e00 	.word	0x02932e00
 800c0f4:	001b7740 	.word	0x001b7740
 800c0f8:	0001517f 	.word	0x0001517f
 800c0fc:	0001ec2f 	.word	0x0001ec2f
 800c100:	fffffc18 	.word	0xfffffc18
 800c104:	00009ab0 	.word	0x00009ab0

0800c108 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800c108:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800c10a:	7802      	ldrb	r2, [r0, #0]
{
 800c10c:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800c10e:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800c110:	2a03      	cmp	r2, #3
 800c112:	d113      	bne.n	800c13c <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800c114:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800c116:	300f      	adds	r0, #15
 800c118:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800c11a:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800c11c:	4004      	ands	r4, r0
 800c11e:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800c120:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800c122:	789a      	ldrb	r2, [r3, #2]
 800c124:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800c126:	78dc      	ldrb	r4, [r3, #3]
 800c128:	0224      	lsls	r4, r4, #8
 800c12a:	4322      	orrs	r2, r4
 800c12c:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800c12e:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800c130:	065a      	lsls	r2, r3, #25
 800c132:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800c134:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800c136:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800c138:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800c13a:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800c13c:	bd10      	pop	{r4, pc}

0800c13e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800c13e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c140:	b087      	sub	sp, #28
 800c142:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800c144:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 800c146:	2607      	movs	r6, #7
{
 800c148:	9103      	str	r1, [sp, #12]
 800c14a:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800c14c:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 800c14e:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800c150:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800c152:	7943      	ldrb	r3, [r0, #5]
{
 800c154:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 800c156:	5786      	ldrsb	r6, [r0, r6]
    if( verifyParams->AdrEnabled == false )
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d027      	beq.n	800c1ac <RegionCommonLinkAdrReqVerifyParams+0x6e>
    int8_t nbRepetitions = verifyParams->NbRep;
 800c15c:	2708      	movs	r7, #8
 800c15e:	57c7      	ldrsb	r7, [r0, r7]
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800c160:	2d00      	cmp	r5, #0
 800c162:	d019      	beq.n	800c198 <RegionCommonLinkAdrReqVerifyParams+0x5a>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800c164:	2314      	movs	r3, #20
 800c166:	69a2      	ldr	r2, [r4, #24]
 800c168:	56e3      	ldrsb	r3, [r4, r3]
 800c16a:	7b20      	ldrb	r0, [r4, #12]
 800c16c:	9201      	str	r2, [sp, #4]
 800c16e:	2215      	movs	r2, #21
 800c170:	56a2      	ldrsb	r2, [r4, r2]
 800c172:	9200      	str	r2, [sp, #0]
 800c174:	6921      	ldr	r1, [r4, #16]
 800c176:	9a02      	ldr	r2, [sp, #8]
 800c178:	f7ff fe12 	bl	800bda0 <RegionCommonChanVerifyDr>
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d101      	bne.n	800c184 <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800c180:	2302      	movs	r3, #2
 800c182:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800c184:	231d      	movs	r3, #29
 800c186:	56e3      	ldrsb	r3, [r4, r3]
    if( ( value >= min ) && ( value <= max ) )
 800c188:	42b3      	cmp	r3, r6
 800c18a:	dc17      	bgt.n	800c1bc <RegionCommonLinkAdrReqVerifyParams+0x7e>
 800c18c:	231c      	movs	r3, #28
 800c18e:	56e3      	ldrsb	r3, [r4, r3]
 800c190:	42b3      	cmp	r3, r6
 800c192:	da14      	bge.n	800c1be <RegionCommonLinkAdrReqVerifyParams+0x80>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800c194:	2304      	movs	r3, #4
 800c196:	439d      	bics	r5, r3
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800c198:	0028      	movs	r0, r5
    *dr = datarate;
 800c19a:	9b03      	ldr	r3, [sp, #12]
 800c19c:	9a02      	ldr	r2, [sp, #8]
 800c19e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800c1a0:	9b04      	ldr	r3, [sp, #16]
 800c1a2:	701e      	strb	r6, [r3, #0]
    *nbRep = nbRepetitions;
 800c1a4:	9b05      	ldr	r3, [sp, #20]
 800c1a6:	701f      	strb	r7, [r3, #0]
}
 800c1a8:	b007      	add	sp, #28
 800c1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 800c1ac:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 800c1ae:	270b      	movs	r7, #11
        txPower =  verifyParams->CurrentTxPower;
 800c1b0:	260a      	movs	r6, #10
        datarate =  verifyParams->CurrentDatarate;
 800c1b2:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 800c1b4:	57c7      	ldrsb	r7, [r0, r7]
        datarate =  verifyParams->CurrentDatarate;
 800c1b6:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 800c1b8:	5786      	ldrsb	r6, [r0, r6]
 800c1ba:	e7d1      	b.n	800c160 <RegionCommonLinkAdrReqVerifyParams+0x22>
                txPower = verifyParams->MaxTxPower;
 800c1bc:	001e      	movs	r6, r3
    if( status == 0x07 )
 800c1be:	2d07      	cmp	r5, #7
 800c1c0:	d1ea      	bne.n	800c198 <RegionCommonLinkAdrReqVerifyParams+0x5a>
        if( nbRepetitions == 0 )
 800c1c2:	2f00      	cmp	r7, #0
 800c1c4:	d1e8      	bne.n	800c198 <RegionCommonLinkAdrReqVerifyParams+0x5a>
            nbRepetitions = 1;
 800c1c6:	3701      	adds	r7, #1
 800c1c8:	e7e6      	b.n	800c198 <RegionCommonLinkAdrReqVerifyParams+0x5a>
	...

0800c1cc <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800c1cc:	4b03      	ldr	r3, [pc, #12]	@ (800c1dc <RegionCommonComputeSymbolTimeLoRa+0x10>)
{
 800c1ce:	b510      	push	{r4, lr}
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800c1d0:	4083      	lsls	r3, r0
 800c1d2:	0018      	movs	r0, r3
 800c1d4:	f7f3 ffc8 	bl	8000168 <__udivsi3>
}
 800c1d8:	bd10      	pop	{r4, pc}
 800c1da:	46c0      	nop			@ (mov r8, r8)
 800c1dc:	000f4240 	.word	0x000f4240

0800c1e0 <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800c1e0:	b570      	push	{r4, r5, r6, lr}
 800c1e2:	001e      	movs	r6, r3
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800c1e4:	23fa      	movs	r3, #250	@ 0xfa
{
 800c1e6:	0004      	movs	r4, r0
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	1f08      	subs	r0, r1, #4
 800c1ec:	4360      	muls	r0, r4
 800c1ee:	4353      	muls	r3, r2
 800c1f0:	18c0      	adds	r0, r0, r3
{
 800c1f2:	000d      	movs	r5, r1
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800c1f4:	0040      	lsls	r0, r0, #1
 800c1f6:	d004      	beq.n	800c202 <RegionCommonComputeRxWindowParameters+0x22>
 800c1f8:	1e63      	subs	r3, r4, #1
 800c1fa:	0021      	movs	r1, r4
 800c1fc:	1818      	adds	r0, r3, r0
 800c1fe:	f7f3 ffb3 	bl	8000168 <__udivsi3>
 800c202:	4285      	cmp	r5, r0
 800c204:	d200      	bcs.n	800c208 <RegionCommonComputeRxWindowParameters+0x28>
 800c206:	0005      	movs	r5, r0
 800c208:	9b04      	ldr	r3, [sp, #16]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800c20a:	00a0      	lsls	r0, r4, #2
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800c20c:	601d      	str	r5, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800c20e:	2300      	movs	r3, #0
 800c210:	436c      	muls	r4, r5
 800c212:	429c      	cmp	r4, r3
 800c214:	d001      	beq.n	800c21a <RegionCommonComputeRxWindowParameters+0x3a>
 800c216:	3401      	adds	r4, #1
 800c218:	0863      	lsrs	r3, r4, #1
 800c21a:	21fa      	movs	r1, #250	@ 0xfa
 800c21c:	0089      	lsls	r1, r1, #2
 800c21e:	434e      	muls	r6, r1
 800c220:	1ac0      	subs	r0, r0, r3
 800c222:	1b80      	subs	r0, r0, r6
 800c224:	2800      	cmp	r0, #0
 800c226:	dd01      	ble.n	800c22c <RegionCommonComputeRxWindowParameters+0x4c>
 800c228:	4b03      	ldr	r3, [pc, #12]	@ (800c238 <RegionCommonComputeRxWindowParameters+0x58>)
 800c22a:	18c0      	adds	r0, r0, r3
 800c22c:	f7f4 f826 	bl	800027c <__divsi3>
 800c230:	9b05      	ldr	r3, [sp, #20]
 800c232:	6018      	str	r0, [r3, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800c234:	bd70      	pop	{r4, r5, r6, pc}
 800c236:	46c0      	nop			@ (mov r8, r8)
 800c238:	000003e7 	.word	0x000003e7

0800c23c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800c23c:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800c23e:	0040      	lsls	r0, r0, #1
{
 800c240:	1c14      	adds	r4, r2, #0
 800c242:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800c244:	f7f4 fcc2 	bl	8000bcc <__aeabi_ui2f>
 800c248:	1c01      	adds	r1, r0, #0
 800c24a:	1c28      	adds	r0, r5, #0
 800c24c:	f7f4 fa5a 	bl	8000704 <__aeabi_fsub>
 800c250:	1c21      	adds	r1, r4, #0
 800c252:	f7f4 fa57 	bl	8000704 <__aeabi_fsub>
 800c256:	f7f5 fa23 	bl	80016a0 <__aeabi_f2d>
 800c25a:	f002 fa4b 	bl	800e6f4 <floor>
 800c25e:	f7f5 f9e3 	bl	8001628 <__aeabi_d2iz>

    return phyTxPower;
 800c262:	b240      	sxtb	r0, r0
}
 800c264:	bd70      	pop	{r4, r5, r6, pc}

0800c266 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800c266:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c268:	b087      	sub	sp, #28
 800c26a:	9305      	str	r3, [sp, #20]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800c26c:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 800c26e:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 800c270:	001d      	movs	r5, r3
{
 800c272:	9103      	str	r1, [sp, #12]
 800c274:	9204      	str	r2, [sp, #16]
 800c276:	011a      	lsls	r2, r3, #4
 800c278:	b2d2      	uxtb	r2, r2
 800c27a:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800c27c:	9901      	ldr	r1, [sp, #4]
 800c27e:	8a02      	ldrh	r2, [r0, #16]
 800c280:	428a      	cmp	r2, r1
 800c282:	d945      	bls.n	800c310 <RegionCommonCountNbOfEnabledChannels+0xaa>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800c284:	260c      	movs	r6, #12
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800c286:	005a      	lsls	r2, r3, #1
 800c288:	9202      	str	r2, [sp, #8]
 800c28a:	2200      	movs	r2, #0
 800c28c:	434e      	muls	r6, r1
 800c28e:	9600      	str	r6, [sp, #0]
 800c290:	6841      	ldr	r1, [r0, #4]
 800c292:	9c02      	ldr	r4, [sp, #8]
 800c294:	2701      	movs	r7, #1
 800c296:	5b09      	ldrh	r1, [r1, r4]
 800c298:	4111      	asrs	r1, r2
 800c29a:	4239      	tst	r1, r7
 800c29c:	d028      	beq.n	800c2f0 <RegionCommonCountNbOfEnabledChannels+0x8a>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800c29e:	9900      	ldr	r1, [sp, #0]
 800c2a0:	6884      	ldr	r4, [r0, #8]
 800c2a2:	1864      	adds	r4, r4, r1
 800c2a4:	6821      	ldr	r1, [r4, #0]
 800c2a6:	2900      	cmp	r1, #0
 800c2a8:	d022      	beq.n	800c2f0 <RegionCommonCountNbOfEnabledChannels+0x8a>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800c2aa:	7801      	ldrb	r1, [r0, #0]
 800c2ac:	2900      	cmp	r1, #0
 800c2ae:	d107      	bne.n	800c2c0 <RegionCommonCountNbOfEnabledChannels+0x5a>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800c2b0:	6941      	ldr	r1, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800c2b2:	2900      	cmp	r1, #0
 800c2b4:	d004      	beq.n	800c2c0 <RegionCommonCountNbOfEnabledChannels+0x5a>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800c2b6:	9e02      	ldr	r6, [sp, #8]
 800c2b8:	5b89      	ldrh	r1, [r1, r6]
 800c2ba:	4111      	asrs	r1, r2
 800c2bc:	4239      	tst	r1, r7
 800c2be:	d017      	beq.n	800c2f0 <RegionCommonCountNbOfEnabledChannels+0x8a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800c2c0:	2101      	movs	r1, #1
 800c2c2:	5641      	ldrsb	r1, [r0, r1]
 800c2c4:	000e      	movs	r6, r1
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800c2c6:	7a21      	ldrb	r1, [r4, #8]
 800c2c8:	070f      	lsls	r7, r1, #28
    if( ( value >= min ) && ( value <= max ) )
 800c2ca:	173f      	asrs	r7, r7, #28
 800c2cc:	42be      	cmp	r6, r7
 800c2ce:	db0f      	blt.n	800c2f0 <RegionCommonCountNbOfEnabledChannels+0x8a>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800c2d0:	b249      	sxtb	r1, r1
    if( ( value >= min ) && ( value <= max ) )
 800c2d2:	1109      	asrs	r1, r1, #4
 800c2d4:	428e      	cmp	r6, r1
 800c2d6:	dc0b      	bgt.n	800c2f0 <RegionCommonCountNbOfEnabledChannels+0x8a>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800c2d8:	2618      	movs	r6, #24
 800c2da:	7a64      	ldrb	r4, [r4, #9]
 800c2dc:	68c1      	ldr	r1, [r0, #12]
 800c2de:	4374      	muls	r4, r6
 800c2e0:	1909      	adds	r1, r1, r4
 800c2e2:	7d09      	ldrb	r1, [r1, #20]
 800c2e4:	2900      	cmp	r1, #0
 800c2e6:	d10c      	bne.n	800c302 <RegionCommonCountNbOfEnabledChannels+0x9c>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 800c2e8:	4661      	mov	r1, ip
 800c2ea:	3101      	adds	r1, #1
 800c2ec:	b2c9      	uxtb	r1, r1
 800c2ee:	468c      	mov	ip, r1
        for( uint8_t j = 0; j < 16; j++ )
 800c2f0:	9900      	ldr	r1, [sp, #0]
 800c2f2:	3201      	adds	r2, #1
 800c2f4:	310c      	adds	r1, #12
 800c2f6:	9100      	str	r1, [sp, #0]
 800c2f8:	2a10      	cmp	r2, #16
 800c2fa:	d1c9      	bne.n	800c290 <RegionCommonCountNbOfEnabledChannels+0x2a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	e7b9      	b.n	800c276 <RegionCommonCountNbOfEnabledChannels+0x10>
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800c302:	9c01      	ldr	r4, [sp, #4]
 800c304:	9e03      	ldr	r6, [sp, #12]
 800c306:	1c69      	adds	r1, r5, #1
 800c308:	18a4      	adds	r4, r4, r2
 800c30a:	5574      	strb	r4, [r6, r5]
 800c30c:	b2cd      	uxtb	r5, r1
 800c30e:	e7ef      	b.n	800c2f0 <RegionCommonCountNbOfEnabledChannels+0x8a>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800c310:	4662      	mov	r2, ip
    *nbEnabledChannels = nbChannelCount;
 800c312:	9b04      	ldr	r3, [sp, #16]
 800c314:	701d      	strb	r5, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800c316:	9b05      	ldr	r3, [sp, #20]
 800c318:	701a      	strb	r2, [r3, #0]
}
 800c31a:	b007      	add	sp, #28
 800c31c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c31e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800c31e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c320:	0004      	movs	r4, r0
 800c322:	b089      	sub	sp, #36	@ 0x24
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800c324:	6840      	ldr	r0, [r0, #4]
{
 800c326:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c328:	9205      	str	r2, [sp, #20]
 800c32a:	9304      	str	r3, [sp, #16]
 800c32c:	000e      	movs	r6, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800c32e:	f001 ff4f 	bl	800e1d0 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800c332:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
    *nbEnabledChannels = 0;
 800c334:	2700      	movs	r7, #0
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800c336:	1a1b      	subs	r3, r3, r0
 800c338:	602b      	str	r3, [r5, #0]
    *nbRestrictedChannels = 1;
 800c33a:	2301      	movs	r3, #1
 800c33c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c33e:	7013      	strb	r3, [r2, #0]
    *nbEnabledChannels = 0;
 800c340:	9b04      	ldr	r3, [sp, #16]
 800c342:	701f      	strb	r7, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800c344:	6863      	ldr	r3, [r4, #4]
 800c346:	42bb      	cmp	r3, r7
 800c348:	d002      	beq.n	800c350 <RegionCommonIdentifyChannels+0x32>
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	4283      	cmp	r3, r0
 800c34e:	d825      	bhi.n	800c39c <RegionCommonIdentifyChannels+0x7e>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800c350:	6037      	str	r7, [r6, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800c352:	7a23      	ldrb	r3, [r4, #8]
 800c354:	69e0      	ldr	r0, [r4, #28]
 800c356:	9306      	str	r3, [sp, #24]
 800c358:	7a62      	ldrb	r2, [r4, #9]
 800c35a:	7803      	ldrb	r3, [r0, #0]
 800c35c:	4694      	mov	ip, r2
 800c35e:	69a2      	ldr	r2, [r4, #24]
 800c360:	9307      	str	r3, [sp, #28]
 800c362:	9203      	str	r2, [sp, #12]
 800c364:	0022      	movs	r2, r4
 800c366:	a901      	add	r1, sp, #4
 800c368:	320c      	adds	r2, #12
 800c36a:	ca48      	ldmia	r2!, {r3, r6}
 800c36c:	c148      	stmia	r1!, {r3, r6}
 800c36e:	7d22      	ldrb	r2, [r4, #20]
 800c370:	9b06      	ldr	r3, [sp, #24]
 800c372:	9200      	str	r2, [sp, #0]
 800c374:	68c1      	ldr	r1, [r0, #12]
 800c376:	4662      	mov	r2, ip
 800c378:	9807      	ldr	r0, [sp, #28]
 800c37a:	f7ff fdbf 	bl	800befc <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800c37e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800c380:	6028      	str	r0, [r5, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800c382:	9a04      	ldr	r2, [sp, #16]
 800c384:	9905      	ldr	r1, [sp, #20]
 800c386:	69e0      	ldr	r0, [r4, #28]
 800c388:	f7ff ff6d 	bl	800c266 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800c38c:	9b04      	ldr	r3, [sp, #16]
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d003      	beq.n	800c39c <RegionCommonIdentifyChannels+0x7e>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
 800c394:	2000      	movs	r0, #0
        *nextTxDelay = 0;
 800c396:	602f      	str	r7, [r5, #0]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800c398:	b009      	add	sp, #36	@ 0x24
 800c39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( *nbRestrictedChannels > 0 )
 800c39c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c39e:	7818      	ldrb	r0, [r3, #0]
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800c3a0:	4243      	negs	r3, r0
 800c3a2:	4158      	adcs	r0, r3
 800c3a4:	300b      	adds	r0, #11
 800c3a6:	e7f7      	b.n	800c398 <RegionCommonIdentifyChannels+0x7a>

0800c3a8 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800c3a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int8_t drLocal = params->CurrentDr;
 800c3aa:	2400      	movs	r4, #0

    if( params->CurrentDr == params->MinDr )
 800c3ac:	2602      	movs	r6, #2
    int8_t drLocal = params->CurrentDr;
 800c3ae:	5704      	ldrsb	r4, [r0, r4]
    if( params->CurrentDr == params->MinDr )
 800c3b0:	5786      	ldrsb	r6, [r0, r6]
{
 800c3b2:	0005      	movs	r5, r0
    if( params->CurrentDr == params->MinDr )
 800c3b4:	42a6      	cmp	r6, r4
 800c3b6:	d010      	beq.n	800c3da <RegionCommonGetNextLowerTxDr+0x32>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800c3b8:	3c01      	subs	r4, #1
 800c3ba:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800c3bc:	42a6      	cmp	r6, r4
 800c3be:	d00c      	beq.n	800c3da <RegionCommonGetNextLowerTxDr+0x32>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800c3c0:	68ab      	ldr	r3, [r5, #8]
 800c3c2:	78e8      	ldrb	r0, [r5, #3]
 800c3c4:	9301      	str	r3, [sp, #4]
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	56eb      	ldrsb	r3, [r5, r3]
 800c3ca:	0022      	movs	r2, r4
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	6869      	ldr	r1, [r5, #4]
 800c3d0:	0033      	movs	r3, r6
 800c3d2:	f7ff fce5 	bl	800bda0 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d0ee      	beq.n	800c3b8 <RegionCommonGetNextLowerTxDr+0x10>

        return drLocal;
    }
}
 800c3da:	0020      	movs	r0, r4
 800c3dc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800c3de <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 800c3de:	1c0b      	adds	r3, r1, #0
 800c3e0:	4281      	cmp	r1, r0
 800c3e2:	da00      	bge.n	800c3e6 <RegionCommonLimitTxPower+0x8>
 800c3e4:	1c03      	adds	r3, r0, #0
 800c3e6:	b258      	sxtb	r0, r3
}
 800c3e8:	4770      	bx	lr
	...

0800c3ec <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800c3ec:	0080      	lsls	r0, r0, #2
 800c3ee:	5843      	ldr	r3, [r0, r1]
 800c3f0:	4a04      	ldr	r2, [pc, #16]	@ (800c404 <RegionCommonGetBandwidth+0x18>)
 800c3f2:	2001      	movs	r0, #1
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d004      	beq.n	800c402 <RegionCommonGetBandwidth+0x16>
 800c3f8:	4a03      	ldr	r2, [pc, #12]	@ (800c408 <RegionCommonGetBandwidth+0x1c>)
 800c3fa:	189b      	adds	r3, r3, r2
 800c3fc:	425a      	negs	r2, r3
 800c3fe:	4153      	adcs	r3, r2
 800c400:	0058      	lsls	r0, r3, #1
        case 250000:
            return 1;
        case 500000:
            return 2;
    }
}
 800c402:	4770      	bx	lr
 800c404:	0003d090 	.word	0x0003d090
 800c408:	fff85ee0 	.word	0xfff85ee0

0800c40c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800c40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c40e:	b08b      	sub	sp, #44	@ 0x2c
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800c410:	ad04      	add	r5, sp, #16
 800c412:	002c      	movs	r4, r5
 800c414:	4b0f      	ldr	r3, [pc, #60]	@ (800c454 <RegionCommonRxConfigPrint+0x48>)
{
 800c416:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800c418:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800c41a:	c4c4      	stmia	r4!, {r2, r6, r7}
 800c41c:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800c41e:	c4c4      	stmia	r4!, {r2, r6, r7}

    if ( rxSlot < RX_SLOT_NONE )
 800c420:	2805      	cmp	r0, #5
 800c422:	d80d      	bhi.n	800c440 <RegionCommonRxConfigPrint+0x34>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800c424:	4662      	mov	r2, ip
 800c426:	9101      	str	r1, [sp, #4]
 800c428:	0080      	lsls	r0, r0, #2
 800c42a:	9202      	str	r2, [sp, #8]
 800c42c:	5942      	ldr	r2, [r0, r5]
 800c42e:	2100      	movs	r1, #0
 800c430:	9200      	str	r2, [sp, #0]
 800c432:	2002      	movs	r0, #2
 800c434:	2201      	movs	r2, #1
 800c436:	4b08      	ldr	r3, [pc, #32]	@ (800c458 <RegionCommonRxConfigPrint+0x4c>)
 800c438:	f001 fbea 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800c43c:	b00b      	add	sp, #44	@ 0x2c
 800c43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800c440:	4662      	mov	r2, ip
 800c442:	9100      	str	r1, [sp, #0]
 800c444:	9201      	str	r2, [sp, #4]
 800c446:	2100      	movs	r1, #0
 800c448:	2201      	movs	r2, #1
 800c44a:	4b04      	ldr	r3, [pc, #16]	@ (800c45c <RegionCommonRxConfigPrint+0x50>)
 800c44c:	2002      	movs	r0, #2
 800c44e:	f001 fbdf 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
}
 800c452:	e7f3      	b.n	800c43c <RegionCommonRxConfigPrint+0x30>
 800c454:	0800ecf4 	.word	0x0800ecf4
 800c458:	0800f355 	.word	0x0800f355
 800c45c:	0800f374 	.word	0x0800f374

0800c460 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800c460:	b507      	push	{r0, r1, r2, lr}
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800c462:	4b04      	ldr	r3, [pc, #16]	@ (800c474 <RegionCommonTxConfigPrint+0x14>)
 800c464:	9101      	str	r1, [sp, #4]
 800c466:	9000      	str	r0, [sp, #0]
 800c468:	2201      	movs	r2, #1
 800c46a:	2100      	movs	r1, #0
 800c46c:	2002      	movs	r0, #2
 800c46e:	f001 fbcf 	bl	800dc10 <UTIL_ADV_TRACE_COND_FSend>
}
 800c472:	bd07      	pop	{r0, r1, r2, pc}
 800c474:	0800f390 	.word	0x0800f390

0800c478 <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800c478:	4b01      	ldr	r3, [pc, #4]	@ (800c480 <srand1+0x8>)
 800c47a:	6018      	str	r0, [r3, #0]
}
 800c47c:	4770      	bx	lr
 800c47e:	46c0      	nop			@ (mov r8, r8)
 800c480:	200000e0 	.word	0x200000e0

0800c484 <randr>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c484:	4a09      	ldr	r2, [pc, #36]	@ (800c4ac <randr+0x28>)
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800c486:	b570      	push	{r4, r5, r6, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c488:	6813      	ldr	r3, [r2, #0]
{
 800c48a:	0005      	movs	r5, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c48c:	4808      	ldr	r0, [pc, #32]	@ (800c4b0 <randr+0x2c>)
{
 800c48e:	000c      	movs	r4, r1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c490:	4358      	muls	r0, r3
 800c492:	4b08      	ldr	r3, [pc, #32]	@ (800c4b4 <randr+0x30>)
 800c494:	4908      	ldr	r1, [pc, #32]	@ (800c4b8 <randr+0x34>)
 800c496:	18c0      	adds	r0, r0, r3
 800c498:	6010      	str	r0, [r2, #0]
 800c49a:	f7f3 feeb 	bl	8000274 <__aeabi_uidivmod>
 800c49e:	0008      	movs	r0, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800c4a0:	1b61      	subs	r1, r4, r5
 800c4a2:	3101      	adds	r1, #1
 800c4a4:	f7f3 ffd0 	bl	8000448 <__aeabi_idivmod>
 800c4a8:	1948      	adds	r0, r1, r5
}
 800c4aa:	bd70      	pop	{r4, r5, r6, pc}
 800c4ac:	200000e0 	.word	0x200000e0
 800c4b0:	41c64e6d 	.word	0x41c64e6d
 800c4b4:	00003039 	.word	0x00003039
 800c4b8:	7fffffff 	.word	0x7fffffff

0800c4bc <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800c4bc:	2300      	movs	r3, #0
{
 800c4be:	b510      	push	{r4, lr}
    while( size-- )
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d100      	bne.n	800c4c6 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800c4c4:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800c4c6:	5ccc      	ldrb	r4, [r1, r3]
 800c4c8:	54c4      	strb	r4, [r0, r3]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	e7f8      	b.n	800c4c0 <memcpy1+0x4>

0800c4ce <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800c4ce:	1e53      	subs	r3, r2, #1
 800c4d0:	18c0      	adds	r0, r0, r3
    while( size-- )
 800c4d2:	2300      	movs	r3, #0
{
 800c4d4:	b530      	push	{r4, r5, lr}
    while( size-- )
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d100      	bne.n	800c4dc <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800c4da:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800c4dc:	5ccd      	ldrb	r5, [r1, r3]
 800c4de:	425c      	negs	r4, r3
 800c4e0:	5505      	strb	r5, [r0, r4]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	e7f7      	b.n	800c4d6 <memcpyr+0x8>
	...

0800c4e8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800c4e8:	4b04      	ldr	r3, [pc, #16]	@ (800c4fc <memset1+0x14>)
 800c4ea:	3a01      	subs	r2, #1
 800c4ec:	b292      	uxth	r2, r2
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d100      	bne.n	800c4f4 <memset1+0xc>
    {
        *dst++ = value;
    }
}
 800c4f2:	4770      	bx	lr
        *dst++ = value;
 800c4f4:	7001      	strb	r1, [r0, #0]
 800c4f6:	3001      	adds	r0, #1
 800c4f8:	e7f7      	b.n	800c4ea <memset1+0x2>
 800c4fa:	46c0      	nop			@ (mov r8, r8)
 800c4fc:	0000ffff 	.word	0x0000ffff

0800c500 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 800c500:	0002      	movs	r2, r0
 800c502:	b5f0      	push	{r4, r5, r6, r7, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800c504:	2800      	cmp	r0, #0
 800c506:	d008      	beq.n	800c51a <Crc32+0x1a>
    uint32_t crc = 0xFFFFFFFF;
 800c508:	2301      	movs	r3, #1
 800c50a:	2500      	movs	r5, #0
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
 800c50c:	2608      	movs	r6, #8
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800c50e:	2701      	movs	r7, #1
    uint32_t crc = 0xFFFFFFFF;
 800c510:	425b      	negs	r3, r3
    for( uint16_t i = 0; i < length; ++i )
 800c512:	b2ac      	uxth	r4, r5
 800c514:	428c      	cmp	r4, r1
 800c516:	d301      	bcc.n	800c51c <Crc32+0x1c>
        }
    }

    return ~crc;
 800c518:	43d8      	mvns	r0, r3
}
 800c51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        crc ^= ( uint32_t )buffer[i];
 800c51c:	5d54      	ldrb	r4, [r2, r5]
 800c51e:	4063      	eors	r3, r4
 800c520:	0034      	movs	r4, r6
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800c522:	0858      	lsrs	r0, r3, #1
 800c524:	4684      	mov	ip, r0
 800c526:	403b      	ands	r3, r7
 800c528:	4805      	ldr	r0, [pc, #20]	@ (800c540 <Crc32+0x40>)
 800c52a:	425b      	negs	r3, r3
 800c52c:	4003      	ands	r3, r0
 800c52e:	4660      	mov	r0, ip
        for( uint16_t i = 0; i < 8; i++ )
 800c530:	3c01      	subs	r4, #1
 800c532:	b2a4      	uxth	r4, r4
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800c534:	4043      	eors	r3, r0
        for( uint16_t i = 0; i < 8; i++ )
 800c536:	2c00      	cmp	r4, #0
 800c538:	d1f3      	bne.n	800c522 <Crc32+0x22>
    for( uint16_t i = 0; i < length; ++i )
 800c53a:	3501      	adds	r5, #1
 800c53c:	e7e9      	b.n	800c512 <Crc32+0x12>
 800c53e:	46c0      	nop			@ (mov r8, r8)
 800c540:	edb88320 	.word	0xedb88320

0800c544 <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 800c544:	4b01      	ldr	r3, [pc, #4]	@ (800c54c <SX1276GetStatus+0x8>)
 800c546:	7918      	ldrb	r0, [r3, #4]
}
 800c548:	4770      	bx	lr
 800c54a:	46c0      	nop			@ (mov r8, r8)
 800c54c:	2000134c 	.word	0x2000134c

0800c550 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800c550:	4a09      	ldr	r2, [pc, #36]	@ (800c578 <GetFskBandwidthRegValue+0x28>)
{
 800c552:	2300      	movs	r3, #0
 800c554:	0011      	movs	r1, r2
 800c556:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 800c558:	6814      	ldr	r4, [r2, #0]
 800c55a:	4284      	cmp	r4, r0
 800c55c:	d802      	bhi.n	800c564 <GetFskBandwidthRegValue+0x14>
 800c55e:	6894      	ldr	r4, [r2, #8]
 800c560:	4284      	cmp	r4, r0
 800c562:	d804      	bhi.n	800c56e <GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800c564:	3301      	adds	r3, #1
 800c566:	3208      	adds	r2, #8
 800c568:	2b15      	cmp	r3, #21
 800c56a:	d1f5      	bne.n	800c558 <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 800c56c:	e7fe      	b.n	800c56c <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
 800c56e:	00db      	lsls	r3, r3, #3
 800c570:	18c9      	adds	r1, r1, r3
 800c572:	7908      	ldrb	r0, [r1, #4]
}
 800c574:	bd10      	pop	{r4, pc}
 800c576:	46c0      	nop			@ (mov r8, r8)
 800c578:	0800ed48 	.word	0x0800ed48

0800c57c <SX1276GetTimeOnAir>:
{
 800c57c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c57e:	000d      	movs	r5, r1
 800c580:	0019      	movs	r1, r3
 800c582:	ab08      	add	r3, sp, #32
 800c584:	881e      	ldrh	r6, [r3, #0]
 800c586:	ab09      	add	r3, sp, #36	@ 0x24
 800c588:	781f      	ldrb	r7, [r3, #0]
 800c58a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	0014      	movs	r4, r2
 800c590:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c592:	469c      	mov	ip, r3
 800c594:	7812      	ldrb	r2, [r2, #0]
    switch( modem )
 800c596:	2800      	cmp	r0, #0
 800c598:	d009      	beq.n	800c5ae <SX1276GetTimeOnAir+0x32>
 800c59a:	2801      	cmp	r0, #1
 800c59c:	d014      	beq.n	800c5c8 <SX1276GetTimeOnAir+0x4c>
 800c59e:	2401      	movs	r4, #1
 800c5a0:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 800c5a2:	1900      	adds	r0, r0, r4
 800c5a4:	0021      	movs	r1, r4
 800c5a6:	3801      	subs	r0, #1
 800c5a8:	f7f3 fdde 	bl	8000168 <__udivsi3>
}
 800c5ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                                                 uint8_t payloadLen, bool crcOn )
{
    const uint8_t syncWordLength = 3;

    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c5ae:	2101      	movs	r1, #1
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800c5b0:	20fa      	movs	r0, #250	@ 0xfa
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c5b2:	4079      	eors	r1, r7
    return ( preambleLen << 3 ) +
 800c5b4:	1871      	adds	r1, r6, r1
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 800c5b6:	0052      	lsls	r2, r2, #1
    return ( preambleLen << 3 ) +
 800c5b8:	00c9      	lsls	r1, r1, #3
               ( 0 ) + // Address filter size
 800c5ba:	4462      	add	r2, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c5bc:	3118      	adds	r1, #24
               ) << 3 
 800c5be:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 800c5c0:	188a      	adds	r2, r1, r2
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800c5c2:	0080      	lsls	r0, r0, #2
 800c5c4:	4350      	muls	r0, r2
        break;
 800c5c6:	e7ec      	b.n	800c5a2 <SX1276GetTimeOnAir+0x26>
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 800c5c8:	1d0b      	adds	r3, r1, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800c5ca:	1f61      	subs	r1, r4, #5
    int32_t crDenom           = coderate + 4;
 800c5cc:	9300      	str	r3, [sp, #0]
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800c5ce:	2901      	cmp	r1, #1
 800c5d0:	d804      	bhi.n	800c5dc <SX1276GetTimeOnAir+0x60>
    {
        if( preambleLen < 12 )
 800c5d2:	1c31      	adds	r1, r6, #0
 800c5d4:	2e0c      	cmp	r6, #12
 800c5d6:	d200      	bcs.n	800c5da <SX1276GetTimeOnAir+0x5e>
 800c5d8:	210c      	movs	r1, #12
 800c5da:	b28e      	uxth	r6, r1
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c5dc:	2d00      	cmp	r5, #0
 800c5de:	d138      	bne.n	800c652 <SX1276GetTimeOnAir+0xd6>
 800c5e0:	0021      	movs	r1, r4
 800c5e2:	2001      	movs	r0, #1
 800c5e4:	002b      	movs	r3, r5
 800c5e6:	390b      	subs	r1, #11
 800c5e8:	4288      	cmp	r0, r1
 800c5ea:	416b      	adcs	r3, r5
 800c5ec:	0018      	movs	r0, r3
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c5ee:	b2c0      	uxtb	r0, r0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c5f0:	4663      	mov	r3, ip
                            ( crcOn ? 16 : 0 ) -
 800c5f2:	0112      	lsls	r2, r2, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c5f4:	00db      	lsls	r3, r3, #3
 800c5f6:	189a      	adds	r2, r3, r2
                            ( 4 * datarate ) +
 800c5f8:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 800c5fa:	1a53      	subs	r3, r2, r1
                            ( fixLen ? 0 : 20 );
 800c5fc:	003a      	movs	r2, r7
 800c5fe:	4257      	negs	r7, r2
 800c600:	4157      	adcs	r7, r2
                            ( crcOn ? 16 : 0 ) -
 800c602:	9301      	str	r3, [sp, #4]
                            ( fixLen ? 0 : 20 );
 800c604:	2314      	movs	r3, #20
 800c606:	427f      	negs	r7, r7
                            ( 4 * datarate ) +
 800c608:	9a01      	ldr	r2, [sp, #4]
                            ( fixLen ? 0 : 20 );
 800c60a:	403b      	ands	r3, r7
                            ( 4 * datarate ) +
 800c60c:	18d3      	adds	r3, r2, r3
    {
        ceilNumerator += 8;

        if( lowDatareOptimize == true )
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800c60e:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 800c610:	2c06      	cmp	r4, #6
 800c612:	d903      	bls.n	800c61c <SX1276GetTimeOnAir+0xa0>
        ceilNumerator += 8;
 800c614:	3308      	adds	r3, #8
        if( lowDatareOptimize == true )
 800c616:	2800      	cmp	r0, #0
 800c618:	d000      	beq.n	800c61c <SX1276GetTimeOnAir+0xa0>
            ceilDenominator = 4 * ( datarate - 2 );
 800c61a:	00b9      	lsls	r1, r7, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800c61c:	43da      	mvns	r2, r3
 800c61e:	17d2      	asrs	r2, r2, #31
 800c620:	4013      	ands	r3, r2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800c622:	1858      	adds	r0, r3, r1
 800c624:	3801      	subs	r0, #1
 800c626:	f7f3 fe29 	bl	800027c <__divsi3>
 800c62a:	9b00      	ldr	r3, [sp, #0]
 800c62c:	4343      	muls	r3, r0
 800c62e:	1998      	adds	r0, r3, r6

    if( datarate <= 6 )
    {
        intermediate += 2;
 800c630:	0003      	movs	r3, r0
 800c632:	330e      	adds	r3, #14
    if( datarate <= 6 )
 800c634:	2c06      	cmp	r4, #6
 800c636:	d900      	bls.n	800c63a <SX1276GetTimeOnAir+0xbe>
    int32_t intermediate =
 800c638:	3b02      	subs	r3, #2
    switch( bw )
 800c63a:	2d02      	cmp	r5, #2
 800c63c:	d811      	bhi.n	800c662 <SX1276GetTimeOnAir+0xe6>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800c63e:	009b      	lsls	r3, r3, #2
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800c640:	20fa      	movs	r0, #250	@ 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800c642:	3301      	adds	r3, #1
 800c644:	40bb      	lsls	r3, r7
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800c646:	0080      	lsls	r0, r0, #2
 800c648:	4358      	muls	r0, r3
 800c64a:	4b06      	ldr	r3, [pc, #24]	@ (800c664 <SX1276GetTimeOnAir+0xe8>)
 800c64c:	00ad      	lsls	r5, r5, #2
 800c64e:	58ec      	ldr	r4, [r5, r3]
 800c650:	e7a7      	b.n	800c5a2 <SX1276GetTimeOnAir+0x26>
    bool    lowDatareOptimize = false;
 800c652:	2000      	movs	r0, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c654:	2d01      	cmp	r5, #1
 800c656:	d1cb      	bne.n	800c5f0 <SX1276GetTimeOnAir+0x74>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c658:	0020      	movs	r0, r4
 800c65a:	380c      	subs	r0, #12
 800c65c:	4241      	negs	r1, r0
 800c65e:	4148      	adcs	r0, r1
 800c660:	e7c5      	b.n	800c5ee <SX1276GetTimeOnAir+0x72>
    return ( numerator + denominator - 1 ) / denominator;
 800c662:	deff      	udf	#255	@ 0xff
 800c664:	0800ed0c 	.word	0x0800ed0c

0800c668 <SX1276GetWakeupTime>:
{
 800c668:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800c66a:	f7f6 faf3 	bl	8002c54 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800c66e:	3002      	adds	r0, #2
}
 800c670:	bd10      	pop	{r4, pc}

0800c672 <SX1276WriteBuffer>:
{
 800c672:	b570      	push	{r4, r5, r6, lr}
 800c674:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 800c676:	2000      	movs	r0, #0
{
 800c678:	000c      	movs	r4, r1
 800c67a:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 800c67c:	f7f6 fcc4 	bl	8003008 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 800c680:	2080      	movs	r0, #128	@ 0x80
 800c682:	4330      	orrs	r0, r6
 800c684:	b280      	uxth	r0, r0
 800c686:	f7f6 fcb1 	bl	8002fec <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800c68a:	1965      	adds	r5, r4, r5
 800c68c:	42ac      	cmp	r4, r5
 800c68e:	d103      	bne.n	800c698 <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 800c690:	2001      	movs	r0, #1
 800c692:	f7f6 fcb9 	bl	8003008 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 800c696:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 800c698:	7820      	ldrb	r0, [r4, #0]
 800c69a:	f7f6 fca7 	bl	8002fec <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800c69e:	3401      	adds	r4, #1
 800c6a0:	e7f4      	b.n	800c68c <SX1276WriteBuffer+0x1a>

0800c6a2 <SX1276Write>:
{
 800c6a2:	b507      	push	{r0, r1, r2, lr}
 800c6a4:	466b      	mov	r3, sp
 800c6a6:	71d9      	strb	r1, [r3, #7]
 800c6a8:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	0019      	movs	r1, r3
 800c6ae:	f7ff ffe0 	bl	800c672 <SX1276WriteBuffer>
}
 800c6b2:	bd07      	pop	{r0, r1, r2, pc}

0800c6b4 <SX1276SetChannel>:
{
 800c6b4:	b570      	push	{r4, r5, r6, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800c6b6:	4911      	ldr	r1, [pc, #68]	@ (800c6fc <SX1276SetChannel+0x48>)
{
 800c6b8:	0005      	movs	r5, r0
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800c6ba:	f7f3 fddb 	bl	8000274 <__aeabi_uidivmod>
 800c6be:	4b10      	ldr	r3, [pc, #64]	@ (800c700 <SX1276SetChannel+0x4c>)
 800c6c0:	0208      	lsls	r0, r1, #8
 800c6c2:	18c0      	adds	r0, r0, r3
 800c6c4:	490d      	ldr	r1, [pc, #52]	@ (800c6fc <SX1276SetChannel+0x48>)
 800c6c6:	f7f3 fd4f 	bl	8000168 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800c6ca:	490c      	ldr	r1, [pc, #48]	@ (800c6fc <SX1276SetChannel+0x48>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800c6cc:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800c6ce:	0028      	movs	r0, r5
 800c6d0:	f7f3 fd4a 	bl	8000168 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800c6d4:	0200      	lsls	r0, r0, #8
 800c6d6:	1824      	adds	r4, r4, r0
    SX1276.Settings.Channel = freq;
 800c6d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c704 <SX1276SetChannel+0x50>)
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800c6da:	0c21      	lsrs	r1, r4, #16
 800c6dc:	2006      	movs	r0, #6
 800c6de:	b2c9      	uxtb	r1, r1
    SX1276.Settings.Channel = freq;
 800c6e0:	609d      	str	r5, [r3, #8]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800c6e2:	f7ff ffde 	bl	800c6a2 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 800c6e6:	0a21      	lsrs	r1, r4, #8
 800c6e8:	2007      	movs	r0, #7
 800c6ea:	b2c9      	uxtb	r1, r1
 800c6ec:	f7ff ffd9 	bl	800c6a2 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 800c6f0:	2008      	movs	r0, #8
 800c6f2:	b2e1      	uxtb	r1, r4
 800c6f4:	f7ff ffd5 	bl	800c6a2 <SX1276Write>
}
 800c6f8:	bd70      	pop	{r4, r5, r6, pc}
 800c6fa:	46c0      	nop			@ (mov r8, r8)
 800c6fc:	00003d09 	.word	0x00003d09
 800c700:	00001e84 	.word	0x00001e84
 800c704:	2000134c 	.word	0x2000134c

0800c708 <SX1276ReadBuffer>:
{
 800c708:	b570      	push	{r4, r5, r6, lr}
 800c70a:	0005      	movs	r5, r0
    Sx_Board_ChipSelect( 0 );
 800c70c:	2000      	movs	r0, #0
{
 800c70e:	000c      	movs	r4, r1
 800c710:	0016      	movs	r6, r2
    Sx_Board_ChipSelect( 0 );
 800c712:	f7f6 fc79 	bl	8003008 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 800c716:	207f      	movs	r0, #127	@ 0x7f
 800c718:	4028      	ands	r0, r5
 800c71a:	f7f6 fc67 	bl	8002fec <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800c71e:	19a6      	adds	r6, r4, r6
 800c720:	42b4      	cmp	r4, r6
 800c722:	d103      	bne.n	800c72c <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 800c724:	2001      	movs	r0, #1
 800c726:	f7f6 fc6f 	bl	8003008 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 800c72a:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 800c72c:	2000      	movs	r0, #0
 800c72e:	f7f6 fc5d 	bl	8002fec <CMWX1ZZABZ0XX_RADIO_SendRecv>
 800c732:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 800c734:	3401      	adds	r4, #1
 800c736:	e7f3      	b.n	800c720 <SX1276ReadBuffer+0x18>

0800c738 <SX1276Read>:
{
 800c738:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 800c73a:	466b      	mov	r3, sp
 800c73c:	1ddc      	adds	r4, r3, #7
 800c73e:	2201      	movs	r2, #1
 800c740:	0021      	movs	r1, r4
 800c742:	f7ff ffe1 	bl	800c708 <SX1276ReadBuffer>
    return data;
 800c746:	7820      	ldrb	r0, [r4, #0]
}
 800c748:	bd16      	pop	{r1, r2, r4, pc}
	...

0800c74c <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void )
{
 800c74c:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800c74e:	4c2c      	ldr	r4, [pc, #176]	@ (800c800 <SX1276OnDio2Irq+0xb4>)
 800c750:	7925      	ldrb	r5, [r4, #4]
 800c752:	2d01      	cmp	r5, #1
 800c754:	d002      	beq.n	800c75c <SX1276OnDio2Irq+0x10>
 800c756:	2d02      	cmp	r5, #2
 800c758:	d049      	beq.n	800c7ee <SX1276OnDio2Irq+0xa2>
            }
            break;
        default:
            break;
    }
}
 800c75a:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800c75c:	7963      	ldrb	r3, [r4, #5]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d017      	beq.n	800c792 <SX1276OnDio2Irq+0x46>
 800c762:	2b01      	cmp	r3, #1
 800c764:	d1f9      	bne.n	800c75a <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c766:	3453      	adds	r4, #83	@ 0x53
 800c768:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800c76a:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d0f4      	beq.n	800c75a <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800c770:	2012      	movs	r0, #18
 800c772:	f7ff ff96 	bl	800c6a2 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800c776:	4b23      	ldr	r3, [pc, #140]	@ (800c804 <SX1276OnDio2Irq+0xb8>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d0ed      	beq.n	800c75a <SX1276OnDio2Irq+0xe>
 800c77e:	695c      	ldr	r4, [r3, #20]
 800c780:	2c00      	cmp	r4, #0
 800c782:	d0ea      	beq.n	800c75a <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800c784:	201c      	movs	r0, #28
 800c786:	f7ff ffd7 	bl	800c738 <SX1276Read>
 800c78a:	233f      	movs	r3, #63	@ 0x3f
 800c78c:	4018      	ands	r0, r3
 800c78e:	47a0      	blx	r4
}
 800c790:	e7e3      	b.n	800c75a <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800c792:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800c794:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800c796:	3330      	adds	r3, #48	@ 0x30
 800c798:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800c79a:	3631      	adds	r6, #49	@ 0x31
 800c79c:	7833      	ldrb	r3, [r6, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d1db      	bne.n	800c75a <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 800c7a2:	0020      	movs	r0, r4
 800c7a4:	3068      	adds	r0, #104	@ 0x68
 800c7a6:	f001 fd4b 	bl	800e240 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800c7aa:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800c7ac:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800c7ae:	f7ff ffc3 	bl	800c738 <SX1276Read>
 800c7b2:	0023      	movs	r3, r4
 800c7b4:	0840      	lsrs	r0, r0, #1
 800c7b6:	3332      	adds	r3, #50	@ 0x32
 800c7b8:	4240      	negs	r0, r0
 800c7ba:	7018      	strb	r0, [r3, #0]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c7bc:	201b      	movs	r0, #27
 800c7be:	f7ff ffbb 	bl	800c738 <SX1276Read>
 800c7c2:	0005      	movs	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800c7c4:	201c      	movs	r0, #28
 800c7c6:	f7ff ffb7 	bl	800c738 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c7ca:	022d      	lsls	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c7cc:	4b0e      	ldr	r3, [pc, #56]	@ (800c808 <SX1276OnDio2Irq+0xbc>)
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c7ce:	4305      	orrs	r5, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c7d0:	b2c0      	uxtb	r0, r0
 800c7d2:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800c7d4:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800c7d6:	436b      	muls	r3, r5
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c7d8:	3080      	adds	r0, #128	@ 0x80
 800c7da:	0a00      	lsrs	r0, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800c7dc:	18c0      	adds	r0, r0, r3
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c7de:	6360      	str	r0, [r4, #52]	@ 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800c7e0:	200c      	movs	r0, #12
 800c7e2:	f7ff ffa9 	bl	800c738 <SX1276Read>
 800c7e6:	3438      	adds	r4, #56	@ 0x38
 800c7e8:	0940      	lsrs	r0, r0, #5
 800c7ea:	7020      	strb	r0, [r4, #0]
 800c7ec:	e7b5      	b.n	800c75a <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 800c7ee:	7963      	ldrb	r3, [r4, #5]
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d1b2      	bne.n	800c75a <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c7f4:	3453      	adds	r4, #83	@ 0x53
 800c7f6:	7823      	ldrb	r3, [r4, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d0ae      	beq.n	800c75a <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800c7fc:	0029      	movs	r1, r5
 800c7fe:	e7b7      	b.n	800c770 <SX1276OnDio2Irq+0x24>
 800c800:	2000134c 	.word	0x2000134c
 800c804:	200013cc 	.word	0x200013cc
 800c808:	00003d09 	.word	0x00003d09

0800c80c <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 800c80c:	4b05      	ldr	r3, [pc, #20]	@ (800c824 <SX1276OnDio4Irq+0x18>)
 800c80e:	795a      	ldrb	r2, [r3, #5]
 800c810:	2a00      	cmp	r2, #0
 800c812:	d105      	bne.n	800c820 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800c814:	3330      	adds	r3, #48	@ 0x30
 800c816:	781a      	ldrb	r2, [r3, #0]
 800c818:	2a00      	cmp	r2, #0
 800c81a:	d101      	bne.n	800c820 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800c81c:	3201      	adds	r2, #1
 800c81e:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 800c820:	4770      	bx	lr
 800c822:	46c0      	nop			@ (mov r8, r8)
 800c824:	2000134c 	.word	0x2000134c

0800c828 <SX1276OnDio3Irq>:
{
 800c828:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800c82a:	4b12      	ldr	r3, [pc, #72]	@ (800c874 <SX1276OnDio3Irq+0x4c>)
 800c82c:	795c      	ldrb	r4, [r3, #5]
 800c82e:	2c01      	cmp	r4, #1
 800c830:	d112      	bne.n	800c858 <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800c832:	2012      	movs	r0, #18
 800c834:	f7ff ff80 	bl	800c738 <SX1276Read>
 800c838:	0005      	movs	r5, r0
 800c83a:	4e0f      	ldr	r6, [pc, #60]	@ (800c878 <SX1276OnDio3Irq+0x50>)
 800c83c:	4025      	ands	r5, r4
 800c83e:	4220      	tst	r0, r4
 800c840:	d00b      	beq.n	800c85a <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800c842:	2105      	movs	r1, #5
 800c844:	2012      	movs	r0, #18
 800c846:	f7ff ff2c 	bl	800c6a2 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800c84a:	6833      	ldr	r3, [r6, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d003      	beq.n	800c858 <SX1276OnDio3Irq+0x30>
 800c850:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 800c852:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10b      	bne.n	800c870 <SX1276OnDio3Irq+0x48>
}
 800c858:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800c85a:	2104      	movs	r1, #4
 800c85c:	2012      	movs	r0, #18
 800c85e:	f7ff ff20 	bl	800c6a2 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800c862:	6833      	ldr	r3, [r6, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d0f7      	beq.n	800c858 <SX1276OnDio3Irq+0x30>
 800c868:	699b      	ldr	r3, [r3, #24]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d0f4      	beq.n	800c858 <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 800c86e:	0028      	movs	r0, r5
 800c870:	4798      	blx	r3
}
 800c872:	e7f1      	b.n	800c858 <SX1276OnDio3Irq+0x30>
 800c874:	2000134c 	.word	0x2000134c
 800c878:	200013cc 	.word	0x200013cc

0800c87c <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800c87c:	b570      	push	{r4, r5, r6, lr}
 800c87e:	0004      	movs	r4, r0
    else if ( opMode == RF_OPMODE_RECEIVER )
 800c880:	2805      	cmp	r0, #5
 800c882:	d111      	bne.n	800c8a8 <SX1276SetOpMode.part.0+0x2c>
      Sx_Board_SetXO( SET ); 
 800c884:	2001      	movs	r0, #1
 800c886:	f7f6 f9e7 	bl	8002c58 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 800c88a:	2001      	movs	r0, #1
 800c88c:	f7f6 fb5c 	bl	8002f48 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c890:	2001      	movs	r0, #1
 800c892:	f7ff ff51 	bl	800c738 <SX1276Read>
 800c896:	2307      	movs	r3, #7
 800c898:	0001      	movs	r1, r0
 800c89a:	4399      	bics	r1, r3
 800c89c:	4321      	orrs	r1, r4
 800c89e:	b2c9      	uxtb	r1, r1
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c8a0:	2001      	movs	r0, #1
 800c8a2:	f7ff fefe 	bl	800c6a2 <SX1276Write>
}
 800c8a6:	bd70      	pop	{r4, r5, r6, pc}
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 800c8a8:	2009      	movs	r0, #9
 800c8aa:	f7ff ff45 	bl	800c738 <SX1276Read>
 800c8ae:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 800c8b0:	2001      	movs	r0, #1
 800c8b2:	f7f6 f9d1 	bl	8002c58 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 800c8b6:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800c8b8:	062d      	lsls	r5, r5, #24
 800c8ba:	d400      	bmi.n	800c8be <SX1276SetOpMode.part.0+0x42>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 800c8bc:	2002      	movs	r0, #2
 800c8be:	f7f6 fb43 	bl	8002f48 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c8c2:	2001      	movs	r0, #1
 800c8c4:	f7ff ff38 	bl	800c738 <SX1276Read>
 800c8c8:	2307      	movs	r3, #7
 800c8ca:	4398      	bics	r0, r3
 800c8cc:	4304      	orrs	r4, r0
 800c8ce:	b2e1      	uxtb	r1, r4
 800c8d0:	e7e6      	b.n	800c8a0 <SX1276SetOpMode.part.0+0x24>
	...

0800c8d4 <SX1276SetStby>:
{
 800c8d4:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800c8d6:	4c09      	ldr	r4, [pc, #36]	@ (800c8fc <SX1276SetStby+0x28>)
 800c8d8:	4809      	ldr	r0, [pc, #36]	@ (800c900 <SX1276SetStby+0x2c>)
 800c8da:	f001 fcb1 	bl	800e240 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800c8de:	0020      	movs	r0, r4
 800c8e0:	301c      	adds	r0, #28
 800c8e2:	f001 fcad 	bl	800e240 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800c8e6:	4807      	ldr	r0, [pc, #28]	@ (800c904 <SX1276SetStby+0x30>)
 800c8e8:	4c07      	ldr	r4, [pc, #28]	@ (800c908 <SX1276SetStby+0x34>)
 800c8ea:	f001 fca9 	bl	800e240 <UTIL_TIMER_Stop>
    if( opMode == RF_OPMODE_SLEEP )
 800c8ee:	2001      	movs	r0, #1
 800c8f0:	f7ff ffc4 	bl	800c87c <SX1276SetOpMode.part.0>
    SX1276.Settings.State = RF_IDLE;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	7123      	strb	r3, [r4, #4]
}
 800c8f8:	bd10      	pop	{r4, pc}
 800c8fa:	46c0      	nop			@ (mov r8, r8)
 800c8fc:	200013cc 	.word	0x200013cc
 800c900:	200013d0 	.word	0x200013d0
 800c904:	200013b4 	.word	0x200013b4
 800c908:	2000134c 	.word	0x2000134c

0800c90c <SX1276SetRx>:
{
 800c90c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    TimerStop( &TxTimeoutTimer );
 800c90e:	4b7a      	ldr	r3, [pc, #488]	@ (800caf8 <SX1276SetRx+0x1ec>)
{
 800c910:	0007      	movs	r7, r0
    TimerStop( &TxTimeoutTimer );
 800c912:	487a      	ldr	r0, [pc, #488]	@ (800cafc <SX1276SetRx+0x1f0>)
 800c914:	9301      	str	r3, [sp, #4]
 800c916:	f001 fc93 	bl	800e240 <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 800c91a:	4c79      	ldr	r4, [pc, #484]	@ (800cb00 <SX1276SetRx+0x1f4>)
 800c91c:	7965      	ldrb	r5, [r4, #5]
 800c91e:	2d00      	cmp	r5, #0
 800c920:	d02f      	beq.n	800c982 <SX1276SetRx+0x76>
 800c922:	2600      	movs	r6, #0
 800c924:	2d01      	cmp	r5, #1
 800c926:	d151      	bne.n	800c9cc <SX1276SetRx+0xc0>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800c928:	0023      	movs	r3, r4
 800c92a:	3355      	adds	r3, #85	@ 0x55
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	2641      	movs	r6, #65	@ 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800c930:	2033      	movs	r0, #51	@ 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800c932:	2b00      	cmp	r3, #0
 800c934:	d100      	bne.n	800c938 <SX1276SetRx+0x2c>
 800c936:	e06f      	b.n	800ca18 <SX1276SetRx+0x10c>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800c938:	f7ff fefe 	bl	800c738 <SX1276Read>
 800c93c:	4330      	orrs	r0, r6
 800c93e:	b2c1      	uxtb	r1, r0
 800c940:	2033      	movs	r0, #51	@ 0x33
 800c942:	f7ff feae 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800c946:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800c948:	203b      	movs	r0, #59	@ 0x3b
 800c94a:	f7ff feaa 	bl	800c6a2 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800c94e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800c950:	2031      	movs	r0, #49	@ 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800c952:	2b08      	cmp	r3, #8
 800c954:	d900      	bls.n	800c958 <SX1276SetRx+0x4c>
 800c956:	e0b7      	b.n	800cac8 <SX1276SetRx+0x1bc>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800c958:	f7ff feee 	bl	800c738 <SX1276Read>
 800c95c:	217f      	movs	r1, #127	@ 0x7f
 800c95e:	4001      	ands	r1, r0
 800c960:	2031      	movs	r0, #49	@ 0x31
 800c962:	f7ff fe9e 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 800c966:	2030      	movs	r0, #48	@ 0x30
 800c968:	2100      	movs	r1, #0
 800c96a:	f7ff fe9a 	bl	800c6a2 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800c96e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800c970:	2808      	cmp	r0, #8
 800c972:	d864      	bhi.n	800ca3e <SX1276SetRx+0x132>
 800c974:	f7f3 fbda 	bl	800012c <__gnu_thumb1_case_uqi>
 800c978:	8e87805a 	.word	0x8e87805a
 800c97c:	a3a39c95 	.word	0xa3a39c95
 800c980:	a3          	.byte	0xa3
 800c981:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800c982:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800c984:	2040      	movs	r0, #64	@ 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800c986:	7fde      	ldrb	r6, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800c988:	f7ff fed6 	bl	800c738 <SX1276Read>
 800c98c:	2303      	movs	r3, #3
 800c98e:	210c      	movs	r1, #12
 800c990:	4018      	ands	r0, r3
 800c992:	4301      	orrs	r1, r0
 800c994:	2040      	movs	r0, #64	@ 0x40
 800c996:	f7ff fe84 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800c99a:	2041      	movs	r0, #65	@ 0x41
 800c99c:	f7ff fecc 	bl	800c738 <SX1276Read>
 800c9a0:	213f      	movs	r1, #63	@ 0x3f
 800c9a2:	4249      	negs	r1, r1
 800c9a4:	4301      	orrs	r1, r0
 800c9a6:	b2c9      	uxtb	r1, r1
 800c9a8:	2041      	movs	r0, #65	@ 0x41
 800c9aa:	f7ff fe7a 	bl	800c6a2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800c9ae:	2035      	movs	r0, #53	@ 0x35
 800c9b0:	f7ff fec2 	bl	800c738 <SX1276Read>
 800c9b4:	233f      	movs	r3, #63	@ 0x3f
 800c9b6:	4018      	ands	r0, r3
 800c9b8:	0023      	movs	r3, r4
 800c9ba:	333e      	adds	r3, #62	@ 0x3e
 800c9bc:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800c9be:	211e      	movs	r1, #30
 800c9c0:	200d      	movs	r0, #13
 800c9c2:	f7ff fe6e 	bl	800c6a2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800c9c6:	8625      	strh	r5, [r4, #48]	@ 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800c9c8:	87a5      	strh	r5, [r4, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800c9ca:	8765      	strh	r5, [r4, #58]	@ 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 800c9cc:	2280      	movs	r2, #128	@ 0x80
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	484c      	ldr	r0, [pc, #304]	@ (800cb04 <SX1276SetRx+0x1f8>)
 800c9d2:	0052      	lsls	r2, r2, #1
 800c9d4:	f001 fe58 	bl	800e688 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 800c9dc:	2f00      	cmp	r7, #0
 800c9de:	d008      	beq.n	800c9f2 <SX1276SetRx+0xe6>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800c9e0:	9d01      	ldr	r5, [sp, #4]
 800c9e2:	0039      	movs	r1, r7
 800c9e4:	3504      	adds	r5, #4
 800c9e6:	0028      	movs	r0, r5
 800c9e8:	f001 fcbc 	bl	800e364 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800c9ec:	0028      	movs	r0, r5
 800c9ee:	f001 fc7b 	bl	800e2e8 <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 800c9f2:	7963      	ldrb	r3, [r4, #5]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d000      	beq.n	800c9fa <SX1276SetRx+0xee>
 800c9f8:	e077      	b.n	800caea <SX1276SetRx+0x1de>
    if( opMode == RF_OPMODE_SLEEP )
 800c9fa:	2005      	movs	r0, #5
 800c9fc:	f7ff ff3e 	bl	800c87c <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 800ca00:	2e00      	cmp	r6, #0
 800ca02:	d108      	bne.n	800ca16 <SX1276SetRx+0x10a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800ca04:	0025      	movs	r5, r4
 800ca06:	3568      	adds	r5, #104	@ 0x68
 800ca08:	0028      	movs	r0, r5
 800ca0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ca0c:	f001 fcaa 	bl	800e364 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 800ca10:	0028      	movs	r0, r5
 800ca12:	f001 fc69 	bl	800e2e8 <UTIL_TIMER_Start>
}
 800ca16:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800ca18:	f7ff fe8e 	bl	800c738 <SX1276Read>
 800ca1c:	43b0      	bics	r0, r6
 800ca1e:	4305      	orrs	r5, r0
 800ca20:	b2e9      	uxtb	r1, r5
 800ca22:	2033      	movs	r0, #51	@ 0x33
 800ca24:	f7ff fe3d 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800ca28:	211d      	movs	r1, #29
 800ca2a:	e78d      	b.n	800c948 <SX1276SetRx+0x3c>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800ca2c:	202f      	movs	r0, #47	@ 0x2f
 800ca2e:	2148      	movs	r1, #72	@ 0x48
 800ca30:	f7ff fe37 	bl	800c6a2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 800ca34:	68a0      	ldr	r0, [r4, #8]
 800ca36:	4b34      	ldr	r3, [pc, #208]	@ (800cb08 <SX1276SetRx+0x1fc>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800ca38:	18c0      	adds	r0, r0, r3
 800ca3a:	f7ff fe3b 	bl	800c6b4 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800ca3e:	0023      	movs	r3, r4
 800ca40:	3356      	adds	r3, #86	@ 0x56
 800ca42:	781e      	ldrb	r6, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800ca44:	0023      	movs	r3, r4
 800ca46:	3353      	adds	r3, #83	@ 0x53
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d044      	beq.n	800cad8 <SX1276SetRx+0x1cc>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800ca4e:	211d      	movs	r1, #29
 800ca50:	2011      	movs	r0, #17
 800ca52:	f7ff fe26 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800ca56:	2040      	movs	r0, #64	@ 0x40
 800ca58:	f7ff fe6e 	bl	800c738 <SX1276Read>
 800ca5c:	2133      	movs	r1, #51	@ 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800ca5e:	4001      	ands	r1, r0
 800ca60:	2040      	movs	r0, #64	@ 0x40
 800ca62:	f7ff fe1e 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800ca66:	2100      	movs	r1, #0
 800ca68:	200f      	movs	r0, #15
 800ca6a:	f7ff fe1a 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800ca6e:	2100      	movs	r1, #0
 800ca70:	200d      	movs	r0, #13
 800ca72:	f7ff fe16 	bl	800c6a2 <SX1276Write>
        break;
 800ca76:	e7a9      	b.n	800c9cc <SX1276SetRx+0xc0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800ca78:	202f      	movs	r0, #47	@ 0x2f
 800ca7a:	2144      	movs	r1, #68	@ 0x44
 800ca7c:	f7ff fe11 	bl	800c6a2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800ca80:	68a0      	ldr	r0, [r4, #8]
 800ca82:	4b22      	ldr	r3, [pc, #136]	@ (800cb0c <SX1276SetRx+0x200>)
 800ca84:	e7d8      	b.n	800ca38 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800ca86:	202f      	movs	r0, #47	@ 0x2f
 800ca88:	2144      	movs	r1, #68	@ 0x44
 800ca8a:	f7ff fe0a 	bl	800c6a2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 800ca8e:	68a0      	ldr	r0, [r4, #8]
 800ca90:	4b1f      	ldr	r3, [pc, #124]	@ (800cb10 <SX1276SetRx+0x204>)
 800ca92:	e7d1      	b.n	800ca38 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800ca94:	202f      	movs	r0, #47	@ 0x2f
 800ca96:	2144      	movs	r1, #68	@ 0x44
 800ca98:	f7ff fe03 	bl	800c6a2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 800ca9c:	68a0      	ldr	r0, [r4, #8]
 800ca9e:	4b1d      	ldr	r3, [pc, #116]	@ (800cb14 <SX1276SetRx+0x208>)
 800caa0:	e7ca      	b.n	800ca38 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800caa2:	202f      	movs	r0, #47	@ 0x2f
 800caa4:	2144      	movs	r1, #68	@ 0x44
 800caa6:	f7ff fdfc 	bl	800c6a2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 800caaa:	68a0      	ldr	r0, [r4, #8]
 800caac:	4b1a      	ldr	r3, [pc, #104]	@ (800cb18 <SX1276SetRx+0x20c>)
 800caae:	e7c3      	b.n	800ca38 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800cab0:	202f      	movs	r0, #47	@ 0x2f
 800cab2:	2144      	movs	r1, #68	@ 0x44
 800cab4:	f7ff fdf5 	bl	800c6a2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800cab8:	68a0      	ldr	r0, [r4, #8]
 800caba:	4b18      	ldr	r3, [pc, #96]	@ (800cb1c <SX1276SetRx+0x210>)
 800cabc:	e7bc      	b.n	800ca38 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800cabe:	2140      	movs	r1, #64	@ 0x40
 800cac0:	202f      	movs	r0, #47	@ 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800cac2:	f7ff fdee 	bl	800c6a2 <SX1276Write>
 800cac6:	e7ba      	b.n	800ca3e <SX1276SetRx+0x132>
 800cac8:	f7ff fe36 	bl	800c738 <SX1276Read>
 800cacc:	2180      	movs	r1, #128	@ 0x80
 800cace:	4249      	negs	r1, r1
 800cad0:	4301      	orrs	r1, r0
 800cad2:	b2c9      	uxtb	r1, r1
 800cad4:	2031      	movs	r0, #49	@ 0x31
 800cad6:	e7f4      	b.n	800cac2 <SX1276SetRx+0x1b6>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800cad8:	211f      	movs	r1, #31
 800cada:	2011      	movs	r0, #17
 800cadc:	f7ff fde1 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800cae0:	2040      	movs	r0, #64	@ 0x40
 800cae2:	f7ff fe29 	bl	800c738 <SX1276Read>
 800cae6:	213f      	movs	r1, #63	@ 0x3f
 800cae8:	e7b9      	b.n	800ca5e <SX1276SetRx+0x152>
        if( rxContinuous == true )
 800caea:	2005      	movs	r0, #5
 800caec:	2e00      	cmp	r6, #0
 800caee:	d100      	bne.n	800caf2 <SX1276SetRx+0x1e6>
    if( opMode == RF_OPMODE_SLEEP )
 800caf0:	2006      	movs	r0, #6
 800caf2:	f7ff fec3 	bl	800c87c <SX1276SetOpMode.part.0>
}
 800caf6:	e78e      	b.n	800ca16 <SX1276SetRx+0x10a>
 800caf8:	200013cc 	.word	0x200013cc
 800cafc:	200013e8 	.word	0x200013e8
 800cb00:	2000134c 	.word	0x2000134c
 800cb04:	20001400 	.word	0x20001400
 800cb08:	00001e82 	.word	0x00001e82
 800cb0c:	000028b4 	.word	0x000028b4
 800cb10:	00003d04 	.word	0x00003d04
 800cb14:	0000515e 	.word	0x0000515e
 800cb18:	00007a12 	.word	0x00007a12
 800cb1c:	0000a2c6 	.word	0x0000a2c6

0800cb20 <SX1276StartCad>:
{
 800cb20:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800cb22:	4c0b      	ldr	r4, [pc, #44]	@ (800cb50 <SX1276StartCad+0x30>)
 800cb24:	7963      	ldrb	r3, [r4, #5]
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d110      	bne.n	800cb4c <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800cb2a:	21fa      	movs	r1, #250	@ 0xfa
 800cb2c:	2011      	movs	r0, #17
 800cb2e:	f7ff fdb8 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800cb32:	2040      	movs	r0, #64	@ 0x40
 800cb34:	f7ff fe00 	bl	800c738 <SX1276Read>
 800cb38:	2503      	movs	r5, #3
 800cb3a:	43a8      	bics	r0, r5
 800cb3c:	b2c1      	uxtb	r1, r0
 800cb3e:	2040      	movs	r0, #64	@ 0x40
 800cb40:	f7ff fdaf 	bl	800c6a2 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 800cb44:	2007      	movs	r0, #7
 800cb46:	7125      	strb	r5, [r4, #4]
    if( opMode == RF_OPMODE_SLEEP )
 800cb48:	f7ff fe98 	bl	800c87c <SX1276SetOpMode.part.0>
}
 800cb4c:	bd70      	pop	{r4, r5, r6, pc}
 800cb4e:	46c0      	nop			@ (mov r8, r8)
 800cb50:	2000134c 	.word	0x2000134c

0800cb54 <SX1276ReadRssi>:
{
 800cb54:	b510      	push	{r4, lr}
    switch( modem )
 800cb56:	2800      	cmp	r0, #0
 800cb58:	d004      	beq.n	800cb64 <SX1276ReadRssi+0x10>
 800cb5a:	2801      	cmp	r0, #1
 800cb5c:	d00a      	beq.n	800cb74 <SX1276ReadRssi+0x20>
 800cb5e:	2001      	movs	r0, #1
 800cb60:	4240      	negs	r0, r0
}
 800cb62:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800cb64:	2011      	movs	r0, #17
 800cb66:	f7ff fde7 	bl	800c738 <SX1276Read>
 800cb6a:	0840      	lsrs	r0, r0, #1
 800cb6c:	b2c0      	uxtb	r0, r0
 800cb6e:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800cb70:	b200      	sxth	r0, r0
 800cb72:	e7f6      	b.n	800cb62 <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800cb74:	4b06      	ldr	r3, [pc, #24]	@ (800cb90 <SX1276ReadRssi+0x3c>)
 800cb76:	4a07      	ldr	r2, [pc, #28]	@ (800cb94 <SX1276ReadRssi+0x40>)
 800cb78:	689b      	ldr	r3, [r3, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800cb7a:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d903      	bls.n	800cb88 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800cb80:	f7ff fdda 	bl	800c738 <SX1276Read>
 800cb84:	389d      	subs	r0, #157	@ 0x9d
 800cb86:	e7f3      	b.n	800cb70 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800cb88:	f7ff fdd6 	bl	800c738 <SX1276Read>
 800cb8c:	38a4      	subs	r0, #164	@ 0xa4
 800cb8e:	e7ef      	b.n	800cb70 <SX1276ReadRssi+0x1c>
 800cb90:	2000134c 	.word	0x2000134c
 800cb94:	1f4add40 	.word	0x1f4add40

0800cb98 <SX1276SetOpMode.constprop.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800cb98:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800cb9a:	2001      	movs	r0, #1
 800cb9c:	f7ff fdcc 	bl	800c738 <SX1276Read>
 800cba0:	21f8      	movs	r1, #248	@ 0xf8
 800cba2:	4001      	ands	r1, r0
 800cba4:	2001      	movs	r0, #1
 800cba6:	f7ff fd7c 	bl	800c6a2 <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 800cbaa:	2000      	movs	r0, #0
 800cbac:	f7f6 f9cc 	bl	8002f48 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	f7f6 f851 	bl	8002c58 <CMWX1ZZABZ0XX_RADIO_SetXO>
}
 800cbb6:	bd10      	pop	{r4, pc}

0800cbb8 <SX1276SetModem>:
{
 800cbb8:	b510      	push	{r4, lr}
 800cbba:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800cbbc:	2001      	movs	r0, #1
 800cbbe:	f7ff fdbb 	bl	800c738 <SX1276Read>
 800cbc2:	b2c0      	uxtb	r0, r0
 800cbc4:	4b16      	ldr	r3, [pc, #88]	@ (800cc20 <SX1276SetModem+0x68>)
 800cbc6:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 800cbc8:	42a0      	cmp	r0, r4
 800cbca:	d101      	bne.n	800cbd0 <SX1276SetModem+0x18>
 800cbcc:	7158      	strb	r0, [r3, #5]
}
 800cbce:	bd10      	pop	{r4, pc}
    SX1276.Settings.Modem = modem;
 800cbd0:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 800cbd2:	2c01      	cmp	r4, #1
 800cbd4:	d012      	beq.n	800cbfc <SX1276SetModem+0x44>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800cbd6:	f7ff ffdf 	bl	800cb98 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800cbda:	2001      	movs	r0, #1
 800cbdc:	f7ff fdac 	bl	800c738 <SX1276Read>
 800cbe0:	217f      	movs	r1, #127	@ 0x7f
 800cbe2:	4001      	ands	r1, r0
 800cbe4:	2001      	movs	r0, #1
 800cbe6:	f7ff fd5c 	bl	800c6a2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800cbea:	2100      	movs	r1, #0
 800cbec:	2040      	movs	r0, #64	@ 0x40
 800cbee:	f7ff fd58 	bl	800c6a2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800cbf2:	2130      	movs	r1, #48	@ 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800cbf4:	2041      	movs	r0, #65	@ 0x41
 800cbf6:	f7ff fd54 	bl	800c6a2 <SX1276Write>
        break;
 800cbfa:	e7e8      	b.n	800cbce <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800cbfc:	f7ff ffcc 	bl	800cb98 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800cc00:	0020      	movs	r0, r4
 800cc02:	f7ff fd99 	bl	800c738 <SX1276Read>
 800cc06:	2180      	movs	r1, #128	@ 0x80
 800cc08:	4249      	negs	r1, r1
 800cc0a:	4301      	orrs	r1, r0
 800cc0c:	b2c9      	uxtb	r1, r1
 800cc0e:	0020      	movs	r0, r4
 800cc10:	f7ff fd47 	bl	800c6a2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800cc14:	2100      	movs	r1, #0
 800cc16:	2040      	movs	r0, #64	@ 0x40
 800cc18:	f7ff fd43 	bl	800c6a2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	e7e9      	b.n	800cbf4 <SX1276SetModem+0x3c>
 800cc20:	2000134c 	.word	0x2000134c

0800cc24 <SX1276SetMaxPayloadLength>:
{
 800cc24:	b570      	push	{r4, r5, r6, lr}
 800cc26:	0004      	movs	r4, r0
 800cc28:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 800cc2a:	f7ff ffc5 	bl	800cbb8 <SX1276SetModem>
    switch( modem )
 800cc2e:	2c00      	cmp	r4, #0
 800cc30:	d002      	beq.n	800cc38 <SX1276SetMaxPayloadLength+0x14>
 800cc32:	2c01      	cmp	r4, #1
 800cc34:	d009      	beq.n	800cc4a <SX1276SetMaxPayloadLength+0x26>
}
 800cc36:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800cc38:	4b05      	ldr	r3, [pc, #20]	@ (800cc50 <SX1276SetMaxPayloadLength+0x2c>)
 800cc3a:	7fdb      	ldrb	r3, [r3, #31]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d1fa      	bne.n	800cc36 <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800cc40:	0029      	movs	r1, r5
 800cc42:	2032      	movs	r0, #50	@ 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800cc44:	f7ff fd2d 	bl	800c6a2 <SX1276Write>
}
 800cc48:	e7f5      	b.n	800cc36 <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800cc4a:	0029      	movs	r1, r5
 800cc4c:	2023      	movs	r0, #35	@ 0x23
 800cc4e:	e7f9      	b.n	800cc44 <SX1276SetMaxPayloadLength+0x20>
 800cc50:	2000134f 	.word	0x2000134f

0800cc54 <SX1276SetPublicNetwork>:
{
 800cc54:	b510      	push	{r4, lr}
 800cc56:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 800cc58:	2001      	movs	r0, #1
 800cc5a:	f7ff ffad 	bl	800cbb8 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800cc5e:	4b05      	ldr	r3, [pc, #20]	@ (800cc74 <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800cc60:	2134      	movs	r1, #52	@ 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800cc62:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 800cc64:	2c00      	cmp	r4, #0
 800cc66:	d100      	bne.n	800cc6a <SX1276SetPublicNetwork+0x16>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800cc68:	2112      	movs	r1, #18
 800cc6a:	2039      	movs	r0, #57	@ 0x39
 800cc6c:	f7ff fd19 	bl	800c6a2 <SX1276Write>
}
 800cc70:	bd10      	pop	{r4, pc}
 800cc72:	46c0      	nop			@ (mov r8, r8)
 800cc74:	200013a8 	.word	0x200013a8

0800cc78 <SX1276SetRxConfig>:
{
 800cc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc7a:	b08b      	sub	sp, #44	@ 0x2c
 800cc7c:	9305      	str	r3, [sp, #20]
 800cc7e:	ab10      	add	r3, sp, #64	@ 0x40
 800cc80:	cb80      	ldmia	r3!, {r7}
 800cc82:	0014      	movs	r4, r2
 800cc84:	881b      	ldrh	r3, [r3, #0]
 800cc86:	aa0a      	add	r2, sp, #40	@ 0x28
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	ab12      	add	r3, sp, #72	@ 0x48
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	0005      	movs	r5, r0
 800cc90:	9304      	str	r3, [sp, #16]
 800cc92:	ab13      	add	r3, sp, #76	@ 0x4c
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	000e      	movs	r6, r1
 800cc98:	9301      	str	r3, [sp, #4]
 800cc9a:	ab14      	add	r3, sp, #80	@ 0x50
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	9302      	str	r3, [sp, #8]
 800cca0:	ab15      	add	r3, sp, #84	@ 0x54
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	9303      	str	r3, [sp, #12]
 800cca6:	ab16      	add	r3, sp, #88	@ 0x58
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	9308      	str	r3, [sp, #32]
 800ccac:	ab17      	add	r3, sp, #92	@ 0x5c
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccb2:	2319      	movs	r3, #25
 800ccb4:	189b      	adds	r3, r3, r2
 800ccb6:	7fdb      	ldrb	r3, [r3, #31]
 800ccb8:	9306      	str	r3, [sp, #24]
 800ccba:	231d      	movs	r3, #29
 800ccbc:	189b      	adds	r3, r3, r2
 800ccbe:	7fdb      	ldrb	r3, [r3, #31]
 800ccc0:	9307      	str	r3, [sp, #28]
    SX1276SetModem( modem );
 800ccc2:	f7ff ff79 	bl	800cbb8 <SX1276SetModem>
    switch( modem )
 800ccc6:	2d00      	cmp	r5, #0
 800ccc8:	d003      	beq.n	800ccd2 <SX1276SetRxConfig+0x5a>
 800ccca:	2d01      	cmp	r5, #1
 800cccc:	d067      	beq.n	800cd9e <SX1276SetRxConfig+0x126>
}
 800ccce:	b00b      	add	sp, #44	@ 0x2c
 800ccd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800ccd2:	20fa      	movs	r0, #250	@ 0xfa
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800ccd4:	4d9a      	ldr	r5, [pc, #616]	@ (800cf40 <SX1276SetRxConfig+0x2c8>)
            SX1276.Settings.Fsk.FixLen = fixLen;
 800ccd6:	9a01      	ldr	r2, [sp, #4]
 800ccd8:	1ceb      	adds	r3, r5, #3
 800ccda:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800ccdc:	9a02      	ldr	r2, [sp, #8]
 800ccde:	1d2b      	adds	r3, r5, #4
 800cce0:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800cce2:	9a03      	ldr	r2, [sp, #12]
 800cce4:	1d6b      	adds	r3, r5, #5
 800cce6:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800cce8:	9a06      	ldr	r2, [sp, #24]
 800ccea:	1dab      	adds	r3, r5, #6
 800ccec:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800ccee:	9a07      	ldr	r2, [sp, #28]
 800ccf0:	1deb      	adds	r3, r5, #7
 800ccf2:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800ccf4:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800ccf6:	0140      	lsls	r0, r0, #5
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800ccf8:	842b      	strh	r3, [r5, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800ccfa:	9b04      	ldr	r3, [sp, #16]
 800ccfc:	0021      	movs	r1, r4
 800ccfe:	4358      	muls	r0, r3
            SX1276.Settings.Fsk.Datarate = datarate;
 800cd00:	61ec      	str	r4, [r5, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800cd02:	616e      	str	r6, [r5, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800cd04:	61af      	str	r7, [r5, #24]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800cd06:	f7f3 fa2f 	bl	8000168 <__udivsi3>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800cd0a:	0021      	movs	r1, r4
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800cd0c:	62e8      	str	r0, [r5, #44]	@ 0x2c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800cd0e:	488d      	ldr	r0, [pc, #564]	@ (800cf44 <SX1276SetRxConfig+0x2cc>)
 800cd10:	f7f3 fa2a 	bl	8000168 <__udivsi3>
 800cd14:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800cd16:	0a01      	lsrs	r1, r0, #8
 800cd18:	b2c9      	uxtb	r1, r1
 800cd1a:	2002      	movs	r0, #2
 800cd1c:	f7ff fcc1 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800cd20:	b2e1      	uxtb	r1, r4
 800cd22:	2003      	movs	r0, #3
 800cd24:	f7ff fcbd 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800cd28:	0030      	movs	r0, r6
 800cd2a:	f7ff fc11 	bl	800c550 <GetFskBandwidthRegValue>
 800cd2e:	0001      	movs	r1, r0
 800cd30:	2012      	movs	r0, #18
 800cd32:	f7ff fcb6 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800cd36:	0038      	movs	r0, r7
 800cd38:	f7ff fc0a 	bl	800c550 <GetFskBandwidthRegValue>
 800cd3c:	0001      	movs	r1, r0
 800cd3e:	2013      	movs	r0, #19
 800cd40:	f7ff fcaf 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800cd44:	9b00      	ldr	r3, [sp, #0]
 800cd46:	2025      	movs	r0, #37	@ 0x25
 800cd48:	0a19      	lsrs	r1, r3, #8
 800cd4a:	f7ff fcaa 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800cd4e:	466b      	mov	r3, sp
 800cd50:	2026      	movs	r0, #38	@ 0x26
 800cd52:	7819      	ldrb	r1, [r3, #0]
 800cd54:	f7ff fca5 	bl	800c6a2 <SX1276Write>
            if( fixLen == 1 )
 800cd58:	9b01      	ldr	r3, [sp, #4]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800cd5a:	9902      	ldr	r1, [sp, #8]
            if( fixLen == 1 )
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d100      	bne.n	800cd62 <SX1276SetRxConfig+0xea>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800cd60:	21ff      	movs	r1, #255	@ 0xff
 800cd62:	2032      	movs	r0, #50	@ 0x32
 800cd64:	f7ff fc9d 	bl	800c6a2 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800cd68:	2030      	movs	r0, #48	@ 0x30
 800cd6a:	f7ff fce5 	bl	800c738 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800cd6e:	2101      	movs	r1, #1
 800cd70:	9b01      	ldr	r3, [sp, #4]
 800cd72:	4059      	eors	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800cd74:	9b03      	ldr	r3, [sp, #12]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800cd76:	01c9      	lsls	r1, r1, #7
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800cd78:	011b      	lsls	r3, r3, #4
            SX1276Write( REG_PACKETCONFIG1,
 800cd7a:	4319      	orrs	r1, r3
 800cd7c:	236f      	movs	r3, #111	@ 0x6f
 800cd7e:	4018      	ands	r0, r3
 800cd80:	4301      	orrs	r1, r0
 800cd82:	b2c9      	uxtb	r1, r1
 800cd84:	2030      	movs	r0, #48	@ 0x30
 800cd86:	f7ff fc8c 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800cd8a:	2031      	movs	r0, #49	@ 0x31
 800cd8c:	f7ff fcd4 	bl	800c738 <SX1276Read>
 800cd90:	2140      	movs	r1, #64	@ 0x40
 800cd92:	4301      	orrs	r1, r0
 800cd94:	2031      	movs	r0, #49	@ 0x31
 800cd96:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800cd98:	f7ff fc83 	bl	800c6a2 <SX1276Write>
}
 800cd9c:	e797      	b.n	800ccce <SX1276SetRxConfig+0x56>
            if( bandwidth > 2 )
 800cd9e:	2e02      	cmp	r6, #2
 800cda0:	d900      	bls.n	800cda4 <SX1276SetRxConfig+0x12c>
                while( 1 );
 800cda2:	e7fe      	b.n	800cda2 <SX1276SetRxConfig+0x12a>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800cda4:	4b66      	ldr	r3, [pc, #408]	@ (800cf40 <SX1276SetRxConfig+0x2c8>)
            SX1276.Settings.LoRa.Coderate = coderate;
 800cda6:	9905      	ldr	r1, [sp, #20]
 800cda8:	001a      	movs	r2, r3
 800cdaa:	324d      	adds	r2, #77	@ 0x4d
 800cdac:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800cdae:	001a      	movs	r2, r3
 800cdb0:	9900      	ldr	r1, [sp, #0]
 800cdb2:	324e      	adds	r2, #78	@ 0x4e
 800cdb4:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800cdb6:	001a      	movs	r2, r3
 800cdb8:	9901      	ldr	r1, [sp, #4]
 800cdba:	3250      	adds	r2, #80	@ 0x50
 800cdbc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800cdbe:	001a      	movs	r2, r3
 800cdc0:	9902      	ldr	r1, [sp, #8]
 800cdc2:	3251      	adds	r2, #81	@ 0x51
 800cdc4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800cdc6:	001a      	movs	r2, r3
 800cdc8:	9903      	ldr	r1, [sp, #12]
 800cdca:	3252      	adds	r2, #82	@ 0x52
 800cdcc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800cdce:	001a      	movs	r2, r3
 800cdd0:	9908      	ldr	r1, [sp, #32]
 800cdd2:	3253      	adds	r2, #83	@ 0x53
 800cdd4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800cdd6:	001a      	movs	r2, r3
 800cdd8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cdda:	3254      	adds	r2, #84	@ 0x54
 800cddc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800cdde:	001a      	movs	r2, r3
 800cde0:	9906      	ldr	r1, [sp, #24]
 800cde2:	3255      	adds	r2, #85	@ 0x55
            bandwidth += 7;
 800cde4:	1df7      	adds	r7, r6, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800cde6:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800cde8:	9a07      	ldr	r2, [sp, #28]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800cdea:	645f      	str	r7, [r3, #68]	@ 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800cdec:	649c      	str	r4, [r3, #72]	@ 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800cdee:	3356      	adds	r3, #86	@ 0x56
            else if( datarate < 6 )
 800cdf0:	0025      	movs	r5, r4
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800cdf2:	701a      	strb	r2, [r3, #0]
            else if( datarate < 6 )
 800cdf4:	2c06      	cmp	r4, #6
 800cdf6:	d300      	bcc.n	800cdfa <SX1276SetRxConfig+0x182>
 800cdf8:	e082      	b.n	800cf00 <SX1276SetRxConfig+0x288>
 800cdfa:	2506      	movs	r5, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800cdfc:	2f07      	cmp	r7, #7
 800cdfe:	d000      	beq.n	800ce02 <SX1276SetRxConfig+0x18a>
 800ce00:	e083      	b.n	800cf0a <SX1276SetRxConfig+0x292>
 800ce02:	002a      	movs	r2, r5
 800ce04:	2300      	movs	r3, #0
 800ce06:	2101      	movs	r1, #1
 800ce08:	3a0b      	subs	r2, #11
 800ce0a:	4291      	cmp	r1, r2
 800ce0c:	415b      	adcs	r3, r3
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	4a4d      	ldr	r2, [pc, #308]	@ (800cf48 <SX1276SetRxConfig+0x2d0>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800ce12:	201d      	movs	r0, #29
 800ce14:	7013      	strb	r3, [r2, #0]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800ce16:	9206      	str	r2, [sp, #24]
 800ce18:	4e49      	ldr	r6, [pc, #292]	@ (800cf40 <SX1276SetRxConfig+0x2c8>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800ce1a:	f7ff fc8d 	bl	800c738 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800ce1e:	9b05      	ldr	r3, [sp, #20]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800ce20:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800ce22:	0059      	lsls	r1, r3, #1
 800ce24:	9b01      	ldr	r3, [sp, #4]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800ce26:	012d      	lsls	r5, r5, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800ce28:	4319      	orrs	r1, r3
 800ce2a:	013b      	lsls	r3, r7, #4
 800ce2c:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800ce2e:	b2c9      	uxtb	r1, r1
 800ce30:	f7ff fc37 	bl	800c6a2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800ce34:	201e      	movs	r0, #30
 800ce36:	f7ff fc7f 	bl	800c738 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800ce3a:	9b04      	ldr	r3, [sp, #16]
 800ce3c:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800ce3e:	9b03      	ldr	r3, [sp, #12]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800ce40:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800ce42:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800ce44:	4319      	orrs	r1, r3
 800ce46:	4329      	orrs	r1, r5
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800ce48:	2508      	movs	r5, #8
 800ce4a:	4028      	ands	r0, r5
            SX1276Write( REG_LR_MODEMCONFIG2,
 800ce4c:	4301      	orrs	r1, r0
 800ce4e:	b2c9      	uxtb	r1, r1
 800ce50:	201e      	movs	r0, #30
 800ce52:	f7ff fc26 	bl	800c6a2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800ce56:	2026      	movs	r0, #38	@ 0x26
 800ce58:	f7ff fc6e 	bl	800c738 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG3,
 800ce5c:	9b06      	ldr	r3, [sp, #24]
 800ce5e:	43a8      	bics	r0, r5
 800ce60:	7819      	ldrb	r1, [r3, #0]
 800ce62:	00c9      	lsls	r1, r1, #3
 800ce64:	4301      	orrs	r1, r0
 800ce66:	b2c9      	uxtb	r1, r1
 800ce68:	2026      	movs	r0, #38	@ 0x26
 800ce6a:	f7ff fc1a 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800ce6e:	466b      	mov	r3, sp
 800ce70:	201f      	movs	r0, #31
 800ce72:	7c19      	ldrb	r1, [r3, #16]
 800ce74:	f7ff fc15 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800ce78:	9b00      	ldr	r3, [sp, #0]
 800ce7a:	2020      	movs	r0, #32
 800ce7c:	0a19      	lsrs	r1, r3, #8
 800ce7e:	f7ff fc10 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800ce82:	466b      	mov	r3, sp
 800ce84:	2021      	movs	r0, #33	@ 0x21
 800ce86:	7819      	ldrb	r1, [r3, #0]
 800ce88:	f7ff fc0b 	bl	800c6a2 <SX1276Write>
            if( fixLen == 1 )
 800ce8c:	9b01      	ldr	r3, [sp, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d003      	beq.n	800ce9a <SX1276SetRxConfig+0x222>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800ce92:	2022      	movs	r0, #34	@ 0x22
 800ce94:	9902      	ldr	r1, [sp, #8]
 800ce96:	f7ff fc04 	bl	800c6a2 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800ce9a:	0033      	movs	r3, r6
 800ce9c:	3353      	adds	r3, #83	@ 0x53
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00f      	beq.n	800cec4 <SX1276SetRxConfig+0x24c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800cea4:	2044      	movs	r0, #68	@ 0x44
 800cea6:	f7ff fc47 	bl	800c738 <SX1276Read>
 800ceaa:	2180      	movs	r1, #128	@ 0x80
 800ceac:	4249      	negs	r1, r1
 800ceae:	4301      	orrs	r1, r0
 800ceb0:	b2c9      	uxtb	r1, r1
 800ceb2:	2044      	movs	r0, #68	@ 0x44
 800ceb4:	f7ff fbf5 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800ceb8:	0033      	movs	r3, r6
 800ceba:	3354      	adds	r3, #84	@ 0x54
 800cebc:	2024      	movs	r0, #36	@ 0x24
 800cebe:	7819      	ldrb	r1, [r3, #0]
 800cec0:	f7ff fbef 	bl	800c6a2 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800cec4:	2f09      	cmp	r7, #9
 800cec6:	d12d      	bne.n	800cf24 <SX1276SetRxConfig+0x2ac>
 800cec8:	4b20      	ldr	r3, [pc, #128]	@ (800cf4c <SX1276SetRxConfig+0x2d4>)
 800ceca:	68b2      	ldr	r2, [r6, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800cecc:	2102      	movs	r1, #2
 800cece:	2036      	movs	r0, #54	@ 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d923      	bls.n	800cf1c <SX1276SetRxConfig+0x2a4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800ced4:	f7ff fbe5 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 800ced8:	2164      	movs	r1, #100	@ 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800ceda:	203a      	movs	r0, #58	@ 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800cedc:	f7ff fbe1 	bl	800c6a2 <SX1276Write>
            if( datarate == 6 )
 800cee0:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800cee2:	2031      	movs	r0, #49	@ 0x31
            if( datarate == 6 )
 800cee4:	2c06      	cmp	r4, #6
 800cee6:	d820      	bhi.n	800cf2a <SX1276SetRxConfig+0x2b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800cee8:	f7ff fc26 	bl	800c738 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800ceec:	2105      	movs	r1, #5
 800ceee:	43a8      	bics	r0, r5
 800cef0:	4301      	orrs	r1, r0
 800cef2:	b2c9      	uxtb	r1, r1
 800cef4:	2031      	movs	r0, #49	@ 0x31
 800cef6:	f7ff fbd4 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800cefa:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800cefc:	2037      	movs	r0, #55	@ 0x37
 800cefe:	e74b      	b.n	800cd98 <SX1276SetRxConfig+0x120>
 800cf00:	2c0c      	cmp	r4, #12
 800cf02:	d800      	bhi.n	800cf06 <SX1276SetRxConfig+0x28e>
 800cf04:	e77a      	b.n	800cdfc <SX1276SetRxConfig+0x184>
 800cf06:	250c      	movs	r5, #12
 800cf08:	e778      	b.n	800cdfc <SX1276SetRxConfig+0x184>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800cf0a:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800cf0c:	2f08      	cmp	r7, #8
 800cf0e:	d000      	beq.n	800cf12 <SX1276SetRxConfig+0x29a>
 800cf10:	e77e      	b.n	800ce10 <SX1276SetRxConfig+0x198>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800cf12:	330b      	adds	r3, #11
 800cf14:	42a3      	cmp	r3, r4
 800cf16:	419b      	sbcs	r3, r3
 800cf18:	425b      	negs	r3, r3
 800cf1a:	e779      	b.n	800ce10 <SX1276SetRxConfig+0x198>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800cf1c:	f7ff fbc1 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800cf20:	217f      	movs	r1, #127	@ 0x7f
 800cf22:	e7da      	b.n	800ceda <SX1276SetRxConfig+0x262>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800cf24:	2103      	movs	r1, #3
 800cf26:	2036      	movs	r0, #54	@ 0x36
 800cf28:	e7d8      	b.n	800cedc <SX1276SetRxConfig+0x264>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800cf2a:	f7ff fc05 	bl	800c738 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800cf2e:	2103      	movs	r1, #3
 800cf30:	43a8      	bics	r0, r5
 800cf32:	4301      	orrs	r1, r0
 800cf34:	b2c9      	uxtb	r1, r1
 800cf36:	2031      	movs	r0, #49	@ 0x31
 800cf38:	f7ff fbb3 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800cf3c:	210a      	movs	r1, #10
 800cf3e:	e7dd      	b.n	800cefc <SX1276SetRxConfig+0x284>
 800cf40:	2000134c 	.word	0x2000134c
 800cf44:	01e84800 	.word	0x01e84800
 800cf48:	20001398 	.word	0x20001398
 800cf4c:	1f4add40 	.word	0x1f4add40

0800cf50 <SX1276SetSleep>:
{
 800cf50:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800cf52:	4c0a      	ldr	r4, [pc, #40]	@ (800cf7c <SX1276SetSleep+0x2c>)
 800cf54:	480a      	ldr	r0, [pc, #40]	@ (800cf80 <SX1276SetSleep+0x30>)
 800cf56:	f001 f973 	bl	800e240 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800cf5a:	0020      	movs	r0, r4
 800cf5c:	301c      	adds	r0, #28
 800cf5e:	f001 f96f 	bl	800e240 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800cf62:	4808      	ldr	r0, [pc, #32]	@ (800cf84 <SX1276SetSleep+0x34>)
 800cf64:	4c08      	ldr	r4, [pc, #32]	@ (800cf88 <SX1276SetSleep+0x38>)
 800cf66:	f001 f96b 	bl	800e240 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800cf6a:	f7ff fe15 	bl	800cb98 <SX1276SetOpMode.constprop.0>
    Sx_Board_SetXO( RESET );
 800cf6e:	2000      	movs	r0, #0
 800cf70:	f7f5 fe72 	bl	8002c58 <CMWX1ZZABZ0XX_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 800cf74:	2300      	movs	r3, #0
 800cf76:	7123      	strb	r3, [r4, #4]
}
 800cf78:	bd10      	pop	{r4, pc}
 800cf7a:	46c0      	nop			@ (mov r8, r8)
 800cf7c:	200013cc 	.word	0x200013cc
 800cf80:	200013d0 	.word	0x200013d0
 800cf84:	200013b4 	.word	0x200013b4
 800cf88:	2000134c 	.word	0x2000134c

0800cf8c <SX1276IsChannelFree>:
{
 800cf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf8e:	0007      	movs	r7, r0
 800cf90:	000c      	movs	r4, r1
 800cf92:	0016      	movs	r6, r2
 800cf94:	001d      	movs	r5, r3
    SX1276SetSleep( );
 800cf96:	f7ff ffdb 	bl	800cf50 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800cf9a:	2000      	movs	r0, #0
 800cf9c:	f7ff fe0c 	bl	800cbb8 <SX1276SetModem>
    SX1276SetChannel( freq );
 800cfa0:	0038      	movs	r0, r7
 800cfa2:	f7ff fb87 	bl	800c6b4 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800cfa6:	0020      	movs	r0, r4
 800cfa8:	f7ff fad2 	bl	800c550 <GetFskBandwidthRegValue>
 800cfac:	0004      	movs	r4, r0
 800cfae:	0001      	movs	r1, r0
 800cfb0:	2012      	movs	r0, #18
 800cfb2:	f7ff fb76 	bl	800c6a2 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800cfb6:	0021      	movs	r1, r4
 800cfb8:	2013      	movs	r0, #19
 800cfba:	f7ff fb72 	bl	800c6a2 <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 800cfbe:	2005      	movs	r0, #5
 800cfc0:	f7ff fc5c 	bl	800c87c <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 800cfc4:	2001      	movs	r0, #1
 800cfc6:	f7f5 fbd0 	bl	800276a <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800cfca:	f001 f8f7 	bl	800e1bc <UTIL_TIMER_GetCurrentTime>
 800cfce:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800cfd0:	0020      	movs	r0, r4
 800cfd2:	f001 f8fd 	bl	800e1d0 <UTIL_TIMER_GetElapsedTime>
 800cfd6:	42a8      	cmp	r0, r5
 800cfd8:	d304      	bcc.n	800cfe4 <SX1276IsChannelFree+0x58>
    bool status = true;
 800cfda:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800cfdc:	f7ff ffb8 	bl	800cf50 <SX1276SetSleep>
}
 800cfe0:	0020      	movs	r0, r4
 800cfe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	f7ff fdb5 	bl	800cb54 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800cfea:	42b0      	cmp	r0, r6
 800cfec:	ddf0      	ble.n	800cfd0 <SX1276IsChannelFree+0x44>
            status = false;
 800cfee:	2400      	movs	r4, #0
 800cff0:	e7f4      	b.n	800cfdc <SX1276IsChannelFree+0x50>

0800cff2 <SX1276Random>:
{
 800cff2:	b570      	push	{r4, r5, r6, lr}
 800cff4:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 800cff6:	2001      	movs	r0, #1
 800cff8:	f7ff fdde 	bl	800cbb8 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800cffc:	21ff      	movs	r1, #255	@ 0xff
 800cffe:	2011      	movs	r0, #17
 800d000:	f7ff fb4f 	bl	800c6a2 <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 800d004:	2005      	movs	r0, #5
 800d006:	f7ff fc39 	bl	800c87c <SX1276SetOpMode.part.0>
    uint32_t rnd = 0;
 800d00a:	0025      	movs	r5, r4
        RADIO_DELAY_MS( 1 );
 800d00c:	2601      	movs	r6, #1
 800d00e:	0030      	movs	r0, r6
 800d010:	f7f5 fbab 	bl	800276a <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800d014:	202c      	movs	r0, #44	@ 0x2c
 800d016:	f7ff fb8f 	bl	800c738 <SX1276Read>
 800d01a:	4030      	ands	r0, r6
 800d01c:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
 800d01e:	3401      	adds	r4, #1
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800d020:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800d022:	2c20      	cmp	r4, #32
 800d024:	d1f3      	bne.n	800d00e <SX1276Random+0x1c>
    SX1276SetSleep( );
 800d026:	f7ff ff93 	bl	800cf50 <SX1276SetSleep>
}
 800d02a:	0028      	movs	r0, r5
 800d02c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d030 <SX1276SetTxConfig>:
{
 800d030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d032:	b08d      	sub	sp, #52	@ 0x34
 800d034:	9306      	str	r3, [sp, #24]
 800d036:	ab12      	add	r3, sp, #72	@ 0x48
 800d038:	cb40      	ldmia	r3!, {r6}
 800d03a:	9002      	str	r0, [sp, #8]
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	9205      	str	r2, [sp, #20]
 800d040:	9307      	str	r3, [sp, #28]
 800d042:	ab14      	add	r3, sp, #80	@ 0x50
 800d044:	881b      	ldrh	r3, [r3, #0]
 800d046:	000c      	movs	r4, r1
 800d048:	9301      	str	r3, [sp, #4]
 800d04a:	ab15      	add	r3, sp, #84	@ 0x54
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	9303      	str	r3, [sp, #12]
 800d050:	ab16      	add	r3, sp, #88	@ 0x58
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	9304      	str	r3, [sp, #16]
 800d056:	ab17      	add	r3, sp, #92	@ 0x5c
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	9308      	str	r3, [sp, #32]
 800d05c:	ab18      	add	r3, sp, #96	@ 0x60
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	930a      	str	r3, [sp, #40]	@ 0x28
 800d062:	ab19      	add	r3, sp, #100	@ 0x64
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	9309      	str	r3, [sp, #36]	@ 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 800d068:	4bb6      	ldr	r3, [pc, #728]	@ (800d344 <SX1276SetTxConfig+0x314>)
 800d06a:	791d      	ldrb	r5, [r3, #4]
 800d06c:	2d01      	cmp	r5, #1
 800d06e:	d106      	bne.n	800d07e <SX1276SetTxConfig+0x4e>
 800d070:	2800      	cmp	r0, #0
 800d072:	d104      	bne.n	800d07e <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 800d074:	f7ff ff6c 	bl	800cf50 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 800d078:	0028      	movs	r0, r5
 800d07a:	f7f5 fb76 	bl	800276a <HAL_Delay>
    SX1276SetModem( modem );
 800d07e:	9802      	ldr	r0, [sp, #8]
 800d080:	f7ff fd9a 	bl	800cbb8 <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 800d084:	2009      	movs	r0, #9
 800d086:	f7ff fb57 	bl	800c738 <SX1276Read>
 800d08a:	900b      	str	r0, [sp, #44]	@ 0x2c
    paDac = SX1276Read( REG_PADAC );
 800d08c:	204d      	movs	r0, #77	@ 0x4d
 800d08e:	f7ff fb53 	bl	800c738 <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800d092:	4bac      	ldr	r3, [pc, #688]	@ (800d344 <SX1276SetTxConfig+0x314>)
    paDac = SX1276Read( REG_PADAC );
 800d094:	0007      	movs	r7, r0
 800d096:	0005      	movs	r5, r0
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800d098:	6898      	ldr	r0, [r3, #8]
 800d09a:	f7f5 ff53 	bl	8002f44 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	d02b      	beq.n	800d0fa <SX1276SetTxConfig+0xca>
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	3802      	subs	r0, #2
 800d0a8:	b2c0      	uxtb	r0, r0
 800d0aa:	4282      	cmp	r2, r0
 800d0ac:	415b      	adcs	r3, r3
 800d0ae:	217f      	movs	r1, #127	@ 0x7f
 800d0b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        if (power > 14)
 800d0b2:	01db      	lsls	r3, r3, #7
 800d0b4:	400a      	ands	r2, r1
 800d0b6:	0011      	movs	r1, r2
 800d0b8:	b2db      	uxtb	r3, r3
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800d0ba:	4319      	orrs	r1, r3
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d02b      	beq.n	800d118 <SX1276SetTxConfig+0xe8>
        if( power > 17 )
 800d0c0:	230f      	movs	r3, #15
 800d0c2:	2507      	movs	r5, #7
 800d0c4:	4399      	bics	r1, r3
 800d0c6:	2c11      	cmp	r4, #17
 800d0c8:	dd1c      	ble.n	800d104 <SX1276SetTxConfig+0xd4>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800d0ca:	433d      	orrs	r5, r7
 800d0cc:	b2ed      	uxtb	r5, r5
            if( power > 20 )
 800d0ce:	1c23      	adds	r3, r4, #0
 800d0d0:	2c14      	cmp	r4, #20
 800d0d2:	dd00      	ble.n	800d0d6 <SX1276SetTxConfig+0xa6>
 800d0d4:	2314      	movs	r3, #20
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800d0d6:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800d0d8:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 800d0da:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800d0dc:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 800d0de:	f7ff fae0 	bl	800c6a2 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800d0e2:	0029      	movs	r1, r5
 800d0e4:	204d      	movs	r0, #77	@ 0x4d
 800d0e6:	f7ff fadc 	bl	800c6a2 <SX1276Write>
    switch( modem )
 800d0ea:	9b02      	ldr	r3, [sp, #8]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d022      	beq.n	800d136 <SX1276SetTxConfig+0x106>
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d100      	bne.n	800d0f6 <SX1276SetTxConfig+0xc6>
 800d0f4:	e080      	b.n	800d1f8 <SX1276SetTxConfig+0x1c8>
}
 800d0f6:	b00d      	add	sp, #52	@ 0x34
 800d0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	2c0e      	cmp	r4, #14
 800d0fe:	dcd6      	bgt.n	800d0ae <SX1276SetTxConfig+0x7e>
 800d100:	1c03      	adds	r3, r0, #0
 800d102:	e7d4      	b.n	800d0ae <SX1276SetTxConfig+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800d104:	43af      	bics	r7, r5
 800d106:	2504      	movs	r5, #4
 800d108:	433d      	orrs	r5, r7
 800d10a:	b2ed      	uxtb	r5, r5
            if( power < 2 )
 800d10c:	1c23      	adds	r3, r4, #0
 800d10e:	2c02      	cmp	r4, #2
 800d110:	da00      	bge.n	800d114 <SX1276SetTxConfig+0xe4>
 800d112:	2302      	movs	r3, #2
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800d114:	3b02      	subs	r3, #2
 800d116:	e7df      	b.n	800d0d8 <SX1276SetTxConfig+0xa8>
        if( power > 0 )
 800d118:	2c00      	cmp	r4, #0
 800d11a:	dd05      	ble.n	800d128 <SX1276SetTxConfig+0xf8>
            if( power > 15 )
 800d11c:	1c23      	adds	r3, r4, #0
 800d11e:	2c0f      	cmp	r4, #15
 800d120:	dd00      	ble.n	800d124 <SX1276SetTxConfig+0xf4>
 800d122:	230f      	movs	r3, #15
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800d124:	2170      	movs	r1, #112	@ 0x70
 800d126:	e7d7      	b.n	800d0d8 <SX1276SetTxConfig+0xa8>
            if( power < -4 )
 800d128:	1c21      	adds	r1, r4, #0
 800d12a:	1d23      	adds	r3, r4, #4
 800d12c:	da01      	bge.n	800d132 <SX1276SetTxConfig+0x102>
 800d12e:	4b86      	ldr	r3, [pc, #536]	@ (800d348 <SX1276SetTxConfig+0x318>)
 800d130:	7819      	ldrb	r1, [r3, #0]
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800d132:	3104      	adds	r1, #4
 800d134:	e7d1      	b.n	800d0da <SX1276SetTxConfig+0xaa>
            SX1276.Settings.Fsk.Power = power;
 800d136:	4b83      	ldr	r3, [pc, #524]	@ (800d344 <SX1276SetTxConfig+0x314>)
            SX1276.Settings.Fsk.Fdev = fdev;
 800d138:	9a05      	ldr	r2, [sp, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800d13a:	9903      	ldr	r1, [sp, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 800d13c:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800d13e:	9a06      	ldr	r2, [sp, #24]
            SX1276.Settings.Fsk.Power = power;
 800d140:	731c      	strb	r4, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800d142:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800d144:	9a01      	ldr	r2, [sp, #4]
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800d146:	9805      	ldr	r0, [sp, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800d148:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800d14a:	1cda      	adds	r2, r3, #3
 800d14c:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800d14e:	9904      	ldr	r1, [sp, #16]
 800d150:	1d5a      	adds	r2, r3, #5
 800d152:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800d154:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d156:	1d9a      	adds	r2, r3, #6
 800d158:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800d15a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
            SX1276.Settings.Fsk.Datarate = datarate;
 800d15c:	61de      	str	r6, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800d15e:	629a      	str	r2, [r3, #40]	@ 0x28
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800d160:	497a      	ldr	r1, [pc, #488]	@ (800d34c <SX1276SetTxConfig+0x31c>)
 800d162:	f7f3 f887 	bl	8000274 <__aeabi_uidivmod>
 800d166:	4b7a      	ldr	r3, [pc, #488]	@ (800d350 <SX1276SetTxConfig+0x320>)
 800d168:	0208      	lsls	r0, r1, #8
 800d16a:	18c0      	adds	r0, r0, r3
 800d16c:	4977      	ldr	r1, [pc, #476]	@ (800d34c <SX1276SetTxConfig+0x31c>)
 800d16e:	f7f2 fffb 	bl	8000168 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800d172:	4976      	ldr	r1, [pc, #472]	@ (800d34c <SX1276SetTxConfig+0x31c>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800d174:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800d176:	9805      	ldr	r0, [sp, #20]
 800d178:	f7f2 fff6 	bl	8000168 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800d17c:	0200      	lsls	r0, r0, #8
 800d17e:	1824      	adds	r4, r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 800d180:	0a21      	lsrs	r1, r4, #8
 800d182:	2004      	movs	r0, #4
 800d184:	b2c9      	uxtb	r1, r1
 800d186:	f7ff fa8c 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 800d18a:	b2e1      	uxtb	r1, r4
 800d18c:	2005      	movs	r0, #5
 800d18e:	f7ff fa88 	bl	800c6a2 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800d192:	0031      	movs	r1, r6
 800d194:	486f      	ldr	r0, [pc, #444]	@ (800d354 <SX1276SetTxConfig+0x324>)
 800d196:	f7f2 ffe7 	bl	8000168 <__udivsi3>
 800d19a:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800d19c:	0a01      	lsrs	r1, r0, #8
 800d19e:	b2c9      	uxtb	r1, r1
 800d1a0:	2002      	movs	r0, #2
 800d1a2:	f7ff fa7e 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800d1a6:	2003      	movs	r0, #3
 800d1a8:	b2e1      	uxtb	r1, r4
 800d1aa:	f7ff fa7a 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800d1ae:	9b01      	ldr	r3, [sp, #4]
 800d1b0:	2025      	movs	r0, #37	@ 0x25
 800d1b2:	0a19      	lsrs	r1, r3, #8
 800d1b4:	f7ff fa75 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800d1b8:	466b      	mov	r3, sp
 800d1ba:	2026      	movs	r0, #38	@ 0x26
 800d1bc:	7919      	ldrb	r1, [r3, #4]
 800d1be:	f7ff fa70 	bl	800c6a2 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800d1c2:	2030      	movs	r0, #48	@ 0x30
 800d1c4:	f7ff fab8 	bl	800c738 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800d1c8:	2101      	movs	r1, #1
 800d1ca:	9b03      	ldr	r3, [sp, #12]
 800d1cc:	4059      	eors	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800d1ce:	9b04      	ldr	r3, [sp, #16]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800d1d0:	01c9      	lsls	r1, r1, #7
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800d1d2:	011b      	lsls	r3, r3, #4
            SX1276Write( REG_PACKETCONFIG1,
 800d1d4:	4319      	orrs	r1, r3
 800d1d6:	236f      	movs	r3, #111	@ 0x6f
 800d1d8:	4018      	ands	r0, r3
 800d1da:	4301      	orrs	r1, r0
 800d1dc:	b2c9      	uxtb	r1, r1
 800d1de:	2030      	movs	r0, #48	@ 0x30
 800d1e0:	f7ff fa5f 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800d1e4:	2031      	movs	r0, #49	@ 0x31
 800d1e6:	f7ff faa7 	bl	800c738 <SX1276Read>
 800d1ea:	2140      	movs	r1, #64	@ 0x40
 800d1ec:	4301      	orrs	r1, r0
 800d1ee:	2031      	movs	r0, #49	@ 0x31
 800d1f0:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d1f2:	f7ff fa56 	bl	800c6a2 <SX1276Write>
}
 800d1f6:	e77e      	b.n	800d0f6 <SX1276SetTxConfig+0xc6>
            SX1276.Settings.LoRa.Power = power;
 800d1f8:	4a57      	ldr	r2, [pc, #348]	@ (800d358 <SX1276SetTxConfig+0x328>)
 800d1fa:	4b52      	ldr	r3, [pc, #328]	@ (800d344 <SX1276SetTxConfig+0x314>)
 800d1fc:	7014      	strb	r4, [r2, #0]
            if( bandwidth > 2 )
 800d1fe:	9a06      	ldr	r2, [sp, #24]
 800d200:	2a02      	cmp	r2, #2
 800d202:	d900      	bls.n	800d206 <SX1276SetTxConfig+0x1d6>
                while( 1 );
 800d204:	e7fe      	b.n	800d204 <SX1276SetTxConfig+0x1d4>
            SX1276.Settings.LoRa.Coderate = coderate;
 800d206:	001a      	movs	r2, r3
 800d208:	9907      	ldr	r1, [sp, #28]
 800d20a:	324d      	adds	r2, #77	@ 0x4d
 800d20c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800d20e:	001a      	movs	r2, r3
 800d210:	9901      	ldr	r1, [sp, #4]
 800d212:	324e      	adds	r2, #78	@ 0x4e
 800d214:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800d216:	001a      	movs	r2, r3
 800d218:	9903      	ldr	r1, [sp, #12]
 800d21a:	3250      	adds	r2, #80	@ 0x50
 800d21c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800d21e:	001a      	movs	r2, r3
 800d220:	9908      	ldr	r1, [sp, #32]
 800d222:	3253      	adds	r2, #83	@ 0x53
 800d224:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800d226:	001a      	movs	r2, r3
 800d228:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d22a:	3254      	adds	r2, #84	@ 0x54
 800d22c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800d22e:	001a      	movs	r2, r3
 800d230:	9904      	ldr	r1, [sp, #16]
 800d232:	3252      	adds	r2, #82	@ 0x52
 800d234:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800d236:	001a      	movs	r2, r3
 800d238:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d23a:	3255      	adds	r2, #85	@ 0x55
            bandwidth += 7;
 800d23c:	9d06      	ldr	r5, [sp, #24]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800d23e:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800d240:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
            bandwidth += 7;
 800d242:	3507      	adds	r5, #7
            else if( datarate < 6 )
 800d244:	0034      	movs	r4, r6
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800d246:	645d      	str	r5, [r3, #68]	@ 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800d248:	649e      	str	r6, [r3, #72]	@ 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800d24a:	659a      	str	r2, [r3, #88]	@ 0x58
            else if( datarate < 6 )
 800d24c:	2e06      	cmp	r6, #6
 800d24e:	d262      	bcs.n	800d316 <SX1276SetTxConfig+0x2e6>
 800d250:	2406      	movs	r4, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d252:	2d07      	cmp	r5, #7
 800d254:	d163      	bne.n	800d31e <SX1276SetTxConfig+0x2ee>
 800d256:	0022      	movs	r2, r4
 800d258:	2300      	movs	r3, #0
 800d25a:	2101      	movs	r1, #1
 800d25c:	3a0b      	subs	r2, #11
 800d25e:	4291      	cmp	r1, r2
 800d260:	415b      	adcs	r3, r3
 800d262:	b2db      	uxtb	r3, r3
 800d264:	4a3d      	ldr	r2, [pc, #244]	@ (800d35c <SX1276SetTxConfig+0x32c>)
 800d266:	4f37      	ldr	r7, [pc, #220]	@ (800d344 <SX1276SetTxConfig+0x314>)
 800d268:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800d26a:	9b08      	ldr	r3, [sp, #32]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d00f      	beq.n	800d290 <SX1276SetTxConfig+0x260>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800d270:	2044      	movs	r0, #68	@ 0x44
 800d272:	f7ff fa61 	bl	800c738 <SX1276Read>
 800d276:	2180      	movs	r1, #128	@ 0x80
 800d278:	4249      	negs	r1, r1
 800d27a:	4301      	orrs	r1, r0
 800d27c:	b2c9      	uxtb	r1, r1
 800d27e:	2044      	movs	r0, #68	@ 0x44
 800d280:	f7ff fa0f 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800d284:	003b      	movs	r3, r7
 800d286:	3354      	adds	r3, #84	@ 0x54
 800d288:	2024      	movs	r0, #36	@ 0x24
 800d28a:	7819      	ldrb	r1, [r3, #0]
 800d28c:	f7ff fa09 	bl	800c6a2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800d290:	201d      	movs	r0, #29
 800d292:	f7ff fa51 	bl	800c738 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800d296:	9b07      	ldr	r3, [sp, #28]
 800d298:	012d      	lsls	r5, r5, #4
 800d29a:	0059      	lsls	r1, r3, #1
 800d29c:	9b03      	ldr	r3, [sp, #12]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800d29e:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800d2a0:	430b      	orrs	r3, r1
 800d2a2:	0019      	movs	r1, r3
 800d2a4:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 800d2a6:	b2c9      	uxtb	r1, r1
 800d2a8:	f7ff f9fb 	bl	800c6a2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800d2ac:	201e      	movs	r0, #30
 800d2ae:	f7ff fa43 	bl	800c738 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800d2b2:	9b04      	ldr	r3, [sp, #16]
 800d2b4:	0124      	lsls	r4, r4, #4
 800d2b6:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800d2b8:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 800d2ba:	230b      	movs	r3, #11
 800d2bc:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800d2be:	4304      	orrs	r4, r0
 800d2c0:	b2e1      	uxtb	r1, r4
 800d2c2:	201e      	movs	r0, #30
 800d2c4:	f7ff f9ed 	bl	800c6a2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800d2c8:	2026      	movs	r0, #38	@ 0x26
 800d2ca:	f7ff fa35 	bl	800c738 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG3,
 800d2ce:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800d2d0:	374c      	adds	r7, #76	@ 0x4c
            SX1276Write( REG_LR_MODEMCONFIG3,
 800d2d2:	7839      	ldrb	r1, [r7, #0]
 800d2d4:	4398      	bics	r0, r3
 800d2d6:	00c9      	lsls	r1, r1, #3
 800d2d8:	4301      	orrs	r1, r0
 800d2da:	b2c9      	uxtb	r1, r1
 800d2dc:	2026      	movs	r0, #38	@ 0x26
 800d2de:	f7ff f9e0 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800d2e2:	9b01      	ldr	r3, [sp, #4]
 800d2e4:	2020      	movs	r0, #32
 800d2e6:	0a19      	lsrs	r1, r3, #8
 800d2e8:	f7ff f9db 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800d2ec:	466b      	mov	r3, sp
 800d2ee:	2021      	movs	r0, #33	@ 0x21
 800d2f0:	7919      	ldrb	r1, [r3, #4]
 800d2f2:	f7ff f9d6 	bl	800c6a2 <SX1276Write>
            if( datarate == 6 )
 800d2f6:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d2f8:	2031      	movs	r0, #49	@ 0x31
            if( datarate == 6 )
 800d2fa:	2e06      	cmp	r6, #6
 800d2fc:	d817      	bhi.n	800d32e <SX1276SetTxConfig+0x2fe>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d2fe:	f7ff fa1b 	bl	800c738 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800d302:	2105      	movs	r1, #5
 800d304:	43a0      	bics	r0, r4
 800d306:	4301      	orrs	r1, r0
 800d308:	b2c9      	uxtb	r1, r1
 800d30a:	2031      	movs	r0, #49	@ 0x31
 800d30c:	f7ff f9c9 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d310:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d312:	2037      	movs	r0, #55	@ 0x37
 800d314:	e76d      	b.n	800d1f2 <SX1276SetTxConfig+0x1c2>
 800d316:	2e0c      	cmp	r6, #12
 800d318:	d99b      	bls.n	800d252 <SX1276SetTxConfig+0x222>
 800d31a:	240c      	movs	r4, #12
 800d31c:	e799      	b.n	800d252 <SX1276SetTxConfig+0x222>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800d31e:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d320:	2d08      	cmp	r5, #8
 800d322:	d19f      	bne.n	800d264 <SX1276SetTxConfig+0x234>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800d324:	330b      	adds	r3, #11
 800d326:	42b3      	cmp	r3, r6
 800d328:	419b      	sbcs	r3, r3
 800d32a:	425b      	negs	r3, r3
 800d32c:	e79a      	b.n	800d264 <SX1276SetTxConfig+0x234>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d32e:	f7ff fa03 	bl	800c738 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800d332:	2103      	movs	r1, #3
 800d334:	43a0      	bics	r0, r4
 800d336:	4301      	orrs	r1, r0
 800d338:	b2c9      	uxtb	r1, r1
 800d33a:	2031      	movs	r0, #49	@ 0x31
 800d33c:	f7ff f9b1 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d340:	210a      	movs	r1, #10
 800d342:	e7e6      	b.n	800d312 <SX1276SetTxConfig+0x2e2>
 800d344:	2000134c 	.word	0x2000134c
 800d348:	0800f40d 	.word	0x0800f40d
 800d34c:	00003d09 	.word	0x00003d09
 800d350:	00001e84 	.word	0x00001e84
 800d354:	01e84800 	.word	0x01e84800
 800d358:	2000138c 	.word	0x2000138c
 800d35c:	20001398 	.word	0x20001398

0800d360 <SX1276SetTxContinuousWave>:
{
 800d360:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 800d362:	24fa      	movs	r4, #250	@ 0xfa
{
 800d364:	b08b      	sub	sp, #44	@ 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 800d366:	00a4      	lsls	r4, r4, #2
 800d368:	4354      	muls	r4, r2
{
 800d36a:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 800d36c:	f7ff f9a2 	bl	800c6b4 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800d370:	2305      	movs	r3, #5
 800d372:	9302      	str	r3, [sp, #8]
 800d374:	2396      	movs	r3, #150	@ 0x96
 800d376:	2000      	movs	r0, #0
 800d378:	015b      	lsls	r3, r3, #5
 800d37a:	0002      	movs	r2, r0
 800d37c:	0029      	movs	r1, r5
 800d37e:	9408      	str	r4, [sp, #32]
 800d380:	9007      	str	r0, [sp, #28]
 800d382:	9006      	str	r0, [sp, #24]
 800d384:	9005      	str	r0, [sp, #20]
 800d386:	9004      	str	r0, [sp, #16]
 800d388:	9003      	str	r0, [sp, #12]
 800d38a:	9001      	str	r0, [sp, #4]
 800d38c:	9300      	str	r3, [sp, #0]
 800d38e:	0003      	movs	r3, r0
 800d390:	f7ff fe4e 	bl	800d030 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800d394:	2031      	movs	r0, #49	@ 0x31
 800d396:	f7ff f9cf 	bl	800c738 <SX1276Read>
 800d39a:	2540      	movs	r5, #64	@ 0x40
 800d39c:	43a8      	bics	r0, r5
 800d39e:	b2c1      	uxtb	r1, r0
 800d3a0:	2031      	movs	r0, #49	@ 0x31
 800d3a2:	f7ff f97e 	bl	800c6a2 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800d3a6:	0028      	movs	r0, r5
 800d3a8:	21f0      	movs	r1, #240	@ 0xf0
 800d3aa:	f7ff f97a 	bl	800c6a2 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800d3ae:	21a0      	movs	r1, #160	@ 0xa0
 800d3b0:	2041      	movs	r0, #65	@ 0x41
 800d3b2:	f7ff f976 	bl	800c6a2 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800d3b6:	4b08      	ldr	r3, [pc, #32]	@ (800d3d8 <SX1276SetTxContinuousWave+0x78>)
 800d3b8:	0021      	movs	r1, r4
 800d3ba:	0018      	movs	r0, r3
 800d3bc:	001c      	movs	r4, r3
 800d3be:	f000 ffd1 	bl	800e364 <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 800d3c2:	2202      	movs	r2, #2
 800d3c4:	4b05      	ldr	r3, [pc, #20]	@ (800d3dc <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 800d3c6:	0020      	movs	r0, r4
    SX1276.Settings.State = RF_TX_RUNNING;
 800d3c8:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 800d3ca:	f000 ff8d 	bl	800e2e8 <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 800d3ce:	2003      	movs	r0, #3
 800d3d0:	f7ff fa54 	bl	800c87c <SX1276SetOpMode.part.0>
}
 800d3d4:	b00b      	add	sp, #44	@ 0x2c
 800d3d6:	bd30      	pop	{r4, r5, pc}
 800d3d8:	200013e8 	.word	0x200013e8
 800d3dc:	2000134c 	.word	0x2000134c

0800d3e0 <RxChainCalibration>:
{
 800d3e0:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800d3e2:	2009      	movs	r0, #9
 800d3e4:	f7ff f9a8 	bl	800c738 <SX1276Read>
 800d3e8:	0005      	movs	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d3ea:	2006      	movs	r0, #6
 800d3ec:	f7ff f9a4 	bl	800c738 <SX1276Read>
 800d3f0:	0004      	movs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800d3f2:	2007      	movs	r0, #7
 800d3f4:	f7ff f9a0 	bl	800c738 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d3f8:	0424      	lsls	r4, r4, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800d3fa:	0200      	lsls	r0, r0, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d3fc:	4304      	orrs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 800d3fe:	2008      	movs	r0, #8
 800d400:	f7ff f99a 	bl	800c738 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800d404:	4b1a      	ldr	r3, [pc, #104]	@ (800d470 <RxChainCalibration+0x90>)
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d406:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800d408:	b2c0      	uxtb	r0, r0
 800d40a:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800d40c:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800d40e:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800d410:	3080      	adds	r0, #128	@ 0x80
 800d412:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 800d414:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800d416:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 800d418:	2009      	movs	r0, #9
 800d41a:	f7ff f942 	bl	800c6a2 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800d41e:	203b      	movs	r0, #59	@ 0x3b
 800d420:	f7ff f98a 	bl	800c738 <SX1276Read>
 800d424:	2140      	movs	r1, #64	@ 0x40
 800d426:	4301      	orrs	r1, r0
 800d428:	b2c9      	uxtb	r1, r1
 800d42a:	203b      	movs	r0, #59	@ 0x3b
 800d42c:	f7ff f939 	bl	800c6a2 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800d430:	2620      	movs	r6, #32
 800d432:	203b      	movs	r0, #59	@ 0x3b
 800d434:	f7ff f980 	bl	800c738 <SX1276Read>
 800d438:	4230      	tst	r0, r6
 800d43a:	d1fa      	bne.n	800d432 <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 800d43c:	480d      	ldr	r0, [pc, #52]	@ (800d474 <RxChainCalibration+0x94>)
 800d43e:	f7ff f939 	bl	800c6b4 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800d442:	203b      	movs	r0, #59	@ 0x3b
 800d444:	f7ff f978 	bl	800c738 <SX1276Read>
 800d448:	2140      	movs	r1, #64	@ 0x40
 800d44a:	4301      	orrs	r1, r0
 800d44c:	b2c9      	uxtb	r1, r1
 800d44e:	203b      	movs	r0, #59	@ 0x3b
 800d450:	f7ff f927 	bl	800c6a2 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800d454:	2620      	movs	r6, #32
 800d456:	203b      	movs	r0, #59	@ 0x3b
 800d458:	f7ff f96e 	bl	800c738 <SX1276Read>
 800d45c:	4230      	tst	r0, r6
 800d45e:	d1fa      	bne.n	800d456 <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800d460:	0029      	movs	r1, r5
 800d462:	2009      	movs	r0, #9
 800d464:	f7ff f91d 	bl	800c6a2 <SX1276Write>
    SX1276SetChannel( initialFreq );
 800d468:	0020      	movs	r0, r4
 800d46a:	f7ff f923 	bl	800c6b4 <SX1276SetChannel>
}
 800d46e:	bd70      	pop	{r4, r5, r6, pc}
 800d470:	00003d09 	.word	0x00003d09
 800d474:	33bca100 	.word	0x33bca100

0800d478 <SX1276Init>:
{
 800d478:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 800d47a:	4e1f      	ldr	r6, [pc, #124]	@ (800d4f8 <SX1276Init+0x80>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800d47c:	2400      	movs	r4, #0
    RadioEvents = events;
 800d47e:	6030      	str	r0, [r6, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800d480:	2101      	movs	r1, #1
 800d482:	0030      	movs	r0, r6
 800d484:	4d1d      	ldr	r5, [pc, #116]	@ (800d4fc <SX1276Init+0x84>)
 800d486:	0022      	movs	r2, r4
 800d488:	002b      	movs	r3, r5
 800d48a:	9400      	str	r4, [sp, #0]
 800d48c:	4249      	negs	r1, r1
 800d48e:	301c      	adds	r0, #28
 800d490:	f000 fe78 	bl	800e184 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800d494:	2101      	movs	r1, #1
 800d496:	002b      	movs	r3, r5
 800d498:	0022      	movs	r2, r4
 800d49a:	1d30      	adds	r0, r6, #4
 800d49c:	9400      	str	r4, [sp, #0]
 800d49e:	4249      	negs	r1, r1
 800d4a0:	f000 fe70 	bl	800e184 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800d4a4:	2101      	movs	r1, #1
 800d4a6:	002b      	movs	r3, r5
 800d4a8:	0022      	movs	r2, r4
 800d4aa:	4249      	negs	r1, r1
 800d4ac:	9400      	str	r4, [sp, #0]
 800d4ae:	4814      	ldr	r0, [pc, #80]	@ (800d500 <SX1276Init+0x88>)
 800d4b0:	4e14      	ldr	r6, [pc, #80]	@ (800d504 <SX1276Init+0x8c>)
 800d4b2:	f000 fe67 	bl	800e184 <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 800d4b6:	2001      	movs	r0, #1
 800d4b8:	f7f5 fbce 	bl	8002c58 <CMWX1ZZABZ0XX_RADIO_SetXO>
    Sx_Board_Reset();
 800d4bc:	f7f5 fd6c 	bl	8002f98 <CMWX1ZZABZ0XX_RADIO_Reset>
    RxChainCalibration( );
 800d4c0:	f7ff ff8e 	bl	800d3e0 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800d4c4:	f7ff fb68 	bl	800cb98 <SX1276SetOpMode.constprop.0>
    Sx_Board_IoIrqInit( DioIrq );
 800d4c8:	480f      	ldr	r0, [pc, #60]	@ (800d508 <SX1276Init+0x90>)
 800d4ca:	f7f5 fd0d 	bl	8002ee8 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d4ce:	4c0f      	ldr	r4, [pc, #60]	@ (800d50c <SX1276Init+0x94>)
 800d4d0:	4d0f      	ldr	r5, [pc, #60]	@ (800d510 <SX1276Init+0x98>)
        SX1276SetModem( RadioRegsInit[i].Modem );
 800d4d2:	7820      	ldrb	r0, [r4, #0]
 800d4d4:	f7ff fb70 	bl	800cbb8 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d4d8:	78a1      	ldrb	r1, [r4, #2]
 800d4da:	7860      	ldrb	r0, [r4, #1]
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d4dc:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d4de:	f7ff f8e0 	bl	800c6a2 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d4e2:	42ac      	cmp	r4, r5
 800d4e4:	d1f5      	bne.n	800d4d2 <SX1276Init+0x5a>
    SX1276SetModem( MODEM_FSK );
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	f7ff fb66 	bl	800cbb8 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	7133      	strb	r3, [r6, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800d4f0:	f7f5 fbb0 	bl	8002c54 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800d4f4:	3002      	adds	r0, #2
}
 800d4f6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800d4f8:	200013cc 	.word	0x200013cc
 800d4fc:	0800d515 	.word	0x0800d515
 800d500:	200013b4 	.word	0x200013b4
 800d504:	2000134c 	.word	0x2000134c
 800d508:	200000e4 	.word	0x200000e4
 800d50c:	0800ed18 	.word	0x0800ed18
 800d510:	0800ed48 	.word	0x0800ed48

0800d514 <SX1276OnTimeoutIrq>:
{
 800d514:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800d516:	4c29      	ldr	r4, [pc, #164]	@ (800d5bc <SX1276OnTimeoutIrq+0xa8>)
 800d518:	7923      	ldrb	r3, [r4, #4]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d002      	beq.n	800d524 <SX1276OnTimeoutIrq+0x10>
 800d51e:	2b02      	cmp	r3, #2
 800d520:	d02a      	beq.n	800d578 <SX1276OnTimeoutIrq+0x64>
}
 800d522:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 800d524:	7963      	ldrb	r3, [r4, #5]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d117      	bne.n	800d55a <SX1276OnTimeoutIrq+0x46>
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800d52a:	210b      	movs	r1, #11
 800d52c:	203e      	movs	r0, #62	@ 0x3e
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800d52e:	8623      	strh	r3, [r4, #48]	@ 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800d530:	87a3      	strh	r3, [r4, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800d532:	8763      	strh	r3, [r4, #58]	@ 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800d534:	f7ff f8b5 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800d538:	2110      	movs	r1, #16
 800d53a:	203f      	movs	r0, #63	@ 0x3f
 800d53c:	f7ff f8b1 	bl	800c6a2 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800d540:	1de3      	adds	r3, r4, #7
 800d542:	7fdb      	ldrb	r3, [r3, #31]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d011      	beq.n	800d56c <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800d548:	200d      	movs	r0, #13
 800d54a:	f7ff f8f5 	bl	800c738 <SX1276Read>
 800d54e:	2140      	movs	r1, #64	@ 0x40
 800d550:	4301      	orrs	r1, r0
 800d552:	b2c9      	uxtb	r1, r1
 800d554:	200d      	movs	r0, #13
 800d556:	f7ff f8a4 	bl	800c6a2 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d55a:	4b19      	ldr	r3, [pc, #100]	@ (800d5c0 <SX1276OnTimeoutIrq+0xac>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d0df      	beq.n	800d522 <SX1276OnTimeoutIrq+0xe>
 800d562:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d564:	2b00      	cmp	r3, #0
 800d566:	d0dc      	beq.n	800d522 <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 800d568:	4798      	blx	r3
}
 800d56a:	e7da      	b.n	800d522 <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800d56c:	0020      	movs	r0, r4
 800d56e:	3068      	adds	r0, #104	@ 0x68
                SX1276.Settings.State = RF_IDLE;
 800d570:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 800d572:	f000 fe65 	bl	800e240 <UTIL_TIMER_Stop>
 800d576:	e7f0      	b.n	800d55a <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 800d578:	f7f5 fd0e 	bl	8002f98 <CMWX1ZZABZ0XX_RADIO_Reset>
        RxChainCalibration( );
 800d57c:	f7ff ff30 	bl	800d3e0 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800d580:	f7ff fb0a 	bl	800cb98 <SX1276SetOpMode.constprop.0>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d584:	4d0f      	ldr	r5, [pc, #60]	@ (800d5c4 <SX1276OnTimeoutIrq+0xb0>)
 800d586:	4e10      	ldr	r6, [pc, #64]	@ (800d5c8 <SX1276OnTimeoutIrq+0xb4>)
            SX1276SetModem( RadioRegsInit[i].Modem );
 800d588:	7828      	ldrb	r0, [r5, #0]
 800d58a:	f7ff fb15 	bl	800cbb8 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d58e:	78a9      	ldrb	r1, [r5, #2]
 800d590:	7868      	ldrb	r0, [r5, #1]
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d592:	3503      	adds	r5, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d594:	f7ff f885 	bl	800c6a2 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d598:	42b5      	cmp	r5, r6
 800d59a:	d1f5      	bne.n	800d588 <SX1276OnTimeoutIrq+0x74>
        SX1276SetModem( MODEM_FSK );
 800d59c:	2000      	movs	r0, #0
 800d59e:	f7ff fb0b 	bl	800cbb8 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800d5a2:	0023      	movs	r3, r4
 800d5a4:	335c      	adds	r3, #92	@ 0x5c
 800d5a6:	7818      	ldrb	r0, [r3, #0]
 800d5a8:	f7ff fb54 	bl	800cc54 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d5b0:	4b03      	ldr	r3, [pc, #12]	@ (800d5c0 <SX1276OnTimeoutIrq+0xac>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d0b4      	beq.n	800d522 <SX1276OnTimeoutIrq+0xe>
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	e7d3      	b.n	800d564 <SX1276OnTimeoutIrq+0x50>
 800d5bc:	2000134c 	.word	0x2000134c
 800d5c0:	200013cc 	.word	0x200013cc
 800d5c4:	0800ed18 	.word	0x0800ed18
 800d5c8:	0800ed48 	.word	0x0800ed48

0800d5cc <SX1276OnDio0Irq>:
{
 800d5cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    volatile uint8_t irqFlags = 0;
 800d5ce:	466b      	mov	r3, sp
 800d5d0:	1dde      	adds	r6, r3, #7
 800d5d2:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 800d5d4:	4c8c      	ldr	r4, [pc, #560]	@ (800d808 <SX1276OnDio0Irq+0x23c>)
    volatile uint8_t irqFlags = 0;
 800d5d6:	7033      	strb	r3, [r6, #0]
    switch( SX1276.Settings.State )
 800d5d8:	7923      	ldrb	r3, [r4, #4]
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d003      	beq.n	800d5e6 <SX1276OnDio0Irq+0x1a>
 800d5de:	2b02      	cmp	r3, #2
 800d5e0:	d100      	bne.n	800d5e4 <SX1276OnDio0Irq+0x18>
 800d5e2:	e0fd      	b.n	800d7e0 <SX1276OnDio0Irq+0x214>
}
 800d5e4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800d5e6:	7963      	ldrb	r3, [r4, #5]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d023      	beq.n	800d634 <SX1276OnDio0Irq+0x68>
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d1f9      	bne.n	800d5e4 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800d5f0:	2140      	movs	r1, #64	@ 0x40
 800d5f2:	2012      	movs	r0, #18
 800d5f4:	f7ff f855 	bl	800c6a2 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800d5f8:	2012      	movs	r0, #18
 800d5fa:	f7ff f89d 	bl	800c738 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800d5fe:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800d600:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800d602:	7833      	ldrb	r3, [r6, #0]
 800d604:	4d81      	ldr	r5, [pc, #516]	@ (800d80c <SX1276OnDio0Irq+0x240>)
 800d606:	420b      	tst	r3, r1
 800d608:	d100      	bne.n	800d60c <SX1276OnDio0Irq+0x40>
 800d60a:	e08a      	b.n	800d722 <SX1276OnDio0Irq+0x156>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800d60c:	2012      	movs	r0, #18
 800d60e:	f7ff f848 	bl	800c6a2 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800d612:	0023      	movs	r3, r4
 800d614:	3356      	adds	r3, #86	@ 0x56
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d100      	bne.n	800d61e <SX1276OnDio0Irq+0x52>
                            SX1276.Settings.State = RF_IDLE;
 800d61c:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 800d61e:	1d28      	adds	r0, r5, #4
 800d620:	f000 fe0e 	bl	800e240 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800d624:	682b      	ldr	r3, [r5, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d0dc      	beq.n	800d5e4 <SX1276OnDio0Irq+0x18>
 800d62a:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d0d9      	beq.n	800d5e4 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 800d630:	4798      	blx	r3
}
 800d632:	e7d7      	b.n	800d5e4 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800d634:	1d63      	adds	r3, r4, #5
 800d636:	7fdb      	ldrb	r3, [r3, #31]
 800d638:	4d74      	ldr	r5, [pc, #464]	@ (800d80c <SX1276OnDio0Irq+0x240>)
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d030      	beq.n	800d6a0 <SX1276OnDio0Irq+0xd4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800d63e:	203f      	movs	r0, #63	@ 0x3f
 800d640:	f7ff f87a 	bl	800c738 <SX1276Read>
 800d644:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800d646:	7833      	ldrb	r3, [r6, #0]
 800d648:	079b      	lsls	r3, r3, #30
 800d64a:	d429      	bmi.n	800d6a0 <SX1276OnDio0Irq+0xd4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800d64c:	210b      	movs	r1, #11
 800d64e:	203e      	movs	r0, #62	@ 0x3e
 800d650:	f7ff f827 	bl	800c6a2 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800d654:	2110      	movs	r1, #16
 800d656:	203f      	movs	r0, #63	@ 0x3f
 800d658:	f7ff f823 	bl	800c6a2 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800d65c:	1d28      	adds	r0, r5, #4
 800d65e:	f000 fdef 	bl	800e240 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800d662:	1de3      	adds	r3, r4, #7
 800d664:	7fde      	ldrb	r6, [r3, #31]
 800d666:	2e00      	cmp	r6, #0
 800d668:	d110      	bne.n	800d68c <SX1276OnDio0Irq+0xc0>
                            TimerStop( &RxTimeoutSyncWord );
 800d66a:	0020      	movs	r0, r4
 800d66c:	3068      	adds	r0, #104	@ 0x68
 800d66e:	f000 fde7 	bl	800e240 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 800d672:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d003      	beq.n	800d682 <SX1276OnDio0Irq+0xb6>
 800d67a:	691b      	ldr	r3, [r3, #16]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d000      	beq.n	800d682 <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 800d680:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800d682:	2300      	movs	r3, #0
 800d684:	8623      	strh	r3, [r4, #48]	@ 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800d686:	87a3      	strh	r3, [r4, #60]	@ 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800d688:	8763      	strh	r3, [r4, #58]	@ 0x3a
                        break;
 800d68a:	e7ab      	b.n	800d5e4 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800d68c:	200d      	movs	r0, #13
 800d68e:	f7ff f853 	bl	800c738 <SX1276Read>
 800d692:	2140      	movs	r1, #64	@ 0x40
 800d694:	4301      	orrs	r1, r0
 800d696:	b2c9      	uxtb	r1, r1
 800d698:	200d      	movs	r0, #13
 800d69a:	f7ff f802 	bl	800c6a2 <SX1276Write>
 800d69e:	e7e9      	b.n	800d674 <SX1276OnDio0Irq+0xa8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800d6a0:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 800d6a2:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 800d6a4:	0013      	movs	r3, r2
 800d6a6:	4e5a      	ldr	r6, [pc, #360]	@ (800d810 <SX1276OnDio0Irq+0x244>)
 800d6a8:	430b      	orrs	r3, r1
 800d6aa:	d10a      	bne.n	800d6c2 <SX1276OnDio0Irq+0xf6>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800d6ac:	1ce3      	adds	r3, r4, #3
 800d6ae:	7fd8      	ldrb	r0, [r3, #31]
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	d127      	bne.n	800d704 <SX1276OnDio0Irq+0x138>
    SX1276ReadBuffer( 0, buffer, size );
 800d6b4:	0021      	movs	r1, r4
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	313a      	adds	r1, #58	@ 0x3a
 800d6ba:	f7ff f825 	bl	800c708 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d6be:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 800d6c0:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d6c2:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d6c8:	1871      	adds	r1, r6, r1
    SX1276ReadBuffer( 0, buffer, size );
 800d6ca:	f7ff f81d 	bl	800c708 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d6ce:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
                TimerStop( &RxTimeoutTimer );
 800d6d0:	1d28      	adds	r0, r5, #4
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d6d2:	87a3      	strh	r3, [r4, #60]	@ 0x3c
                TimerStop( &RxTimeoutTimer );
 800d6d4:	f000 fdb4 	bl	800e240 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800d6d8:	1de3      	adds	r3, r4, #7
 800d6da:	7fdb      	ldrb	r3, [r3, #31]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d116      	bne.n	800d70e <SX1276OnDio0Irq+0x142>
                    TimerStop( &RxTimeoutSyncWord );
 800d6e0:	0020      	movs	r0, r4
 800d6e2:	3068      	adds	r0, #104	@ 0x68
                    SX1276.Settings.State = RF_IDLE;
 800d6e4:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 800d6e6:	f000 fdab 	bl	800e240 <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800d6ea:	682b      	ldr	r3, [r5, #0]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d0c8      	beq.n	800d682 <SX1276OnDio0Irq+0xb6>
 800d6f0:	689d      	ldr	r5, [r3, #8]
 800d6f2:	2d00      	cmp	r5, #0
 800d6f4:	d0c5      	beq.n	800d682 <SX1276OnDio0Irq+0xb6>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800d6f6:	2232      	movs	r2, #50	@ 0x32
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	0030      	movs	r0, r6
 800d6fc:	56a2      	ldrsb	r2, [r4, r2]
 800d6fe:	8f61      	ldrh	r1, [r4, #58]	@ 0x3a
 800d700:	47a8      	blx	r5
 800d702:	e7be      	b.n	800d682 <SX1276OnDio0Irq+0xb6>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800d704:	2032      	movs	r0, #50	@ 0x32
 800d706:	f7ff f817 	bl	800c738 <SX1276Read>
 800d70a:	8760      	strh	r0, [r4, #58]	@ 0x3a
 800d70c:	e7d7      	b.n	800d6be <SX1276OnDio0Irq+0xf2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800d70e:	200d      	movs	r0, #13
 800d710:	f7ff f812 	bl	800c738 <SX1276Read>
 800d714:	2140      	movs	r1, #64	@ 0x40
 800d716:	4301      	orrs	r1, r0
 800d718:	b2c9      	uxtb	r1, r1
 800d71a:	200d      	movs	r0, #13
 800d71c:	f7fe ffc1 	bl	800c6a2 <SX1276Write>
 800d720:	e7e3      	b.n	800d6ea <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 800d722:	2019      	movs	r0, #25
 800d724:	f7ff f808 	bl	800c738 <SX1276Read>
 800d728:	0026      	movs	r6, r4
 800d72a:	b240      	sxtb	r0, r0
 800d72c:	3002      	adds	r0, #2
 800d72e:	1080      	asrs	r0, r0, #2
 800d730:	3660      	adds	r6, #96	@ 0x60
 800d732:	7030      	strb	r0, [r6, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800d734:	201a      	movs	r0, #26
 800d736:	f7fe ffff 	bl	800c738 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800d73a:	2200      	movs	r2, #0
 800d73c:	56b2      	ldrsb	r2, [r6, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800d73e:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800d740:	4934      	ldr	r1, [pc, #208]	@ (800d814 <SX1276OnDio0Irq+0x248>)
 800d742:	111b      	asrs	r3, r3, #4
 800d744:	2a00      	cmp	r2, #0
 800d746:	da41      	bge.n	800d7cc <SX1276OnDio0Irq+0x200>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d748:	68a6      	ldr	r6, [r4, #8]
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800d74a:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800d74c:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d74e:	428e      	cmp	r6, r1
 800d750:	d937      	bls.n	800d7c2 <SX1276OnDio0Irq+0x1f6>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800d752:	3a9d      	subs	r2, #157	@ 0x9d
 800d754:	1882      	adds	r2, r0, r2
 800d756:	189a      	adds	r2, r3, r2
 800d758:	b210      	sxth	r0, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800d75a:	0023      	movs	r3, r4
 800d75c:	3362      	adds	r3, #98	@ 0x62
 800d75e:	8018      	strh	r0, [r3, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800d760:	0026      	movs	r6, r4
 800d762:	2013      	movs	r0, #19
 800d764:	f7fe ffe8 	bl	800c738 <SX1276Read>
 800d768:	3664      	adds	r6, #100	@ 0x64
 800d76a:	7030      	strb	r0, [r6, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800d76c:	2010      	movs	r0, #16
 800d76e:	f7fe ffe3 	bl	800c738 <SX1276Read>
 800d772:	0001      	movs	r1, r0
 800d774:	200d      	movs	r0, #13
 800d776:	f7fe ff94 	bl	800c6a2 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 800d77a:	7832      	ldrb	r2, [r6, #0]
 800d77c:	4e24      	ldr	r6, [pc, #144]	@ (800d810 <SX1276OnDio0Irq+0x244>)
 800d77e:	2000      	movs	r0, #0
 800d780:	0031      	movs	r1, r6
 800d782:	f7fe ffc1 	bl	800c708 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800d786:	0023      	movs	r3, r4
 800d788:	3356      	adds	r3, #86	@ 0x56
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d100      	bne.n	800d792 <SX1276OnDio0Irq+0x1c6>
                        SX1276.Settings.State = RF_IDLE;
 800d790:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 800d792:	1d28      	adds	r0, r5, #4
 800d794:	f000 fd54 	bl	800e240 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800d798:	682b      	ldr	r3, [r5, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d100      	bne.n	800d7a0 <SX1276OnDio0Irq+0x1d4>
 800d79e:	e721      	b.n	800d5e4 <SX1276OnDio0Irq+0x18>
 800d7a0:	689d      	ldr	r5, [r3, #8]
 800d7a2:	2d00      	cmp	r5, #0
 800d7a4:	d100      	bne.n	800d7a8 <SX1276OnDio0Irq+0x1dc>
 800d7a6:	e71d      	b.n	800d5e4 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800d7a8:	0023      	movs	r3, r4
 800d7aa:	0022      	movs	r2, r4
 800d7ac:	3360      	adds	r3, #96	@ 0x60
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	3464      	adds	r4, #100	@ 0x64
 800d7b2:	3262      	adds	r2, #98	@ 0x62
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	5e52      	ldrsh	r2, [r2, r1]
 800d7b8:	0030      	movs	r0, r6
 800d7ba:	7821      	ldrb	r1, [r4, #0]
 800d7bc:	b25b      	sxtb	r3, r3
 800d7be:	47a8      	blx	r5
 800d7c0:	e710      	b.n	800d5e4 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800d7c2:	3aa4      	subs	r2, #164	@ 0xa4
 800d7c4:	1882      	adds	r2, r0, r2
 800d7c6:	189b      	adds	r3, r3, r2
 800d7c8:	b218      	sxth	r0, r3
 800d7ca:	e7c6      	b.n	800d75a <SX1276OnDio0Irq+0x18e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d7cc:	68a2      	ldr	r2, [r4, #8]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800d7ce:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d7d0:	428a      	cmp	r2, r1
 800d7d2:	d903      	bls.n	800d7dc <SX1276OnDio0Irq+0x210>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800d7d4:	389d      	subs	r0, #157	@ 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800d7d6:	1818      	adds	r0, r3, r0
 800d7d8:	b200      	sxth	r0, r0
 800d7da:	e7be      	b.n	800d75a <SX1276OnDio0Irq+0x18e>
 800d7dc:	38a4      	subs	r0, #164	@ 0xa4
 800d7de:	e7fa      	b.n	800d7d6 <SX1276OnDio0Irq+0x20a>
            TimerStop( &TxTimeoutTimer );
 800d7e0:	480d      	ldr	r0, [pc, #52]	@ (800d818 <SX1276OnDio0Irq+0x24c>)
 800d7e2:	4d0a      	ldr	r5, [pc, #40]	@ (800d80c <SX1276OnDio0Irq+0x240>)
 800d7e4:	f000 fd2c 	bl	800e240 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 800d7e8:	7963      	ldrb	r3, [r4, #5]
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d103      	bne.n	800d7f6 <SX1276OnDio0Irq+0x22a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800d7ee:	2108      	movs	r1, #8
 800d7f0:	2012      	movs	r0, #18
 800d7f2:	f7fe ff56 	bl	800c6a2 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800d7fa:	682b      	ldr	r3, [r5, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d100      	bne.n	800d802 <SX1276OnDio0Irq+0x236>
 800d800:	e6f0      	b.n	800d5e4 <SX1276OnDio0Irq+0x18>
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	e712      	b.n	800d62c <SX1276OnDio0Irq+0x60>
 800d806:	46c0      	nop			@ (mov r8, r8)
 800d808:	2000134c 	.word	0x2000134c
 800d80c:	200013cc 	.word	0x200013cc
 800d810:	20001400 	.word	0x20001400
 800d814:	1f4add40 	.word	0x1f4add40
 800d818:	200013e8 	.word	0x200013e8

0800d81c <SX1276Send>:
{
 800d81c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d81e:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 800d820:	4c5f      	ldr	r4, [pc, #380]	@ (800d9a0 <SX1276Send+0x184>)
{
 800d822:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 800d824:	7965      	ldrb	r5, [r4, #5]
{
 800d826:	1ddf      	adds	r7, r3, #7
 800d828:	0006      	movs	r6, r0
    switch( SX1276.Settings.Modem )
 800d82a:	2d00      	cmp	r5, #0
 800d82c:	d01c      	beq.n	800d868 <SX1276Send+0x4c>
 800d82e:	2d01      	cmp	r5, #1
 800d830:	d041      	beq.n	800d8b6 <SX1276Send+0x9a>
 800d832:	2600      	movs	r6, #0
    TimerStop( &RxTimeoutTimer );
 800d834:	4d5b      	ldr	r5, [pc, #364]	@ (800d9a4 <SX1276Send+0x188>)
 800d836:	485c      	ldr	r0, [pc, #368]	@ (800d9a8 <SX1276Send+0x18c>)
 800d838:	f000 fd02 	bl	800e240 <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800d83c:	0028      	movs	r0, r5
 800d83e:	0031      	movs	r1, r6
 800d840:	301c      	adds	r0, #28
 800d842:	f000 fd8f 	bl	800e364 <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 800d846:	7963      	ldrb	r3, [r4, #5]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d100      	bne.n	800d84e <SX1276Send+0x32>
 800d84c:	e072      	b.n	800d934 <SX1276Send+0x118>
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d100      	bne.n	800d854 <SX1276Send+0x38>
 800d852:	e088      	b.n	800d966 <SX1276Send+0x14a>
    TimerStart( &TxTimeoutTimer );
 800d854:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800d856:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 800d858:	301c      	adds	r0, #28
    SX1276.Settings.State = RF_TX_RUNNING;
 800d85a:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 800d85c:	f000 fd44 	bl	800e2e8 <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 800d860:	2003      	movs	r0, #3
 800d862:	f7ff f80b 	bl	800c87c <SX1276SetOpMode.part.0>
}
 800d866:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800d868:	87a5      	strh	r5, [r4, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 800d86a:	783d      	ldrb	r5, [r7, #0]
            if( SX1276.Settings.Fsk.FixLen == false )
 800d86c:	1ce3      	adds	r3, r4, #3
            SX1276.Settings.FskPacketHandler.Size = size;
 800d86e:	8765      	strh	r5, [r4, #58]	@ 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 800d870:	7fd8      	ldrb	r0, [r3, #31]
 800d872:	2800      	cmp	r0, #0
 800d874:	d11a      	bne.n	800d8ac <SX1276Send+0x90>
    SX1276WriteBuffer( 0, buffer, size );
 800d876:	2201      	movs	r2, #1
 800d878:	0039      	movs	r1, r7
 800d87a:	f7fe fefa 	bl	800c672 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 800d87e:	1e6b      	subs	r3, r5, #1
 800d880:	2b3f      	cmp	r3, #63	@ 0x3f
 800d882:	d905      	bls.n	800d890 <SX1276Send+0x74>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 800d884:	002a      	movs	r2, r5
 800d886:	0031      	movs	r1, r6
 800d888:	4848      	ldr	r0, [pc, #288]	@ (800d9ac <SX1276Send+0x190>)
 800d88a:	f000 fad5 	bl	800de38 <UTIL_MEM_cpy_8>
 800d88e:	2520      	movs	r5, #32
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800d890:	0027      	movs	r7, r4
    SX1276WriteBuffer( 0, buffer, size );
 800d892:	002a      	movs	r2, r5
 800d894:	0031      	movs	r1, r6
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800d896:	373f      	adds	r7, #63	@ 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 800d898:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800d89a:	703d      	strb	r5, [r7, #0]
    SX1276WriteBuffer( 0, buffer, size );
 800d89c:	f7fe fee9 	bl	800c672 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800d8a0:	783b      	ldrb	r3, [r7, #0]
 800d8a2:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800d8a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800d8a6:	189b      	adds	r3, r3, r2
 800d8a8:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        break;
 800d8aa:	e7c3      	b.n	800d834 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 800d8ac:	0029      	movs	r1, r5
 800d8ae:	2032      	movs	r0, #50	@ 0x32
 800d8b0:	f7fe fef7 	bl	800c6a2 <SX1276Write>
 800d8b4:	e7e3      	b.n	800d87e <SX1276Send+0x62>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800d8b6:	0023      	movs	r3, r4
 800d8b8:	3355      	adds	r3, #85	@ 0x55
 800d8ba:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800d8bc:	2033      	movs	r0, #51	@ 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d02d      	beq.n	800d91e <SX1276Send+0x102>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800d8c2:	f7fe ff39 	bl	800c738 <SX1276Read>
 800d8c6:	2341      	movs	r3, #65	@ 0x41
 800d8c8:	4398      	bics	r0, r3
 800d8ca:	b2c1      	uxtb	r1, r0
 800d8cc:	2033      	movs	r0, #51	@ 0x33
 800d8ce:	f7fe fee8 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800d8d2:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800d8d4:	203b      	movs	r0, #59	@ 0x3b
 800d8d6:	f7fe fee4 	bl	800c6a2 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800d8da:	0023      	movs	r3, r4
 800d8dc:	783d      	ldrb	r5, [r7, #0]
 800d8de:	3364      	adds	r3, #100	@ 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800d8e0:	0029      	movs	r1, r5
 800d8e2:	2022      	movs	r0, #34	@ 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800d8e4:	701d      	strb	r5, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800d8e6:	f7fe fedc 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800d8ea:	2100      	movs	r1, #0
 800d8ec:	200e      	movs	r0, #14
 800d8ee:	f7fe fed8 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	200d      	movs	r0, #13
 800d8f6:	f7fe fed4 	bl	800c6a2 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800d8fa:	2001      	movs	r0, #1
 800d8fc:	f7fe ff1c 	bl	800c738 <SX1276Read>
 800d900:	23f8      	movs	r3, #248	@ 0xf8
 800d902:	4398      	bics	r0, r3
 800d904:	d104      	bne.n	800d910 <SX1276Send+0xf4>
                SX1276SetStby( );
 800d906:	f7fe ffe5 	bl	800c8d4 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 800d90a:	2001      	movs	r0, #1
 800d90c:	f7f4 ff2d 	bl	800276a <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 800d910:	0031      	movs	r1, r6
 800d912:	002a      	movs	r2, r5
 800d914:	2000      	movs	r0, #0
 800d916:	f7fe feac 	bl	800c672 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800d91a:	6da6      	ldr	r6, [r4, #88]	@ 0x58
        break;
 800d91c:	e78a      	b.n	800d834 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800d91e:	f7fe ff0b 	bl	800c738 <SX1276Read>
 800d922:	2341      	movs	r3, #65	@ 0x41
 800d924:	4398      	bics	r0, r3
 800d926:	4305      	orrs	r5, r0
 800d928:	b2e9      	uxtb	r1, r5
 800d92a:	2033      	movs	r0, #51	@ 0x33
 800d92c:	f7fe feb9 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800d930:	211d      	movs	r1, #29
 800d932:	e7cf      	b.n	800d8d4 <SX1276Send+0xb8>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800d934:	2040      	movs	r0, #64	@ 0x40
 800d936:	f7fe feff 	bl	800c738 <SX1276Read>
 800d93a:	2103      	movs	r1, #3
 800d93c:	4001      	ands	r1, r0
 800d93e:	2040      	movs	r0, #64	@ 0x40
 800d940:	f7fe feaf 	bl	800c6a2 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800d944:	2041      	movs	r0, #65	@ 0x41
 800d946:	f7fe fef7 	bl	800c738 <SX1276Read>
 800d94a:	213e      	movs	r1, #62	@ 0x3e
 800d94c:	4001      	ands	r1, r0
 800d94e:	2041      	movs	r0, #65	@ 0x41
 800d950:	f7fe fea7 	bl	800c6a2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800d954:	2035      	movs	r0, #53	@ 0x35
 800d956:	f7fe feef 	bl	800c738 <SX1276Read>
 800d95a:	233f      	movs	r3, #63	@ 0x3f
 800d95c:	4018      	ands	r0, r3
 800d95e:	0023      	movs	r3, r4
 800d960:	333e      	adds	r3, #62	@ 0x3e
 800d962:	7018      	strb	r0, [r3, #0]
        break;
 800d964:	e776      	b.n	800d854 <SX1276Send+0x38>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800d966:	0023      	movs	r3, r4
 800d968:	3353      	adds	r3, #83	@ 0x53
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00e      	beq.n	800d98e <SX1276Send+0x172>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800d970:	21f5      	movs	r1, #245	@ 0xf5
 800d972:	2011      	movs	r0, #17
 800d974:	f7fe fe95 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800d978:	2040      	movs	r0, #64	@ 0x40
 800d97a:	f7fe fedd 	bl	800c738 <SX1276Read>
 800d97e:	2333      	movs	r3, #51	@ 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800d980:	0001      	movs	r1, r0
 800d982:	2040      	movs	r0, #64	@ 0x40
 800d984:	4019      	ands	r1, r3
 800d986:	4301      	orrs	r1, r0
 800d988:	f7fe fe8b 	bl	800c6a2 <SX1276Write>
 800d98c:	e762      	b.n	800d854 <SX1276Send+0x38>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800d98e:	21f7      	movs	r1, #247	@ 0xf7
 800d990:	2011      	movs	r0, #17
 800d992:	f7fe fe86 	bl	800c6a2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800d996:	2040      	movs	r0, #64	@ 0x40
 800d998:	f7fe fece 	bl	800c738 <SX1276Read>
 800d99c:	233f      	movs	r3, #63	@ 0x3f
 800d99e:	e7ef      	b.n	800d980 <SX1276Send+0x164>
 800d9a0:	2000134c 	.word	0x2000134c
 800d9a4:	200013cc 	.word	0x200013cc
 800d9a8:	200013d0 	.word	0x200013d0
 800d9ac:	20001400 	.word	0x20001400

0800d9b0 <SX1276OnDio1Irq>:
{
 800d9b0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800d9b2:	4c39      	ldr	r4, [pc, #228]	@ (800da98 <SX1276OnDio1Irq+0xe8>)
 800d9b4:	7925      	ldrb	r5, [r4, #4]
 800d9b6:	2d01      	cmp	r5, #1
 800d9b8:	d002      	beq.n	800d9c0 <SX1276OnDio1Irq+0x10>
 800d9ba:	2d02      	cmp	r5, #2
 800d9bc:	d050      	beq.n	800da60 <SX1276OnDio1Irq+0xb0>
}
 800d9be:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800d9c0:	7963      	ldrb	r3, [r4, #5]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d017      	beq.n	800d9f6 <SX1276OnDio1Irq+0x46>
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d1f9      	bne.n	800d9be <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 800d9ca:	f7f5 fb2b 	bl	8003024 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	d0f5      	beq.n	800d9be <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 800d9d2:	4832      	ldr	r0, [pc, #200]	@ (800da9c <SX1276OnDio1Irq+0xec>)
 800d9d4:	4d32      	ldr	r5, [pc, #200]	@ (800daa0 <SX1276OnDio1Irq+0xf0>)
 800d9d6:	f000 fc33 	bl	800e240 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800d9da:	2180      	movs	r1, #128	@ 0x80
 800d9dc:	2012      	movs	r0, #18
 800d9de:	f7fe fe60 	bl	800c6a2 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d9e6:	682b      	ldr	r3, [r5, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d0e8      	beq.n	800d9be <SX1276OnDio1Irq+0xe>
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d0e5      	beq.n	800d9be <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 800d9f2:	4798      	blx	r3
 800d9f4:	e7e3      	b.n	800d9be <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 800d9f6:	f7f5 fb15 	bl	8003024 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	d0df      	beq.n	800d9be <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800d9fe:	0020      	movs	r0, r4
 800da00:	3068      	adds	r0, #104	@ 0x68
 800da02:	f000 fc1d 	bl	800e240 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800da06:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 800da08:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 800da0a:	4313      	orrs	r3, r2
 800da0c:	d108      	bne.n	800da20 <SX1276OnDio1Irq+0x70>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800da0e:	1ce3      	adds	r3, r4, #3
 800da10:	7fd8      	ldrb	r0, [r3, #31]
 800da12:	2800      	cmp	r0, #0
 800da14:	d119      	bne.n	800da4a <SX1276OnDio1Irq+0x9a>
    SX1276ReadBuffer( 0, buffer, size );
 800da16:	0021      	movs	r1, r4
 800da18:	002a      	movs	r2, r5
 800da1a:	313a      	adds	r1, #58	@ 0x3a
 800da1c:	f7fe fe74 	bl	800c708 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800da20:	0025      	movs	r5, r4
 800da22:	353e      	adds	r5, #62	@ 0x3e
 800da24:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
 800da26:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800da28:	491e      	ldr	r1, [pc, #120]	@ (800daa4 <SX1276OnDio1Irq+0xf4>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800da2a:	782a      	ldrb	r2, [r5, #0]
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800da2c:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800da2e:	1a1b      	subs	r3, r3, r0
 800da30:	4293      	cmp	r3, r2
 800da32:	db0f      	blt.n	800da54 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800da34:	3a01      	subs	r2, #1
    SX1276ReadBuffer( 0, buffer, size );
 800da36:	b2d2      	uxtb	r2, r2
 800da38:	2000      	movs	r0, #0
 800da3a:	f7fe fe65 	bl	800c708 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 800da3e:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 800da40:	782b      	ldrb	r3, [r5, #0]
 800da42:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800da44:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800da46:	87a3      	strh	r3, [r4, #60]	@ 0x3c
}
 800da48:	e7b9      	b.n	800d9be <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800da4a:	2032      	movs	r0, #50	@ 0x32
 800da4c:	f7fe fe74 	bl	800c738 <SX1276Read>
 800da50:	8760      	strh	r0, [r4, #58]	@ 0x3a
 800da52:	e7e5      	b.n	800da20 <SX1276OnDio1Irq+0x70>
    SX1276ReadBuffer( 0, buffer, size );
 800da54:	2000      	movs	r0, #0
 800da56:	b2da      	uxtb	r2, r3
 800da58:	f7fe fe56 	bl	800c708 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800da5c:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 800da5e:	e7f2      	b.n	800da46 <SX1276OnDio1Irq+0x96>
            switch( SX1276.Settings.Modem )
 800da60:	7965      	ldrb	r5, [r4, #5]
 800da62:	2d00      	cmp	r5, #0
 800da64:	d1ab      	bne.n	800d9be <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 800da66:	f7f5 fadd 	bl	8003024 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800da6a:	2801      	cmp	r0, #1
 800da6c:	d0a7      	beq.n	800d9be <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800da6e:	0026      	movs	r6, r4
 800da70:	363f      	adds	r6, #63	@ 0x3f
 800da72:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
 800da74:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800da76:	490b      	ldr	r1, [pc, #44]	@ (800daa4 <SX1276OnDio1Irq+0xf4>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800da78:	7832      	ldrb	r2, [r6, #0]
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800da7a:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800da7c:	1a1b      	subs	r3, r3, r0
 800da7e:	4293      	cmp	r3, r2
 800da80:	dd05      	ble.n	800da8e <SX1276OnDio1Irq+0xde>
    SX1276WriteBuffer( 0, buffer, size );
 800da82:	0028      	movs	r0, r5
 800da84:	f7fe fdf5 	bl	800c672 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800da88:	7833      	ldrb	r3, [r6, #0]
 800da8a:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 800da8c:	e7da      	b.n	800da44 <SX1276OnDio1Irq+0x94>
    SX1276WriteBuffer( 0, buffer, size );
 800da8e:	0028      	movs	r0, r5
 800da90:	b2da      	uxtb	r2, r3
 800da92:	f7fe fdee 	bl	800c672 <SX1276WriteBuffer>
 800da96:	e7e1      	b.n	800da5c <SX1276OnDio1Irq+0xac>
 800da98:	2000134c 	.word	0x2000134c
 800da9c:	200013d0 	.word	0x200013d0
 800daa0:	200013cc 	.word	0x200013cc
 800daa4:	20001400 	.word	0x20001400

0800daa8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800daa8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800daaa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800daae:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800dab0:	4b16      	ldr	r3, [pc, #88]	@ (800db0c <TRACE_AllocateBufer+0x64>)
 800dab2:	8a5d      	ldrh	r5, [r3, #18]
 800dab4:	8a1a      	ldrh	r2, [r3, #16]
 800dab6:	4295      	cmp	r5, r2
 800dab8:	d114      	bne.n	800dae4 <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800daba:	2280      	movs	r2, #128	@ 0x80
 800dabc:	00d2      	lsls	r2, r2, #3
 800dabe:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800dac0:	b292      	uxth	r2, r2
 800dac2:	4290      	cmp	r0, r2
 800dac4:	d306      	bcc.n	800dad4 <TRACE_AllocateBufer+0x2c>
 800dac6:	4285      	cmp	r5, r0
 800dac8:	d916      	bls.n	800daf8 <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800daca:	2201      	movs	r2, #1
 800dacc:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800dace:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800dad0:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800dad2:	825a      	strh	r2, [r3, #18]
#endif
  }

  if(freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800dad4:	8a5a      	ldrh	r2, [r3, #18]
 800dad6:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800dad8:	1812      	adds	r2, r2, r0
 800dada:	0592      	lsls	r2, r2, #22
 800dadc:	0d92      	lsrs	r2, r2, #22
    ret = 0;
 800dade:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800dae0:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800dae2:	e00b      	b.n	800dafc <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800dae4:	4295      	cmp	r5, r2
 800dae6:	d90c      	bls.n	800db02 <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800dae8:	2680      	movs	r6, #128	@ 0x80
 800daea:	00f6      	lsls	r6, r6, #3
 800daec:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800daee:	b2b6      	uxth	r6, r6
 800daf0:	4286      	cmp	r6, r0
 800daf2:	d8ef      	bhi.n	800dad4 <TRACE_AllocateBufer+0x2c>
 800daf4:	4282      	cmp	r2, r0
 800daf6:	d8e8      	bhi.n	800daca <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 800daf8:	2001      	movs	r0, #1
 800dafa:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dafc:	f384 8810 	msr	PRIMASK, r4
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 800db00:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800db02:	1b52      	subs	r2, r2, r5
  if(freesize > Size)
 800db04:	b292      	uxth	r2, r2
 800db06:	4282      	cmp	r2, r0
 800db08:	d8e4      	bhi.n	800dad4 <TRACE_AllocateBufer+0x2c>
 800db0a:	e7f5      	b.n	800daf8 <TRACE_AllocateBufer+0x50>
 800db0c:	20001500 	.word	0x20001500

0800db10 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db10:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800db14:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800db16:	4a03      	ldr	r2, [pc, #12]	@ (800db24 <TRACE_Lock+0x14>)
 800db18:	8ad3      	ldrh	r3, [r2, #22]
 800db1a:	3301      	adds	r3, #1
 800db1c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db1e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800db22:	4770      	bx	lr
 800db24:	20001500 	.word	0x20001500

0800db28 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db28:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800db2c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800db2e:	4a03      	ldr	r2, [pc, #12]	@ (800db3c <TRACE_UnLock+0x14>)
 800db30:	8ad3      	ldrh	r3, [r2, #22]
 800db32:	3b01      	subs	r3, #1
 800db34:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db36:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800db3a:	4770      	bx	lr
 800db3c:	20001500 	.word	0x20001500

0800db40 <UTIL_ADV_TRACE_Init>:
{
 800db40:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800db42:	2218      	movs	r2, #24
 800db44:	2100      	movs	r1, #0
 800db46:	4807      	ldr	r0, [pc, #28]	@ (800db64 <UTIL_ADV_TRACE_Init+0x24>)
 800db48:	f000 f980 	bl	800de4c <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800db4c:	2280      	movs	r2, #128	@ 0x80
 800db4e:	2100      	movs	r1, #0
 800db50:	4805      	ldr	r0, [pc, #20]	@ (800db68 <UTIL_ADV_TRACE_Init+0x28>)
 800db52:	00d2      	lsls	r2, r2, #3
 800db54:	f000 f97a 	bl	800de4c <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800db58:	4b04      	ldr	r3, [pc, #16]	@ (800db6c <UTIL_ADV_TRACE_Init+0x2c>)
 800db5a:	4805      	ldr	r0, [pc, #20]	@ (800db70 <UTIL_ADV_TRACE_Init+0x30>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	4798      	blx	r3
}
 800db60:	bd10      	pop	{r4, pc}
 800db62:	46c0      	nop			@ (mov r8, r8)
 800db64:	20001500 	.word	0x20001500
 800db68:	20001718 	.word	0x20001718
 800db6c:	0800e88c 	.word	0x0800e88c
 800db70:	0800dcd9 	.word	0x0800dcd9

0800db74 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800db74:	4b01      	ldr	r3, [pc, #4]	@ (800db7c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800db76:	6058      	str	r0, [r3, #4]
}
 800db78:	4770      	bx	lr
 800db7a:	46c0      	nop			@ (mov r8, r8)
 800db7c:	20001500 	.word	0x20001500

0800db80 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800db80:	4b01      	ldr	r3, [pc, #4]	@ (800db88 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800db82:	7218      	strb	r0, [r3, #8]
}
 800db84:	4770      	bx	lr
 800db86:	46c0      	nop			@ (mov r8, r8)
 800db88:	20001500 	.word	0x20001500

0800db8c <TRACE_Send>:
{
 800db8c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db8e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800db92:	b672      	cpsid	i
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800db94:	4c1b      	ldr	r4, [pc, #108]	@ (800dc04 <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 800db96:	8ae6      	ldrh	r6, [r4, #22]
 800db98:	2e00      	cmp	r6, #0
 800db9a:	d12f      	bne.n	800dbfc <TRACE_Send+0x70>
    TRACE_Lock();
 800db9c:	f7ff ffb8 	bl	800db10 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800dba0:	8a21      	ldrh	r1, [r4, #16]
 800dba2:	8a62      	ldrh	r2, [r4, #18]
 800dba4:	4291      	cmp	r1, r2
 800dba6:	d027      	beq.n	800dbf8 <TRACE_Send+0x6c>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800dba8:	78a3      	ldrb	r3, [r4, #2]
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d110      	bne.n	800dbd0 <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800dbae:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800dbb0:	8026      	strh	r6, [r4, #0]
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800dbb2:	1a5b      	subs	r3, r3, r1
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800dbb4:	2102      	movs	r1, #2
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800dbba:	70a1      	strb	r1, [r4, #2]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d109      	bne.n	800dbd4 <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800dbc0:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800dbc2:	8223      	strh	r3, [r4, #16]
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800dbc4:	8a21      	ldrh	r1, [r4, #16]
 800dbc6:	428a      	cmp	r2, r1
 800dbc8:	d911      	bls.n	800dbee <TRACE_Send+0x62>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800dbca:	1a52      	subs	r2, r2, r1
 800dbcc:	82a2      	strh	r2, [r4, #20]
 800dbce:	e001      	b.n	800dbd4 <TRACE_Send+0x48>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d0f7      	beq.n	800dbc4 <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800dbd4:	8a26      	ldrh	r6, [r4, #16]
 800dbd6:	4b0c      	ldr	r3, [pc, #48]	@ (800dc08 <TRACE_Send+0x7c>)
 800dbd8:	18f6      	adds	r6, r6, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbda:	f385 8810 	msr	PRIMASK, r5
      UTIL_ADV_TRACE_PreSendHook();
 800dbde:	f7f4 fdb2 	bl	8002746 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800dbe2:	4b0a      	ldr	r3, [pc, #40]	@ (800dc0c <TRACE_Send+0x80>)
 800dbe4:	0030      	movs	r0, r6
 800dbe6:	8aa1      	ldrh	r1, [r4, #20]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	4798      	blx	r3
}
 800dbec:	bd70      	pop	{r4, r5, r6, pc}
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800dbee:	2380      	movs	r3, #128	@ 0x80
 800dbf0:	00db      	lsls	r3, r3, #3
 800dbf2:	1a5b      	subs	r3, r3, r1
 800dbf4:	82a3      	strh	r3, [r4, #20]
 800dbf6:	e7ed      	b.n	800dbd4 <TRACE_Send+0x48>
      TRACE_UnLock();
 800dbf8:	f7ff ff96 	bl	800db28 <TRACE_UnLock>
 800dbfc:	f385 8810 	msr	PRIMASK, r5
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800dc00:	2000      	movs	r0, #0
 800dc02:	e7f3      	b.n	800dbec <TRACE_Send+0x60>
 800dc04:	20001500 	.word	0x20001500
 800dc08:	20001718 	.word	0x20001718
 800dc0c:	0800e88c 	.word	0x0800e88c

0800dc10 <UTIL_ADV_TRACE_COND_FSend>:
{
 800dc10:	b408      	push	{r3}
 800dc12:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc14:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800dc16:	2300      	movs	r3, #0
 800dc18:	466c      	mov	r4, sp
 800dc1a:	8023      	strh	r3, [r4, #0]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800dc1c:	4b2b      	ldr	r3, [pc, #172]	@ (800dccc <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800dc1e:	7a1c      	ldrb	r4, [r3, #8]
 800dc20:	4284      	cmp	r4, r0
 800dc22:	d34f      	bcc.n	800dcc4 <UTIL_ADV_TRACE_COND_FSend+0xb4>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800dc24:	68d8      	ldr	r0, [r3, #12]
 800dc26:	4008      	ands	r0, r1
 800dc28:	4288      	cmp	r0, r1
 800dc2a:	d14d      	bne.n	800dcc8 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d004      	beq.n	800dc3c <UTIL_ADV_TRACE_COND_FSend+0x2c>
 800dc32:	2a00      	cmp	r2, #0
 800dc34:	d002      	beq.n	800dc3c <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800dc36:	4669      	mov	r1, sp
 800dc38:	a802      	add	r0, sp, #8
 800dc3a:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800dc3c:	2180      	movs	r1, #128	@ 0x80
  va_start( vaArgs, strFormat);
 800dc3e:	ab0c      	add	r3, sp, #48	@ 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800dc40:	0089      	lsls	r1, r1, #2
 800dc42:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dc44:	4822      	ldr	r0, [pc, #136]	@ (800dcd0 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
  va_start( vaArgs, strFormat);
 800dc46:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800dc48:	f000 fbea 	bl	800e420 <tiny_vsnprintf_like>
 800dc4c:	0005      	movs	r5, r0
  TRACE_Lock();
 800dc4e:	f7ff ff5f 	bl	800db10 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800dc52:	466b      	mov	r3, sp
 800dc54:	8818      	ldrh	r0, [r3, #0]
 800dc56:	1c9c      	adds	r4, r3, #2
 800dc58:	1940      	adds	r0, r0, r5
 800dc5a:	0021      	movs	r1, r4
 800dc5c:	b280      	uxth	r0, r0
 800dc5e:	f7ff ff23 	bl	800daa8 <TRACE_AllocateBufer>
 800dc62:	3001      	adds	r0, #1
 800dc64:	d029      	beq.n	800dcba <UTIL_ADV_TRACE_COND_FSend+0xaa>
    for (idx = 0u; idx < timestamp_size; idx++)
 800dc66:	466b      	mov	r3, sp
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800dc68:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 800dc6a:	881a      	ldrh	r2, [r3, #0]
 800dc6c:	2300      	movs	r3, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800dc6e:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 800dc70:	001e      	movs	r6, r3
 800dc72:	8825      	ldrh	r5, [r4, #0]
 800dc74:	4817      	ldr	r0, [pc, #92]	@ (800dcd4 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800dc76:	b29f      	uxth	r7, r3
 800dc78:	19e9      	adds	r1, r5, r7
 800dc7a:	b289      	uxth	r1, r1
 800dc7c:	42ba      	cmp	r2, r7
 800dc7e:	d814      	bhi.n	800dcaa <UTIL_ADV_TRACE_COND_FSend+0x9a>
 800dc80:	2e00      	cmp	r6, #0
 800dc82:	d001      	beq.n	800dc88 <UTIL_ADV_TRACE_COND_FSend+0x78>
 800dc84:	1952      	adds	r2, r2, r5
 800dc86:	8022      	strh	r2, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800dc88:	2180      	movs	r1, #128	@ 0x80
 800dc8a:	8823      	ldrh	r3, [r4, #0]
 800dc8c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dc8e:	0089      	lsls	r1, r1, #2
 800dc90:	18c0      	adds	r0, r0, r3
 800dc92:	9b01      	ldr	r3, [sp, #4]
 800dc94:	f000 fbc4 	bl	800e420 <tiny_vsnprintf_like>
    TRACE_UnLock();
 800dc98:	f7ff ff46 	bl	800db28 <TRACE_UnLock>
    return TRACE_Send();
 800dc9c:	f7ff ff76 	bl	800db8c <TRACE_Send>
}
 800dca0:	b006      	add	sp, #24
 800dca2:	bcf0      	pop	{r4, r5, r6, r7}
 800dca4:	bc08      	pop	{r3}
 800dca6:	b001      	add	sp, #4
 800dca8:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800dcaa:	466e      	mov	r6, sp
 800dcac:	2708      	movs	r7, #8
 800dcae:	19f6      	adds	r6, r6, r7
 800dcb0:	5cf6      	ldrb	r6, [r6, r3]
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	5446      	strb	r6, [r0, r1]
 800dcb6:	4666      	mov	r6, ip
 800dcb8:	e7dd      	b.n	800dc76 <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 800dcba:	f7ff ff35 	bl	800db28 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800dcbe:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 800dcc0:	4240      	negs	r0, r0
 800dcc2:	e7ed      	b.n	800dca0 <UTIL_ADV_TRACE_COND_FSend+0x90>
    return UTIL_ADV_TRACE_GIVEUP;
 800dcc4:	2005      	movs	r0, #5
 800dcc6:	e7fb      	b.n	800dcc0 <UTIL_ADV_TRACE_COND_FSend+0xb0>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800dcc8:	2006      	movs	r0, #6
 800dcca:	e7f9      	b.n	800dcc0 <UTIL_ADV_TRACE_COND_FSend+0xb0>
 800dccc:	20001500 	.word	0x20001500
 800dcd0:	20001518 	.word	0x20001518
 800dcd4:	20001718 	.word	0x20001718

0800dcd8 <TRACE_TxCpltCallback>:
{
 800dcd8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcda:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dcde:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800dce0:	4b1f      	ldr	r3, [pc, #124]	@ (800dd60 <TRACE_TxCpltCallback+0x88>)
 800dce2:	789a      	ldrb	r2, [r3, #2]
 800dce4:	2a02      	cmp	r2, #2
 800dce6:	d11d      	bne.n	800dd24 <TRACE_TxCpltCallback+0x4c>
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800dce8:	2200      	movs	r2, #0
 800dcea:	709a      	strb	r2, [r3, #2]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800dcec:	8a5c      	ldrh	r4, [r3, #18]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800dcee:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800dcf0:	4294      	cmp	r4, r2
 800dcf2:	d02e      	beq.n	800dd52 <TRACE_TxCpltCallback+0x7a>
 800dcf4:	8ad8      	ldrh	r0, [r3, #22]
 800dcf6:	2801      	cmp	r0, #1
 800dcf8:	d12b      	bne.n	800dd52 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800dcfa:	7898      	ldrb	r0, [r3, #2]
 800dcfc:	2801      	cmp	r0, #1
 800dcfe:	d117      	bne.n	800dd30 <TRACE_TxCpltCallback+0x58>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800dd00:	8818      	ldrh	r0, [r3, #0]
 800dd02:	1a82      	subs	r2, r0, r2
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800dd04:	2002      	movs	r0, #2
 800dd06:	7098      	strb	r0, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800dd08:	2000      	movs	r0, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800dd0a:	b292      	uxth	r2, r2
 800dd0c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800dd0e:	8018      	strh	r0, [r3, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800dd10:	4282      	cmp	r2, r0
 800dd12:	d10f      	bne.n	800dd34 <TRACE_TxCpltCallback+0x5c>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800dd14:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800dd16:	821a      	strh	r2, [r3, #16]
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800dd18:	8a18      	ldrh	r0, [r3, #16]
 800dd1a:	4284      	cmp	r4, r0
 800dd1c:	d914      	bls.n	800dd48 <TRACE_TxCpltCallback+0x70>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800dd1e:	1a24      	subs	r4, r4, r0
 800dd20:	829c      	strh	r4, [r3, #20]
 800dd22:	e007      	b.n	800dd34 <TRACE_TxCpltCallback+0x5c>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800dd24:	8a1a      	ldrh	r2, [r3, #16]
 800dd26:	8a98      	ldrh	r0, [r3, #20]
 800dd28:	1812      	adds	r2, r2, r0
 800dd2a:	0592      	lsls	r2, r2, #22
 800dd2c:	0d92      	lsrs	r2, r2, #22
 800dd2e:	e7dd      	b.n	800dcec <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800dd30:	2800      	cmp	r0, #0
 800dd32:	d0f1      	beq.n	800dd18 <TRACE_TxCpltCallback+0x40>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800dd34:	8a18      	ldrh	r0, [r3, #16]
 800dd36:	4a0b      	ldr	r2, [pc, #44]	@ (800dd64 <TRACE_TxCpltCallback+0x8c>)
 800dd38:	1880      	adds	r0, r0, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd3a:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800dd3e:	8a99      	ldrh	r1, [r3, #20]
 800dd40:	4b09      	ldr	r3, [pc, #36]	@ (800dd68 <TRACE_TxCpltCallback+0x90>)
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	4798      	blx	r3
}
 800dd46:	bd10      	pop	{r4, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800dd48:	2280      	movs	r2, #128	@ 0x80
 800dd4a:	00d2      	lsls	r2, r2, #3
 800dd4c:	1a12      	subs	r2, r2, r0
 800dd4e:	829a      	strh	r2, [r3, #20]
 800dd50:	e7f0      	b.n	800dd34 <TRACE_TxCpltCallback+0x5c>
 800dd52:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 800dd56:	f7f4 fcfc 	bl	8002752 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800dd5a:	f7ff fee5 	bl	800db28 <TRACE_UnLock>
}
 800dd5e:	e7f2      	b.n	800dd46 <TRACE_TxCpltCallback+0x6e>
 800dd60:	20001500 	.word	0x20001500
 800dd64:	20001718 	.word	0x20001718
 800dd68:	0800e88c 	.word	0x0800e88c

0800dd6c <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	4b02      	ldr	r3, [pc, #8]	@ (800dd78 <UTIL_LPM_Init+0xc>)
 800dd70:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800dd72:	605a      	str	r2, [r3, #4]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800dd74:	4770      	bx	lr
 800dd76:	46c0      	nop			@ (mov r8, r8)
 800dd78:	20001b18 	.word	0x20001b18

0800dd7c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800dd7c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd7e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dd82:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800dd84:	2900      	cmp	r1, #0
 800dd86:	d008      	beq.n	800dd9a <UTIL_LPM_SetStopMode+0x1e>
 800dd88:	2901      	cmp	r1, #1
 800dd8a:	d103      	bne.n	800dd94 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800dd8c:	4a05      	ldr	r2, [pc, #20]	@ (800dda4 <UTIL_LPM_SetStopMode+0x28>)
 800dd8e:	6813      	ldr	r3, [r2, #0]
 800dd90:	4303      	orrs	r3, r0
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800dd92:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd94:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800dd98:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 800dd9a:	4a02      	ldr	r2, [pc, #8]	@ (800dda4 <UTIL_LPM_SetStopMode+0x28>)
 800dd9c:	6813      	ldr	r3, [r2, #0]
 800dd9e:	4383      	bics	r3, r0
 800dda0:	e7f7      	b.n	800dd92 <UTIL_LPM_SetStopMode+0x16>
 800dda2:	46c0      	nop			@ (mov r8, r8)
 800dda4:	20001b18 	.word	0x20001b18

0800dda8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800dda8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddaa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ddae:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800ddb0:	2900      	cmp	r1, #0
 800ddb2:	d008      	beq.n	800ddc6 <UTIL_LPM_SetOffMode+0x1e>
 800ddb4:	2901      	cmp	r1, #1
 800ddb6:	d103      	bne.n	800ddc0 <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ddb8:	4a05      	ldr	r2, [pc, #20]	@ (800ddd0 <UTIL_LPM_SetOffMode+0x28>)
 800ddba:	6853      	ldr	r3, [r2, #4]
 800ddbc:	4303      	orrs	r3, r0
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ddbe:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddc0:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ddc4:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 800ddc6:	4a02      	ldr	r2, [pc, #8]	@ (800ddd0 <UTIL_LPM_SetOffMode+0x28>)
 800ddc8:	6853      	ldr	r3, [r2, #4]
 800ddca:	4383      	bics	r3, r0
 800ddcc:	e7f7      	b.n	800ddbe <UTIL_LPM_SetOffMode+0x16>
 800ddce:	46c0      	nop			@ (mov r8, r8)
 800ddd0:	20001b18 	.word	0x20001b18

0800ddd4 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddd4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ddd8:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 800ddda:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800dddc:	4b05      	ldr	r3, [pc, #20]	@ (800ddf4 <UTIL_LPM_GetMode+0x20>)
 800ddde:	6819      	ldr	r1, [r3, #0]
 800dde0:	4281      	cmp	r1, r0
 800dde2:	d103      	bne.n	800ddec <UTIL_LPM_GetMode+0x18>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800dde4:	6858      	ldr	r0, [r3, #4]
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 800dde6:	4243      	negs	r3, r0
 800dde8:	4158      	adcs	r0, r3
 800ddea:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddec:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 800ddf0:	4770      	bx	lr
 800ddf2:	46c0      	nop			@ (mov r8, r8)
 800ddf4:	20001b18 	.word	0x20001b18

0800ddf8 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 800ddf8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddfa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ddfe:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800de00:	4b0b      	ldr	r3, [pc, #44]	@ (800de30 <UTIL_LPM_EnterLowPower+0x38>)
 800de02:	4c0c      	ldr	r4, [pc, #48]	@ (800de34 <UTIL_LPM_EnterLowPower+0x3c>)
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	2a00      	cmp	r2, #0
 800de08:	d006      	beq.n	800de18 <UTIL_LPM_EnterLowPower+0x20>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800de0a:	6823      	ldr	r3, [r4, #0]
 800de0c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800de0e:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 800de10:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de12:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800de16:	bd70      	pop	{r4, r5, r6, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d003      	beq.n	800de26 <UTIL_LPM_EnterLowPower+0x2e>
        UTIL_PowerDriver.EnterStopMode( );
 800de1e:	68a3      	ldr	r3, [r4, #8]
 800de20:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800de22:	68e3      	ldr	r3, [r4, #12]
 800de24:	e7f4      	b.n	800de10 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 800de26:	6923      	ldr	r3, [r4, #16]
 800de28:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800de2a:	6963      	ldr	r3, [r4, #20]
 800de2c:	e7f0      	b.n	800de10 <UTIL_LPM_EnterLowPower+0x18>
 800de2e:	46c0      	nop			@ (mov r8, r8)
 800de30:	20001b18 	.word	0x20001b18
 800de34:	0800e874 	.word	0x0800e874

0800de38 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800de38:	2300      	movs	r3, #0
{
 800de3a:	b510      	push	{r4, lr}
  while( size-- )
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d100      	bne.n	800de42 <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 800de40:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 800de42:	5ccc      	ldrb	r4, [r1, r3]
 800de44:	54c4      	strb	r4, [r0, r3]
 800de46:	3301      	adds	r3, #1
 800de48:	e7f8      	b.n	800de3c <UTIL_MEM_cpy_8+0x4>
	...

0800de4c <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 800de4c:	4b04      	ldr	r3, [pc, #16]	@ (800de60 <UTIL_MEM_set_8+0x14>)
 800de4e:	3a01      	subs	r2, #1
 800de50:	b292      	uxth	r2, r2
 800de52:	429a      	cmp	r2, r3
 800de54:	d100      	bne.n	800de58 <UTIL_MEM_set_8+0xc>
  {
    *dst8++ = value;
  }
}
 800de56:	4770      	bx	lr
    *dst8++ = value;
 800de58:	7001      	strb	r1, [r0, #0]
 800de5a:	3001      	adds	r0, #1
 800de5c:	e7f7      	b.n	800de4e <UTIL_MEM_set_8+0x2>
 800de5e:	46c0      	nop			@ (mov r8, r8)
 800de60:	0000ffff 	.word	0x0000ffff

0800de64 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800de64:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de66:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800de6a:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800de6c:	4b05      	ldr	r3, [pc, #20]	@ (800de84 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800de6e:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	4302      	orrs	r2, r0
 800de74:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800de76:	185b      	adds	r3, r3, r1
 800de78:	691a      	ldr	r2, [r3, #16]
 800de7a:	4302      	orrs	r2, r0
 800de7c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de7e:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800de82:	bd10      	pop	{r4, pc}
 800de84:	20001b20 	.word	0x20001b20

0800de88 <UTIL_SEQ_PreIdle>:
__WEAK void UTIL_SEQ_Idle( void )
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
 800de88:	4770      	bx	lr

0800de8a <UTIL_SEQ_PostIdle>:
   * Unless specified by the application, there is nothing to be done
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
 800de8a:	4770      	bx	lr

0800de8c <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800de8c:	2280      	movs	r2, #128	@ 0x80
  uint8_t n = 0U;
 800de8e:	2300      	movs	r3, #0
  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800de90:	0252      	lsls	r2, r2, #9
 800de92:	4290      	cmp	r0, r2
 800de94:	d201      	bcs.n	800de9a <SEQ_BitPosition+0xe>
 800de96:	0400      	lsls	r0, r0, #16
 800de98:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800de9a:	2280      	movs	r2, #128	@ 0x80
 800de9c:	0452      	lsls	r2, r2, #17
 800de9e:	4290      	cmp	r0, r2
 800dea0:	d202      	bcs.n	800dea8 <SEQ_BitPosition+0x1c>
 800dea2:	3308      	adds	r3, #8
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800dea8:	2280      	movs	r2, #128	@ 0x80
 800deaa:	0552      	lsls	r2, r2, #21
 800deac:	4290      	cmp	r0, r2
 800deae:	d202      	bcs.n	800deb6 <SEQ_BitPosition+0x2a>
 800deb0:	3304      	adds	r3, #4
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 800deb6:	221f      	movs	r2, #31
 800deb8:	1ad3      	subs	r3, r2, r3
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800deba:	4a03      	ldr	r2, [pc, #12]	@ (800dec8 <SEQ_BitPosition+0x3c>)
 800debc:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 800debe:	5c10      	ldrb	r0, [r2, r0]
 800dec0:	1a18      	subs	r0, r3, r0
 800dec2:	b2c0      	uxtb	r0, r0
}
 800dec4:	4770      	bx	lr
 800dec6:	46c0      	nop			@ (mov r8, r8)
 800dec8:	0800ee64 	.word	0x0800ee64

0800decc <UTIL_SEQ_Run>:
{
 800decc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 800dece:	4e2f      	ldr	r6, [pc, #188]	@ (800df8c <UTIL_SEQ_Run+0xc0>)
 800ded0:	6873      	ldr	r3, [r6, #4]
  SuperMask &= Mask_bm;
 800ded2:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 800ded4:	9301      	str	r3, [sp, #4]
  SuperMask &= Mask_bm;
 800ded6:	6070      	str	r0, [r6, #4]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800ded8:	4c2d      	ldr	r4, [pc, #180]	@ (800df90 <UTIL_SEQ_Run+0xc4>)
 800deda:	6831      	ldr	r1, [r6, #0]
 800dedc:	6822      	ldr	r2, [r4, #0]
 800dede:	6873      	ldr	r3, [r6, #4]
 800dee0:	400a      	ands	r2, r1
 800dee2:	4213      	tst	r3, r2
 800dee4:	d037      	beq.n	800df56 <UTIL_SEQ_Run+0x8a>
 800dee6:	68a0      	ldr	r0, [r4, #8]
 800dee8:	6862      	ldr	r2, [r4, #4]
 800deea:	0005      	movs	r5, r0
 800deec:	4015      	ands	r5, r2
 800deee:	4210      	tst	r0, r2
 800def0:	d131      	bne.n	800df56 <UTIL_SEQ_Run+0x8a>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800def2:	6922      	ldr	r2, [r4, #16]
 800def4:	400b      	ands	r3, r1
 800def6:	0010      	movs	r0, r2
 800def8:	4018      	ands	r0, r3
 800defa:	421a      	tst	r2, r3
 800defc:	d102      	bne.n	800df04 <UTIL_SEQ_Run+0x38>
 800defe:	2501      	movs	r5, #1
 800df00:	69a0      	ldr	r0, [r4, #24]
 800df02:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800df04:	00ed      	lsls	r5, r5, #3
 800df06:	1963      	adds	r3, r4, r5
 800df08:	695a      	ldr	r2, [r3, #20]
 800df0a:	4202      	tst	r2, r0
 800df0c:	d102      	bne.n	800df14 <UTIL_SEQ_Run+0x48>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800df0e:	2201      	movs	r2, #1
 800df10:	4252      	negs	r2, r2
 800df12:	615a      	str	r2, [r3, #20]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800df14:	1965      	adds	r5, r4, r5
 800df16:	696f      	ldr	r7, [r5, #20]
 800df18:	4038      	ands	r0, r7
 800df1a:	f7ff ffb7 	bl	800de8c <SEQ_BitPosition>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800df1e:	2301      	movs	r3, #1
 800df20:	4083      	lsls	r3, r0
 800df22:	439f      	bics	r7, r3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800df24:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800df26:	616f      	str	r7, [r5, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df28:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800df2c:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800df2e:	2201      	movs	r2, #1
 800df30:	68e3      	ldr	r3, [r4, #12]
 800df32:	409a      	lsls	r2, r3
 800df34:	6823      	ldr	r3, [r4, #0]
 800df36:	4393      	bics	r3, r2
 800df38:	6023      	str	r3, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800df3a:	69a3      	ldr	r3, [r4, #24]
 800df3c:	4393      	bics	r3, r2
 800df3e:	61a3      	str	r3, [r4, #24]
 800df40:	6923      	ldr	r3, [r4, #16]
 800df42:	4393      	bics	r3, r2
 800df44:	6123      	str	r3, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df46:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800df4a:	68e2      	ldr	r2, [r4, #12]
 800df4c:	4b11      	ldr	r3, [pc, #68]	@ (800df94 <UTIL_SEQ_Run+0xc8>)
 800df4e:	0092      	lsls	r2, r2, #2
 800df50:	58d3      	ldr	r3, [r2, r3]
 800df52:	4798      	blx	r3
 800df54:	e7c0      	b.n	800ded8 <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800df56:	2301      	movs	r3, #1
 800df58:	425b      	negs	r3, r3
 800df5a:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 800df5c:	f7ff ff94 	bl	800de88 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df60:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800df64:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800df66:	6823      	ldr	r3, [r4, #0]
 800df68:	6832      	ldr	r2, [r6, #0]
 800df6a:	6861      	ldr	r1, [r4, #4]
 800df6c:	401a      	ands	r2, r3
 800df6e:	6873      	ldr	r3, [r6, #4]
 800df70:	4013      	ands	r3, r2
 800df72:	68a2      	ldr	r2, [r4, #8]
 800df74:	400a      	ands	r2, r1
 800df76:	4313      	orrs	r3, r2
 800df78:	d101      	bne.n	800df7e <UTIL_SEQ_Run+0xb2>
	UTIL_SEQ_Idle( );
 800df7a:	f7f4 fb8f 	bl	800269c <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df7e:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800df82:	f7ff ff82 	bl	800de8a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800df86:	9b01      	ldr	r3, [sp, #4]
 800df88:	6073      	str	r3, [r6, #4]
}
 800df8a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800df8c:	200000fc 	.word	0x200000fc
 800df90:	20001b20 	.word	0x20001b20
 800df94:	20001b40 	.word	0x20001b40

0800df98 <UTIL_SEQ_RegTask>:
{
 800df98:	b570      	push	{r4, r5, r6, lr}
 800df9a:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df9c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dfa0:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800dfa2:	f7ff ff73 	bl	800de8c <SEQ_BitPosition>
 800dfa6:	4b03      	ldr	r3, [pc, #12]	@ (800dfb4 <UTIL_SEQ_RegTask+0x1c>)
 800dfa8:	0080      	lsls	r0, r0, #2
 800dfaa:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfac:	f385 8810 	msr	PRIMASK, r5
}
 800dfb0:	bd70      	pop	{r4, r5, r6, pc}
 800dfb2:	46c0      	nop			@ (mov r8, r8)
 800dfb4:	20001b40 	.word	0x20001b40

0800dfb8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800dfb8:	b082      	sub	sp, #8
 800dfba:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 800dfbc:	18c9      	adds	r1, r1, r3
{
 800dfbe:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800dfc0:	ab05      	add	r3, sp, #20
 800dfc2:	889c      	ldrh	r4, [r3, #4]
 800dfc4:	18a2      	adds	r2, r4, r2
  if( c.SubSeconds >= 1000 )
 800dfc6:	24fa      	movs	r4, #250	@ 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800dfc8:	b293      	uxth	r3, r2
 800dfca:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 800dfcc:	00a4      	lsls	r4, r4, #2
 800dfce:	42a2      	cmp	r2, r4
 800dfd0:	db03      	blt.n	800dfda <SysTimeAdd+0x22>
  {
    c.Seconds++;
    c.SubSeconds -= 1000;
 800dfd2:	4a05      	ldr	r2, [pc, #20]	@ (800dfe8 <SysTimeAdd+0x30>)
    c.Seconds++;
 800dfd4:	3101      	adds	r1, #1
    c.SubSeconds -= 1000;
 800dfd6:	189b      	adds	r3, r3, r2
 800dfd8:	b21a      	sxth	r2, r3
  }
  return c;
 800dfda:	6001      	str	r1, [r0, #0]
 800dfdc:	8082      	strh	r2, [r0, #4]
}
 800dfde:	bc16      	pop	{r1, r2, r4}
 800dfe0:	bc08      	pop	{r3}
 800dfe2:	b002      	add	sp, #8
 800dfe4:	4718      	bx	r3
 800dfe6:	46c0      	nop			@ (mov r8, r8)
 800dfe8:	fffffc18 	.word	0xfffffc18

0800dfec <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800dfec:	b082      	sub	sp, #8
 800dfee:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 800dff0:	1ac9      	subs	r1, r1, r3
{
 800dff2:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800dff4:	ab05      	add	r3, sp, #20
 800dff6:	889b      	ldrh	r3, [r3, #4]
 800dff8:	1ad2      	subs	r2, r2, r3
 800dffa:	b293      	uxth	r3, r2
 800dffc:	b214      	sxth	r4, r2
  if( c.SubSeconds < 0 )
 800dffe:	0412      	lsls	r2, r2, #16
 800e000:	d504      	bpl.n	800e00c <SysTimeSub+0x20>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
 800e002:	22fa      	movs	r2, #250	@ 0xfa
 800e004:	0092      	lsls	r2, r2, #2
 800e006:	189b      	adds	r3, r3, r2
    c.Seconds--;
 800e008:	3901      	subs	r1, #1
    c.SubSeconds += 1000;
 800e00a:	b21c      	sxth	r4, r3
  }
  return c;
 800e00c:	6001      	str	r1, [r0, #0]
 800e00e:	8084      	strh	r4, [r0, #4]
}
 800e010:	bc16      	pop	{r1, r2, r4}
 800e012:	bc08      	pop	{r3}
 800e014:	b002      	add	sp, #8
 800e016:	4718      	bx	r3

0800e018 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e018:	2300      	movs	r3, #0
{
 800e01a:	b530      	push	{r4, r5, lr}

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e01c:	4c10      	ldr	r4, [pc, #64]	@ (800e060 <SysTimeSet+0x48>)
{
 800e01e:	b085      	sub	sp, #20
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e020:	ad02      	add	r5, sp, #8
 800e022:	80ab      	strh	r3, [r5, #4]
{
 800e024:	9000      	str	r0, [sp, #0]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e026:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e028:	a803      	add	r0, sp, #12
 800e02a:	6923      	ldr	r3, [r4, #16]
{
 800e02c:	9101      	str	r1, [sp, #4]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e02e:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 800e030:	9b00      	ldr	r3, [sp, #0]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e032:	9002      	str	r0, [sp, #8]
  c.Seconds = a.Seconds - b.Seconds;
 800e034:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e036:	466b      	mov	r3, sp
 800e038:	88aa      	ldrh	r2, [r5, #4]
 800e03a:	889b      	ldrh	r3, [r3, #4]
 800e03c:	1a9b      	subs	r3, r3, r2
 800e03e:	b29a      	uxth	r2, r3
 800e040:	b21d      	sxth	r5, r3
  if( c.SubSeconds < 0 )
 800e042:	041b      	lsls	r3, r3, #16
 800e044:	d504      	bpl.n	800e050 <SysTimeSet+0x38>
    c.SubSeconds += 1000;
 800e046:	23fa      	movs	r3, #250	@ 0xfa
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	18d2      	adds	r2, r2, r3
    c.Seconds--;
 800e04c:	3801      	subs	r0, #1
    c.SubSeconds += 1000;
 800e04e:	b215      	sxth	r5, r2

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 800e050:	6823      	ldr	r3, [r4, #0]
 800e052:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 800e054:	0028      	movs	r0, r5
 800e056:	68a3      	ldr	r3, [r4, #8]
 800e058:	4798      	blx	r3
}
 800e05a:	b005      	add	sp, #20
 800e05c:	bd30      	pop	{r4, r5, pc}
 800e05e:	46c0      	nop			@ (mov r8, r8)
 800e060:	0800e834 	.word	0x0800e834

0800e064 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800e064:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e066:	2300      	movs	r3, #0
 800e068:	466a      	mov	r2, sp
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e06a:	4e10      	ldr	r6, [pc, #64]	@ (800e0ac <SysTimeGet+0x48>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e06c:	8093      	strh	r3, [r2, #4]
 800e06e:	9300      	str	r3, [sp, #0]
{
 800e070:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e072:	6933      	ldr	r3, [r6, #16]
 800e074:	a801      	add	r0, sp, #4
 800e076:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e078:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e07a:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e07c:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e07e:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e080:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e082:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e084:	466b      	mov	r3, sp
  c.Seconds = a.Seconds + b.Seconds;
 800e086:	9a00      	ldr	r2, [sp, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e088:	889b      	ldrh	r3, [r3, #4]
  c.Seconds = a.Seconds + b.Seconds;
 800e08a:	1882      	adds	r2, r0, r2
  if( c.SubSeconds >= 1000 )
 800e08c:	20fa      	movs	r0, #250	@ 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e08e:	195b      	adds	r3, r3, r5
 800e090:	b299      	uxth	r1, r3
 800e092:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800e094:	0080      	lsls	r0, r0, #2
 800e096:	4283      	cmp	r3, r0
 800e098:	db03      	blt.n	800e0a2 <SysTimeGet+0x3e>
    c.SubSeconds -= 1000;
 800e09a:	4b05      	ldr	r3, [pc, #20]	@ (800e0b0 <SysTimeGet+0x4c>)
    c.Seconds++;
 800e09c:	3201      	adds	r2, #1
    c.SubSeconds -= 1000;
 800e09e:	18cb      	adds	r3, r1, r3
 800e0a0:	b21b      	sxth	r3, r3

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
}
 800e0a2:	0020      	movs	r0, r4
  return sysTime;
 800e0a4:	6022      	str	r2, [r4, #0]
 800e0a6:	80a3      	strh	r3, [r4, #4]
}
 800e0a8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800e0aa:	46c0      	nop			@ (mov r8, r8)
 800e0ac:	0800e834 	.word	0x0800e834
 800e0b0:	fffffc18 	.word	0xfffffc18

0800e0b4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800e0b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	466d      	mov	r5, sp
{
 800e0ba:	0004      	movs	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e0bc:	9300      	str	r3, [sp, #0]
 800e0be:	80ab      	strh	r3, [r5, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e0c0:	4b04      	ldr	r3, [pc, #16]	@ (800e0d4 <SysTimeGetMcuTime+0x20>)
 800e0c2:	a801      	add	r0, sp, #4
 800e0c4:	691b      	ldr	r3, [r3, #16]
 800e0c6:	4798      	blx	r3
  
  return calendarTime;
 800e0c8:	0023      	movs	r3, r4
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e0ca:	9000      	str	r0, [sp, #0]
  return calendarTime;
 800e0cc:	cd06      	ldmia	r5!, {r1, r2}
 800e0ce:	c306      	stmia	r3!, {r1, r2}
}
 800e0d0:	0020      	movs	r0, r4
 800e0d2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800e0d4:	0800e834 	.word	0x0800e834

0800e0d8 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 800e0d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e0da:	4d0d      	ldr	r5, [pc, #52]	@ (800e110 <SysTimeToMs+0x38>)
{
 800e0dc:	9101      	str	r1, [sp, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e0de:	68eb      	ldr	r3, [r5, #12]
{
 800e0e0:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e0e2:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e0e4:	686b      	ldr	r3, [r5, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e0e6:	0004      	movs	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e0e8:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e0ea:	466b      	mov	r3, sp
 800e0ec:	889b      	ldrh	r3, [r3, #4]
  c.Seconds = a.Seconds - b.Seconds;
 800e0ee:	9a00      	ldr	r2, [sp, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e0f0:	1b1b      	subs	r3, r3, r4
  c.Seconds = a.Seconds - b.Seconds;
 800e0f2:	1a12      	subs	r2, r2, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e0f4:	b299      	uxth	r1, r3
 800e0f6:	b21c      	sxth	r4, r3
  if( c.SubSeconds < 0 )
 800e0f8:	041b      	lsls	r3, r3, #16
 800e0fa:	d504      	bpl.n	800e106 <SysTimeToMs+0x2e>
    c.SubSeconds += 1000;
 800e0fc:	23fa      	movs	r3, #250	@ 0xfa
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	18c9      	adds	r1, r1, r3
    c.Seconds--;
 800e102:	3a01      	subs	r2, #1
    c.SubSeconds += 1000;
 800e104:	b20c      	sxth	r4, r1
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 800e106:	20fa      	movs	r0, #250	@ 0xfa
 800e108:	0080      	lsls	r0, r0, #2
 800e10a:	4350      	muls	r0, r2
 800e10c:	1900      	adds	r0, r0, r4
}
 800e10e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800e110:	0800e834 	.word	0x0800e834

0800e114 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 800e114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e116:	000f      	movs	r7, r1
  uint32_t seconds = timeMs / 1000;
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800e118:	26fa      	movs	r6, #250	@ 0xfa
  uint32_t seconds = timeMs / 1000;
 800e11a:	21fa      	movs	r1, #250	@ 0xfa
{
 800e11c:	0004      	movs	r4, r0
  uint32_t seconds = timeMs / 1000;
 800e11e:	0089      	lsls	r1, r1, #2
 800e120:	0038      	movs	r0, r7
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800e122:	00b6      	lsls	r6, r6, #2
  uint32_t seconds = timeMs / 1000;
 800e124:	f7f2 f820 	bl	8000168 <__udivsi3>
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800e128:	0033      	movs	r3, r6
 800e12a:	4343      	muls	r3, r0
 800e12c:	1aff      	subs	r7, r7, r3
 800e12e:	b2bb      	uxth	r3, r7
  SysTime_t DeltaTime = { 0 };

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e130:	4f0c      	ldr	r7, [pc, #48]	@ (800e164 <SysTimeFromMs+0x50>)
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800e132:	9300      	str	r3, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e134:	68fb      	ldr	r3, [r7, #12]
  uint32_t seconds = timeMs / 1000;
 800e136:	0005      	movs	r5, r0
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e138:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e13a:	687b      	ldr	r3, [r7, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e13c:	9001      	str	r0, [sp, #4]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e13e:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e140:	9a00      	ldr	r2, [sp, #0]
 800e142:	9b01      	ldr	r3, [sp, #4]
 800e144:	4694      	mov	ip, r2
 800e146:	4463      	add	r3, ip
 800e148:	b29a      	uxth	r2, r3
 800e14a:	b21b      	sxth	r3, r3
  c.Seconds = a.Seconds + b.Seconds;
 800e14c:	1940      	adds	r0, r0, r5
  if( c.SubSeconds >= 1000 )
 800e14e:	42b3      	cmp	r3, r6
 800e150:	db03      	blt.n	800e15a <SysTimeFromMs+0x46>
    c.SubSeconds -= 1000;
 800e152:	4b05      	ldr	r3, [pc, #20]	@ (800e168 <SysTimeFromMs+0x54>)
    c.Seconds++;
 800e154:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800e156:	18d3      	adds	r3, r2, r3
 800e158:	b21b      	sxth	r3, r3
  return c;
 800e15a:	6020      	str	r0, [r4, #0]
 800e15c:	80a3      	strh	r3, [r4, #4]
  return SysTimeAdd( sysTime, DeltaTime );
}
 800e15e:	0020      	movs	r0, r4
 800e160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e162:	46c0      	nop			@ (mov r8, r8)
 800e164:	0800e834 	.word	0x0800e834
 800e168:	fffffc18 	.word	0xfffffc18

0800e16c <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800e16c:	2200      	movs	r2, #0
{
 800e16e:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 800e170:	4b02      	ldr	r3, [pc, #8]	@ (800e17c <UTIL_TIMER_Init+0x10>)
 800e172:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800e174:	4b02      	ldr	r3, [pc, #8]	@ (800e180 <UTIL_TIMER_Init+0x14>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4798      	blx	r3
}
 800e17a:	bd10      	pop	{r4, pc}
 800e17c:	20001bc0 	.word	0x20001bc0
 800e180:	0800e848 	.word	0x0800e848

0800e184 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800e184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e186:	0004      	movs	r4, r0
 800e188:	0017      	movs	r7, r2
 800e18a:	0008      	movs	r0, r1
 800e18c:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800e18e:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 800e190:	2c00      	cmp	r4, #0
 800e192:	d00e      	beq.n	800e1b2 <UTIL_TIMER_Create+0x2e>
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00c      	beq.n	800e1b2 <UTIL_TIMER_Create+0x2e>
    TimerObject->Timestamp = 0U;
 800e198:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800e19a:	4b07      	ldr	r3, [pc, #28]	@ (800e1b8 <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 800e19c:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800e19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1a0:	4798      	blx	r3
    TimerObject->argument = Argument;
 800e1a2:	9b06      	ldr	r3, [sp, #24]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800e1a4:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800e1a6:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800e1a8:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800e1aa:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800e1ac:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800e1ae:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800e1b0:	6165      	str	r5, [r4, #20]
  }
}
 800e1b2:	0028      	movs	r0, r5
 800e1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1b6:	46c0      	nop			@ (mov r8, r8)
 800e1b8:	0800e848 	.word	0x0800e848

0800e1bc <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800e1bc:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800e1be:	4c03      	ldr	r4, [pc, #12]	@ (800e1cc <UTIL_TIMER_GetCurrentTime+0x10>)
 800e1c0:	69e3      	ldr	r3, [r4, #28]
 800e1c2:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800e1c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e1c6:	4798      	blx	r3
}
 800e1c8:	bd10      	pop	{r4, pc}
 800e1ca:	46c0      	nop			@ (mov r8, r8)
 800e1cc:	0800e848 	.word	0x0800e848

0800e1d0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800e1d0:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800e1d2:	4d06      	ldr	r5, [pc, #24]	@ (800e1ec <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 800e1d4:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800e1d6:	69eb      	ldr	r3, [r5, #28]
 800e1d8:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800e1da:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800e1dc:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800e1de:	0030      	movs	r0, r6
 800e1e0:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800e1e2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800e1e4:	1a20      	subs	r0, r4, r0
 800e1e6:	4798      	blx	r3
}
 800e1e8:	bd70      	pop	{r4, r5, r6, pc}
 800e1ea:	46c0      	nop			@ (mov r8, r8)
 800e1ec:	0800e848 	.word	0x0800e848

0800e1f0 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e1f0:	4b05      	ldr	r3, [pc, #20]	@ (800e208 <TimerExists+0x18>)
 800e1f2:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d101      	bne.n	800e1fc <TimerExists+0xc>
    {
      return true;
    }
    cur = cur->Next;
  }
  return false;
 800e1f8:	0018      	movs	r0, r3
}
 800e1fa:	4770      	bx	lr
    if( cur == TimerObject )
 800e1fc:	4283      	cmp	r3, r0
 800e1fe:	d001      	beq.n	800e204 <TimerExists+0x14>
    cur = cur->Next;
 800e200:	695b      	ldr	r3, [r3, #20]
 800e202:	e7f7      	b.n	800e1f4 <TimerExists+0x4>
      return true;
 800e204:	2001      	movs	r0, #1
 800e206:	e7f8      	b.n	800e1fa <TimerExists+0xa>
 800e208:	20001bc0 	.word	0x20001bc0

0800e20c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800e20c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800e20e:	4e0b      	ldr	r6, [pc, #44]	@ (800e23c <TimerSetTimeout+0x30>)
{
 800e210:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800e212:	6a33      	ldr	r3, [r6, #32]
 800e214:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800e216:	2301      	movs	r3, #1
 800e218:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800e21a:	6823      	ldr	r3, [r4, #0]
 800e21c:	69b7      	ldr	r7, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800e21e:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800e220:	9301      	str	r3, [sp, #4]
 800e222:	47b8      	blx	r7
 800e224:	9b01      	ldr	r3, [sp, #4]
 800e226:	1940      	adds	r0, r0, r5
 800e228:	4283      	cmp	r3, r0
 800e22a:	d202      	bcs.n	800e232 <TimerSetTimeout+0x26>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800e22c:	47b8      	blx	r7
 800e22e:	1940      	adds	r0, r0, r5
 800e230:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800e232:	68b3      	ldr	r3, [r6, #8]
 800e234:	6820      	ldr	r0, [r4, #0]
 800e236:	4798      	blx	r3
}
 800e238:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e23a:	46c0      	nop			@ (mov r8, r8)
 800e23c:	0800e848 	.word	0x0800e848

0800e240 <UTIL_TIMER_Stop>:
{
 800e240:	0003      	movs	r3, r0
 800e242:	b570      	push	{r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 800e244:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 800e246:	2b00      	cmp	r3, #0
 800e248:	d016      	beq.n	800e278 <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e24a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e24e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800e250:	4d11      	ldr	r5, [pc, #68]	@ (800e298 <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 800e252:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800e254:	682a      	ldr	r2, [r5, #0]
    if(NULL != TimerListHead)
 800e256:	2a00      	cmp	r2, #0
 800e258:	d00b      	beq.n	800e272 <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 800e25a:	2100      	movs	r1, #0
 800e25c:	7259      	strb	r1, [r3, #9]
          if( TimerListHead->Next != NULL )
 800e25e:	6954      	ldr	r4, [r2, #20]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800e260:	4293      	cmp	r3, r2
 800e262:	d10f      	bne.n	800e284 <UTIL_TIMER_Stop+0x44>
          TimerListHead->IsPending = 0;
 800e264:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 800e266:	428c      	cmp	r4, r1
 800e268:	d007      	beq.n	800e27a <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 800e26a:	0020      	movs	r0, r4
            TimerListHead = TimerListHead->Next;
 800e26c:	602c      	str	r4, [r5, #0]
            TimerSetTimeout( TimerListHead );
 800e26e:	f7ff ffcd 	bl	800e20c <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e272:	f386 8810 	msr	PRIMASK, r6
}
 800e276:	2000      	movs	r0, #0
}
 800e278:	bd70      	pop	{r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 800e27a:	4b08      	ldr	r3, [pc, #32]	@ (800e29c <UTIL_TIMER_Stop+0x5c>)
 800e27c:	68db      	ldr	r3, [r3, #12]
 800e27e:	4798      	blx	r3
            TimerListHead = NULL;
 800e280:	602c      	str	r4, [r5, #0]
 800e282:	e7f6      	b.n	800e272 <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 800e284:	0011      	movs	r1, r2
 800e286:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 800e288:	2a00      	cmp	r2, #0
 800e28a:	d0f2      	beq.n	800e272 <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d1f9      	bne.n	800e284 <UTIL_TIMER_Stop+0x44>
            if( cur->Next != NULL )
 800e290:	695b      	ldr	r3, [r3, #20]
              prev->Next = cur;
 800e292:	614b      	str	r3, [r1, #20]
 800e294:	e7ed      	b.n	800e272 <UTIL_TIMER_Stop+0x32>
 800e296:	46c0      	nop			@ (mov r8, r8)
 800e298:	20001bc0 	.word	0x20001bc0
 800e29c:	0800e848 	.word	0x0800e848

0800e2a0 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e2a0:	4b09      	ldr	r3, [pc, #36]	@ (800e2c8 <TimerInsertTimer+0x28>)
{
 800e2a2:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e2a4:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800e2a6:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 800e2a8:	6951      	ldr	r1, [r2, #20]
 800e2aa:	2900      	cmp	r1, #0
 800e2ac:	d102      	bne.n	800e2b4 <TimerInsertTimer+0x14>
        cur = next;
        next = next->Next;
    }
    else
    {
        cur->Next = TimerObject;
 800e2ae:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 800e2b0:	6141      	str	r1, [r0, #20]

    }
  }
  cur->Next = TimerObject;
  TimerObject->Next = NULL;
}
 800e2b2:	bd10      	pop	{r4, pc}
    if( TimerObject->Timestamp  > next->Timestamp )
 800e2b4:	6804      	ldr	r4, [r0, #0]
 800e2b6:	6819      	ldr	r1, [r3, #0]
 800e2b8:	428c      	cmp	r4, r1
 800e2ba:	d902      	bls.n	800e2c2 <TimerInsertTimer+0x22>
        cur = next;
 800e2bc:	001a      	movs	r2, r3
        next = next->Next;
 800e2be:	695b      	ldr	r3, [r3, #20]
 800e2c0:	e7f2      	b.n	800e2a8 <TimerInsertTimer+0x8>
 800e2c2:	0019      	movs	r1, r3
 800e2c4:	e7f3      	b.n	800e2ae <TimerInsertTimer+0xe>
 800e2c6:	46c0      	nop			@ (mov r8, r8)
 800e2c8:	20001bc0 	.word	0x20001bc0

0800e2cc <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e2cc:	4a05      	ldr	r2, [pc, #20]	@ (800e2e4 <TimerInsertNewHeadTimer+0x18>)
{
 800e2ce:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e2d0:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d001      	beq.n	800e2da <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 800e2d6:	2100      	movs	r1, #0
 800e2d8:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 800e2da:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800e2dc:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800e2de:	f7ff ff95 	bl	800e20c <TimerSetTimeout>
}
 800e2e2:	bd10      	pop	{r4, pc}
 800e2e4:	20001bc0 	.word	0x20001bc0

0800e2e8 <UTIL_TIMER_Start>:
{
 800e2e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2ea:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 800e2ec:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	d023      	beq.n	800e33a <UTIL_TIMER_Start+0x52>
 800e2f2:	f7ff ff7d 	bl	800e1f0 <TimerExists>
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	d11f      	bne.n	800e33a <UTIL_TIMER_Start+0x52>
 800e2fa:	7a65      	ldrb	r5, [r4, #9]
 800e2fc:	2d00      	cmp	r5, #0
 800e2fe:	d12b      	bne.n	800e358 <UTIL_TIMER_Start+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e300:	f3ef 8310 	mrs	r3, PRIMASK
 800e304:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800e306:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800e308:	4e14      	ldr	r6, [pc, #80]	@ (800e35c <UTIL_TIMER_Start+0x74>)
    ticks = TimerObject->ReloadValue;
 800e30a:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800e30c:	6a33      	ldr	r3, [r6, #32]
 800e30e:	4798      	blx	r3
    if( ticks < minValue )
 800e310:	4287      	cmp	r7, r0
 800e312:	d200      	bcs.n	800e316 <UTIL_TIMER_Start+0x2e>
 800e314:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 800e316:	2380      	movs	r3, #128	@ 0x80
 800e318:	005b      	lsls	r3, r3, #1
 800e31a:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800e31c:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 800e31e:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 800e320:	4f0f      	ldr	r7, [pc, #60]	@ (800e360 <UTIL_TIMER_Start+0x78>)
    TimerObject->IsReloadStopped = 0U;
 800e322:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d109      	bne.n	800e33e <UTIL_TIMER_Start+0x56>
      UTIL_TimerDriver.SetTimerContext();
 800e32a:	6933      	ldr	r3, [r6, #16]
 800e32c:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 800e32e:	0020      	movs	r0, r4
 800e330:	f7ff ffcc 	bl	800e2cc <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e334:	9b01      	ldr	r3, [sp, #4]
 800e336:	f383 8810 	msr	PRIMASK, r3
}
 800e33a:	0028      	movs	r0, r5
 800e33c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800e33e:	69b3      	ldr	r3, [r6, #24]
 800e340:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800e342:	6823      	ldr	r3, [r4, #0]
 800e344:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800e346:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 800e348:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4298      	cmp	r0, r3
 800e34e:	d3ee      	bcc.n	800e32e <UTIL_TIMER_Start+0x46>
        TimerInsertTimer( TimerObject);
 800e350:	0020      	movs	r0, r4
 800e352:	f7ff ffa5 	bl	800e2a0 <TimerInsertTimer>
 800e356:	e7ed      	b.n	800e334 <UTIL_TIMER_Start+0x4c>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800e358:	2501      	movs	r5, #1
 800e35a:	e7ee      	b.n	800e33a <UTIL_TIMER_Start+0x52>
 800e35c:	0800e848 	.word	0x0800e848
 800e360:	20001bc0 	.word	0x20001bc0

0800e364 <UTIL_TIMER_SetPeriod>:
{
 800e364:	b510      	push	{r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 800e366:	2301      	movs	r3, #1
{
 800e368:	0004      	movs	r4, r0
 800e36a:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 800e36c:	2c00      	cmp	r4, #0
 800e36e:	d010      	beq.n	800e392 <UTIL_TIMER_SetPeriod+0x2e>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800e370:	4b09      	ldr	r3, [pc, #36]	@ (800e398 <UTIL_TIMER_SetPeriod+0x34>)
 800e372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e374:	4798      	blx	r3
 800e376:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800e378:	0020      	movs	r0, r4
 800e37a:	f7ff ff39 	bl	800e1f0 <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800e37e:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 800e380:	4298      	cmp	r0, r3
 800e382:	d006      	beq.n	800e392 <UTIL_TIMER_SetPeriod+0x2e>
      (void)UTIL_TIMER_Stop(TimerObject);
 800e384:	0020      	movs	r0, r4
 800e386:	f7ff ff5b 	bl	800e240 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800e38a:	0020      	movs	r0, r4
 800e38c:	f7ff ffac 	bl	800e2e8 <UTIL_TIMER_Start>
 800e390:	0003      	movs	r3, r0
}
 800e392:	0018      	movs	r0, r3
 800e394:	bd10      	pop	{r4, pc}
 800e396:	46c0      	nop			@ (mov r8, r8)
 800e398:	0800e848 	.word	0x0800e848

0800e39c <UTIL_TIMER_IRQ_Handler>:
{
 800e39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e39e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e3a2:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800e3a4:	4e1c      	ldr	r6, [pc, #112]	@ (800e418 <UTIL_TIMER_IRQ_Handler+0x7c>)
 800e3a6:	6973      	ldr	r3, [r6, #20]
 800e3a8:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800e3aa:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800e3ac:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800e3ae:	4798      	blx	r3
  if ( TimerListHead != NULL )
 800e3b0:	4d1a      	ldr	r5, [pc, #104]	@ (800e41c <UTIL_TIMER_IRQ_Handler+0x80>)
  DeltaContext = now  - old; /*intentional wrap around */
 800e3b2:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 800e3b4:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 800e3b6:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d01e      	beq.n	800e3fa <UTIL_TIMER_IRQ_Handler+0x5e>
      if (cur->Timestamp > DeltaContext)
 800e3bc:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 800e3be:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 800e3c0:	4288      	cmp	r0, r1
 800e3c2:	d900      	bls.n	800e3c6 <UTIL_TIMER_IRQ_Handler+0x2a>
        cur->Timestamp -= DeltaContext;
 800e3c4:	1822      	adds	r2, r4, r0
 800e3c6:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800e3c8:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800e3ca:	e7f5      	b.n	800e3b8 <UTIL_TIMER_IRQ_Handler+0x1c>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800e3cc:	681c      	ldr	r4, [r3, #0]
 800e3ce:	2c00      	cmp	r4, #0
 800e3d0:	d003      	beq.n	800e3da <UTIL_TIMER_IRQ_Handler+0x3e>
 800e3d2:	69b3      	ldr	r3, [r6, #24]
 800e3d4:	4798      	blx	r3
 800e3d6:	4284      	cmp	r4, r0
 800e3d8:	d212      	bcs.n	800e400 <UTIL_TIMER_IRQ_Handler+0x64>
      cur = TimerListHead;
 800e3da:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 800e3dc:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 800e3de:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 800e3e0:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 800e3e6:	68e3      	ldr	r3, [r4, #12]
 800e3e8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800e3ea:	2280      	movs	r2, #128	@ 0x80
 800e3ec:	8963      	ldrh	r3, [r4, #10]
 800e3ee:	0052      	lsls	r2, r2, #1
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d102      	bne.n	800e3fa <UTIL_TIMER_IRQ_Handler+0x5e>
        (void)UTIL_TIMER_Start(cur);
 800e3f4:	0020      	movs	r0, r4
 800e3f6:	f7ff ff77 	bl	800e2e8 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800e3fa:	682b      	ldr	r3, [r5, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d1e5      	bne.n	800e3cc <UTIL_TIMER_IRQ_Handler+0x30>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800e400:	6828      	ldr	r0, [r5, #0]
 800e402:	2800      	cmp	r0, #0
 800e404:	d102      	bne.n	800e40c <UTIL_TIMER_IRQ_Handler+0x70>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e406:	f387 8810 	msr	PRIMASK, r7
}
 800e40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800e40c:	7a03      	ldrb	r3, [r0, #8]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1f9      	bne.n	800e406 <UTIL_TIMER_IRQ_Handler+0x6a>
    TimerSetTimeout( TimerListHead );
 800e412:	f7ff fefb 	bl	800e20c <TimerSetTimeout>
 800e416:	e7f6      	b.n	800e406 <UTIL_TIMER_IRQ_Handler+0x6a>
 800e418:	0800e848 	.word	0x0800e848
 800e41c:	20001bc0 	.word	0x20001bc0

0800e420 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800e420:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e422:	b09d      	sub	sp, #116	@ 0x74
 800e424:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 800e426:	2000      	movs	r0, #0
{
 800e428:	9108      	str	r1, [sp, #32]
  if (size <= 0)
 800e42a:	4281      	cmp	r1, r0
 800e42c:	dd0a      	ble.n	800e444 <tiny_vsnprintf_like+0x24>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e42e:	9c02      	ldr	r4, [sp, #8]
 800e430:	9301      	str	r3, [sp, #4]
  {
    CHECK_STR_SIZE(buf, str, size);
 800e432:	9902      	ldr	r1, [sp, #8]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e434:	7813      	ldrb	r3, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 800e436:	1a60      	subs	r0, r4, r1
 800e438:	9908      	ldr	r1, [sp, #32]
 800e43a:	3901      	subs	r1, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d103      	bne.n	800e448 <tiny_vsnprintf_like+0x28>
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
 800e440:	2300      	movs	r3, #0
 800e442:	7023      	strb	r3, [r4, #0]
  return str - buf;
}
 800e444:	b01d      	add	sp, #116	@ 0x74
 800e446:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 800e448:	4281      	cmp	r1, r0
 800e44a:	ddf9      	ble.n	800e440 <tiny_vsnprintf_like+0x20>
    if (*fmt != '%')
 800e44c:	2b25      	cmp	r3, #37	@ 0x25
 800e44e:	d005      	beq.n	800e45c <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 800e450:	7023      	strb	r3, [r4, #0]
      continue;
 800e452:	9200      	str	r2, [sp, #0]
      *str++ = *fmt;
 800e454:	3401      	adds	r4, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e456:	9a00      	ldr	r2, [sp, #0]
 800e458:	3201      	adds	r2, #1
 800e45a:	e7ea      	b.n	800e432 <tiny_vsnprintf_like+0x12>
    fmt++;
 800e45c:	1c53      	adds	r3, r2, #1
 800e45e:	9300      	str	r3, [sp, #0]
    if (*fmt == '0')
 800e460:	7853      	ldrb	r3, [r2, #1]
 800e462:	2b30      	cmp	r3, #48	@ 0x30
 800e464:	d025      	beq.n	800e4b2 <tiny_vsnprintf_like+0x92>
    if (is_digit(*fmt))
 800e466:	3b30      	subs	r3, #48	@ 0x30
 800e468:	2b09      	cmp	r3, #9
 800e46a:	d82c      	bhi.n	800e4c6 <tiny_vsnprintf_like+0xa6>
 800e46c:	2300      	movs	r3, #0
  int i = 0;
 800e46e:	2700      	movs	r7, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800e470:	9a00      	ldr	r2, [sp, #0]
 800e472:	7810      	ldrb	r0, [r2, #0]
 800e474:	0002      	movs	r2, r0
 800e476:	3a30      	subs	r2, #48	@ 0x30
 800e478:	2a09      	cmp	r2, #9
 800e47a:	d91c      	bls.n	800e4b6 <tiny_vsnprintf_like+0x96>
    switch (*fmt)
 800e47c:	9a00      	ldr	r2, [sp, #0]
 800e47e:	7812      	ldrb	r2, [r2, #0]
 800e480:	2a69      	cmp	r2, #105	@ 0x69
 800e482:	d07d      	beq.n	800e580 <tiny_vsnprintf_like+0x160>
 800e484:	d823      	bhi.n	800e4ce <tiny_vsnprintf_like+0xae>
 800e486:	2a63      	cmp	r2, #99	@ 0x63
 800e488:	d035      	beq.n	800e4f6 <tiny_vsnprintf_like+0xd6>
 800e48a:	2a64      	cmp	r2, #100	@ 0x64
 800e48c:	d078      	beq.n	800e580 <tiny_vsnprintf_like+0x160>
 800e48e:	2a58      	cmp	r2, #88	@ 0x58
 800e490:	d072      	beq.n	800e578 <tiny_vsnprintf_like+0x158>
        if (*fmt != '%') *str++ = '%';
 800e492:	0020      	movs	r0, r4
 800e494:	2a25      	cmp	r2, #37	@ 0x25
 800e496:	d121      	bne.n	800e4dc <tiny_vsnprintf_like+0xbc>
        if (*fmt)
 800e498:	9a00      	ldr	r2, [sp, #0]
 800e49a:	7812      	ldrb	r2, [r2, #0]
 800e49c:	2a00      	cmp	r2, #0
 800e49e:	d100      	bne.n	800e4a2 <tiny_vsnprintf_like+0x82>
 800e4a0:	e0a6      	b.n	800e5f0 <tiny_vsnprintf_like+0x1d0>
          *str++ = *fmt;
 800e4a2:	7002      	strb	r2, [r0, #0]
        CHECK_STR_SIZE(buf, str, size);
 800e4a4:	9a02      	ldr	r2, [sp, #8]
          *str++ = *fmt;
 800e4a6:	1c44      	adds	r4, r0, #1
    base = 10;
 800e4a8:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 800e4aa:	1aa2      	subs	r2, r4, r2
 800e4ac:	428a      	cmp	r2, r1
 800e4ae:	da1e      	bge.n	800e4ee <tiny_vsnprintf_like+0xce>
 800e4b0:	e7d1      	b.n	800e456 <tiny_vsnprintf_like+0x36>
      flags |= ZEROPAD;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	e7db      	b.n	800e46e <tiny_vsnprintf_like+0x4e>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800e4b6:	9a00      	ldr	r2, [sp, #0]
 800e4b8:	3201      	adds	r2, #1
 800e4ba:	9200      	str	r2, [sp, #0]
 800e4bc:	220a      	movs	r2, #10
 800e4be:	4357      	muls	r7, r2
 800e4c0:	183f      	adds	r7, r7, r0
 800e4c2:	3f30      	subs	r7, #48	@ 0x30
 800e4c4:	e7d4      	b.n	800e470 <tiny_vsnprintf_like+0x50>
    field_width = -1;
 800e4c6:	2701      	movs	r7, #1
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	427f      	negs	r7, r7
 800e4cc:	e7d6      	b.n	800e47c <tiny_vsnprintf_like+0x5c>
    switch (*fmt)
 800e4ce:	2a75      	cmp	r2, #117	@ 0x75
 800e4d0:	d100      	bne.n	800e4d4 <tiny_vsnprintf_like+0xb4>
 800e4d2:	e092      	b.n	800e5fa <tiny_vsnprintf_like+0x1da>
 800e4d4:	2a78      	cmp	r2, #120	@ 0x78
 800e4d6:	d051      	beq.n	800e57c <tiny_vsnprintf_like+0x15c>
 800e4d8:	2a73      	cmp	r2, #115	@ 0x73
 800e4da:	d026      	beq.n	800e52a <tiny_vsnprintf_like+0x10a>
        if (*fmt != '%') *str++ = '%';
 800e4dc:	2225      	movs	r2, #37	@ 0x25
 800e4de:	7022      	strb	r2, [r4, #0]
        CHECK_STR_SIZE(buf, str, size);
 800e4e0:	9a02      	ldr	r2, [sp, #8]
        if (*fmt != '%') *str++ = '%';
 800e4e2:	1c60      	adds	r0, r4, #1
        CHECK_STR_SIZE(buf, str, size);
 800e4e4:	0004      	movs	r4, r0
    base = 10;
 800e4e6:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 800e4e8:	1a82      	subs	r2, r0, r2
 800e4ea:	428a      	cmp	r2, r1
 800e4ec:	dbd4      	blt.n	800e498 <tiny_vsnprintf_like+0x78>
      num = va_arg(args, unsigned int);
 800e4ee:	9801      	ldr	r0, [sp, #4]
 800e4f0:	c804      	ldmia	r0!, {r2}
 800e4f2:	9001      	str	r0, [sp, #4]
 800e4f4:	e04a      	b.n	800e58c <tiny_vsnprintf_like+0x16c>
 800e4f6:	0022      	movs	r2, r4
    switch (*fmt)
 800e4f8:	003b      	movs	r3, r7
          while (--field_width > 0) *str++ = ' ';
 800e4fa:	2120      	movs	r1, #32
 800e4fc:	3b01      	subs	r3, #1
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	dc10      	bgt.n	800e524 <tiny_vsnprintf_like+0x104>
 800e502:	17f9      	asrs	r1, r7, #31
 800e504:	1bc9      	subs	r1, r1, r7
 800e506:	17cb      	asrs	r3, r1, #31
 800e508:	0fca      	lsrs	r2, r1, #31
 800e50a:	1e79      	subs	r1, r7, #1
 800e50c:	400b      	ands	r3, r1
 800e50e:	18e3      	adds	r3, r4, r3
 800e510:	2101      	movs	r1, #1
 800e512:	2a00      	cmp	r2, #0
 800e514:	d000      	beq.n	800e518 <tiny_vsnprintf_like+0xf8>
 800e516:	0039      	movs	r1, r7
        *str++ = (unsigned char) va_arg(args, int);
 800e518:	9a01      	ldr	r2, [sp, #4]
 800e51a:	1864      	adds	r4, r4, r1
 800e51c:	ca02      	ldmia	r2!, {r1}
 800e51e:	7019      	strb	r1, [r3, #0]
 800e520:	9201      	str	r2, [sp, #4]
        continue;
 800e522:	e798      	b.n	800e456 <tiny_vsnprintf_like+0x36>
          while (--field_width > 0) *str++ = ' ';
 800e524:	7011      	strb	r1, [r2, #0]
 800e526:	3201      	adds	r2, #1
 800e528:	e7e8      	b.n	800e4fc <tiny_vsnprintf_like+0xdc>
        s = va_arg(args, char *);
 800e52a:	9e01      	ldr	r6, [sp, #4]
 800e52c:	ce20      	ldmia	r6!, {r5}
        if (!s) s = "<NULL>";
 800e52e:	2d00      	cmp	r5, #0
 800e530:	d100      	bne.n	800e534 <tiny_vsnprintf_like+0x114>
 800e532:	4d52      	ldr	r5, [pc, #328]	@ (800e67c <tiny_vsnprintf_like+0x25c>)
        len = strlen(s);
 800e534:	0028      	movs	r0, r5
 800e536:	f7f1 fde7 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 800e53a:	2220      	movs	r2, #32
 800e53c:	0023      	movs	r3, r4
 800e53e:	4694      	mov	ip, r2
 800e540:	19e1      	adds	r1, r4, r7
 800e542:	1aca      	subs	r2, r1, r3
 800e544:	4290      	cmp	r0, r2
 800e546:	db0f      	blt.n	800e568 <tiny_vsnprintf_like+0x148>
 800e548:	0fc2      	lsrs	r2, r0, #31
 800e54a:	17fb      	asrs	r3, r7, #31
 800e54c:	4287      	cmp	r7, r0
 800e54e:	4153      	adcs	r3, r2
 800e550:	2200      	movs	r2, #0
 800e552:	b2db      	uxtb	r3, r3
 800e554:	4293      	cmp	r3, r2
 800e556:	d000      	beq.n	800e55a <tiny_vsnprintf_like+0x13a>
 800e558:	1a3a      	subs	r2, r7, r0
 800e55a:	18a4      	adds	r4, r4, r2
        for (i = 0; i < len; ++i) *str++ = *s++;
 800e55c:	2200      	movs	r2, #0
 800e55e:	4282      	cmp	r2, r0
 800e560:	db06      	blt.n	800e570 <tiny_vsnprintf_like+0x150>
 800e562:	1824      	adds	r4, r4, r0
        s = va_arg(args, char *);
 800e564:	9601      	str	r6, [sp, #4]
 800e566:	e776      	b.n	800e456 <tiny_vsnprintf_like+0x36>
          while (len < field_width--) *str++ = ' ';
 800e568:	4662      	mov	r2, ip
 800e56a:	701a      	strb	r2, [r3, #0]
 800e56c:	3301      	adds	r3, #1
 800e56e:	e7e8      	b.n	800e542 <tiny_vsnprintf_like+0x122>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800e570:	5ca9      	ldrb	r1, [r5, r2]
 800e572:	54a1      	strb	r1, [r4, r2]
 800e574:	3201      	adds	r2, #1
 800e576:	e7f2      	b.n	800e55e <tiny_vsnprintf_like+0x13e>
        flags |= UPPERCASE;
 800e578:	2240      	movs	r2, #64	@ 0x40
 800e57a:	4313      	orrs	r3, r2
    switch (*fmt)
 800e57c:	2510      	movs	r5, #16
 800e57e:	e7b6      	b.n	800e4ee <tiny_vsnprintf_like+0xce>
        flags |= SIGN;
 800e580:	2202      	movs	r2, #2
 800e582:	250a      	movs	r5, #10
      num = va_arg(args, int);
 800e584:	9801      	ldr	r0, [sp, #4]
        flags |= SIGN;
 800e586:	4313      	orrs	r3, r2
      num = va_arg(args, int);
 800e588:	c804      	ldmia	r0!, {r2}
 800e58a:	9001      	str	r0, [sp, #4]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e58c:	9802      	ldr	r0, [sp, #8]
 800e58e:	4694      	mov	ip, r2
 800e590:	1a26      	subs	r6, r4, r0
 800e592:	1b8e      	subs	r6, r1, r6
  if (type & UPPERCASE)  dig = upper_digits;
 800e594:	493a      	ldr	r1, [pc, #232]	@ (800e680 <tiny_vsnprintf_like+0x260>)
 800e596:	9107      	str	r1, [sp, #28]
 800e598:	0659      	lsls	r1, r3, #25
 800e59a:	d401      	bmi.n	800e5a0 <tiny_vsnprintf_like+0x180>
  char *dig = lower_digits;
 800e59c:	4939      	ldr	r1, [pc, #228]	@ (800e684 <tiny_vsnprintf_like+0x264>)
 800e59e:	9107      	str	r1, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 800e5a0:	2101      	movs	r1, #1
 800e5a2:	0018      	movs	r0, r3
 800e5a4:	4008      	ands	r0, r1
 800e5a6:	9009      	str	r0, [sp, #36]	@ 0x24
 800e5a8:	2020      	movs	r0, #32
 800e5aa:	9006      	str	r0, [sp, #24]
 800e5ac:	420b      	tst	r3, r1
 800e5ae:	d001      	beq.n	800e5b4 <tiny_vsnprintf_like+0x194>
 800e5b0:	312f      	adds	r1, #47	@ 0x2f
 800e5b2:	9106      	str	r1, [sp, #24]
  if (type & SIGN)
 800e5b4:	079b      	lsls	r3, r3, #30
 800e5b6:	d522      	bpl.n	800e5fe <tiny_vsnprintf_like+0x1de>
    if (num < 0)
 800e5b8:	2a00      	cmp	r2, #0
 800e5ba:	da20      	bge.n	800e5fe <tiny_vsnprintf_like+0x1de>
      num = -num;
 800e5bc:	4253      	negs	r3, r2
 800e5be:	469c      	mov	ip, r3
      size--;
 800e5c0:	232d      	movs	r3, #45	@ 0x2d
 800e5c2:	3f01      	subs	r7, #1
    while (num != 0)
 800e5c4:	9304      	str	r3, [sp, #16]
  if (base < 2 || base > 36) return 0;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	9303      	str	r3, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800e5ca:	4663      	mov	r3, ip
 800e5cc:	0029      	movs	r1, r5
 800e5ce:	0018      	movs	r0, r3
 800e5d0:	9305      	str	r3, [sp, #20]
 800e5d2:	f7f1 fe4f 	bl	8000274 <__aeabi_uidivmod>
 800e5d6:	9a07      	ldr	r2, [sp, #28]
 800e5d8:	9b03      	ldr	r3, [sp, #12]
 800e5da:	5c52      	ldrb	r2, [r2, r1]
 800e5dc:	a90b      	add	r1, sp, #44	@ 0x2c
 800e5de:	54ca      	strb	r2, [r1, r3]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	9303      	str	r3, [sp, #12]
    while (num != 0)
 800e5e4:	9b05      	ldr	r3, [sp, #20]
      num = ((unsigned long) num) / (unsigned) base;
 800e5e6:	4684      	mov	ip, r0
    while (num != 0)
 800e5e8:	429d      	cmp	r5, r3
 800e5ea:	d9ee      	bls.n	800e5ca <tiny_vsnprintf_like+0x1aa>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800e5ec:	9d03      	ldr	r5, [sp, #12]
 800e5ee:	e00d      	b.n	800e60c <tiny_vsnprintf_like+0x1ec>
          --fmt;
 800e5f0:	9b00      	ldr	r3, [sp, #0]
 800e5f2:	3b01      	subs	r3, #1
 800e5f4:	9300      	str	r3, [sp, #0]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e5f6:	0004      	movs	r4, r0
 800e5f8:	e72d      	b.n	800e456 <tiny_vsnprintf_like+0x36>
    base = 10;
 800e5fa:	250a      	movs	r5, #10
 800e5fc:	e777      	b.n	800e4ee <tiny_vsnprintf_like+0xce>
  if (num == 0)
 800e5fe:	2a00      	cmp	r2, #0
 800e600:	d124      	bne.n	800e64c <tiny_vsnprintf_like+0x22c>
    tmp[i++] = '0';
 800e602:	2130      	movs	r1, #48	@ 0x30
 800e604:	2501      	movs	r5, #1
 800e606:	ab0b      	add	r3, sp, #44	@ 0x2c
 800e608:	7019      	strb	r1, [r3, #0]
 800e60a:	9204      	str	r2, [sp, #16]
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800e60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e60e:	0020      	movs	r0, r4
  size -= precision;
 800e610:	1b79      	subs	r1, r7, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800e612:	2b00      	cmp	r3, #0
 800e614:	d022      	beq.n	800e65c <tiny_vsnprintf_like+0x23c>
  if (sign) ASSIGN_STR(sign);
 800e616:	9b04      	ldr	r3, [sp, #16]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d02d      	beq.n	800e678 <tiny_vsnprintf_like+0x258>
 800e61c:	232d      	movs	r3, #45	@ 0x2d
 800e61e:	3e01      	subs	r6, #1
 800e620:	1c60      	adds	r0, r4, #1
 800e622:	7023      	strb	r3, [r4, #0]
 800e624:	2e00      	cmp	r6, #0
 800e626:	d0e6      	beq.n	800e5f6 <tiny_vsnprintf_like+0x1d6>
 800e628:	0002      	movs	r2, r0
 800e62a:	0033      	movs	r3, r6
 800e62c:	1b89      	subs	r1, r1, r6
 800e62e:	18c8      	adds	r0, r1, r3
 800e630:	0014      	movs	r4, r2
  while (size-- > 0) ASSIGN_STR(c);
 800e632:	2800      	cmp	r0, #0
 800e634:	dc18      	bgt.n	800e668 <tiny_vsnprintf_like+0x248>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800e636:	a90b      	add	r1, sp, #44	@ 0x2c
 800e638:	18d3      	adds	r3, r2, r3
 800e63a:	0010      	movs	r0, r2
 800e63c:	3d01      	subs	r5, #1
 800e63e:	d3da      	bcc.n	800e5f6 <tiny_vsnprintf_like+0x1d6>
 800e640:	5c6c      	ldrb	r4, [r5, r1]
 800e642:	1c42      	adds	r2, r0, #1
 800e644:	7004      	strb	r4, [r0, #0]
 800e646:	429a      	cmp	r2, r3
 800e648:	d1f7      	bne.n	800e63a <tiny_vsnprintf_like+0x21a>
 800e64a:	e013      	b.n	800e674 <tiny_vsnprintf_like+0x254>
 800e64c:	2300      	movs	r3, #0
 800e64e:	e7b9      	b.n	800e5c4 <tiny_vsnprintf_like+0x1a4>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800e650:	2320      	movs	r3, #32
 800e652:	3e01      	subs	r6, #1
 800e654:	3001      	adds	r0, #1
 800e656:	7023      	strb	r3, [r4, #0]
 800e658:	2e00      	cmp	r6, #0
 800e65a:	d0cc      	beq.n	800e5f6 <tiny_vsnprintf_like+0x1d6>
 800e65c:	000b      	movs	r3, r1
 800e65e:	0004      	movs	r4, r0
 800e660:	3901      	subs	r1, #1
 800e662:	2b00      	cmp	r3, #0
 800e664:	dcf4      	bgt.n	800e650 <tiny_vsnprintf_like+0x230>
 800e666:	e7d6      	b.n	800e616 <tiny_vsnprintf_like+0x1f6>
  while (size-- > 0) ASSIGN_STR(c);
 800e668:	9806      	ldr	r0, [sp, #24]
 800e66a:	3b01      	subs	r3, #1
 800e66c:	3201      	adds	r2, #1
 800e66e:	7020      	strb	r0, [r4, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d1dc      	bne.n	800e62e <tiny_vsnprintf_like+0x20e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800e674:	0010      	movs	r0, r2
 800e676:	e7be      	b.n	800e5f6 <tiny_vsnprintf_like+0x1d6>
 800e678:	0020      	movs	r0, r4
 800e67a:	e7d5      	b.n	800e628 <tiny_vsnprintf_like+0x208>
 800e67c:	0800f3bc 	.word	0x0800f3bc
 800e680:	0800f3e8 	.word	0x0800f3e8
 800e684:	0800f3c3 	.word	0x0800f3c3

0800e688 <memset>:
 800e688:	0003      	movs	r3, r0
 800e68a:	1882      	adds	r2, r0, r2
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d100      	bne.n	800e692 <memset+0xa>
 800e690:	4770      	bx	lr
 800e692:	7019      	strb	r1, [r3, #0]
 800e694:	3301      	adds	r3, #1
 800e696:	e7f9      	b.n	800e68c <memset+0x4>

0800e698 <__libc_init_array>:
 800e698:	b570      	push	{r4, r5, r6, lr}
 800e69a:	2600      	movs	r6, #0
 800e69c:	4c0c      	ldr	r4, [pc, #48]	@ (800e6d0 <__libc_init_array+0x38>)
 800e69e:	4d0d      	ldr	r5, [pc, #52]	@ (800e6d4 <__libc_init_array+0x3c>)
 800e6a0:	1b64      	subs	r4, r4, r5
 800e6a2:	10a4      	asrs	r4, r4, #2
 800e6a4:	42a6      	cmp	r6, r4
 800e6a6:	d109      	bne.n	800e6bc <__libc_init_array+0x24>
 800e6a8:	2600      	movs	r6, #0
 800e6aa:	f000 f89f 	bl	800e7ec <_init>
 800e6ae:	4c0a      	ldr	r4, [pc, #40]	@ (800e6d8 <__libc_init_array+0x40>)
 800e6b0:	4d0a      	ldr	r5, [pc, #40]	@ (800e6dc <__libc_init_array+0x44>)
 800e6b2:	1b64      	subs	r4, r4, r5
 800e6b4:	10a4      	asrs	r4, r4, #2
 800e6b6:	42a6      	cmp	r6, r4
 800e6b8:	d105      	bne.n	800e6c6 <__libc_init_array+0x2e>
 800e6ba:	bd70      	pop	{r4, r5, r6, pc}
 800e6bc:	00b3      	lsls	r3, r6, #2
 800e6be:	58eb      	ldr	r3, [r5, r3]
 800e6c0:	4798      	blx	r3
 800e6c2:	3601      	adds	r6, #1
 800e6c4:	e7ee      	b.n	800e6a4 <__libc_init_array+0xc>
 800e6c6:	00b3      	lsls	r3, r6, #2
 800e6c8:	58eb      	ldr	r3, [r5, r3]
 800e6ca:	4798      	blx	r3
 800e6cc:	3601      	adds	r6, #1
 800e6ce:	e7f2      	b.n	800e6b6 <__libc_init_array+0x1e>
 800e6d0:	0800f418 	.word	0x0800f418
 800e6d4:	0800f418 	.word	0x0800f418
 800e6d8:	0800f41c 	.word	0x0800f41c
 800e6dc:	0800f418 	.word	0x0800f418

0800e6e0 <memcpy>:
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	b510      	push	{r4, lr}
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d100      	bne.n	800e6ea <memcpy+0xa>
 800e6e8:	bd10      	pop	{r4, pc}
 800e6ea:	5ccc      	ldrb	r4, [r1, r3]
 800e6ec:	54c4      	strb	r4, [r0, r3]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	e7f8      	b.n	800e6e4 <memcpy+0x4>
	...

0800e6f4 <floor>:
 800e6f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6f6:	004b      	lsls	r3, r1, #1
 800e6f8:	4a36      	ldr	r2, [pc, #216]	@ (800e7d4 <floor+0xe0>)
 800e6fa:	0d5b      	lsrs	r3, r3, #21
 800e6fc:	189e      	adds	r6, r3, r2
 800e6fe:	000c      	movs	r4, r1
 800e700:	0005      	movs	r5, r0
 800e702:	9001      	str	r0, [sp, #4]
 800e704:	2e13      	cmp	r6, #19
 800e706:	dc2f      	bgt.n	800e768 <floor+0x74>
 800e708:	2e00      	cmp	r6, #0
 800e70a:	da14      	bge.n	800e736 <floor+0x42>
 800e70c:	4a32      	ldr	r2, [pc, #200]	@ (800e7d8 <floor+0xe4>)
 800e70e:	4b33      	ldr	r3, [pc, #204]	@ (800e7dc <floor+0xe8>)
 800e710:	f7f2 faa2 	bl	8000c58 <__aeabi_dadd>
 800e714:	2200      	movs	r2, #0
 800e716:	2300      	movs	r3, #0
 800e718:	f7f1 fec6 	bl	80004a8 <__aeabi_dcmpgt>
 800e71c:	2800      	cmp	r0, #0
 800e71e:	d007      	beq.n	800e730 <floor+0x3c>
 800e720:	2c00      	cmp	r4, #0
 800e722:	da50      	bge.n	800e7c6 <floor+0xd2>
 800e724:	0064      	lsls	r4, r4, #1
 800e726:	0864      	lsrs	r4, r4, #1
 800e728:	4325      	orrs	r5, r4
 800e72a:	d14f      	bne.n	800e7cc <floor+0xd8>
 800e72c:	2480      	movs	r4, #128	@ 0x80
 800e72e:	0624      	lsls	r4, r4, #24
 800e730:	0021      	movs	r1, r4
 800e732:	0028      	movs	r0, r5
 800e734:	e022      	b.n	800e77c <floor+0x88>
 800e736:	4f2a      	ldr	r7, [pc, #168]	@ (800e7e0 <floor+0xec>)
 800e738:	4137      	asrs	r7, r6
 800e73a:	003b      	movs	r3, r7
 800e73c:	400b      	ands	r3, r1
 800e73e:	4303      	orrs	r3, r0
 800e740:	d01c      	beq.n	800e77c <floor+0x88>
 800e742:	4a25      	ldr	r2, [pc, #148]	@ (800e7d8 <floor+0xe4>)
 800e744:	4b25      	ldr	r3, [pc, #148]	@ (800e7dc <floor+0xe8>)
 800e746:	f7f2 fa87 	bl	8000c58 <__aeabi_dadd>
 800e74a:	2200      	movs	r2, #0
 800e74c:	2300      	movs	r3, #0
 800e74e:	f7f1 feab 	bl	80004a8 <__aeabi_dcmpgt>
 800e752:	2800      	cmp	r0, #0
 800e754:	d0ec      	beq.n	800e730 <floor+0x3c>
 800e756:	2c00      	cmp	r4, #0
 800e758:	da03      	bge.n	800e762 <floor+0x6e>
 800e75a:	2380      	movs	r3, #128	@ 0x80
 800e75c:	035b      	lsls	r3, r3, #13
 800e75e:	4133      	asrs	r3, r6
 800e760:	18e4      	adds	r4, r4, r3
 800e762:	2500      	movs	r5, #0
 800e764:	43bc      	bics	r4, r7
 800e766:	e7e3      	b.n	800e730 <floor+0x3c>
 800e768:	2e33      	cmp	r6, #51	@ 0x33
 800e76a:	dd09      	ble.n	800e780 <floor+0x8c>
 800e76c:	2380      	movs	r3, #128	@ 0x80
 800e76e:	00db      	lsls	r3, r3, #3
 800e770:	429e      	cmp	r6, r3
 800e772:	d103      	bne.n	800e77c <floor+0x88>
 800e774:	0002      	movs	r2, r0
 800e776:	000b      	movs	r3, r1
 800e778:	f7f2 fa6e 	bl	8000c58 <__aeabi_dadd>
 800e77c:	b003      	add	sp, #12
 800e77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e780:	2701      	movs	r7, #1
 800e782:	4a18      	ldr	r2, [pc, #96]	@ (800e7e4 <floor+0xf0>)
 800e784:	427f      	negs	r7, r7
 800e786:	189b      	adds	r3, r3, r2
 800e788:	40df      	lsrs	r7, r3
 800e78a:	4238      	tst	r0, r7
 800e78c:	d0f6      	beq.n	800e77c <floor+0x88>
 800e78e:	4a12      	ldr	r2, [pc, #72]	@ (800e7d8 <floor+0xe4>)
 800e790:	4b12      	ldr	r3, [pc, #72]	@ (800e7dc <floor+0xe8>)
 800e792:	f7f2 fa61 	bl	8000c58 <__aeabi_dadd>
 800e796:	2200      	movs	r2, #0
 800e798:	2300      	movs	r3, #0
 800e79a:	f7f1 fe85 	bl	80004a8 <__aeabi_dcmpgt>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	d0c6      	beq.n	800e730 <floor+0x3c>
 800e7a2:	2c00      	cmp	r4, #0
 800e7a4:	da02      	bge.n	800e7ac <floor+0xb8>
 800e7a6:	2e14      	cmp	r6, #20
 800e7a8:	d102      	bne.n	800e7b0 <floor+0xbc>
 800e7aa:	3401      	adds	r4, #1
 800e7ac:	43bd      	bics	r5, r7
 800e7ae:	e7bf      	b.n	800e730 <floor+0x3c>
 800e7b0:	2234      	movs	r2, #52	@ 0x34
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	1b92      	subs	r2, r2, r6
 800e7b6:	4093      	lsls	r3, r2
 800e7b8:	18ed      	adds	r5, r5, r3
 800e7ba:	9b01      	ldr	r3, [sp, #4]
 800e7bc:	429d      	cmp	r5, r3
 800e7be:	419b      	sbcs	r3, r3
 800e7c0:	425b      	negs	r3, r3
 800e7c2:	18e4      	adds	r4, r4, r3
 800e7c4:	e7f2      	b.n	800e7ac <floor+0xb8>
 800e7c6:	2500      	movs	r5, #0
 800e7c8:	002c      	movs	r4, r5
 800e7ca:	e7b1      	b.n	800e730 <floor+0x3c>
 800e7cc:	2500      	movs	r5, #0
 800e7ce:	4c06      	ldr	r4, [pc, #24]	@ (800e7e8 <floor+0xf4>)
 800e7d0:	e7ae      	b.n	800e730 <floor+0x3c>
 800e7d2:	46c0      	nop			@ (mov r8, r8)
 800e7d4:	fffffc01 	.word	0xfffffc01
 800e7d8:	8800759c 	.word	0x8800759c
 800e7dc:	7e37e43c 	.word	0x7e37e43c
 800e7e0:	000fffff 	.word	0x000fffff
 800e7e4:	fffffbed 	.word	0xfffffbed
 800e7e8:	bff00000 	.word	0xbff00000

0800e7ec <_init>:
 800e7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ee:	46c0      	nop			@ (mov r8, r8)
 800e7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7f2:	bc08      	pop	{r3}
 800e7f4:	469e      	mov	lr, r3
 800e7f6:	4770      	bx	lr

0800e7f8 <_fini>:
 800e7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fa:	46c0      	nop			@ (mov r8, r8)
 800e7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7fe:	bc08      	pop	{r3}
 800e800:	469e      	mov	lr, r3
 800e802:	4770      	bx	lr
